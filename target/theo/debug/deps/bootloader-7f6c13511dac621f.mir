// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const PAGE_SIZE: u64 = {
    let mut _0: u64;                     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:4:18: 4:21

    bb0: {
        _0 = const 4096_u64;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:4:24: 4:28
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:4:1: 4:29
    }
}

const MAX_MEMORY_MAP_SIZE: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:6:28: 6:33

    bb0: {
        _0 = const 64_usize;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:6:36: 6:38
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:6:1: 6:39
    }
}

memory_map::MemoryMap::entries::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:11:29: 11:48

    bb0: {
        _0 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:11:29: 11:48
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:11:29: 11:48
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:19:1: 19:15>::new() -> memory_map::MemoryMap {
    let mut _0: bootinfo::memory_map::MemoryMap; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:20:21: 20:25
    let mut _1: [bootinfo::memory_map::MemoryRegion; 64]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:22:22: 22:66
    let mut _2: bootinfo::memory_map::MemoryRegion; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:22:23: 22:44

    bb0: {
        _2 = MemoryRegion::empty() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:22:23: 22:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:22:23: 22:42
                                         // + literal: Const { ty: fn() -> MemoryRegion {MemoryRegion::empty}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = [move _2; 64];              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:22:22: 22:66
        _0 = memory_map::MemoryMap { entries: move _1, next_entry_index: const 0_u64 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:21:9: 24:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:25:6: 25:6
    }
}

memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:19:1: 19:15>::new::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:22:46: 22:65

    bb0: {
        _0 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:22:46: 22:65
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:22:46: 22:65
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:19:1: 19:15>::add_region(_1: &mut memory_map::MemoryMap, _2: MemoryRegion) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:27:23: 27:32
    debug region => _2;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:27:34: 27:40
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:27:56: 27:56
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:28:9: 31:10
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:29:13: 29:58
    let mut _5: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:29:13: 29:36
    let mut _6: &bootinfo::memory_map::MemoryMap; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:29:13: 29:36
    let mut _7: !;                       // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let _8: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:32:22: 32:45
    let mut _9: &bootinfo::memory_map::MemoryMap; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:32:22: 32:45
    let mut _10: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:32:9: 32:46
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:32:9: 32:46
    let mut _12: (u64, bool);            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:33:9: 33:35
    let _13: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:34:9: 34:20

    bb0: {
        _6 = &(*_1);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:29:13: 29:36
        _5 = memory_map::MemoryMap::next_entry_index(move _6) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:29:13: 29:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:29:18: 29:34
                                         // + literal: Const { ty: for<'a> fn(&'a memory_map::MemoryMap) -> usize {memory_map::MemoryMap::next_entry_index}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Lt(move _5, const _);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:29:13: 29:58
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:28:9: 31:10
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:28:9: 31:10
    }

    bb2: {
        _7 = panic(const "too many memory regions in memory map") -> unwind unreachable; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:30:13: 30:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _9 = &(*_1);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:32:22: 32:45
        _8 = memory_map::MemoryMap::next_entry_index(move _9) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:32:22: 32:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:32:27: 32:43
                                         // + literal: Const { ty: for<'a> fn(&'a memory_map::MemoryMap) -> usize {memory_map::MemoryMap::next_entry_index}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = const 64_usize;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:32:9: 32:46
        _11 = Lt(_8, _10);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:32:9: 32:46
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _8) -> [success: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:32:9: 32:46
    }

    bb5: {
        ((*_1).0: [bootinfo::memory_map::MemoryRegion; 64])[_8] = _2; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:32:9: 32:55
        _12 = CheckedAdd(((*_1).1: u64), const 1_u64); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:33:9: 33:35
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: u64), const 1_u64) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:33:9: 33:35
    }

    bb6: {
        ((*_1).1: u64) = move (_12.0: u64); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:33:9: 33:35
        _13 = memory_map::MemoryMap::sort(_1) -> [return: bb7, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:34:9: 34:20
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:34:14: 34:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut memory_map::MemoryMap) {memory_map::MemoryMap::sort}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:35:6: 35:6
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:19:1: 19:15>::sort(_1: &mut memory_map::MemoryMap) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:37:17: 37:26
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:37:28: 37:28
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:9: 57:11
    let mut _3: &mut [bootinfo::memory_map::MemoryRegion]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:9: 57:11
    let mut _4: &mut [bootinfo::memory_map::MemoryRegion; 64]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:9: 57:11
    let mut _5: core::option::Option<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:41: 58:93
    let mut _6: &mut core::slice::Iter<'_, bootinfo::memory_map::MemoryRegion>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:41: 58:93
    let mut _7: core::slice::Iter<'_, bootinfo::memory_map::MemoryRegion>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:41: 58:60
    let mut _8: &[bootinfo::memory_map::MemoryRegion]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:41: 58:60
    let mut _9: &[bootinfo::memory_map::MemoryRegion; 64]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:41: 58:60
    let mut _10: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:16: 58:38
    scope 1 {
        debug first_zero_index => _11;   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:21: 58:37
        let _11: usize;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:21: 58:37
    }

    bb0: {
        _4 = &mut ((*_1).0: [bootinfo::memory_map::MemoryRegion; 64]); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:9: 57:11
        _3 = move _4 as &mut [bootinfo::memory_map::MemoryRegion] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:9: 57:11
        _2 = slice::<impl [MemoryRegion]>::sort_unstable_by::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:39: 40:47]>(move _3, const ZeroSized: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:39: 40:47]) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:9: 57:11
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:22: 40:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut [MemoryRegion], [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:39: 40:47]) {slice::<impl [MemoryRegion]>::sort_unstable_by::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:39: 40:47]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:39: 40:47], val: Value(<ZST>) }
    }

    bb1: {
        _9 = &((*_1).0: [bootinfo::memory_map::MemoryRegion; 64]); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:41: 58:60
        _8 = move _9 as &[bootinfo::memory_map::MemoryRegion] (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:41: 58:60
        _7 = slice::<impl [MemoryRegion]>::iter(move _8) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:41: 58:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:54: 58:58
                                         // + literal: Const { ty: for<'a> fn(&'a [MemoryRegion]) -> core::slice::Iter<'a, MemoryRegion> {slice::<impl [MemoryRegion]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &mut _7;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:41: 58:93
        _5 = <core::slice::Iter<'_, MemoryRegion> as Iterator>::position::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:70: 58:73]>(move _6, const ZeroSized: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:70: 58:73]) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:41: 58:93
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:61: 58:69
                                         // + literal: Const { ty: for<'a> fn(&'a mut core::slice::Iter<'_, MemoryRegion>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:70: 58:73]) -> Option<usize> {<core::slice::Iter<'_, MemoryRegion> as Iterator>::position::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:70: 58:73]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:70: 58:73], val: Value(<ZST>) }
    }

    bb3: {
        _10 = discriminant(_5);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:16: 58:38
        switchInt(move _10) -> [1: bb4, otherwise: bb5]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:16: 58:38
    }

    bb4: {
        _11 = ((_5 as Some).0: usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:21: 58:37
        ((*_1).1: u64) = _11 as u64 (IntToInt); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:59:13: 59:60
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:9: 60:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:61:6: 61:6
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:19:1: 19:15>::sort::{closure#0}(_1: &mut [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:39: 40:47], _2: &MemoryRegion, _3: &MemoryRegion) -> core::cmp::Ordering {
    debug r1 => _2;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:40: 40:42
    debug r2 => _3;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:44: 40:46
    let mut _0: core::cmp::Ordering;     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:40:48: 40:48
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:41:16: 41:35
    let mut _5: &bootinfo::memory_map::FrameRange; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:41:16: 41:35
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:43:23: 43:42
    let mut _7: &bootinfo::memory_map::FrameRange; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:43:23: 43:42
    let _8: core::cmp::Ordering;         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:46:21: 46:29
    let mut _9: &u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:46:32: 49:55
    let _10: &u64;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:49:26: 49:54
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:20: 51:47
    let mut _12: &core::cmp::Ordering;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:20: 51:28
    let mut _13: &u64;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:52:21: 52:78
    let _14: &u64;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:52:51: 52:77
    scope 1 {
        debug ordering => _8;            // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:46:21: 46:29
        let mut _15: &core::cmp::Ordering; // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:32: 51:47
    }

    bb0: {
        _5 = &((*_2).0: bootinfo::memory_map::FrameRange); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:41:16: 41:35
        _4 = FrameRange::is_empty(move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:41:16: 41:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:41:25: 41:33
                                         // + literal: Const { ty: for<'a> fn(&'a FrameRange) -> bool {FrameRange::is_empty}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:41:16: 41:35
    }

    bb2: {
        _0 = Greater;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:42:17: 42:34
        goto -> bb11;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:41:13: 56:14
    }

    bb3: {
        _7 = &((*_3).0: bootinfo::memory_map::FrameRange); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:43:23: 43:42
        _6 = FrameRange::is_empty(move _7) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:43:23: 43:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:43:32: 43:40
                                         // + literal: Const { ty: for<'a> fn(&'a FrameRange) -> bool {FrameRange::is_empty}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt(move _6) -> [0: bb6, otherwise: bb5]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:43:23: 43:42
    }

    bb5: {
        _0 = Less;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:44:17: 44:31
        goto -> bb11;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:43:20: 56:14
    }

    bb6: {
        _9 = &(((*_2).0: bootinfo::memory_map::FrameRange).0: u64); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:46:32: 49:55
        _10 = &(((*_3).0: bootinfo::memory_map::FrameRange).0: u64); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:49:26: 49:54
        _8 = <u64 as Ord>::cmp(move _9, _10) -> [return: bb7, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:46:32: 49:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:49:22: 49:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u64, &'b u64) -> core::cmp::Ordering {<u64 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb7: {
        _12 = &_8;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:20: 51:28
        _15 = const _;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:32: 51:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:32: 51:47
                                         // + literal: Const { ty: &core::cmp::Ordering, val: Unevaluated(memory_map::MemoryMap::sort::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _11 = <core::cmp::Ordering as PartialEq>::eq(move _12, _15) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:20: 51:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:20: 51:47
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a core::cmp::Ordering, &'b core::cmp::Ordering) -> bool {<core::cmp::Ordering as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        switchInt(move _11) -> [0: bb10, otherwise: bb9]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:20: 51:47
    }

    bb9: {
        _13 = &(((*_2).0: bootinfo::memory_map::FrameRange).1: u64); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:52:21: 52:78
        _14 = &(((*_3).0: bootinfo::memory_map::FrameRange).1: u64); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:52:51: 52:77
        _0 = <u64 as Ord>::cmp(move _13, _14) -> [return: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:52:21: 52:78
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:52:47: 52:50
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u64, &'b u64) -> core::cmp::Ordering {<u64 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb10: {
        _0 = _8;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:54:21: 54:29
        goto -> bb11;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:17: 55:18
    }

    bb11: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:57:10: 57:10
    }
}

promoted[0] in memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:19:1: 19:15>::sort::{closure#0}: &core::cmp::Ordering = {
    let mut _0: &core::cmp::Ordering;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:32: 51:47
    let mut _1: core::cmp::Ordering;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:32: 51:47

    bb0: {
        _1 = Equal;                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:32: 51:47
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:32: 51:47
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:51:32: 51:47
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:19:1: 19:15>::sort::{closure#1}(_1: &mut [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:70: 58:73], _2: &MemoryRegion) -> bool {
    debug r => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:71: 58:72
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:74: 58:74
    let mut _3: &bootinfo::memory_map::FrameRange; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:74: 58:92

    bb0: {
        _3 = &((*_2).0: bootinfo::memory_map::FrameRange); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:74: 58:92
        _0 = FrameRange::is_empty(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:74: 58:92
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:82: 58:90
                                         // + literal: Const { ty: for<'a> fn(&'a FrameRange) -> bool {FrameRange::is_empty}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:58:92: 58:92
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:19:1: 19:15>::next_entry_index(_1: &memory_map::MemoryMap) -> usize {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:63:25: 63:30
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:63:35: 63:40
    let mut _2: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:64:9: 64:30

    bb0: {
        _2 = ((*_1).1: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:64:9: 64:30
        _0 = move _2 as usize (IntToInt); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:64:9: 64:39
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:65:6: 65:6
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:68:1: 68:25>::deref(_1: &memory_map::MemoryMap) -> &[MemoryRegion] {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:71:14: 71:19
    let mut _0: &[bootinfo::memory_map::MemoryRegion]; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:71:24: 71:37
    let _2: &[bootinfo::memory_map::MemoryRegion]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:72:10: 72:50
    let mut _3: &[bootinfo::memory_map::MemoryRegion; 64]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:72:10: 72:22
    let mut _4: core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:72:23: 72:49
    let mut _5: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:72:26: 72:49

    bb0: {
        _3 = &((*_1).0: [bootinfo::memory_map::MemoryRegion; 64]); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:72:10: 72:22
        _5 = memory_map::MemoryMap::next_entry_index(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:72:26: 72:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:72:31: 72:47
                                         // + literal: Const { ty: for<'a> fn(&'a memory_map::MemoryMap) -> usize {memory_map::MemoryMap::next_entry_index}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Range::<usize> { start: const 0_usize, end: move _5 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:72:23: 72:49
        _2 = <[MemoryRegion; 64] as Index<Range<usize>>>::index(move _3, move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:72:10: 72:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:72:10: 72:50
                                         // + literal: Const { ty: for<'a> fn(&'a [MemoryRegion; 64], Range<usize>) -> &'a <[MemoryRegion; 64] as Index<Range<usize>>>::Output {<[MemoryRegion; 64] as Index<Range<usize>>>::index}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = _2;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:72:9: 72:50
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:73:6: 73:6
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:76:1: 76:28>::deref_mut(_1: &mut memory_map::MemoryMap) -> &mut [MemoryRegion] {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:77:18: 77:27
    let mut _0: &mut [bootinfo::memory_map::MemoryRegion]; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:77:32: 77:49
    let _2: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:78:13: 78:23
    let mut _3: &bootinfo::memory_map::MemoryMap; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:78:26: 78:49
    let mut _4: &mut [bootinfo::memory_map::MemoryRegion]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:79:14: 79:41
    let mut _5: &mut [bootinfo::memory_map::MemoryRegion; 64]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:79:14: 79:26
    let mut _6: core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:79:27: 79:40
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:79:30: 79:40
    scope 1 {
        debug next_index => _2;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:78:13: 78:23
    }

    bb0: {
        _3 = &(*_1);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:78:26: 78:49
        _2 = memory_map::MemoryMap::next_entry_index(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:78:26: 78:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:78:31: 78:47
                                         // + literal: Const { ty: for<'a> fn(&'a memory_map::MemoryMap) -> usize {memory_map::MemoryMap::next_entry_index}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut ((*_1).0: [bootinfo::memory_map::MemoryRegion; 64]); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:79:14: 79:26
        _7 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:79:30: 79:40
        _6 = Range::<usize> { start: const 0_usize, end: move _7 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:79:27: 79:40
        _4 = <[MemoryRegion; 64] as IndexMut<Range<usize>>>::index_mut(move _5, move _6) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:79:14: 79:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:79:14: 79:41
                                         // + literal: Const { ty: for<'a> fn(&'a mut [MemoryRegion; 64], Range<usize>) -> &'a mut <[MemoryRegion; 64] as Index<Range<usize>>>::Output {<[MemoryRegion; 64] as IndexMut<Range<usize>>>::index_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = _4;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:79:9: 79:41
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:80:6: 80:6
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:83:1: 83:30>::fmt(_1: &memory_map::MemoryMap, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:84:12: 84:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:84:19: 84:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:84:46: 84:57
    let mut _3: &mut core::fmt::DebugList<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:9: 85:53
    let mut _4: &mut core::fmt::DebugList<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:9: 85:44
    let mut _5: &mut core::fmt::DebugList<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:9: 85:44
    let mut _6: core::fmt::DebugList<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:9: 85:23
    let mut _7: core::slice::Iter<'_, bootinfo::memory_map::MemoryRegion>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:32: 85:43
    let mut _8: &[bootinfo::memory_map::MemoryRegion]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:32: 85:43
    let _9: &[bootinfo::memory_map::MemoryRegion]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:32: 85:43

    bb0: {
        _6 = Formatter::<'_>::debug_list(_2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:9: 85:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:11: 85:21
                                         // + literal: Const { ty: for<'b> fn(&'b mut Formatter<'_>) -> DebugList<'b, '_> {Formatter::<'_>::debug_list}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _6;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:9: 85:44
        _9 = <memory_map::MemoryMap as Deref>::deref(_1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:32: 85:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:32: 85:43
                                         // + literal: Const { ty: for<'a> fn(&'a memory_map::MemoryMap) -> &'a <memory_map::MemoryMap as Deref>::Target {<memory_map::MemoryMap as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _9;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:32: 85:43
        _7 = slice::<impl [MemoryRegion]>::iter(move _8) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:32: 85:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:37: 85:41
                                         // + literal: Const { ty: for<'a> fn(&'a [MemoryRegion]) -> core::slice::Iter<'a, MemoryRegion> {slice::<impl [MemoryRegion]>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = DebugList::<'_, '_>::entries::<&MemoryRegion, core::slice::Iter<'_, MemoryRegion>>(move _5, move _7) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:9: 85:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:24: 85:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugList<'_, '_>, core::slice::Iter<'_, MemoryRegion>) -> &'a mut DebugList<'_, '_> {DebugList::<'_, '_>::entries::<&MemoryRegion, core::slice::Iter<'_, MemoryRegion>>}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:9: 85:53
        _0 = DebugList::<'_, '_>::finish(move _3) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:9: 85:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:85:45: 85:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugList<'_, '_>) -> Result<(), core::fmt::Error> {DebugList::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:86:6: 86:6
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:10: 90:15>::fmt(_1: &MemoryRegion, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:10: 90:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:10: 90:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:10: 90:15
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:10: 90:15
    let _4: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
    let mut _5: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
    let _6: &bootinfo::memory_map::FrameRange; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
    let mut _8: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
    let _9: &&bootinfo::memory_map::MemoryRegionType; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
    let _10: &bootinfo::memory_map::MemoryRegionType; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38

    bb0: {
        _3 = const "MemoryRegion";       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:10: 90:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:10: 90:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "range";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: bootinfo::memory_map::FrameRange); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
        _5 = _6 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
        _7 = const "region_type";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &((*_1).1: bootinfo::memory_map::MemoryRegionType); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
        _9 = &_10;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
        _8 = _9 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:10: 90:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:10: 90:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:15: 90:15
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:17: 90:22>::clone(_1: &MemoryRegion) -> MemoryRegion {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:17: 90:22
    let mut _0: bootinfo::memory_map::MemoryRegion; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:17: 90:22
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:17: 90:22
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:22: 90:22
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:30: 90:39>::eq(_1: &MemoryRegion, _2: &MemoryRegion) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:30: 90:39
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:30: 90:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:30: 90:39
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
    let mut _4: &bootinfo::memory_map::FrameRange; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
    let mut _5: &bootinfo::memory_map::FrameRange; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
    let mut _7: &bootinfo::memory_map::MemoryRegionType; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
    let mut _8: &bootinfo::memory_map::MemoryRegionType; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38

    bb0: {
        _4 = &((*_1).0: bootinfo::memory_map::FrameRange); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
        _5 = &((*_2).0: bootinfo::memory_map::FrameRange); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
        _3 = <FrameRange as PartialEq>::eq(move _4, move _5) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:94:5: 94:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a FrameRange, &'b FrameRange) -> bool {<FrameRange as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
    }

    bb2: {
        _7 = &((*_1).1: bootinfo::memory_map::MemoryRegionType); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
        _8 = &((*_2).1: bootinfo::memory_map::MemoryRegionType); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
        _6 = <MemoryRegionType as PartialEq>::eq(move _7, move _8) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MemoryRegionType, &'b MemoryRegionType) -> bool {<MemoryRegionType as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:39: 90:39
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
    }

    bb5: {
        _0 = move _6;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:96:5: 96:38
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:41: 90:43>::assert_receiver_is_total_eq(_1: &MemoryRegion) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:41: 90:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:41: 90:43
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:90:43: 90:43
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:100:1: 100:18>::empty() -> MemoryRegion {
    let mut _0: bootinfo::memory_map::MemoryRegion; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:101:23: 101:27
    let mut _1: bootinfo::memory_map::FrameRange; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:103:20: 106:14
    let mut _2: bootinfo::memory_map::MemoryRegionType; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:107:26: 107:49

    bb0: {
        _1 = FrameRange { start_frame_number: const 0_u64, end_frame_number: const 0_u64 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:103:20: 106:14
        _2 = MemoryRegionType::Empty;    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:107:26: 107:49
        _0 = MemoryRegion { range: move _1, region_type: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:102:9: 108:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:109:6: 109:6
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:10: 113:15>::clone(_1: &FrameRange) -> FrameRange {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:10: 113:15
    let mut _0: bootinfo::memory_map::FrameRange; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:10: 113:15
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:10: 113:15
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:15: 113:15
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:23: 113:32>::eq(_1: &FrameRange, _2: &FrameRange) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:23: 113:32
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:23: 113:32
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:23: 113:32
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:120:5: 120:32
    let mut _4: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:120:5: 120:32
    let mut _5: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:120:5: 120:32
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:125:5: 125:30
    let mut _7: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:125:5: 125:30
    let mut _8: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:125:5: 125:30

    bb0: {
        _4 = ((*_1).0: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:120:5: 120:32
        _5 = ((*_2).0: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:120:5: 120:32
        _3 = Eq(move _4, move _5);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:120:5: 120:32
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:125:5: 125:30
    }

    bb1: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:125:5: 125:30
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:125:5: 125:30
    }

    bb2: {
        _7 = ((*_1).1: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:125:5: 125:30
        _8 = ((*_2).1: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:125:5: 125:30
        _6 = Eq(move _7, move _8);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:125:5: 125:30
        _0 = move _6;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:125:5: 125:30
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:125:5: 125:30
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:32: 113:32
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:34: 113:36>::assert_receiver_is_total_eq(_1: &FrameRange) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:34: 113:36
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:34: 113:36
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:113:36: 113:36
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:128:1: 128:16>::new(_1: u64, _2: u64) -> FrameRange {
    debug start_addr => _1;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:132:16: 132:26
    debug end_addr => _2;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:132:33: 132:41
    let mut _0: bootinfo::memory_map::FrameRange; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:132:51: 132:55
    let _3: u64;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:133:13: 133:22
    let mut _4: (u64, bool);             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:133:25: 133:37
    let mut _5: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:135:33: 135:55
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:135:33: 135:55
    let mut _7: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:136:31: 136:58
    let mut _8: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:136:31: 136:54
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:136:31: 136:54
    let mut _10: (u64, bool);            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:136:31: 136:58
    scope 1 {
        debug last_byte => _3;           // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:133:13: 133:22
    }

    bb0: {
        _4 = CheckedSub(_2, const 1_u64); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:133:25: 133:37
        assert(!move (_4.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 1_u64) -> [success: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:133:25: 133:37
    }

    bb1: {
        _3 = move (_4.0: u64);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:133:25: 133:37
        _6 = Eq(const _, const 0_u64);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:135:33: 135:55
        assert(!move _6, "attempt to divide `{}` by zero", _1) -> [success: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:135:33: 135:55
    }

    bb2: {
        _5 = Div(_1, const _);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:135:33: 135:55
        _9 = Eq(const _, const 0_u64);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:136:31: 136:54
        assert(!move _9, "attempt to divide `{}` by zero", _3) -> [success: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:136:31: 136:54
    }

    bb3: {
        _8 = Div(_3, const _);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:136:31: 136:54
        _10 = CheckedAdd(_8, const 1_u64); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:136:31: 136:58
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, const 1_u64) -> [success: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:136:31: 136:58
    }

    bb4: {
        _7 = move (_10.0: u64);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:136:31: 136:58
        _0 = FrameRange { start_frame_number: move _5, end_frame_number: move _7 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:134:9: 137:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:138:6: 138:6
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:128:1: 128:16>::is_empty(_1: &FrameRange) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:141:21: 141:26
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:141:31: 141:35
    let mut _2: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:142:9: 142:32
    let mut _3: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:142:36: 142:57

    bb0: {
        _2 = ((*_1).0: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:142:9: 142:32
        _3 = ((*_1).1: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:142:36: 142:57
        _0 = Eq(move _2, move _3);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:142:9: 142:57
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:143:6: 143:6
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:128:1: 128:16>::start_addr(_1: &FrameRange) -> u64 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:146:23: 146:28
    let mut _0: u64;                     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:146:33: 146:36
    let mut _2: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:147:9: 147:32
    let mut _3: (u64, bool);             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:147:9: 147:44

    bb0: {
        _2 = ((*_1).0: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:147:9: 147:32
        _3 = CheckedMul(_2, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:147:9: 147:44
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const _) -> [success: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:147:9: 147:44
    }

    bb1: {
        _0 = move (_3.0: u64);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:147:9: 147:44
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:148:6: 148:6
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:128:1: 128:16>::end_addr(_1: &FrameRange) -> u64 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:151:21: 151:26
    let mut _0: u64;                     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:151:31: 151:34
    let mut _2: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:152:9: 152:30
    let mut _3: (u64, bool);             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:152:9: 152:42

    bb0: {
        _2 = ((*_1).1: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:152:9: 152:30
        _3 = CheckedMul(_2, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:152:9: 152:42
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const _) -> [success: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:152:9: 152:42
    }

    bb1: {
        _0 = move (_3.0: u64);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:152:9: 152:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:153:6: 153:6
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:156:1: 156:31>::fmt(_1: &FrameRange, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:157:12: 157:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:157:19: 157:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:157:46: 157:57
    let mut _3: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _4: &[&str];                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:13: 160:39
    let mut _5: &[core::fmt::rt::Argument<'_>]; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let _6: &[core::fmt::rt::Argument<'_>; 2]; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let _7: [core::fmt::rt::Argument<'_>; 2]; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _8: core::fmt::rt::Argument<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:25: 160:30
    let _9: &u64;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:161:13: 161:30
    let _10: u64;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:161:13: 161:30
    let mut _11: core::fmt::rt::Argument<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:32: 160:37
    let _12: &u64;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:162:13: 162:28
    let _13: u64;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:162:13: 162:28
    let mut _14: &[core::fmt::rt::Placeholder]; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let _15: &[core::fmt::rt::Placeholder; 2]; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let _16: [core::fmt::rt::Placeholder; 2]; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _17: core::fmt::rt::Placeholder; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _18: core::fmt::rt::Alignment; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _19: core::fmt::rt::Count;   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _20: core::fmt::rt::Count;   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _21: core::fmt::rt::Placeholder; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _22: core::fmt::rt::Alignment; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _23: core::fmt::rt::Count;   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _24: core::fmt::rt::Count;   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _25: core::fmt::rt::UnsafeArg; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _26: &[&str; 3];             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:13: 160:39
    scope 1 {
    }

    bb0: {
        _26 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:13: 160:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:13: 160:39
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(<FrameRange as Debug>::fmt, [], Some(promoted[0])) }
        _4 = _26 as &[&str] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:13: 160:39
        _10 = FrameRange::start_addr(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:161:13: 161:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:161:18: 161:28
                                         // + literal: Const { ty: for<'a> fn(&'a FrameRange) -> u64 {FrameRange::start_addr}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &_10;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:161:13: 161:30
        _8 = core::fmt::rt::Argument::<'_>::new_lower_hex::<u64>(_9) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:25: 160:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:25: 160:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::rt::Argument<'b> {core::fmt::rt::Argument::<'_>::new_lower_hex::<u64>}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = FrameRange::end_addr(_1) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:162:13: 162:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:162:18: 162:26
                                         // + literal: Const { ty: for<'a> fn(&'a FrameRange) -> u64 {FrameRange::end_addr}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = &_13;                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:162:13: 162:28
        _11 = core::fmt::rt::Argument::<'_>::new_lower_hex::<u64>(_12) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:32: 160:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:32: 160:37
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::rt::Argument<'b> {core::fmt::rt::Argument::<'_>::new_lower_hex::<u64>}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = [move _8, move _11];        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
        _6 = &_7;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize)); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
        _18 = core::fmt::rt::Alignment::Unknown; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
        _19 = core::fmt::rt::Count::Implied; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
        _20 = core::fmt::rt::Count::Implied; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
        _17 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _18, const 4_u32, move _19, move _20) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + literal: Const { ty: fn(usize, char, core::fmt::rt::Alignment, u32, core::fmt::rt::Count, core::fmt::rt::Count) -> core::fmt::rt::Placeholder {core::fmt::rt::Placeholder::new}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = core::fmt::rt::Alignment::Unknown; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
        _23 = core::fmt::rt::Count::Implied; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
        _24 = core::fmt::rt::Count::Implied; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
        _21 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _22, const 4_u32, move _23, move _24) -> [return: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + literal: Const { ty: fn(usize, char, core::fmt::rt::Alignment, u32, core::fmt::rt::Count, core::fmt::rt::Count) -> core::fmt::rt::Placeholder {core::fmt::rt::Placeholder::new}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = [move _17, move _21];      // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
        _15 = &_16;                      // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
        _14 = _15 as &[core::fmt::rt::Placeholder] (Pointer(Unsize)); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
        _25 = core::fmt::rt::UnsafeArg::new() -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::rt::UnsafeArg {core::fmt::rt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb7: {
        _3 = Arguments::<'_>::new_v1_formatted(move _4, move _5, move _14, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb8, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::rt::Argument<'_>], &[core::fmt::rt::Placeholder], core::fmt::rt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: core::fmt::rt::UnsafeArg, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:164:6: 164:6
    }
}

promoted[0] in memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:156:1: 156:31>::fmt: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:13: 160:39
    let mut _1: [&str; 3];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:13: 160:39

    bb0: {
        _1 = [const "FrameRange(", const "..", const ")"]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:13: 160:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:13: 160:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:13: 160:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:13: 160:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:13: 160:39
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:160:13: 160:39
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15>::fmt(_1: &MemoryRegionType, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let mut _3: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _5: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _6: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _8: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _9: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _11: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _12: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _13: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _14: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _15: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _16: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _17: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _18: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    let _19: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    }

    bb1: {
        _19 = const "NonExhaustive";     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _19;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb2: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
    }

    bb3: {
        _5 = const "Usable";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb4: {
        _6 = const "InUse";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb5: {
        _7 = const "Reserved";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _7;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb6: {
        _8 = const "AcpiReclaimable";    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _8;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb7: {
        _9 = const "AcpiNvs";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _9;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb8: {
        _10 = const "BadMemory";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _10;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb9: {
        _11 = const "Kernel";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _11;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb10: {
        _12 = const "KernelStack";       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _12;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb11: {
        _13 = const "PageTable";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _13;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb12: {
        _14 = const "Bootloader";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _14;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb13: {
        _15 = const "FrameZero";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _15;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb14: {
        _16 = const "Empty";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _16;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb15: {
        _17 = const "BootInfo";          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _17;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb16: {
        _18 = const "Package";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _18;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
        goto -> bb17;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:14: 168:15
    }

    bb17: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb18, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:10: 168:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb18: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:15: 168:15
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:17: 168:22>::clone(_1: &MemoryRegionType) -> MemoryRegionType {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:17: 168:22
    let mut _0: bootinfo::memory_map::MemoryRegionType; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:17: 168:22

    bb0: {
        _0 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:17: 168:22
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:22: 168:22
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:30: 168:39>::eq(_1: &MemoryRegionType, _2: &MemoryRegionType) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:30: 168:39
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:30: 168:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:30: 168:39
    let _3: isize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:30: 168:39
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:30: 168:39
        let _4: isize;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:30: 168:39
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:30: 168:39
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:30: 168:39
        _4 = discriminant((*_2));        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:30: 168:39
        _0 = Eq(_3, _4);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:30: 168:39
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:39: 168:39
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:41: 168:43>::assert_receiver_is_total_eq(_1: &MemoryRegionType) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:41: 168:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:41: 168:43

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:168:43: 168:43
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:10: 208:15>::fmt(_1: &E820MemoryRegion, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:10: 208:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:10: 208:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:10: 208:15
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:10: 208:15
    let _4: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:211:5: 211:24
    let mut _5: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:211:5: 211:24
    let _6: &u64;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:211:5: 211:24
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
    let mut _8: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
    let _9: &u64;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
    let mut _11: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
    let _12: &u32;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
    let _13: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
    let mut _14: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
    let _15: &&u32;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
    let _16: &u32;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38

    bb0: {
        _3 = const "E820MemoryRegion";   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:10: 208:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:10: 208:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "start_addr";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:211:5: 211:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:211:5: 211:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: u64);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:211:5: 211:24
        _5 = _6 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:211:5: 211:24
        _7 = const "len";                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: u64);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
        _8 = _9 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
        _10 = const "region_type";       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &((*_1).2: u32);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
        _11 = _12 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
        _13 = const "acpi_extended_attributes"; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = &((*_1).3: u32);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
        _15 = &_16;                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
        _14 = _15 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
        _0 = Formatter::<'_>::debug_struct_field4_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:10: 208:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:10: 208:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h), &'i str, &'j (dyn Debug + 'j)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_struct_field4_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:15: 208:15
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:17: 208:22>::clone(_1: &E820MemoryRegion) -> E820MemoryRegion {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:17: 208:22
    let mut _0: bootinfo::memory_map::E820MemoryRegion; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:17: 208:22
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:17: 208:22
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:22: 208:22
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:30: 208:39>::eq(_1: &E820MemoryRegion, _2: &E820MemoryRegion) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:30: 208:39
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:30: 208:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:30: 208:39
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:211:5: 211:24
    let mut _6: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:211:5: 211:24
    let mut _7: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:211:5: 211:24
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
    let mut _9: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
    let mut _10: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
    let mut _12: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
    let mut _13: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
    let mut _15: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
    let mut _16: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38

    bb0: {
        _6 = ((*_1).0: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:211:5: 211:24
        _7 = ((*_2).0: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:211:5: 211:24
        _5 = Eq(move _6, move _7);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:211:5: 211:24
        switchInt(move _5) -> [0: bb7, otherwise: bb8]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
    }

    bb1: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
    }

    bb2: {
        _15 = ((*_1).3: u32);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
        _16 = ((*_2).3: u32);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
        _14 = Eq(move _15, move _16);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
        _0 = move _14;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:39: 208:39
    }

    bb4: {
        _3 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
    }

    bb5: {
        _12 = ((*_1).2: u32);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
        _13 = ((*_2).2: u32);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
        _11 = Eq(move _12, move _13);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
        _3 = move _11;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:214:5: 214:38
    }

    bb7: {
        _4 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
        goto -> bb9;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
    }

    bb8: {
        _9 = ((*_1).1: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
        _10 = ((*_2).1: u64);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
        _8 = Eq(move _9, move _10);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
        _4 = move _8;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
        goto -> bb9;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:212:5: 212:17
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:213:5: 213:25
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:41: 208:43>::assert_receiver_is_total_eq(_1: &E820MemoryRegion) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:41: 208:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:41: 208:43
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:208:43: 208:43
    }
}

fn memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:217:1: 217:45>::from(_1: E820MemoryRegion) -> MemoryRegion {
    debug region => _1;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:218:13: 218:19
    let mut _0: bootinfo::memory_map::MemoryRegion; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:218:42: 218:54
    let _2: bootinfo::memory_map::MemoryRegionType; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:219:13: 219:24
    let _3: u32;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:13: 225:14
    let _4: !;                           // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:41:9: 41:81
    let mut _5: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:41:38: 41:80
    let mut _6: &[&str];                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:25: 225:49
    let mut _7: &[core::fmt::rt::Argument<'_>]; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:41:38: 41:80
    let _8: &[core::fmt::rt::Argument<'_>; 1]; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:41:38: 41:80
    let _9: [core::fmt::rt::Argument<'_>; 1]; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:41:38: 41:80
    let mut _10: core::fmt::rt::Argument<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:46: 225:48
    let _11: &u32;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:51: 225:52
    let mut _12: bootinfo::memory_map::FrameRange; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:20: 228:86
    let mut _13: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:36: 228:53
    let mut _14: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:55: 228:85
    let mut _15: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:55: 228:72
    let mut _16: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:75: 228:85
    let mut _17: (u64, bool);            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:55: 228:85
    let mut _18: bootinfo::memory_map::MemoryRegionType; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:229:13: 229:24
    scope 1 {
        debug region_type => _2;         // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:219:13: 219:24
    }
    scope 2 {
        debug t => _3;                   // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:13: 225:14
        let mut _19: &[&str; 1];         // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:25: 225:49
    }

    bb0: {
        switchInt((_1.2: u32)) -> [1: bb2, 2: bb3, 3: bb4, 4: bb5, 5: bb6, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:219:27: 219:51
    }

    bb1: {
        _3 = (_1.2: u32);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:13: 225:14
        _19 = const _;                   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:25: 225:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:25: 225:49
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<MemoryRegion as From<E820MemoryRegion>>::from, [], Some(promoted[0])) }
        _6 = _19 as &[&str] (Pointer(Unsize)); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:25: 225:49
        _11 = &_3;                       // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:51: 225:52
        _10 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_11) -> [return: bb7, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:46: 225:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:46: 225:48
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::rt::Argument<'b> {core::fmt::rt::Argument::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = MemoryRegionType::Usable;   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:220:18: 220:42
        goto -> bb9;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:220:18: 220:42
    }

    bb3: {
        _2 = MemoryRegionType::Reserved; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:221:18: 221:44
        goto -> bb9;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:221:18: 221:44
    }

    bb4: {
        _2 = MemoryRegionType::AcpiReclaimable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:222:18: 222:51
        goto -> bb9;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:222:18: 222:51
    }

    bb5: {
        _2 = MemoryRegionType::AcpiNvs;  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:223:18: 223:43
        goto -> bb9;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:223:18: 223:43
    }

    bb6: {
        _2 = MemoryRegionType::BadMemory; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:224:18: 224:45
        goto -> bb9;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:224:18: 224:45
    }

    bb7: {
        _9 = [move _10];                 // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:41:38: 41:80
        _8 = &_9;                        // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:41:38: 41:80
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize)); // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:41:38: 41:80
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb8, unwind unreachable]; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:41:38: 41:80
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:41:38: 41:80
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::rt::Argument<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _4 = panic_fmt(move _5) -> unwind unreachable; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:41:9: 41:81
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:41:9: 41:37
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = (_1.0: u64);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:36: 228:53
        _15 = (_1.0: u64);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:55: 228:72
        _16 = (_1.1: u64);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:75: 228:85
        _17 = CheckedAdd(_15, _16);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:55: 228:85
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, move _16) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:55: 228:85
    }

    bb10: {
        _14 = move (_17.0: u64);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:55: 228:85
        _12 = FrameRange::new(move _13, move _14) -> [return: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:20: 228:86
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:228:20: 228:35
                                         // + literal: Const { ty: fn(u64, u64) -> FrameRange {FrameRange::new}, val: Value(<ZST>) }
    }

    bb11: {
        _18 = _2;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:229:13: 229:24
        _0 = MemoryRegion { range: move _12, region_type: move _18 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:227:9: 230:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:231:6: 231:6
    }
}

promoted[0] in memory_map::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:217:1: 217:45>::from: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:25: 225:49
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:25: 225:49

    bb0: {
        _1 = [const "invalid region type "]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:25: 225:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:25: 225:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:25: 225:49
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/memory_map.rs:225:25: 225:49
    }
}

fn bootinfo::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:22:10: 22:15>::fmt(_1: &BootInfo, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:22:10: 22:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:22:10: 22:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:22:10: 22:15
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:22:10: 22:15
    let _4: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:31:5: 31:30
    let mut _5: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:31:5: 31:30
    let _6: &bootinfo::memory_map::MemoryMap; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:31:5: 31:30
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:45:5: 45:30
    let mut _8: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:45:5: 45:30
    let _9: &bootinfo::TlsTemplate;      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:45:5: 45:30
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:46:5: 46:24
    let mut _11: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:46:5: 46:24
    let _12: &&u8;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:46:5: 46:24
    let _13: &u8;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:46:5: 46:24

    bb0: {
        _3 = const "BootInfo";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "memory_map";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:31:5: 31:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:31:5: 31:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: bootinfo::memory_map::MemoryMap); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:31:5: 31:30
        _5 = _6 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:31:5: 31:30
        _7 = const "tls_template";       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:45:5: 45:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:45:5: 45:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: bootinfo::TlsTemplate); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:45:5: 45:30
        _8 = _9 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:45:5: 45:30
        _10 = const "_non_exhaustive";   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:46:5: 46:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:46:5: 46:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = &((*_1).2: u8);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:46:5: 46:24
        _12 = &_13;                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:46:5: 46:24
        _11 = _12 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:46:5: 46:24
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:22:10: 22:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:22:15: 22:15
    }
}

fn bootinfo::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:49:1: 49:14>::new(_1: memory_map::MemoryMap, _2: Option<TlsTemplate>, _3: u64, _4: u64) -> BootInfo {
    debug memory_map => _1;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:54:9: 54:19
    debug tls_template => _2;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:55:9: 55:21
    debug recursive_page_table_addr => _3; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:56:9: 56:34
    debug physical_memory_offset => _4;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:57:9: 57:31
    let mut _0: bootinfo::BootInfo;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:58:10: 58:14
    let _5: bootinfo::TlsTemplate;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:59:13: 59:25
    let mut _6: bootinfo::TlsTemplate;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:59:51: 63:10
    let mut _7: bootinfo::TlsTemplate;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:66:13: 66:25
    scope 1 {
        debug tls_template => _5;        // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:59:13: 59:25
    }

    bb0: {
        _6 = TlsTemplate { start_addr: const 0_u64, file_size: const 0_u64, mem_size: const 0_u64 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:59:51: 63:10
        _5 = Option::<TlsTemplate>::unwrap_or(_2, move _6) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:59:28: 63:11
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:59:41: 59:50
                                         // + literal: Const { ty: fn(Option<TlsTemplate>, TlsTemplate) -> TlsTemplate {Option::<TlsTemplate>::unwrap_or}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _5;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:66:13: 66:25
        _0 = BootInfo { memory_map: move _1, tls_template: move _7, _non_exhaustive: const 0_u8 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:64:9: 72:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:73:6: 73:6
    }
}

fn bootinfo::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:49:1: 49:14>::tls_template(_1: &BootInfo) -> Option<TlsTemplate> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:81:25: 81:30
    let mut _0: core::option::Option<bootinfo::TlsTemplate>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:81:35: 81:54
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:82:12: 82:42
    let mut _3: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:82:12: 82:38
    let mut _4: bootinfo::TlsTemplate;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:83:18: 83:35

    bb0: {
        _3 = (((*_1).1: bootinfo::TlsTemplate).2: u64); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:82:12: 82:38
        _2 = Gt(move _3, const 0_u64);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:82:12: 82:42
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:82:12: 82:42
    }

    bb1: {
        _4 = ((*_1).1: bootinfo::TlsTemplate); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:83:18: 83:35
        _0 = Option::<TlsTemplate>::Some(move _4); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:83:13: 83:36
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:82:9: 86:10
    }

    bb2: {
        _0 = Option::<TlsTemplate>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:85:13: 85:17
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:82:9: 86:10
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:87:6: 87:6
    }
}

fn bootinfo::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:10: 103:15>::fmt(_1: &TlsTemplate, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:10: 103:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:10: 103:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:10: 103:15
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:10: 103:15
    let _4: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:107:5: 107:24
    let mut _5: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:107:5: 107:24
    let _6: &u64;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:107:5: 107:24
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
    let mut _8: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
    let _9: &u64;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
    let mut _11: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
    let _12: &&u64;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
    let _13: &u64;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22

    bb0: {
        _3 = const "TlsTemplate";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:10: 103:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:10: 103:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "start_addr";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:107:5: 107:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:107:5: 107:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: u64);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:107:5: 107:24
        _5 = _6 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:107:5: 107:24
        _7 = const "file_size";          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: u64);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
        _8 = _9 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
        _10 = const "mem_size";          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = &((*_1).2: u64);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
        _12 = &_13;                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
        _11 = _12 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:10: 103:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:10: 103:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:15: 103:15
    }
}

fn bootinfo::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:17: 103:22>::clone(_1: &TlsTemplate) -> TlsTemplate {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:17: 103:22
    let mut _0: bootinfo::TlsTemplate;   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:17: 103:22
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:17: 103:22
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:22: 103:22
    }
}

fn bootinfo::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:30: 103:39>::eq(_1: &TlsTemplate, _2: &TlsTemplate) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:30: 103:39
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:30: 103:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:30: 103:39
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:107:5: 107:24
    let mut _5: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:107:5: 107:24
    let mut _6: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:107:5: 107:24
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
    let mut _8: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
    let mut _9: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
    let mut _11: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
    let mut _12: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22

    bb0: {
        _5 = ((*_1).0: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:107:5: 107:24
        _6 = ((*_2).0: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:107:5: 107:24
        _4 = Eq(move _5, move _6);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:107:5: 107:24
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
    }

    bb1: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
    }

    bb2: {
        _11 = ((*_1).2: u64);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
        _12 = ((*_2).2: u64);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
        _10 = Eq(move _11, move _12);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
        _0 = move _10;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:39: 103:39
    }

    bb4: {
        _3 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
    }

    bb5: {
        _8 = ((*_1).1: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
        _9 = ((*_2).1: u64);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
        _7 = Eq(move _8, move _9);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
        _3 = move _7;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:111:5: 111:23
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:115:5: 115:22
    }
}

fn bootinfo::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:41: 103:43>::assert_receiver_is_total_eq(_1: &TlsTemplate) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:41: 103:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:41: 103:43
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bootloader-0.9.23/src/bootinfo/mod.rs:103:43: 103:43
    }
}
