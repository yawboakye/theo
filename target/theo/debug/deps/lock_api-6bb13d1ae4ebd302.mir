// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn RawMutex::is_locked(_1: &Self) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:69:18: 69:23
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:69:28: 69:32
    let _2: bool;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:70:13: 70:26
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:71:12: 71:25
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:74:17: 74:30
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:77:10: 77:23
    scope 1 {
        debug acquired_lock => _2;       // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:70:13: 70:26
        scope 2 {
        }
    }

    bb0: {
        _2 = <Self as RawMutex>::try_lock(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:70:29: 70:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:70:34: 70:42
                                         // + literal: Const { ty: for<'a> fn(&'a Self) -> bool {<Self as RawMutex>::try_lock}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:71:12: 71:25
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:71:12: 71:25
    }

    bb2: {
        _4 = <Self as RawMutex>::unlock(_1) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:74:17: 74:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:74:22: 74:28
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a Self) {<Self as RawMutex>::unlock}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:77:10: 77:23
        _0 = Not(move _5);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:77:9: 77:23
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:78:6: 78:6
    }
}

fn RawMutexFair::bump(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:110:20: 110:25
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:110:27: 110:27
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:111:9: 111:27
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:112:9: 112:20

    bb0: {
        _2 = <Self as RawMutexFair>::unlock_fair(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:111:9: 111:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:111:14: 111:25
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a Self) {<Self as RawMutexFair>::unlock_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Self as RawMutex>::lock(_1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:112:9: 112:20
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:112:14: 112:18
                                         // + literal: Const { ty: for<'a> fn(&'a Self) {<Self as RawMutex>::lock}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:113:6: 113:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:150:1: 150:33>::new(_1: T) -> Mutex<R, T> {
    debug val => _1;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:154:22: 154:25
    let mut _0: mutex::Mutex<R, T>;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:154:33: 154:44
    let mut _2: R;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:156:18: 156:25
    let mut _3: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:157:19: 157:39

    bb0: {
        _2 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:156:18: 156:25
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:156:18: 156:25
                                         // + literal: Const { ty: R, val: Unevaluated(RawMutex::INIT, [R], None) }
        _3 = UnsafeCell::<T>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:157:19: 157:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:157:19: 157:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Mutex::<R, T> { raw: move _2, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:155:9: 158:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:159:6: 159:6
    }
}

// MIR FOR CTFE
fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:150:1: 150:33>::new(_1: T) -> Mutex<R, T> {
    debug val => _1;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:154:22: 154:25
    let mut _0: mutex::Mutex<R, T>;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:154:33: 154:44
    let mut _2: R;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:156:18: 156:25
    let mut _3: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:157:19: 157:39
    let mut _4: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:157:35: 157:38

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:156:18: 156:25
        _2 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:156:18: 156:25
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:156:18: 156:25
                                         // + literal: Const { ty: R, val: Unevaluated(RawMutex::INIT, [R], None) }
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:157:19: 157:39
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:157:35: 157:38
        _4 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:157:35: 157:38
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:157:19: 157:39
        _3 = UnsafeCell::<T>::new(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:157:19: 157:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:157:19: 157:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:157:38: 157:39
        _0 = Mutex::<R, T> { raw: move _2, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:155:9: 158:10
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:158:9: 158:10
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:158:9: 158:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:159:6: 159:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:150:1: 150:33>::into_inner(_1: Mutex<R, T>) -> T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:173:23: 173:27
    let mut _0: T;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:173:32: 173:33
    let mut _2: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:174:9: 174:18

    bb0: {
        _2 = move (_1.1: core::cell::UnsafeCell<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:174:9: 174:18
        _0 = UnsafeCell::<T>::into_inner(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:174:9: 174:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:174:19: 174:29
                                         // + literal: Const { ty: fn(UnsafeCell<T>) -> T {UnsafeCell::<T>::into_inner}, val: Value(<ZST>) }
    }

    bb1: {
        drop((_1.0: R)) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:175:5: 175:6
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:175:6: 175:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:178:1: 178:23>::const_new(_1: R, _2: T) -> Mutex<R, T> {
    debug raw_mutex => _1;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:183:28: 183:37
    debug val => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:183:42: 183:45
    let mut _0: mutex::Mutex<R, T>;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:183:53: 183:64
    let mut _3: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:186:19: 186:39

    bb0: {
        _3 = UnsafeCell::<T>::new(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:186:19: 186:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:186:19: 186:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Mutex::<R, T> { raw: move _1, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:184:9: 187:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:188:6: 188:6
    }
}

// MIR FOR CTFE
fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:178:1: 178:23>::const_new(_1: R, _2: T) -> Mutex<R, T> {
    debug raw_mutex => _1;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:183:28: 183:37
    debug val => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:183:42: 183:45
    let mut _0: mutex::Mutex<R, T>;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:183:53: 183:64
    let mut _3: R;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:185:18: 185:27
    let mut _4: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:186:19: 186:39
    let mut _5: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:186:35: 186:38

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:185:18: 185:27
        _3 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:185:18: 185:27
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:186:19: 186:39
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:186:35: 186:38
        _5 = move _2;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:186:35: 186:38
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:186:19: 186:39
        _4 = UnsafeCell::<T>::new(move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:186:19: 186:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:186:19: 186:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:186:38: 186:39
        _0 = Mutex::<R, T> { raw: move _3, data: move _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:184:9: 187:10
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:187:9: 187:10
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:187:9: 187:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:188:6: 188:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:191:1: 191:41>::guard(_1: &Mutex<R, T>) -> MutexGuard<'_, R, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:196:21: 196:26
    let mut _0: mutex::MutexGuard<'_, R, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:196:31: 196:51

    bb0: {
        _0 = MutexGuard::<'_, R, T> { mutex: _1, marker: const ZeroSized: PhantomData<(&mut T, <R as RawMutex>::GuardMarker)> }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:197:9: 200:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<(&mut T, <R as RawMutex>::GuardMarker)>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:201:6: 201:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:191:1: 191:41>::lock(_1: &Mutex<R, T>) -> MutexGuard<'_, R, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:213:17: 213:22
    let mut _0: mutex::MutexGuard<'_, R, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:213:27: 213:47
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:214:9: 214:24
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:214:9: 214:24
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:214:9: 214:24
        _2 = <R as RawMutex>::lock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:214:9: 214:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:214:18: 214:22
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawMutex>::lock}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Mutex::<R, T>::guard(_1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:216:18: 216:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:216:23: 216:28
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a Mutex<R, T>) -> MutexGuard<'a, R, T> {Mutex::<R, T>::guard}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:217:6: 217:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:191:1: 191:41>::try_lock(_1: &Mutex<R, T>) -> Option<MutexGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:227:21: 227:26
    let mut _0: core::option::Option<mutex::MutexGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:227:31: 227:59
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:228:12: 228:31
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:228:12: 228:31
    let mut _4: mutex::MutexGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:230:18: 230:41
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:228:12: 228:31
        _2 = <R as RawMutex>::try_lock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:228:12: 228:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:228:21: 228:29
                                         // + literal: Const { ty: for<'a> fn(&'a R) -> bool {<R as RawMutex>::try_lock}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:228:12: 228:31
    }

    bb2: {
        _4 = Mutex::<R, T>::guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:230:27: 230:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:230:32: 230:37
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a Mutex<R, T>) -> MutexGuard<'a, R, T> {Mutex::<R, T>::guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<MutexGuard<'_, R, T>>::Some(move _4); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:230:13: 230:42
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:228:9: 233:10
    }

    bb4: {
        _0 = Option::<MutexGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:232:13: 232:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:228:9: 233:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:234:6: 234:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:191:1: 191:41>::get_mut(_1: &mut Mutex<R, T>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:241:20: 241:29
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:241:34: 241:40
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:242:24: 242:39
    let mut _3: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:242:24: 242:39
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:242:24: 242:39
        _2 = UnsafeCell::<T>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:242:24: 242:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:242:34: 242:37
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &mut (*_2);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:242:18: 242:39
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:243:6: 243:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:191:1: 191:41>::is_locked(_1: &Mutex<R, T>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:247:22: 247:27
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:247:32: 247:36
    let mut _2: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:248:9: 248:29

    bb0: {
        _2 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:248:9: 248:29
        _0 = <R as RawMutex>::is_locked(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:248:9: 248:29
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:248:18: 248:27
                                         // + literal: Const { ty: for<'a> fn(&'a R) -> bool {<R as RawMutex>::is_locked}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:249:6: 249:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:191:1: 191:41>::force_unlock(_1: &Mutex<R, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:263:32: 263:37
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:263:39: 263:39
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:264:9: 264:26
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:264:9: 264:26

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:264:9: 264:26
        _2 = <R as RawMutex>::unlock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:264:9: 264:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:264:18: 264:24
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawMutex>::unlock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:265:6: 265:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:191:1: 191:41>::raw(_1: &Mutex<R, T>) -> &R {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:277:23: 277:28
    let mut _0: &R;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:277:33: 277:35

    bb0: {
        _0 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:278:9: 278:18
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:279:6: 279:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:191:1: 191:41>::data_ptr(_1: &Mutex<R, T>) -> *mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:293:21: 293:26
    let mut _0: *mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:293:31: 293:37
    let mut _2: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:294:9: 294:24

    bb0: {
        _2 = &((*_1).1: core::cell::UnsafeCell<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:294:9: 294:24
        _0 = UnsafeCell::<T>::get(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:294:9: 294:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:294:19: 294:22
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:295:6: 295:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:337:1: 337:45>::force_unlock_fair(_1: &Mutex<R, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:350:37: 350:42
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:350:44: 350:44
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:351:9: 351:31
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:351:9: 351:31

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:351:9: 351:31
        _2 = <R as RawMutexFair>::unlock_fair(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:351:9: 351:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:351:18: 351:29
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawMutexFair>::unlock_fair}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:352:6: 352:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:355:1: 355:46>::try_lock_for(_1: &Mutex<R, T>, _2: <R as RawMutexTimed>::Duration) -> Option<MutexGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:362:25: 362:30
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:362:32: 362:39
    let mut _0: core::option::Option<mutex::MutexGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:362:57: 362:85
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:363:12: 363:42
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:363:12: 363:42
    let mut _5: mutex::MutexGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:365:18: 365:41
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:363:12: 363:42
        _3 = <R as RawMutexTimed>::try_lock_for(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:363:12: 363:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:363:21: 363:33
                                         // + literal: Const { ty: for<'a> fn(&'a R, <R as RawMutexTimed>::Duration) -> bool {<R as RawMutexTimed>::try_lock_for}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:363:12: 363:42
    }

    bb2: {
        _5 = Mutex::<R, T>::guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:365:27: 365:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:365:32: 365:37
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a Mutex<R, T>) -> MutexGuard<'a, R, T> {Mutex::<R, T>::guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<MutexGuard<'_, R, T>>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:365:13: 365:42
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:363:9: 368:10
    }

    bb4: {
        _0 = Option::<MutexGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:367:13: 367:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:363:9: 368:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:369:6: 369:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:355:1: 355:46>::try_lock_until(_1: &Mutex<R, T>, _2: <R as RawMutexTimed>::Instant) -> Option<MutexGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:377:27: 377:32
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:377:34: 377:41
    let mut _0: core::option::Option<mutex::MutexGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:377:58: 377:86
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:378:12: 378:44
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:378:12: 378:44
    let mut _5: mutex::MutexGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:380:18: 380:41
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:378:12: 378:44
        _3 = <R as RawMutexTimed>::try_lock_until(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:378:12: 378:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:378:21: 378:35
                                         // + literal: Const { ty: for<'a> fn(&'a R, <R as RawMutexTimed>::Instant) -> bool {<R as RawMutexTimed>::try_lock_until}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:378:12: 378:44
    }

    bb2: {
        _5 = Mutex::<R, T>::guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:380:27: 380:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:380:32: 380:37
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a Mutex<R, T>) -> MutexGuard<'a, R, T> {Mutex::<R, T>::guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<MutexGuard<'_, R, T>>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:380:13: 380:42
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:378:9: 383:10
    }

    bb4: {
        _0 = Option::<MutexGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:382:13: 382:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:378:9: 383:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:384:6: 384:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:420:1: 420:63>::default() -> Mutex<R, T> {
    let mut _0: mutex::Mutex<R, T>;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:422:21: 422:32
    let mut _1: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:423:20: 423:38

    bb0: {
        _1 = <T as Default>::default() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:423:20: 423:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:423:20: 423:36
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Mutex::<R, T>::new(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:423:9: 423:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:423:9: 423:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> Mutex<R, T> {Mutex::<R, T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:424:6: 424:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:427:1: 427:45>::from(_1: T) -> Mutex<R, T> {
    debug t => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:429:13: 429:14
    let mut _0: mutex::Mutex<R, T>;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:429:22: 429:33

    bb0: {
        _0 = Mutex::<R, T>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:430:9: 430:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:430:9: 430:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> Mutex<R, T> {Mutex::<R, T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:431:6: 431:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:434:1: 434:69>::fmt(_1: &Mutex<R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:435:12: 435:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:435:19: 435:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:435:50: 435:61
    let mut _3: core::option::Option<mutex::MutexGuard<'_, R, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:436:15: 436:30
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:13: 437:24
    let _5: mutex::MutexGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:18: 437:23
    let mut _6: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:28: 437:84
    let mut _7: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:28: 437:75
    let mut _8: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:28: 437:75
    let mut _9: core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:28: 437:51
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:43: 437:50
    let _11: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:58: 437:64
    let mut _12: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:66: 437:74
    let _13: &&T;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:66: 437:74
    let _14: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:67: 437:74
    let _15: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:68: 437:74
    let mut _16: &mutex::MutexGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:69: 437:74
    let mut _17: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:446:17: 448:30
    let mut _18: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:446:17: 447:55
    let mut _19: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:446:17: 447:55
    let mut _20: core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:446:17: 446:40
    let _21: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:446:32: 446:39
    let _22: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:28: 447:34
    let mut _23: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:36: 447:54
    let mut _24: &<mutex::Mutex<R, T> as core::fmt::Debug>::fmt::LockedPlaceholder; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:36: 447:54
    scope 1 {
        debug guard => _5;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:18: 437:23
    }

    bb0: {
        _3 = Mutex::<R, T>::try_lock(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:436:15: 436:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:436:20: 436:28
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<R, T>) -> Option<MutexGuard<'a, R, T>> {Mutex::<R, T>::try_lock}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:436:15: 436:30
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:436:9: 436:30
    }

    bb2: {
        _21 = const "Mutex";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:446:32: 446:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:446:32: 446:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = Formatter::<'_>::debug_struct(_2, _21) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:446:17: 446:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:446:19: 446:31
                                         // + literal: Const { ty: for<'b, 'a> fn(&'b mut Formatter<'_>, &'a str) -> DebugStruct<'b, '_> {Formatter::<'_>::debug_struct}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:436:15: 436:30
    }

    bb4: {
        _5 = move ((_3 as Some).0: mutex::MutexGuard<'_, R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:18: 437:23
        _10 = const "Mutex";             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:43: 437:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:43: 437:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = Formatter::<'_>::debug_struct(_2, _10) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:28: 437:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:30: 437:42
                                         // + literal: Const { ty: for<'b, 'a> fn(&'b mut Formatter<'_>, &'a str) -> DebugStruct<'b, '_> {Formatter::<'_>::debug_struct}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = &mut _9;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:28: 437:75
        _11 = const "data";              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:58: 437:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:58: 437:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = &_5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:69: 437:74
        _15 = <MutexGuard<'_, R, T> as Deref>::deref(move _16) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:68: 437:74
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:68: 437:74
                                         // + literal: Const { ty: for<'a> fn(&'a MutexGuard<'_, R, T>) -> &'a <MutexGuard<'_, R, T> as Deref>::Target {<MutexGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = _15;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:67: 437:74
        _13 = &_14;                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:66: 437:74
        _12 = _13 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:66: 437:74
        _7 = DebugStruct::<'_, '_>::field(move _8, _11, move _12) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:28: 437:75
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:52: 437:57
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb7: {
        _6 = _7;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:28: 437:84
        _0 = DebugStruct::<'_, '_>::finish(move _6) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:28: 437:84
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:76: 437:82
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugStruct<'_, '_>) -> Result<(), core::fmt::Error> {DebugStruct::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_5) -> [return: bb11, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:437:83: 437:84
    }

    bb9: {
        _19 = &mut _20;                  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:446:17: 447:55
        _22 = const "data";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:28: 447:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:28: 447:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:36: 447:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:36: 447:54
                                         // + literal: Const { ty: &<Mutex<R, T> as Debug>::fmt::LockedPlaceholder, val: Unevaluated(<Mutex<R, T> as Debug>::fmt, [R, T], Some(promoted[0])) }
        _23 = _24 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:36: 447:54
        _18 = DebugStruct::<'_, '_>::field(move _19, _22, move _23) -> [return: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:446:17: 447:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:22: 447:27
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = _18;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:446:17: 448:30
        _0 = DebugStruct::<'_, '_>::finish(move _17) -> [return: bb11, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:446:17: 448:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:448:22: 448:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugStruct<'_, '_>) -> Result<(), core::fmt::Error> {DebugStruct::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:451:6: 451:6
    }
}

promoted[0] in mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:434:1: 434:69>::fmt: &<Mutex<R, T> as Debug>::fmt::LockedPlaceholder = {
    let mut _0: &<mutex::Mutex<R, T> as core::fmt::Debug>::fmt::LockedPlaceholder; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:36: 447:54
    let mut _1: <mutex::Mutex<R, T> as core::fmt::Debug>::fmt::LockedPlaceholder; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:37: 447:54

    bb0: {
        _1 = <Mutex<R, T> as Debug>::fmt::LockedPlaceholder; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:37: 447:54
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:36: 447:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:447:36: 447:54
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:434:1: 434:69>::fmt::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:440:17: 440:54>::fmt(_1: &<Mutex<R, T> as Debug>::fmt::LockedPlaceholder, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:441:28: 441:33
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:441:35: 441:36
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:441:66: 441:77
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:442:37: 442:47

    bb0: {
        _3 = const "<locked>";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:442:37: 442:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:442:37: 442:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:442:25: 442:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:442:27: 442:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:443:22: 443:22
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:496:1: 496:64>::mutex(_1: &MutexGuard<'_, R, T>) -> &Mutex<R, T> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:498:18: 498:19
    let mut _0: &mutex::Mutex<R, T>;     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:498:31: 498:46

    bb0: {
        _0 = ((*_1).0: &mutex::Mutex<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:499:9: 499:16
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:500:6: 500:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:496:1: 496:64>::map(_1: MutexGuard<'_, R, T>, _2: F) -> MappedMutexGuard<'_, R, U> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:511:30: 511:31
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:511:39: 511:40
    let mut _0: mutex::MappedMutexGuard<'_, R, U>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:511:48: 511:74
    let _3: &R;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:515:13: 515:16
    let mut _5: (&mut T,);               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:20: 516:58
    let mut _6: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:31: 516:55
    let mut _7: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:37: 516:55
    let mut _8: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:37: 516:55
    let _9: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:517:9: 517:23
    let mut _10: *mut U;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:520:13: 520:17
    let mut _11: &mutex::Mutex<R, T>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:511:30: 511:31
    let mut _12: &mutex::Mutex<R, T>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:511:30: 511:31
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:515:13: 515:16
        let _4: &mut U;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:13: 516:17
        scope 2 {
            debug data => _4;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:13: 516:17
        }
        scope 3 {
        }
    }

    bb0: {
        _11 = deref_copy (_1.0: &mutex::Mutex<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:515:19: 515:31
        _3 = &((*_11).0: R);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:515:19: 515:31
        _12 = deref_copy (_1.0: &mutex::Mutex<R, T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:37: 516:55
        _8 = &((*_12).1: core::cell::UnsafeCell<T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:37: 516:55
        _7 = UnsafeCell::<T>::get(move _8) -> [return: bb1, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:37: 516:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:50: 516:53
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut (*_7);                 // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:31: 516:55
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:20: 516:58
        _4 = <F as FnOnce<(&mut T,)>>::call_once(move _2, move _5) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:20: 516:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:516:20: 516:21
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&mut T,)) -> <F as FnOnce<(&mut T,)>>::Output {<F as FnOnce<(&mut T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = core::mem::forget::<MutexGuard<'_, R, T>>(move _1) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:517:9: 517:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:517:9: 517:20
                                         // + literal: Const { ty: fn(MutexGuard<'_, R, T>) {core::mem::forget::<MutexGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &raw mut (*_4);            // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:520:13: 520:17
        _0 = MappedMutexGuard::<'_, R, U> { raw: _3, data: move _10, marker: const ZeroSized: PhantomData<&mut U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:518:9: 522:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&mut U>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:523:6: 523:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:496:1: 496:64>::try_map(_1: MutexGuard<'_, R, T>, _2: F) -> Result<MappedMutexGuard<'_, R, U>, MutexGuard<'_, R, T>> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:535:34: 535:35
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:535:43: 535:44
    let mut _0: core::result::Result<mutex::MappedMutexGuard<'_, R, U>, mutex::MutexGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:535:52: 535:92
    let _3: &R;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:539:13: 539:16
    let mut _4: core::option::Option<&mut U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:26: 540:64
    let mut _5: (&mut T,);               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:26: 540:64
    let mut _6: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:37: 540:61
    let mut _7: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:43: 540:61
    let mut _8: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:43: 540:61
    let mut _9: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:541:13: 541:23
    let _11: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:544:9: 544:23
    let mut _12: mutex::MappedMutexGuard<'_, R, U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:545:12: 549:10
    let mut _13: *mut U;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:547:13: 547:17
    let mut _14: &mutex::Mutex<R, T>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:535:34: 535:35
    let mut _15: &mutex::Mutex<R, T>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:535:34: 535:35
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:539:13: 539:16
        let _10: &mut U;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:541:18: 541:22
        scope 2 {
            debug data => _10;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:13: 540:17
        }
        scope 3 {
        }
        scope 4 {
            debug data => _10;           // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:541:18: 541:22
        }
    }

    bb0: {
        _14 = deref_copy (_1.0: &mutex::Mutex<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:539:19: 539:31
        _3 = &((*_14).0: R);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:539:19: 539:31
        _15 = deref_copy (_1.0: &mutex::Mutex<R, T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:43: 540:61
        _8 = &((*_15).1: core::cell::UnsafeCell<T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:43: 540:61
        _7 = UnsafeCell::<T>::get(move _8) -> [return: bb1, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:43: 540:61
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:56: 540:59
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut (*_7);                 // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:37: 540:61
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:26: 540:64
        _4 = <F as FnOnce<(&mut T,)>>::call_once(move _2, move _5) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:26: 540:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:26: 540:27
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&mut T,)) -> <F as FnOnce<(&mut T,)>>::Output {<F as FnOnce<(&mut T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = discriminant(_4);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:26: 540:64
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:20: 540:64
    }

    bb3: {
        _0 = Result::<MappedMutexGuard<'_, R, U>, MutexGuard<'_, R, T>>::Err(move _1); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:542:28: 542:34
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:550:5: 550:6
    }

    bb4: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:540:26: 540:64
    }

    bb5: {
        _10 = move ((_4 as Some).0: &mut U); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:541:18: 541:22
        _11 = core::mem::forget::<MutexGuard<'_, R, T>>(move _1) -> [return: bb6, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:544:9: 544:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:544:9: 544:20
                                         // + literal: Const { ty: fn(MutexGuard<'_, R, T>) {core::mem::forget::<MutexGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = &raw mut (*_10);           // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:547:13: 547:17
        _12 = MappedMutexGuard::<'_, R, U> { raw: _3, data: move _13, marker: const ZeroSized: PhantomData<&mut U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:545:12: 549:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&mut U>, val: Value(<ZST>) }
        _0 = Result::<MappedMutexGuard<'_, R, U>, MutexGuard<'_, R, T>>::Ok(move _12); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:545:9: 549:11
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:550:5: 550:6
    }

    bb7: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:550:6: 550:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:496:1: 496:64>::unlocked(_1: &mut MutexGuard<'_, R, T>, _2: F) -> U {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:557:27: 557:28
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:557:41: 557:42
    let mut _0: U;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:557:50: 557:51
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:563:13: 563:33
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:563:13: 563:33
    let _5: scopeguard::ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    let mut _6: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _7: &&mut mutex::MutexGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _8: &mutex::Mutex<R, T>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:557:27: 557:28
    scope 1 {
    }
    scope 2 {
        debug _guard => _5;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    }

    bb0: {
        _8 = deref_copy ((*_1).0: &mutex::Mutex<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:563:13: 563:33
        _4 = &((*_8).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:563:13: 563:33
        _3 = <R as RawMutex>::unlock(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:563:13: 563:33
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:563:25: 563:31
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawMutex>::unlock}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
        _6 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44] { s: move _7 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
                                         // closure
                                         // + def_id: DefId(0:879 ~ lock_api[bfd9]::mutex::{impl#11}::unlocked::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     R,
                                         //     T,
                                         //     F,
                                         //     U,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)),
                                         //     (&&mut mutex::MutexGuard<'_, R, T>,),
                                         // ]
        _5 = guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>(const (), move _6) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:35
                                         // + literal: Const { ty: fn((), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]) -> ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]> {guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <F as FnOnce<()>>::call_once(move _2, const ()) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:566:9: 566:12
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:566:9: 566:10
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:567:5: 567:6
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:567:6: 567:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:496:1: 496:64>::unlocked::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44], _2: ()) -> () {
    debug s => (*(_1.0: &&mut mutex::MutexGuard<'_, R, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:557:27: 557:28
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:45: 253:45
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:565:16: 565:34
    let mut _4: &&mut mutex::MutexGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _5: &mut mutex::MutexGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _6: &mutex::Mutex<R, T>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55

    bb0: {
        _4 = deref_copy (_1.0: &&mut mutex::MutexGuard<'_, R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:565:16: 565:34
        _5 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:565:16: 565:34
        _6 = deref_copy ((*_5).0: &mutex::Mutex<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:565:16: 565:34
        _3 = &((*_6).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:565:16: 565:34
        _0 = <R as RawMutex>::lock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:565:16: 565:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:565:28: 565:32
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawMutex>::lock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:55: 253:55
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:496:1: 496:64>::leak(_1: MutexGuard<'_, R, T>) -> &mut T {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:574:17: 574:18
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:574:29: 574:38
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:575:32: 575:50
    let mut _3: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:575:32: 575:50
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:576:9: 576:23
    let mut _5: &mutex::Mutex<R, T>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:574:17: 574:18
    scope 1 {
        debug r => _0;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:575:13: 575:14
    }
    scope 2 {
    }

    bb0: {
        _5 = deref_copy (_1.0: &mutex::Mutex<R, T>); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:575:32: 575:50
        _3 = &((*_5).1: core::cell::UnsafeCell<T>); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:575:32: 575:50
        _2 = UnsafeCell::<T>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:575:32: 575:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:575:45: 575:48
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &mut (*_2);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:575:26: 575:50
        _4 = core::mem::forget::<MutexGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:576:9: 576:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:576:9: 576:20
                                         // + literal: Const { ty: fn(MutexGuard<'_, R, T>) {core::mem::forget::<MutexGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:578:6: 578:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:581:1: 581:68>::unlock_fair(_1: MutexGuard<'_, R, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:595:24: 595:25
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:595:33: 595:33
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:598:13: 598:38
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:598:13: 598:38
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:600:9: 600:23
    let mut _5: &mutex::Mutex<R, T>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:595:24: 595:25
    scope 1 {
    }

    bb0: {
        _5 = deref_copy (_1.0: &mutex::Mutex<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:598:13: 598:38
        _3 = &((*_5).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:598:13: 598:38
        _2 = <R as RawMutexFair>::unlock_fair(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:598:13: 598:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:598:25: 598:36
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawMutexFair>::unlock_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = core::mem::forget::<MutexGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:600:9: 600:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:600:9: 600:20
                                         // + literal: Const { ty: fn(MutexGuard<'_, R, T>) {core::mem::forget::<MutexGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:601:6: 601:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:581:1: 581:68>::unlocked_fair(_1: &mut MutexGuard<'_, R, T>, _2: F) -> U {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:610:32: 610:33
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:610:46: 610:47
    let mut _0: U;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:610:55: 610:56
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:616:13: 616:38
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:616:13: 616:38
    let _5: scopeguard::ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    let mut _6: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _7: &&mut mutex::MutexGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _8: &mutex::Mutex<R, T>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:610:32: 610:33
    scope 1 {
    }
    scope 2 {
        debug _guard => _5;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    }

    bb0: {
        _8 = deref_copy ((*_1).0: &mutex::Mutex<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:616:13: 616:38
        _4 = &((*_8).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:616:13: 616:38
        _3 = <R as RawMutexFair>::unlock_fair(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:616:13: 616:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:616:25: 616:36
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawMutexFair>::unlock_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
        _6 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44] { s: move _7 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
                                         // closure
                                         // + def_id: DefId(0:880 ~ lock_api[bfd9]::mutex::{impl#12}::unlocked_fair::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     R,
                                         //     T,
                                         //     F,
                                         //     U,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)),
                                         //     (&&mut mutex::MutexGuard<'_, R, T>,),
                                         // ]
        _5 = guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>(const (), move _6) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:35
                                         // + literal: Const { ty: fn((), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]) -> ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]> {guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <F as FnOnce<()>>::call_once(move _2, const ()) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:619:9: 619:12
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:619:9: 619:10
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:620:5: 620:6
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:620:6: 620:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:581:1: 581:68>::unlocked_fair::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44], _2: ()) -> () {
    debug s => (*(_1.0: &&mut mutex::MutexGuard<'_, R, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:610:32: 610:33
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:45: 253:45
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:618:16: 618:34
    let mut _4: &&mut mutex::MutexGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _5: &mut mutex::MutexGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _6: &mutex::Mutex<R, T>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55

    bb0: {
        _4 = deref_copy (_1.0: &&mut mutex::MutexGuard<'_, R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:618:16: 618:34
        _5 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:618:16: 618:34
        _6 = deref_copy ((*_5).0: &mutex::Mutex<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:618:16: 618:34
        _3 = &((*_6).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:618:16: 618:34
        _0 = <R as RawMutex>::lock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:618:16: 618:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:618:28: 618:32
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawMutex>::lock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:55: 253:55
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:581:1: 581:68>::bump(_1: &mut MutexGuard<'_, R, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:628:17: 628:18
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:628:31: 628:31
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:631:13: 631:31
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:631:13: 631:31
    let mut _4: &mutex::Mutex<R, T>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:628:17: 628:18
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &mutex::Mutex<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:631:13: 631:31
        _3 = &((*_4).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:631:13: 631:31
        _2 = <R as RawMutexFair>::bump(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:631:13: 631:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:631:25: 631:29
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawMutexFair>::bump}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:633:6: 633:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:636:1: 636:74>::deref(_1: &MutexGuard<'_, R, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:639:14: 639:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:639:24: 639:26
    let _2: *mut T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:640:20: 640:41
    let mut _3: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:640:20: 640:41
    let mut _4: &mutex::Mutex<R, T>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:639:14: 639:19
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &mutex::Mutex<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:640:20: 640:41
        _3 = &((*_4).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:640:20: 640:41
        _2 = UnsafeCell::<T>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:640:20: 640:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:640:36: 640:39
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_2);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:640:18: 640:41
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:641:6: 641:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:644:1: 644:77>::deref_mut(_1: &mut MutexGuard<'_, R, T>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:646:18: 646:27
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:646:32: 646:38
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:647:24: 647:45
    let mut _3: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:647:24: 647:45
    let mut _4: &mutex::Mutex<R, T>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:646:18: 646:27
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &mutex::Mutex<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:647:24: 647:45
        _3 = &((*_4).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:647:24: 647:45
        _2 = UnsafeCell::<T>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:647:24: 647:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:647:40: 647:43
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &mut (*_2);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:647:18: 647:45
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:648:6: 648:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:651:1: 651:73>::drop(_1: &mut MutexGuard<'_, R, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:653:13: 653:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:653:24: 653:24
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:656:13: 656:36
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:656:13: 656:36
    let mut _4: &mutex::Mutex<R, T>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:653:13: 653:22
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &mutex::Mutex<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:656:13: 656:36
        _3 = &((*_4).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:656:13: 656:36
        _2 = <R as RawMutex>::unlock(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:656:13: 656:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:656:28: 656:34
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawMutex>::unlock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:658:6: 658:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:661:1: 661:92>::fmt(_1: &MutexGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:662:12: 662:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:662:19: 662:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:662:50: 662:61
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:663:25: 663:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:663:26: 663:32

    bb0: {
        _4 = <MutexGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:663:26: 663:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:663:26: 663:32
                                         // + literal: Const { ty: for<'a> fn(&'a MutexGuard<'_, R, T>) -> &'a <MutexGuard<'_, R, T> as Deref>::Target {<MutexGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:663:25: 663:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:663:9: 663:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:663:9: 663:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:664:6: 664:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:667:1: 667:96>::fmt(_1: &MutexGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:668:12: 668:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:668:19: 668:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:668:50: 668:61
    let mut _3: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:669:9: 669:24
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:669:9: 669:17

    bb0: {
        _4 = <MutexGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:669:9: 669:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:669:9: 669:17
                                         // + literal: Const { ty: for<'a> fn(&'a MutexGuard<'_, R, T>) -> &'a <MutexGuard<'_, R, T> as Deref>::Target {<MutexGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:669:9: 669:24
        _0 = <T as Display>::fmt(move _3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:669:9: 669:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:669:18: 669:21
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:670:6: 670:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:832:1: 832:70>::map(_1: MappedMutexGuard<'_, R, T>, _2: F) -> MappedMutexGuard<'_, R, U> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:842:30: 842:31
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:842:39: 842:40
    let mut _0: mutex::MappedMutexGuard<'_, R, U>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:842:48: 842:74
    let _3: &R;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:846:13: 846:16
    let mut _5: (&mut T,);               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:847:20: 847:46
    let mut _6: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:847:31: 847:43
    let _7: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:848:9: 848:23
    let mut _8: *mut U;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:851:13: 851:17
    let mut _9: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:842:30: 842:31
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:846:13: 846:16
        let _4: &mut U;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:847:13: 847:17
        scope 2 {
            debug data => _4;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:847:13: 847:17
        }
        scope 3 {
        }
    }

    bb0: {
        _3 = (_1.0: &R);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:846:19: 846:24
        _9 = deref_copy (_1.1: *mut T);  // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:847:31: 847:43
        _6 = &mut (*_9);                 // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:847:31: 847:43
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:847:20: 847:46
        _4 = <F as FnOnce<(&mut T,)>>::call_once(move _2, move _5) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:847:20: 847:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:847:20: 847:21
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&mut T,)) -> <F as FnOnce<(&mut T,)>>::Output {<F as FnOnce<(&mut T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = core::mem::forget::<MappedMutexGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:848:9: 848:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:848:9: 848:20
                                         // + literal: Const { ty: fn(MappedMutexGuard<'_, R, T>) {core::mem::forget::<MappedMutexGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &raw mut (*_4);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:851:13: 851:17
        _0 = MappedMutexGuard::<'_, R, U> { raw: _3, data: move _8, marker: const ZeroSized: PhantomData<&mut U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:849:9: 853:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&mut U>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:854:6: 854:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:832:1: 832:70>::try_map(_1: MappedMutexGuard<'_, R, T>, _2: F) -> Result<MappedMutexGuard<'_, R, U>, MappedMutexGuard<'_, R, T>> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:866:34: 866:35
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:866:43: 866:44
    let mut _0: core::result::Result<mutex::MappedMutexGuard<'_, R, U>, mutex::MappedMutexGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:866:52: 866:92
    let _3: &R;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:870:13: 870:16
    let mut _4: core::option::Option<&mut U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:871:26: 871:52
    let mut _5: (&mut T,);               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:871:26: 871:52
    let mut _6: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:871:37: 871:49
    let mut _7: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:872:13: 872:23
    let _9: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:875:9: 875:23
    let mut _10: mutex::MappedMutexGuard<'_, R, U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:876:12: 880:10
    let mut _11: *mut U;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:878:13: 878:17
    let mut _12: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:866:34: 866:35
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:870:13: 870:16
        let _8: &mut U;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:872:18: 872:22
        scope 2 {
            debug data => _8;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:871:13: 871:17
        }
        scope 3 {
        }
        scope 4 {
            debug data => _8;            // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:872:18: 872:22
        }
    }

    bb0: {
        _3 = (_1.0: &R);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:870:19: 870:24
        _12 = deref_copy (_1.1: *mut T); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:871:37: 871:49
        _6 = &mut (*_12);                // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:871:37: 871:49
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:871:26: 871:52
        _4 = <F as FnOnce<(&mut T,)>>::call_once(move _2, move _5) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:871:26: 871:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:871:26: 871:27
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&mut T,)) -> <F as FnOnce<(&mut T,)>>::Output {<F as FnOnce<(&mut T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_4);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:871:26: 871:52
        switchInt(move _7) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:871:20: 871:52
    }

    bb2: {
        _0 = Result::<MappedMutexGuard<'_, R, U>, MappedMutexGuard<'_, R, T>>::Err(move _1); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:873:28: 873:34
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:881:5: 881:6
    }

    bb3: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:871:26: 871:52
    }

    bb4: {
        _8 = move ((_4 as Some).0: &mut U); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:872:18: 872:22
        _9 = core::mem::forget::<MappedMutexGuard<'_, R, T>>(move _1) -> [return: bb5, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:875:9: 875:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:875:9: 875:20
                                         // + literal: Const { ty: fn(MappedMutexGuard<'_, R, T>) {core::mem::forget::<MappedMutexGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = &raw mut (*_8);            // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:878:13: 878:17
        _10 = MappedMutexGuard::<'_, R, U> { raw: _3, data: move _11, marker: const ZeroSized: PhantomData<&mut U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:876:12: 880:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&mut U>, val: Value(<ZST>) }
        _0 = Result::<MappedMutexGuard<'_, R, U>, MappedMutexGuard<'_, R, T>>::Ok(move _10); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:876:9: 880:11
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:881:5: 881:6
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:881:6: 881:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:884:1: 884:74>::unlock_fair(_1: MappedMutexGuard<'_, R, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:898:24: 898:25
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:898:33: 898:33
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:901:13: 901:32
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:903:9: 903:23
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:898:24: 898:25
    scope 1 {
    }

    bb0: {
        _4 = deref_copy (_1.0: &R);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:901:13: 901:32
        _2 = <R as RawMutexFair>::unlock_fair(_4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:901:13: 901:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:901:19: 901:30
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawMutexFair>::unlock_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = core::mem::forget::<MappedMutexGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:903:9: 903:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:903:9: 903:20
                                         // + literal: Const { ty: fn(MappedMutexGuard<'_, R, T>) {core::mem::forget::<MappedMutexGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:904:6: 904:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:907:1: 907:80>::deref(_1: &MappedMutexGuard<'_, R, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:910:14: 910:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:910:24: 910:26
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:910:14: 910:19
    scope 1 {
    }

    bb0: {
        _2 = deref_copy ((*_1).1: *mut T); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:911:18: 911:29
        _0 = &(*_2);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:911:18: 911:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:912:6: 912:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:915:1: 915:83>::deref_mut(_1: &mut MappedMutexGuard<'_, R, T>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:917:18: 917:27
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:917:32: 917:38
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:917:18: 917:27
    scope 1 {
    }

    bb0: {
        _2 = deref_copy ((*_1).1: *mut T); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:918:18: 918:33
        _0 = &mut (*_2);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:918:18: 918:33
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:919:6: 919:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:922:1: 922:79>::drop(_1: &mut MappedMutexGuard<'_, R, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:924:13: 924:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:924:24: 924:24
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:927:13: 927:30
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:924:13: 924:22
    scope 1 {
    }

    bb0: {
        _3 = deref_copy ((*_1).0: &R);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:927:13: 927:30
        _2 = <R as RawMutex>::unlock(_3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:927:13: 927:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:927:22: 927:28
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawMutex>::unlock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:929:6: 929:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:932:1: 932:98>::fmt(_1: &MappedMutexGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:933:12: 933:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:933:19: 933:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:933:50: 933:61
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:934:25: 934:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:934:26: 934:32

    bb0: {
        _4 = <MappedMutexGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:934:26: 934:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:934:26: 934:32
                                         // + literal: Const { ty: for<'a> fn(&'a MappedMutexGuard<'_, R, T>) -> &'a <MappedMutexGuard<'_, R, T> as Deref>::Target {<MappedMutexGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:934:25: 934:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:934:9: 934:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:934:9: 934:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:935:6: 935:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:938:1: 939:35>::fmt(_1: &MappedMutexGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:941:12: 941:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:941:19: 941:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:941:50: 941:61
    let mut _3: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:942:9: 942:24
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:942:9: 942:17

    bb0: {
        _4 = <MappedMutexGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:942:9: 942:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:942:9: 942:17
                                         // + literal: Const { ty: for<'a> fn(&'a MappedMutexGuard<'_, R, T>) -> &'a <MappedMutexGuard<'_, R, T> as Deref>::Target {<MappedMutexGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:942:9: 942:24
        _0 = <T as Display>::fmt(move _3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:942:9: 942:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:942:18: 942:21
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/mutex.rs:943:6: 943:6
    }
}

const remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:77:1: 77:58>::INIT: RawReentrantMutex<R, G> = {
    let mut _0: remutex::RawReentrantMutex<R, G>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:80:21: 80:25
    let mut _1: core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:81:16: 81:35
    let mut _2: core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:82:21: 82:33
    let mut _3: R;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:83:16: 83:23
    let mut _4: G;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:84:24: 84:31

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:81:16: 81:35
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:81:16: 81:35
        _1 = AtomicUsize::new(const 0_usize) -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:81:16: 81:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:81:16: 81:32
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:82:21: 82:33
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:82:21: 82:33
        _2 = Cell::<usize>::new(const 0_usize) -> [return: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:82:21: 82:33
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:82:21: 82:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Cell<usize> {Cell::<usize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:83:16: 83:23
        _3 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:83:16: 83:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:83:16: 83:23
                                         // + literal: Const { ty: R, val: Unevaluated(RawMutex::INIT, [R], None) }
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:84:24: 84:31
        _4 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:84:24: 84:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:84:24: 84:31
                                         // + literal: Const { ty: G, val: Unevaluated(GetThreadId::INIT, [G], None) }
        _0 = RawReentrantMutex::<R, G> { owner: move _1, lock_count: move _2, mutex: move _3, get_thread_id: move _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:80:28: 85:6
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:85:5: 85:6
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:85:5: 85:6
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:85:5: 85:6
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:85:5: 85:6
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:80:5: 85:7
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:80:5: 85:7
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:77:1: 77:58>::lock_internal(_1: &RawReentrantMutex<R, G>, _2: F) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:88:43: 88:48
    debug try_lock => _2;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:88:50: 88:58
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:88:66: 88:70
    let _3: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:89:13: 89:15
    let mut _4: core::num::NonZeroUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:89:18: 89:56
    let mut _5: &G;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:89:18: 89:56
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:90:12: 90:52
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:90:12: 90:46
    let mut _8: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:90:12: 90:46
    let mut _9: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:90:28: 90:45
    let mut _10: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:90:50: 90:52
    let _11: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:91:13: 96:14
    let mut _12: &core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:91:13: 96:14
    let mut _13: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:92:17: 95:66
    let mut _14: core::option::Option<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:92:17: 94:36
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:92:17: 93:27
    let mut _16: &core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:92:17: 93:27
    let _17: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:95:29: 95:65
    let mut _18: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:98:16: 98:27
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:98:17: 98:27
    let mut _20: F;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:98:17: 98:25
    let _21: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:101:13: 101:52
    let mut _22: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:101:13: 101:52
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:101:30: 101:32
    let mut _24: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:101:34: 101:51
    let mut _25: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    let mut _26: (&usize, &usize);       // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _27: &usize;                 // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
    let _28: usize;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:102:30: 102:51
    let mut _29: &core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:102:30: 102:51
    let mut _32: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _33: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _34: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _35: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
    let _37: !;                          // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _38: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
    let _39: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:103:13: 103:35
    let mut _40: &core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:103:13: 103:35
    let mut _42: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:106:5: 106:6
    scope 1 {
        debug id => _3;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:89:13: 89:15
        let _30: &usize;                 // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        let _31: &usize;                 // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _41: &usize;             // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _30;       // in scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _31;      // in scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
            let _36: core::panicking::AssertKind; // in scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _36;       // in scope 3 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _42 = const false;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:89:13: 89:15
        _42 = const true;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:89:13: 89:15
        _5 = &((*_1).3: G);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:89:18: 89:56
        _4 = <G as GetThreadId>::nonzero_thread_id(move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:89:18: 89:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:89:37: 89:54
                                         // + literal: Const { ty: for<'a> fn(&'a G) -> NonZeroUsize {<G as GetThreadId>::nonzero_thread_id}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = NonZeroUsize::get(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:89:18: 89:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:89:57: 89:60
                                         // + literal: Const { ty: fn(NonZeroUsize) -> usize {NonZeroUsize::get}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:90:12: 90:46
        _9 = Relaxed;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:90:28: 90:45
        _7 = AtomicUsize::load(move _8, move _9) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:90:12: 90:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:90:23: 90:27
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = _3;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:90:50: 90:52
        _6 = Eq(move _7, move _10);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:90:12: 90:52
        switchInt(move _6) -> [0: bb8, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:90:12: 90:52
    }

    bb4: {
        _12 = &((*_1).1: core::cell::Cell<usize>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:91:13: 96:14
        _16 = &((*_1).1: core::cell::Cell<usize>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:92:17: 93:27
        _15 = Cell::<usize>::get(move _16) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:92:17: 93:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:93:22: 93:25
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = num::<impl usize>::checked_add(move _15, const 1_usize) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:92:17: 94:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:94:22: 94:33
                                         // + literal: Const { ty: fn(usize, usize) -> Option<usize> {num::<impl usize>::checked_add}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = const "ReentrantMutex lock count overflow"; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:95:29: 95:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:95:29: 95:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = Option::<usize>::expect(move _14, _17) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:92:17: 95:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:95:22: 95:28
                                         // + literal: Const { ty: for<'a> fn(Option<usize>, &'a str) -> usize {Option::<usize>::expect}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = Cell::<usize>::set(move _12, move _13) -> [return: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:91:13: 96:14
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:91:29: 91:32
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>, usize) {Cell::<usize>::set}, val: Value(<ZST>) }
    }

    bb8: {
        _42 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:98:17: 98:25
        _20 = move _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:98:17: 98:25
        _19 = <F as FnOnce<()>>::call_once(move _20, const ()) -> [return: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:98:17: 98:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:98:17: 98:25
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = Not(move _19);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:98:16: 98:27
        switchInt(move _18) -> [0: bb11, otherwise: bb10]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:98:16: 98:27
    }

    bb10: {
        _0 = const false;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:99:24: 99:29
        goto -> bb18;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:106:5: 106:6
    }

    bb11: {
        _22 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:101:13: 101:52
        _23 = _3;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:101:30: 101:32
        _24 = Relaxed;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:101:34: 101:51
        _21 = AtomicUsize::store(move _22, move _23, move _24) -> [return: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:101:13: 101:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:101:24: 101:29
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb12: {
        _25 = const true;                // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
        switchInt(move _25) -> [0: bb16, otherwise: bb13]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    }

    bb13: {
        _29 = &((*_1).1: core::cell::Cell<usize>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:102:30: 102:51
        _28 = Cell::<usize>::get(move _29) -> [return: bb14, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:102:30: 102:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:102:46: 102:49
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb14: {
        _27 = &_28;                      // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
        _41 = const _;                   // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(RawReentrantMutex::<R, G>::lock_internal, [R, G, F], Some(promoted[0])) }
        _26 = (move _27, _41);           // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
        _30 = (_26.0: &usize);           // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        _31 = (_26.1: &usize);           // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        _34 = (*_30);                    // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
        _35 = (*_31);                    // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
        _33 = Eq(move _34, move _35);    // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
        _32 = Not(move _33);             // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _32) -> [0: bb16, otherwise: bb15]; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _36 = core::panicking::AssertKind::Eq; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65
        _38 = Option::<Arguments<'_>>::None; // scope 3 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
        _37 = assert_failed::<usize, usize>(move _36, _30, _31, move _38) -> unwind unreachable; // scope 3 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb16: {
        _40 = &((*_1).1: core::cell::Cell<usize>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:103:13: 103:35
        _39 = Cell::<usize>::set(move _40, const 1_usize) -> [return: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:103:13: 103:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:103:29: 103:32
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>, usize) {Cell::<usize>::set}, val: Value(<ZST>) }
    }

    bb17: {
        _0 = const true;                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:105:9: 105:13
        switchInt(_42) -> [0: bb18, otherwise: bb19]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:106:5: 106:6
    }

    bb18: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:106:6: 106:6
    }

    bb19: {
        drop(_2) -> [return: bb18, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:106:5: 106:6
    }
}

promoted[0] in remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:77:1: 77:58>::lock_internal: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:102:53: 102:54

    bb0: {
        _1 = const 0_usize;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:102:53: 102:54
        _0 = &_1;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:77:1: 77:58>::lock(_1: &RawReentrantMutex<R, G>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:110:17: 110:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:110:24: 110:24
    let _2: bool;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:9: 114:11
    let mut _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:9: 114:11
    let mut _4: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:28: 111:30]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:28: 114:10
    let mut _5: &&remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:28: 114:10

    bb0: {
        _3 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:9: 114:11
        _5 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:28: 114:10
        _4 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:28: 111:30] { self: move _5 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:28: 114:10
                                         // closure
                                         // + def_id: DefId(0:250 ~ lock_api[bfd9]::remutex::{impl#2}::lock::{closure#0})
                                         // + substs: [
                                         //     R,
                                         //     G,
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> bool,
                                         //     (&&remutex::RawReentrantMutex<R, G>,),
                                         // ]
        _2 = RawReentrantMutex::<R, G>::lock_internal::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:28: 111:30]>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:9: 114:11
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:14: 111:27
                                         // + literal: Const { ty: for<'a> fn(&'a RawReentrantMutex<R, G>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:28: 111:30]) -> bool {RawReentrantMutex::<R, G>::lock_internal::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:28: 111:30]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:115:6: 115:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:77:1: 77:58>::lock::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:28: 111:30]) -> bool {
    debug self => (*(_1.0: &&remutex::RawReentrantMutex<R, G>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:110:18: 110:22
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:31: 111:31
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:112:13: 112:30
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:112:13: 112:30
    let mut _4: &&remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:28: 114:10
    let mut _5: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:111:28: 114:10

    bb0: {
        _4 = deref_copy (_1.0: &&remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:112:13: 112:30
        _5 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:112:13: 112:30
        _3 = &((*_5).2: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:112:13: 112:30
        _2 = <R as RawMutex>::lock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:112:13: 112:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:112:24: 112:28
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawMutex>::lock}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const true;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:113:13: 113:17
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:114:10: 114:10
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:77:1: 77:58>::try_lock(_1: &RawReentrantMutex<R, G>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:120:21: 120:26
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:120:31: 120:35
    let mut _2: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:9: 121:53
    let mut _3: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:28: 121:30]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:28: 121:52
    let mut _4: &&remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:28: 121:52

    bb0: {
        _2 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:9: 121:53
        _4 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:28: 121:52
        _3 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:28: 121:30] { self: move _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:28: 121:52
                                         // closure
                                         // + def_id: DefId(0:252 ~ lock_api[bfd9]::remutex::{impl#2}::try_lock::{closure#0})
                                         // + substs: [
                                         //     R,
                                         //     G,
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> bool,
                                         //     (&&remutex::RawReentrantMutex<R, G>,),
                                         // ]
        _0 = RawReentrantMutex::<R, G>::lock_internal::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:28: 121:30]>(move _2, move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:9: 121:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:14: 121:27
                                         // + literal: Const { ty: for<'a> fn(&'a RawReentrantMutex<R, G>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:28: 121:30]) -> bool {RawReentrantMutex::<R, G>::lock_internal::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:28: 121:30]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:122:6: 122:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:77:1: 77:58>::try_lock::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:28: 121:30]) -> bool {
    debug self => (*(_1.0: &&remutex::RawReentrantMutex<R, G>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:120:22: 120:26
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:31: 121:31
    let mut _2: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:31: 121:52
    let mut _3: &&remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:28: 121:52
    let mut _4: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:28: 121:52

    bb0: {
        _3 = deref_copy (_1.0: &&remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:31: 121:52
        _4 = deref_copy (*_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:31: 121:52
        _2 = &((*_4).2: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:31: 121:52
        _0 = <R as RawMutex>::try_lock(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:31: 121:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:42: 121:50
                                         // + literal: Const { ty: for<'a> fn(&'a R) -> bool {<R as RawMutex>::try_lock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:121:52: 121:52
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:77:1: 77:58>::unlock(_1: &RawReentrantMutex<R, G>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:131:26: 131:31
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:131:33: 131:33
    let _2: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:132:13: 132:23
    let mut _3: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:132:26: 132:47
    let mut _4: &core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:132:26: 132:47
    let mut _5: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:132:26: 132:51
    let _6: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:133:9: 133:40
    let mut _7: &core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:133:9: 133:40
    let _8: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:135:13: 135:51
    let mut _9: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:135:13: 135:51
    let mut _10: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:135:33: 135:50
    let _11: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:136:13: 136:32
    let mut _12: &R;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:136:13: 136:32
    scope 1 {
        debug lock_count => _2;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:132:13: 132:23
    }

    bb0: {
        _4 = &((*_1).1: core::cell::Cell<usize>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:132:26: 132:47
        _3 = Cell::<usize>::get(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:132:26: 132:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:132:42: 132:45
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = CheckedSub(_3, const 1_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:132:26: 132:51
        assert(!move (_5.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, const 1_usize) -> [success: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:132:26: 132:51
    }

    bb2: {
        _2 = move (_5.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:132:26: 132:51
        _7 = &((*_1).1: core::cell::Cell<usize>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:133:9: 133:40
        _6 = Cell::<usize>::set(move _7, _2) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:133:9: 133:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:133:25: 133:28
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>, usize) {Cell::<usize>::set}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _2) -> [0: bb4, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:134:12: 134:27
    }

    bb4: {
        _9 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:135:13: 135:51
        _10 = Relaxed;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:135:33: 135:50
        _8 = AtomicUsize::store(move _9, const 0_usize, move _10) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:135:13: 135:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:135:24: 135:29
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = &((*_1).2: R);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:136:13: 136:32
        _11 = <R as RawMutex>::unlock(move _12) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:136:13: 136:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:136:24: 136:30
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawMutex>::unlock}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:138:6: 138:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:77:1: 77:58>::is_locked(_1: &RawReentrantMutex<R, G>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:142:22: 142:27
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:142:32: 142:36
    let mut _2: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:143:9: 143:31

    bb0: {
        _2 = &((*_1).2: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:143:9: 143:31
        _0 = <R as RawMutex>::is_locked(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:143:9: 143:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:143:20: 143:29
                                         // + literal: Const { ty: for<'a> fn(&'a R) -> bool {<R as RawMutex>::is_locked}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:144:6: 144:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:77:1: 77:58>::is_owned_by_current_thread(_1: &RawReentrantMutex<R, G>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:148:39: 148:44
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:148:49: 148:53
    let _2: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:149:13: 149:15
    let mut _3: core::num::NonZeroUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:149:18: 149:56
    let mut _4: &G;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:149:18: 149:56
    let mut _5: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:150:9: 150:43
    let mut _6: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:150:9: 150:43
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:150:25: 150:42
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:150:47: 150:49
    scope 1 {
        debug id => _2;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:149:13: 149:15
    }

    bb0: {
        _4 = &((*_1).3: G);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:149:18: 149:56
        _3 = <G as GetThreadId>::nonzero_thread_id(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:149:18: 149:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:149:37: 149:54
                                         // + literal: Const { ty: for<'a> fn(&'a G) -> NonZeroUsize {<G as GetThreadId>::nonzero_thread_id}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = NonZeroUsize::get(move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:149:18: 149:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:149:57: 149:60
                                         // + literal: Const { ty: fn(NonZeroUsize) -> usize {NonZeroUsize::get}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:150:9: 150:43
        _7 = Relaxed;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:150:25: 150:42
        _5 = AtomicUsize::load(move _6, move _7) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:150:9: 150:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:150:20: 150:24
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:150:47: 150:49
        _0 = Eq(move _5, move _8);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:150:9: 150:49
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:151:6: 151:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:154:1: 154:62>::unlock_fair(_1: &RawReentrantMutex<R, G>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:163:31: 163:36
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:163:38: 163:38
    let _2: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:164:13: 164:23
    let mut _3: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:164:26: 164:47
    let mut _4: &core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:164:26: 164:47
    let mut _5: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:164:26: 164:51
    let _6: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:165:9: 165:40
    let mut _7: &core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:165:9: 165:40
    let _8: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:167:13: 167:51
    let mut _9: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:167:13: 167:51
    let mut _10: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:167:33: 167:50
    let _11: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:168:13: 168:37
    let mut _12: &R;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:168:13: 168:37
    scope 1 {
        debug lock_count => _2;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:164:13: 164:23
    }

    bb0: {
        _4 = &((*_1).1: core::cell::Cell<usize>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:164:26: 164:47
        _3 = Cell::<usize>::get(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:164:26: 164:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:164:42: 164:45
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = CheckedSub(_3, const 1_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:164:26: 164:51
        assert(!move (_5.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, const 1_usize) -> [success: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:164:26: 164:51
    }

    bb2: {
        _2 = move (_5.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:164:26: 164:51
        _7 = &((*_1).1: core::cell::Cell<usize>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:165:9: 165:40
        _6 = Cell::<usize>::set(move _7, _2) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:165:9: 165:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:165:25: 165:28
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>, usize) {Cell::<usize>::set}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _2) -> [0: bb4, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:166:12: 166:27
    }

    bb4: {
        _9 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:167:13: 167:51
        _10 = Relaxed;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:167:33: 167:50
        _8 = AtomicUsize::store(move _9, const 0_usize, move _10) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:167:13: 167:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:167:24: 167:29
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = &((*_1).2: R);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:168:13: 168:37
        _11 = <R as RawMutexFair>::unlock_fair(move _12) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:168:13: 168:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:168:24: 168:35
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawMutexFair>::unlock_fair}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:170:6: 170:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:154:1: 154:62>::bump(_1: &RawReentrantMutex<R, G>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:182:24: 182:29
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:182:31: 182:31
    let mut _2: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:183:12: 183:33
    let mut _3: &core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:183:12: 183:33
    let _4: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:184:17: 184:19
    let mut _5: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:184:22: 184:56
    let mut _6: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:184:38: 184:55
    let _7: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:185:13: 185:51
    let mut _8: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:185:13: 185:51
    let mut _9: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:185:33: 185:50
    let _10: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:186:13: 186:30
    let mut _11: &R;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:186:13: 186:30
    let _12: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:187:13: 187:52
    let mut _13: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:187:13: 187:52
    let mut _14: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:187:30: 187:32
    let mut _15: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:187:34: 187:51
    scope 1 {
        debug id => _4;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:184:17: 184:19
    }

    bb0: {
        _3 = &((*_1).1: core::cell::Cell<usize>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:183:12: 183:33
        _2 = Cell::<usize>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:183:12: 183:33
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:183:28: 183:31
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [1: bb2, otherwise: bb6]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:183:12: 183:38
    }

    bb2: {
        _5 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:184:22: 184:56
        _6 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:184:38: 184:55
        _4 = AtomicUsize::load(move _5, move _6) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:184:22: 184:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:184:33: 184:37
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:185:13: 185:51
        _9 = Relaxed;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:185:33: 185:50
        _7 = AtomicUsize::store(move _8, const 0_usize, move _9) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:185:13: 185:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:185:24: 185:29
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &((*_1).2: R);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:186:13: 186:30
        _10 = <R as RawMutexFair>::bump(move _11) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:186:13: 186:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:186:24: 186:28
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawMutexFair>::bump}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:187:13: 187:52
        _14 = _4;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:187:30: 187:32
        _15 = Relaxed;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:187:34: 187:51
        _12 = AtomicUsize::store(move _13, move _14, move _15) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:187:13: 187:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:187:24: 187:29
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:189:6: 189:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:192:1: 192:63>::try_lock_until(_1: &RawReentrantMutex<R, G>, _2: <R as RawMutexTimed>::Instant) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:195:27: 195:32
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:195:34: 195:41
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:195:58: 195:62
    let mut _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:9: 196:66
    let mut _4: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:28: 196:30]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:28: 196:65
    let mut _5: &&remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:28: 196:65

    bb0: {
        _3 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:9: 196:66
        _5 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:28: 196:65
        _4 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:28: 196:30] { self: move _5, timeout: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:28: 196:65
                                         // closure
                                         // + def_id: DefId(0:265 ~ lock_api[bfd9]::remutex::{impl#4}::try_lock_until::{closure#0})
                                         // + substs: [
                                         //     R,
                                         //     G,
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> bool,
                                         //     (&&remutex::RawReentrantMutex<R, G>, <R as mutex::RawMutexTimed>::Instant),
                                         // ]
        _0 = RawReentrantMutex::<R, G>::lock_internal::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:28: 196:30]>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:9: 196:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:14: 196:27
                                         // + literal: Const { ty: for<'a> fn(&'a RawReentrantMutex<R, G>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:28: 196:30]) -> bool {RawReentrantMutex::<R, G>::lock_internal::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:28: 196:30]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:197:6: 197:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:192:1: 192:63>::try_lock_until::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:28: 196:30]) -> bool {
    debug self => (*(_1.0: &&remutex::RawReentrantMutex<R, G>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:195:28: 195:32
    debug timeout => (_1.1: <R as mutex::RawMutexTimed>::Instant); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:195:34: 195:41
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:31: 196:31
    let mut _2: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:31: 196:65
    let mut _3: <R as mutex::RawMutexTimed>::Instant; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:57: 196:64
    let mut _4: &&remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:28: 196:65
    let mut _5: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:28: 196:65

    bb0: {
        _4 = deref_copy (_1.0: &&remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:31: 196:65
        _5 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:31: 196:65
        _2 = &((*_5).2: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:31: 196:65
        _3 = move (_1.1: <R as mutex::RawMutexTimed>::Instant); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:57: 196:64
        _0 = <R as RawMutexTimed>::try_lock_until(move _2, move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:31: 196:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:42: 196:56
                                         // + literal: Const { ty: for<'a> fn(&'a R, <R as RawMutexTimed>::Instant) -> bool {<R as RawMutexTimed>::try_lock_until}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:196:65: 196:65
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:192:1: 192:63>::try_lock_for(_1: &RawReentrantMutex<R, G>, _2: <R as RawMutexTimed>::Duration) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:201:25: 201:30
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:201:32: 201:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:201:57: 201:61
    let mut _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:9: 202:64
    let mut _4: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:28: 202:30]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:28: 202:63
    let mut _5: &&remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:28: 202:63

    bb0: {
        _3 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:9: 202:64
        _5 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:28: 202:63
        _4 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:28: 202:30] { self: move _5, timeout: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:28: 202:63
                                         // closure
                                         // + def_id: DefId(0:267 ~ lock_api[bfd9]::remutex::{impl#4}::try_lock_for::{closure#0})
                                         // + substs: [
                                         //     R,
                                         //     G,
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> bool,
                                         //     (&&remutex::RawReentrantMutex<R, G>, <R as mutex::RawMutexTimed>::Duration),
                                         // ]
        _0 = RawReentrantMutex::<R, G>::lock_internal::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:28: 202:30]>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:9: 202:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:14: 202:27
                                         // + literal: Const { ty: for<'a> fn(&'a RawReentrantMutex<R, G>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:28: 202:30]) -> bool {RawReentrantMutex::<R, G>::lock_internal::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:28: 202:30]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:203:6: 203:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:192:1: 192:63>::try_lock_for::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:28: 202:30]) -> bool {
    debug self => (*(_1.0: &&remutex::RawReentrantMutex<R, G>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:201:26: 201:30
    debug timeout => (_1.1: <R as mutex::RawMutexTimed>::Duration); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:201:32: 201:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:31: 202:31
    let mut _2: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:31: 202:63
    let mut _3: <R as mutex::RawMutexTimed>::Duration; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:55: 202:62
    let mut _4: &&remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:28: 202:63
    let mut _5: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:28: 202:63

    bb0: {
        _4 = deref_copy (_1.0: &&remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:31: 202:63
        _5 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:31: 202:63
        _2 = &((*_5).2: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:31: 202:63
        _3 = move (_1.1: <R as mutex::RawMutexTimed>::Duration); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:55: 202:62
        _0 = <R as RawMutexTimed>::try_lock_for(move _2, move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:31: 202:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:42: 202:54
                                         // + literal: Const { ty: for<'a> fn(&'a R, <R as RawMutexTimed>::Duration) -> bool {<R as RawMutexTimed>::try_lock_for}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:202:63: 202:63
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:231:1: 231:61>::new(_1: T) -> ReentrantMutex<R, G, T> {
    debug val => _1;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:235:22: 235:25
    let mut _0: remutex::ReentrantMutex<R, G, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:235:33: 235:56
    let mut _2: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:237:19: 237:39
    let mut _3: remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:238:18: 243:14
    let mut _4: core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:239:24: 239:43
    let mut _5: core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:240:29: 240:41
    let mut _6: R;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:241:24: 241:31
    let mut _7: G;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:242:32: 242:39

    bb0: {
        _2 = UnsafeCell::<T>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:237:19: 237:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:237:19: 237:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = AtomicUsize::new(const 0_usize) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:239:24: 239:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:239:24: 239:40
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Cell::<usize>::new(const 0_usize) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:240:29: 240:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:240:29: 240:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(usize) -> Cell<usize> {Cell::<usize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:241:24: 241:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:241:24: 241:31
                                         // + literal: Const { ty: R, val: Unevaluated(RawMutex::INIT, [R], None) }
        _7 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:242:32: 242:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:242:32: 242:39
                                         // + literal: Const { ty: G, val: Unevaluated(GetThreadId::INIT, [G], None) }
        _3 = RawReentrantMutex::<R, G> { owner: move _4, lock_count: move _5, mutex: move _6, get_thread_id: move _7 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:238:18: 243:14
        _0 = ReentrantMutex::<R, G, T> { raw: move _3, data: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:236:9: 244:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:245:6: 245:6
    }
}

// MIR FOR CTFE
fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:231:1: 231:61>::new(_1: T) -> ReentrantMutex<R, G, T> {
    debug val => _1;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:235:22: 235:25
    let mut _0: remutex::ReentrantMutex<R, G, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:235:33: 235:56
    let mut _2: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:237:19: 237:39
    let mut _3: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:237:35: 237:38
    let mut _4: remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:238:18: 243:14
    let mut _5: core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:239:24: 239:43
    let mut _6: core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:240:29: 240:41
    let mut _7: R;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:241:24: 241:31
    let mut _8: G;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:242:32: 242:39

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:237:19: 237:39
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:237:35: 237:38
        _3 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:237:35: 237:38
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:237:19: 237:39
        _2 = UnsafeCell::<T>::new(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:237:19: 237:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:237:19: 237:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:237:38: 237:39
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:238:18: 243:14
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:239:24: 239:43
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:239:24: 239:43
        _5 = AtomicUsize::new(const 0_usize) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:239:24: 239:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:239:24: 239:40
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb2: {
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:240:29: 240:41
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:240:29: 240:41
        _6 = Cell::<usize>::new(const 0_usize) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:240:29: 240:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:240:29: 240:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(usize) -> Cell<usize> {Cell::<usize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        StorageLive(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:241:24: 241:31
        _7 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:241:24: 241:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:241:24: 241:31
                                         // + literal: Const { ty: R, val: Unevaluated(RawMutex::INIT, [R], None) }
        StorageLive(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:242:32: 242:39
        _8 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:242:32: 242:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:242:32: 242:39
                                         // + literal: Const { ty: G, val: Unevaluated(GetThreadId::INIT, [G], None) }
        _4 = RawReentrantMutex::<R, G> { owner: move _5, lock_count: move _6, mutex: move _7, get_thread_id: move _8 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:238:18: 243:14
        StorageDead(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:243:13: 243:14
        StorageDead(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:243:13: 243:14
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:243:13: 243:14
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:243:13: 243:14
        _0 = ReentrantMutex::<R, G, T> { raw: move _4, data: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:236:9: 244:10
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:244:9: 244:10
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:244:9: 244:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:245:6: 245:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:231:1: 231:61>::into_inner(_1: ReentrantMutex<R, G, T>) -> T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:264:23: 264:27
    let mut _0: T;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:264:32: 264:33
    let mut _2: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:265:9: 265:18

    bb0: {
        _2 = move (_1.1: core::cell::UnsafeCell<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:265:9: 265:18
        _0 = UnsafeCell::<T>::into_inner(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:265:9: 265:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:265:19: 265:29
                                         // + literal: Const { ty: fn(UnsafeCell<T>) -> T {UnsafeCell::<T>::into_inner}, val: Value(<ZST>) }
    }

    bb1: {
        drop((_1.0: remutex::RawReentrantMutex<R, G>)) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:266:5: 266:6
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:266:6: 266:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:269:1: 269:38>::const_new(_1: R, _2: G, _3: T) -> ReentrantMutex<R, G, T> {
    debug raw_mutex => _1;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:276:28: 276:37
    debug get_thread_id => _2;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:276:42: 276:55
    debug val => _3;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:276:60: 276:63
    let mut _0: remutex::ReentrantMutex<R, G, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:276:71: 276:94
    let mut _4: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:278:19: 278:39
    let mut _5: remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:279:18: 284:14
    let mut _6: core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:280:24: 280:43
    let mut _7: core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:281:29: 281:41

    bb0: {
        _4 = UnsafeCell::<T>::new(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:278:19: 278:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:278:19: 278:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = AtomicUsize::new(const 0_usize) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:280:24: 280:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:280:24: 280:40
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Cell::<usize>::new(const 0_usize) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:281:29: 281:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:281:29: 281:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(usize) -> Cell<usize> {Cell::<usize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = RawReentrantMutex::<R, G> { owner: move _6, lock_count: move _7, mutex: move _1, get_thread_id: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:279:18: 284:14
        _0 = ReentrantMutex::<R, G, T> { raw: move _5, data: move _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:277:9: 285:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:286:6: 286:6
    }
}

// MIR FOR CTFE
fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:269:1: 269:38>::const_new(_1: R, _2: G, _3: T) -> ReentrantMutex<R, G, T> {
    debug raw_mutex => _1;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:276:28: 276:37
    debug get_thread_id => _2;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:276:42: 276:55
    debug val => _3;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:276:60: 276:63
    let mut _0: remutex::ReentrantMutex<R, G, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:276:71: 276:94
    let mut _4: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:278:19: 278:39
    let mut _5: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:278:35: 278:38
    let mut _6: remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:279:18: 284:14
    let mut _7: core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:280:24: 280:43
    let mut _8: core::cell::Cell<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:281:29: 281:41
    let mut _9: R;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:282:24: 282:33
    let mut _10: G;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:283:17: 283:30

    bb0: {
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:278:19: 278:39
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:278:35: 278:38
        _5 = move _3;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:278:35: 278:38
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:278:19: 278:39
        _4 = UnsafeCell::<T>::new(move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:278:19: 278:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:278:19: 278:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:278:38: 278:39
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:279:18: 284:14
        StorageLive(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:280:24: 280:43
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:280:24: 280:43
        _7 = AtomicUsize::new(const 0_usize) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:280:24: 280:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:280:24: 280:40
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb2: {
        StorageLive(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:281:29: 281:41
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:281:29: 281:41
        _8 = Cell::<usize>::new(const 0_usize) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:281:29: 281:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:281:29: 281:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(usize) -> Cell<usize> {Cell::<usize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        StorageLive(_9);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:282:24: 282:33
        _9 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:282:24: 282:33
        StorageLive(_10);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:283:17: 283:30
        _10 = move _2;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:283:17: 283:30
        _6 = RawReentrantMutex::<R, G> { owner: move _7, lock_count: move _8, mutex: move _9, get_thread_id: move _10 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:279:18: 284:14
        StorageDead(_10);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:284:13: 284:14
        StorageDead(_9);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:284:13: 284:14
        StorageDead(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:284:13: 284:14
        StorageDead(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:284:13: 284:14
        _0 = ReentrantMutex::<R, G, T> { raw: move _6, data: move _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:277:9: 285:10
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:285:9: 285:10
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:285:9: 285:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:286:6: 286:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:289:1: 289:69>::guard(_1: &ReentrantMutex<R, G, T>) -> ReentrantMutexGuard<'_, R, G, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:294:21: 294:26
    let mut _0: remutex::ReentrantMutexGuard<'_, R, G, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:294:31: 294:63
    let _2: &&remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:296:22: 296:27
    let mut _3: &remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:296:22: 296:27

    bb0: {
        _2 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:296:22: 296:27
        _3 = deref_copy (*_2);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:296:22: 296:27
        _0 = ReentrantMutexGuard::<'_, R, G, T> { remutex: _3, marker: const ZeroSized: PhantomData<(&T, GuardNoSend)> }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:295:9: 298:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<(&T, GuardNoSend)>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:299:6: 299:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:289:1: 289:69>::lock(_1: &ReentrantMutex<R, G, T>) -> ReentrantMutexGuard<'_, R, G, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:312:17: 312:22
    let mut _0: remutex::ReentrantMutexGuard<'_, R, G, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:312:27: 312:59
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:313:9: 313:24
    let mut _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:313:9: 313:24
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).0: remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:313:9: 313:24
        _2 = RawReentrantMutex::<R, G>::lock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:313:9: 313:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:313:18: 313:22
                                         // + literal: Const { ty: for<'a> fn(&'a RawReentrantMutex<R, G>) {RawReentrantMutex::<R, G>::lock}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = ReentrantMutex::<R, G, T>::guard(_1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:315:18: 315:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:315:23: 315:28
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a ReentrantMutex<R, G, T>) -> ReentrantMutexGuard<'a, R, G, T> {ReentrantMutex::<R, G, T>::guard}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:316:6: 316:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:289:1: 289:69>::try_lock(_1: &ReentrantMutex<R, G, T>) -> Option<ReentrantMutexGuard<'_, R, G, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:326:21: 326:26
    let mut _0: core::option::Option<remutex::ReentrantMutexGuard<'_, R, G, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:326:31: 326:71
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:327:12: 327:31
    let mut _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:327:12: 327:31
    let mut _4: remutex::ReentrantMutexGuard<'_, R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:329:18: 329:41
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).0: remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:327:12: 327:31
        _2 = RawReentrantMutex::<R, G>::try_lock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:327:12: 327:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:327:21: 327:29
                                         // + literal: Const { ty: for<'a> fn(&'a RawReentrantMutex<R, G>) -> bool {RawReentrantMutex::<R, G>::try_lock}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:327:12: 327:31
    }

    bb2: {
        _4 = ReentrantMutex::<R, G, T>::guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:329:27: 329:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:329:32: 329:37
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a ReentrantMutex<R, G, T>) -> ReentrantMutexGuard<'a, R, G, T> {ReentrantMutex::<R, G, T>::guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<ReentrantMutexGuard<'_, R, G, T>>::Some(move _4); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:329:13: 329:42
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:327:9: 332:10
    }

    bb4: {
        _0 = Option::<ReentrantMutexGuard<'_, R, G, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:331:13: 331:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:327:9: 332:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:333:6: 333:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:289:1: 289:69>::get_mut(_1: &mut ReentrantMutex<R, G, T>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:340:20: 340:29
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:340:34: 340:40
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:341:24: 341:39
    let mut _3: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:341:24: 341:39
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:341:24: 341:39
        _2 = UnsafeCell::<T>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:341:24: 341:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:341:34: 341:37
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &mut (*_2);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:341:18: 341:39
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:342:6: 342:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:289:1: 289:69>::is_locked(_1: &ReentrantMutex<R, G, T>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:346:22: 346:27
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:346:32: 346:36
    let mut _2: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:347:9: 347:29

    bb0: {
        _2 = &((*_1).0: remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:347:9: 347:29
        _0 = RawReentrantMutex::<R, G>::is_locked(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:347:9: 347:29
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:347:18: 347:27
                                         // + literal: Const { ty: for<'a> fn(&'a RawReentrantMutex<R, G>) -> bool {RawReentrantMutex::<R, G>::is_locked}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:348:6: 348:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:289:1: 289:69>::is_owned_by_current_thread(_1: &ReentrantMutex<R, G, T>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:352:39: 352:44
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:352:49: 352:53
    let mut _2: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:353:9: 353:46

    bb0: {
        _2 = &((*_1).0: remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:353:9: 353:46
        _0 = RawReentrantMutex::<R, G>::is_owned_by_current_thread(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:353:9: 353:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:353:18: 353:44
                                         // + literal: Const { ty: for<'a> fn(&'a RawReentrantMutex<R, G>) -> bool {RawReentrantMutex::<R, G>::is_owned_by_current_thread}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:354:6: 354:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:289:1: 289:69>::force_unlock(_1: &ReentrantMutex<R, G, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:368:32: 368:37
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:368:39: 368:39
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:369:9: 369:26
    let mut _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:369:9: 369:26

    bb0: {
        _3 = &((*_1).0: remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:369:9: 369:26
        _2 = RawReentrantMutex::<R, G>::unlock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:369:9: 369:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:369:18: 369:24
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RawReentrantMutex<R, G>) {RawReentrantMutex::<R, G>::unlock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:370:6: 370:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:289:1: 289:69>::raw(_1: &ReentrantMutex<R, G, T>) -> &R {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:382:23: 382:28
    let mut _0: &R;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:382:33: 382:35

    bb0: {
        _0 = &(((*_1).0: remutex::RawReentrantMutex<R, G>).2: R); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:383:9: 383:24
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:384:6: 384:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:289:1: 289:69>::data_ptr(_1: &ReentrantMutex<R, G, T>) -> *mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:399:21: 399:26
    let mut _0: *mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:399:31: 399:37
    let mut _2: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:400:9: 400:24

    bb0: {
        _2 = &((*_1).1: core::cell::UnsafeCell<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:400:9: 400:24
        _0 = UnsafeCell::<T>::get(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:400:9: 400:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:400:19: 400:22
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:401:6: 401:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:443:1: 443:73>::force_unlock_fair(_1: &ReentrantMutex<R, G, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:456:37: 456:42
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:456:44: 456:44
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:457:9: 457:31
    let mut _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:457:9: 457:31

    bb0: {
        _3 = &((*_1).0: remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:457:9: 457:31
        _2 = RawReentrantMutex::<R, G>::unlock_fair(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:457:9: 457:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:457:18: 457:29
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RawReentrantMutex<R, G>) {RawReentrantMutex::<R, G>::unlock_fair}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:458:6: 458:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:461:1: 461:74>::try_lock_for(_1: &ReentrantMutex<R, G, T>, _2: <R as RawMutexTimed>::Duration) -> Option<ReentrantMutexGuard<'_, R, G, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:468:25: 468:30
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:468:32: 468:39
    let mut _0: core::option::Option<remutex::ReentrantMutexGuard<'_, R, G, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:468:57: 468:97
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:469:12: 469:42
    let mut _4: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:469:12: 469:42
    let mut _5: remutex::ReentrantMutexGuard<'_, R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:471:18: 471:41
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:469:12: 469:42
        _3 = RawReentrantMutex::<R, G>::try_lock_for(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:469:12: 469:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:469:21: 469:33
                                         // + literal: Const { ty: for<'a> fn(&'a RawReentrantMutex<R, G>, <R as RawMutexTimed>::Duration) -> bool {RawReentrantMutex::<R, G>::try_lock_for}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:469:12: 469:42
    }

    bb2: {
        _5 = ReentrantMutex::<R, G, T>::guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:471:27: 471:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:471:32: 471:37
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a ReentrantMutex<R, G, T>) -> ReentrantMutexGuard<'a, R, G, T> {ReentrantMutex::<R, G, T>::guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<ReentrantMutexGuard<'_, R, G, T>>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:471:13: 471:42
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:469:9: 474:10
    }

    bb4: {
        _0 = Option::<ReentrantMutexGuard<'_, R, G, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:473:13: 473:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:469:9: 474:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:475:6: 475:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:461:1: 461:74>::try_lock_until(_1: &ReentrantMutex<R, G, T>, _2: <R as RawMutexTimed>::Instant) -> Option<ReentrantMutexGuard<'_, R, G, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:483:27: 483:32
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:483:34: 483:41
    let mut _0: core::option::Option<remutex::ReentrantMutexGuard<'_, R, G, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:483:58: 483:98
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:484:12: 484:44
    let mut _4: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:484:12: 484:44
    let mut _5: remutex::ReentrantMutexGuard<'_, R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:486:18: 486:41
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:484:12: 484:44
        _3 = RawReentrantMutex::<R, G>::try_lock_until(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:484:12: 484:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:484:21: 484:35
                                         // + literal: Const { ty: for<'a> fn(&'a RawReentrantMutex<R, G>, <R as RawMutexTimed>::Instant) -> bool {RawReentrantMutex::<R, G>::try_lock_until}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:484:12: 484:44
    }

    bb2: {
        _5 = ReentrantMutex::<R, G, T>::guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:486:27: 486:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:486:32: 486:37
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a ReentrantMutex<R, G, T>) -> ReentrantMutexGuard<'a, R, G, T> {ReentrantMutex::<R, G, T>::guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<ReentrantMutexGuard<'_, R, G, T>>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:486:13: 486:42
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:484:9: 489:10
    }

    bb4: {
        _0 = Option::<ReentrantMutexGuard<'_, R, G, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:488:13: 488:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:484:9: 489:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:490:6: 490:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:529:1: 529:91>::default() -> ReentrantMutex<R, G, T> {
    let mut _0: remutex::ReentrantMutex<R, G, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:531:21: 531:44
    let mut _1: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:532:29: 532:47

    bb0: {
        _1 = <T as Default>::default() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:532:29: 532:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:532:29: 532:45
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = ReentrantMutex::<R, G, T>::new(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:532:9: 532:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:532:9: 532:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> ReentrantMutex<R, G, T> {ReentrantMutex::<R, G, T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:533:6: 533:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:536:1: 536:73>::from(_1: T) -> ReentrantMutex<R, G, T> {
    debug t => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:538:13: 538:14
    let mut _0: remutex::ReentrantMutex<R, G, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:538:22: 538:45

    bb0: {
        _0 = ReentrantMutex::<R, G, T>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:539:9: 539:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:539:9: 539:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> ReentrantMutex<R, G, T> {ReentrantMutex::<R, G, T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:540:6: 540:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:543:1: 543:97>::fmt(_1: &ReentrantMutex<R, G, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:544:12: 544:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:544:19: 544:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:544:50: 544:61
    let mut _3: core::option::Option<remutex::ReentrantMutexGuard<'_, R, G, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:545:15: 545:30
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:546:13: 546:24
    let _5: remutex::ReentrantMutexGuard<'_, R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:546:18: 546:23
    let mut _6: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:546:28: 549:26
    let mut _7: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:546:28: 548:41
    let mut _8: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:546:28: 548:41
    let mut _9: core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:546:28: 547:48
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:547:31: 547:47
    let _11: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:24: 548:30
    let mut _12: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:32: 548:40
    let _13: &&T;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:32: 548:40
    let _14: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:33: 548:40
    let _15: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:34: 548:40
    let mut _16: &remutex::ReentrantMutexGuard<'_, R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:35: 548:40
    let mut _17: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:558:17: 560:30
    let mut _18: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:558:17: 559:55
    let mut _19: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:558:17: 559:55
    let mut _20: core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:558:17: 558:49
    let _21: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:558:32: 558:48
    let _22: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:28: 559:34
    let mut _23: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:36: 559:54
    let mut _24: &<remutex::ReentrantMutex<R, G, T> as core::fmt::Debug>::fmt::LockedPlaceholder; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:36: 559:54
    scope 1 {
        debug guard => _5;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:546:18: 546:23
    }

    bb0: {
        _3 = ReentrantMutex::<R, G, T>::try_lock(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:545:15: 545:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:545:20: 545:28
                                         // + literal: Const { ty: for<'a> fn(&'a ReentrantMutex<R, G, T>) -> Option<ReentrantMutexGuard<'a, R, G, T>> {ReentrantMutex::<R, G, T>::try_lock}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:545:15: 545:30
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:545:9: 545:30
    }

    bb2: {
        _21 = const "ReentrantMutex";    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:558:32: 558:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:558:32: 558:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = Formatter::<'_>::debug_struct(_2, _21) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:558:17: 558:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:558:19: 558:31
                                         // + literal: Const { ty: for<'b, 'a> fn(&'b mut Formatter<'_>, &'a str) -> DebugStruct<'b, '_> {Formatter::<'_>::debug_struct}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:545:15: 545:30
    }

    bb4: {
        _5 = move ((_3 as Some).0: remutex::ReentrantMutexGuard<'_, R, G, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:546:18: 546:23
        _10 = const "ReentrantMutex";    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:547:31: 547:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:547:31: 547:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = Formatter::<'_>::debug_struct(_2, _10) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:546:28: 547:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:547:18: 547:30
                                         // + literal: Const { ty: for<'b, 'a> fn(&'b mut Formatter<'_>, &'a str) -> DebugStruct<'b, '_> {Formatter::<'_>::debug_struct}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = &mut _9;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:546:28: 548:41
        _11 = const "data";              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:24: 548:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:24: 548:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = &_5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:35: 548:40
        _15 = <ReentrantMutexGuard<'_, R, G, T> as Deref>::deref(move _16) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:34: 548:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:34: 548:40
                                         // + literal: Const { ty: for<'a> fn(&'a ReentrantMutexGuard<'_, R, G, T>) -> &'a <ReentrantMutexGuard<'_, R, G, T> as Deref>::Target {<ReentrantMutexGuard<'_, R, G, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = _15;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:33: 548:40
        _13 = &_14;                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:32: 548:40
        _12 = _13 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:32: 548:40
        _7 = DebugStruct::<'_, '_>::field(move _8, _11, move _12) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:546:28: 548:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:548:18: 548:23
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb7: {
        _6 = _7;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:546:28: 549:26
        _0 = DebugStruct::<'_, '_>::finish(move _6) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:546:28: 549:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:549:18: 549:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugStruct<'_, '_>) -> Result<(), core::fmt::Error> {DebugStruct::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_5) -> [return: bb11, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:549:25: 549:26
    }

    bb9: {
        _19 = &mut _20;                  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:558:17: 559:55
        _22 = const "data";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:28: 559:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:28: 559:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:36: 559:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:36: 559:54
                                         // + literal: Const { ty: &<ReentrantMutex<R, G, T> as Debug>::fmt::LockedPlaceholder, val: Unevaluated(<ReentrantMutex<R, G, T> as Debug>::fmt, [R, G, T], Some(promoted[0])) }
        _23 = _24 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:36: 559:54
        _18 = DebugStruct::<'_, '_>::field(move _19, _22, move _23) -> [return: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:558:17: 559:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:22: 559:27
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = _18;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:558:17: 560:30
        _0 = DebugStruct::<'_, '_>::finish(move _17) -> [return: bb11, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:558:17: 560:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:560:22: 560:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugStruct<'_, '_>) -> Result<(), core::fmt::Error> {DebugStruct::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:563:6: 563:6
    }
}

promoted[0] in remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:543:1: 543:97>::fmt: &<ReentrantMutex<R, G, T> as Debug>::fmt::LockedPlaceholder = {
    let mut _0: &<remutex::ReentrantMutex<R, G, T> as core::fmt::Debug>::fmt::LockedPlaceholder; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:36: 559:54
    let mut _1: <remutex::ReentrantMutex<R, G, T> as core::fmt::Debug>::fmt::LockedPlaceholder; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:37: 559:54

    bb0: {
        _1 = <ReentrantMutex<R, G, T> as Debug>::fmt::LockedPlaceholder; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:37: 559:54
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:36: 559:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:559:36: 559:54
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:543:1: 543:97>::fmt::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:552:17: 552:54>::fmt(_1: &<ReentrantMutex<R, G, T> as Debug>::fmt::LockedPlaceholder, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:553:28: 553:33
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:553:35: 553:36
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:553:66: 553:77
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:554:37: 554:47

    bb0: {
        _3 = const "<locked>";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:554:37: 554:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:554:37: 554:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:554:25: 554:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:554:27: 554:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:555:22: 555:22
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:613:1: 613:97>::remutex(_1: &ReentrantMutexGuard<'_, R, G, T>) -> &ReentrantMutex<R, G, T> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:615:20: 615:21
    let mut _0: &remutex::ReentrantMutex<R, G, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:615:33: 615:60

    bb0: {
        _0 = ((*_1).0: &remutex::ReentrantMutex<R, G, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:616:9: 616:18
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:617:6: 617:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:613:1: 613:97>::map(_1: ReentrantMutexGuard<'_, R, G, T>, _2: F) -> MappedReentrantMutexGuard<'_, R, G, U> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:628:30: 628:31
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:628:39: 628:40
    let mut _0: remutex::MappedReentrantMutexGuard<'_, R, G, U>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:628:48: 628:86
    let _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:632:13: 632:16
    let mut _5: (&T,);                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:20: 633:56
    let _6: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:31: 633:53
    let _7: *mut T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:33: 633:53
    let mut _8: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:33: 633:53
    let _9: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:634:9: 634:23
    let mut _10: *const U;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:637:13: 637:17
    let mut _11: &remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:628:30: 628:31
    let mut _12: &remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:628:30: 628:31
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:632:13: 632:16
        let _4: &U;                      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:13: 633:17
        scope 2 {
            debug data => _4;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:13: 633:17
        }
        scope 3 {
        }
    }

    bb0: {
        _11 = deref_copy (_1.0: &remutex::ReentrantMutex<R, G, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:632:19: 632:33
        _3 = &((*_11).0: remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:632:19: 632:33
        _12 = deref_copy (_1.0: &remutex::ReentrantMutex<R, G, T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:33: 633:53
        _8 = &((*_12).1: core::cell::UnsafeCell<T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:33: 633:53
        _7 = UnsafeCell::<T>::get(move _8) -> [return: bb1, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:33: 633:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:48: 633:51
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &(*_7);                     // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:31: 633:53
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:20: 633:56
        _4 = <F as FnOnce<(&T,)>>::call_once(move _2, move _5) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:20: 633:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:633:20: 633:21
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnOnce<(&T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = core::mem::forget::<ReentrantMutexGuard<'_, R, G, T>>(move _1) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:634:9: 634:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:634:9: 634:20
                                         // + literal: Const { ty: fn(ReentrantMutexGuard<'_, R, G, T>) {core::mem::forget::<ReentrantMutexGuard<'_, R, G, T>>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &raw const (*_4);          // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:637:13: 637:17
        _0 = MappedReentrantMutexGuard::<'_, R, G, U> { raw: _3, data: move _10, marker: const ZeroSized: PhantomData<&U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:635:9: 639:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&U>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:640:6: 640:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:613:1: 613:97>::try_map(_1: ReentrantMutexGuard<'_, R, G, T>, _2: F) -> Result<MappedReentrantMutexGuard<'_, R, G, U>, ReentrantMutexGuard<'_, R, G, T>> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:653:9: 653:10
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:654:9: 654:10
    let mut _0: core::result::Result<remutex::MappedReentrantMutexGuard<'_, R, G, U>, remutex::ReentrantMutexGuard<'_, R, G, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:655:10: 655:62
    let _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:659:13: 659:16
    let mut _4: core::option::Option<&U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:26: 660:62
    let mut _5: (&T,);                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:26: 660:62
    let _6: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:37: 660:59
    let _7: *mut T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:39: 660:59
    let mut _8: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:39: 660:59
    let mut _9: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:661:13: 661:23
    let _11: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:664:9: 664:23
    let mut _12: remutex::MappedReentrantMutexGuard<'_, R, G, U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:665:12: 669:10
    let mut _13: *const U;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:667:13: 667:17
    let mut _14: &remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:653:9: 653:10
    let mut _15: &remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:653:9: 653:10
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:659:13: 659:16
        let _10: &U;                     // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:661:18: 661:22
        scope 2 {
            debug data => _10;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:13: 660:17
        }
        scope 3 {
        }
        scope 4 {
            debug data => _10;           // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:661:18: 661:22
        }
    }

    bb0: {
        _14 = deref_copy (_1.0: &remutex::ReentrantMutex<R, G, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:659:19: 659:33
        _3 = &((*_14).0: remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:659:19: 659:33
        _15 = deref_copy (_1.0: &remutex::ReentrantMutex<R, G, T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:39: 660:59
        _8 = &((*_15).1: core::cell::UnsafeCell<T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:39: 660:59
        _7 = UnsafeCell::<T>::get(move _8) -> [return: bb1, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:39: 660:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:54: 660:57
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &(*_7);                     // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:37: 660:59
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:26: 660:62
        _4 = <F as FnOnce<(&T,)>>::call_once(move _2, move _5) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:26: 660:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:26: 660:27
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnOnce<(&T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = discriminant(_4);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:26: 660:62
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:20: 660:62
    }

    bb3: {
        _0 = Result::<MappedReentrantMutexGuard<'_, R, G, U>, ReentrantMutexGuard<'_, R, G, T>>::Err(move _1); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:662:28: 662:34
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:670:5: 670:6
    }

    bb4: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:660:26: 660:62
    }

    bb5: {
        _10 = ((_4 as Some).0: &U);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:661:18: 661:22
        _11 = core::mem::forget::<ReentrantMutexGuard<'_, R, G, T>>(move _1) -> [return: bb6, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:664:9: 664:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:664:9: 664:20
                                         // + literal: Const { ty: fn(ReentrantMutexGuard<'_, R, G, T>) {core::mem::forget::<ReentrantMutexGuard<'_, R, G, T>>}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = &raw const (*_10);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:667:13: 667:17
        _12 = MappedReentrantMutexGuard::<'_, R, G, U> { raw: _3, data: move _13, marker: const ZeroSized: PhantomData<&U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:665:12: 669:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&U>, val: Value(<ZST>) }
        _0 = Result::<MappedReentrantMutexGuard<'_, R, G, U>, ReentrantMutexGuard<'_, R, G, T>>::Ok(move _12); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:665:9: 669:11
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:670:5: 670:6
    }

    bb7: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:670:6: 670:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:613:1: 613:97>::unlocked(_1: &mut ReentrantMutexGuard<'_, R, G, T>, _2: F) -> U {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:677:27: 677:28
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:677:41: 677:42
    let mut _0: U;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:677:50: 677:51
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:683:13: 683:35
    let mut _4: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:683:13: 683:35
    let _5: scopeguard::ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    let mut _6: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _7: &&mut remutex::ReentrantMutexGuard<'_, R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _8: &remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:677:27: 677:28
    scope 1 {
    }
    scope 2 {
        debug _guard => _5;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    }

    bb0: {
        _8 = deref_copy ((*_1).0: &remutex::ReentrantMutex<R, G, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:683:13: 683:35
        _4 = &((*_8).0: remutex::RawReentrantMutex<R, G>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:683:13: 683:35
        _3 = RawReentrantMutex::<R, G>::unlock(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:683:13: 683:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:683:27: 683:33
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RawReentrantMutex<R, G>) {RawReentrantMutex::<R, G>::unlock}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
        _6 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44] { s: move _7 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
                                         // closure
                                         // + def_id: DefId(0:881 ~ lock_api[bfd9]::remutex::{impl#16}::unlocked::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     R,
                                         //     G,
                                         //     T,
                                         //     F,
                                         //     U,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)),
                                         //     (&&mut remutex::ReentrantMutexGuard<'_, R, G, T>,),
                                         // ]
        _5 = guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>(const (), move _6) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:35
                                         // + literal: Const { ty: fn((), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]) -> ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]> {guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <F as FnOnce<()>>::call_once(move _2, const ()) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:686:9: 686:12
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:686:9: 686:10
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:687:5: 687:6
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:687:6: 687:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:613:1: 613:97>::unlocked::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44], _2: ()) -> () {
    debug s => (*(_1.0: &&mut remutex::ReentrantMutexGuard<'_, R, G, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:677:27: 677:28
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:45: 253:45
    let mut _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:685:16: 685:36
    let mut _4: &&mut remutex::ReentrantMutexGuard<'_, R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _5: &mut remutex::ReentrantMutexGuard<'_, R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _6: &remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55

    bb0: {
        _4 = deref_copy (_1.0: &&mut remutex::ReentrantMutexGuard<'_, R, G, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:685:16: 685:36
        _5 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:685:16: 685:36
        _6 = deref_copy ((*_5).0: &remutex::ReentrantMutex<R, G, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:685:16: 685:36
        _3 = &((*_6).0: remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:685:16: 685:36
        _0 = RawReentrantMutex::<R, G>::lock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:685:16: 685:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:685:30: 685:34
                                         // + literal: Const { ty: for<'a> fn(&'a RawReentrantMutex<R, G>) {RawReentrantMutex::<R, G>::lock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:55: 253:55
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:690:1: 691:37>::unlock_fair(_1: ReentrantMutexGuard<'_, R, G, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:706:24: 706:25
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:706:33: 706:33
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:709:13: 709:40
    let mut _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:709:13: 709:40
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:711:9: 711:23
    let mut _5: &remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:706:24: 706:25
    scope 1 {
    }

    bb0: {
        _5 = deref_copy (_1.0: &remutex::ReentrantMutex<R, G, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:709:13: 709:40
        _3 = &((*_5).0: remutex::RawReentrantMutex<R, G>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:709:13: 709:40
        _2 = RawReentrantMutex::<R, G>::unlock_fair(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:709:13: 709:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:709:27: 709:38
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RawReentrantMutex<R, G>) {RawReentrantMutex::<R, G>::unlock_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = core::mem::forget::<ReentrantMutexGuard<'_, R, G, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:711:9: 711:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:711:9: 711:20
                                         // + literal: Const { ty: fn(ReentrantMutexGuard<'_, R, G, T>) {core::mem::forget::<ReentrantMutexGuard<'_, R, G, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:712:6: 712:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:690:1: 691:37>::unlocked_fair(_1: &mut ReentrantMutexGuard<'_, R, G, T>, _2: F) -> U {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:721:32: 721:33
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:721:46: 721:47
    let mut _0: U;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:721:55: 721:56
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:727:13: 727:40
    let mut _4: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:727:13: 727:40
    let _5: scopeguard::ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    let mut _6: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _7: &&mut remutex::ReentrantMutexGuard<'_, R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _8: &remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:721:32: 721:33
    scope 1 {
    }
    scope 2 {
        debug _guard => _5;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    }

    bb0: {
        _8 = deref_copy ((*_1).0: &remutex::ReentrantMutex<R, G, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:727:13: 727:40
        _4 = &((*_8).0: remutex::RawReentrantMutex<R, G>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:727:13: 727:40
        _3 = RawReentrantMutex::<R, G>::unlock_fair(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:727:13: 727:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:727:27: 727:38
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RawReentrantMutex<R, G>) {RawReentrantMutex::<R, G>::unlock_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
        _6 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44] { s: move _7 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
                                         // closure
                                         // + def_id: DefId(0:882 ~ lock_api[bfd9]::remutex::{impl#17}::unlocked_fair::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     R,
                                         //     G,
                                         //     T,
                                         //     F,
                                         //     U,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)),
                                         //     (&&mut remutex::ReentrantMutexGuard<'_, R, G, T>,),
                                         // ]
        _5 = guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>(const (), move _6) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:35
                                         // + literal: Const { ty: fn((), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]) -> ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]> {guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <F as FnOnce<()>>::call_once(move _2, const ()) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:730:9: 730:12
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:730:9: 730:10
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:731:5: 731:6
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:731:6: 731:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:690:1: 691:37>::unlocked_fair::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44], _2: ()) -> () {
    debug s => (*(_1.0: &&mut remutex::ReentrantMutexGuard<'_, R, G, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:721:32: 721:33
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:45: 253:45
    let mut _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:729:16: 729:36
    let mut _4: &&mut remutex::ReentrantMutexGuard<'_, R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _5: &mut remutex::ReentrantMutexGuard<'_, R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _6: &remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55

    bb0: {
        _4 = deref_copy (_1.0: &&mut remutex::ReentrantMutexGuard<'_, R, G, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:729:16: 729:36
        _5 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:729:16: 729:36
        _6 = deref_copy ((*_5).0: &remutex::ReentrantMutex<R, G, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:729:16: 729:36
        _3 = &((*_6).0: remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:729:16: 729:36
        _0 = RawReentrantMutex::<R, G>::lock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:729:16: 729:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:729:30: 729:34
                                         // + literal: Const { ty: for<'a> fn(&'a RawReentrantMutex<R, G>) {RawReentrantMutex::<R, G>::lock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:55: 253:55
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:690:1: 691:37>::bump(_1: &mut ReentrantMutexGuard<'_, R, G, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:739:17: 739:18
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:739:31: 739:31
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:742:13: 742:33
    let mut _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:742:13: 742:33
    let mut _4: &remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:739:17: 739:18
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &remutex::ReentrantMutex<R, G, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:742:13: 742:33
        _3 = &((*_4).0: remutex::RawReentrantMutex<R, G>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:742:13: 742:33
        _2 = RawReentrantMutex::<R, G>::bump(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:742:13: 742:33
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:742:27: 742:31
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RawReentrantMutex<R, G>) {RawReentrantMutex::<R, G>::bump}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:744:6: 744:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:747:1: 748:41>::deref(_1: &ReentrantMutexGuard<'_, R, G, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:752:14: 752:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:752:24: 752:26
    let _2: *mut T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:753:20: 753:43
    let mut _3: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:753:20: 753:43
    let mut _4: &remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:752:14: 752:19
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &remutex::ReentrantMutex<R, G, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:753:20: 753:43
        _3 = &((*_4).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:753:20: 753:43
        _2 = UnsafeCell::<T>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:753:20: 753:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:753:38: 753:41
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_2);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:753:18: 753:43
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:754:6: 754:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:757:1: 758:41>::drop(_1: &mut ReentrantMutexGuard<'_, R, G, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:761:13: 761:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:761:24: 761:24
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:764:13: 764:38
    let mut _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:764:13: 764:38
    let mut _4: &remutex::ReentrantMutex<R, G, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:761:13: 761:22
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &remutex::ReentrantMutex<R, G, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:764:13: 764:38
        _3 = &((*_4).0: remutex::RawReentrantMutex<R, G>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:764:13: 764:38
        _2 = RawReentrantMutex::<R, G>::unlock(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:764:13: 764:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:764:30: 764:36
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RawReentrantMutex<R, G>) {RawReentrantMutex::<R, G>::unlock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:766:6: 766:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:769:1: 770:41>::fmt(_1: &ReentrantMutexGuard<'_, R, G, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:772:12: 772:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:772:19: 772:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:772:50: 772:61
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:773:25: 773:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:773:26: 773:32

    bb0: {
        _4 = <ReentrantMutexGuard<'_, R, G, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:773:26: 773:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:773:26: 773:32
                                         // + literal: Const { ty: for<'a> fn(&'a ReentrantMutexGuard<'_, R, G, T>) -> &'a <ReentrantMutexGuard<'_, R, G, T> as Deref>::Target {<ReentrantMutexGuard<'_, R, G, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:773:25: 773:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:773:9: 773:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:773:9: 773:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:774:6: 774:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:777:1: 778:41>::fmt(_1: &ReentrantMutexGuard<'_, R, G, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:780:12: 780:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:780:19: 780:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:780:50: 780:61
    let mut _3: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:781:9: 781:24
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:781:9: 781:17

    bb0: {
        _4 = <ReentrantMutexGuard<'_, R, G, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:781:9: 781:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:781:9: 781:17
                                         // + literal: Const { ty: for<'a> fn(&'a ReentrantMutexGuard<'_, R, G, T>) -> &'a <ReentrantMutexGuard<'_, R, G, T> as Deref>::Target {<ReentrantMutexGuard<'_, R, G, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:781:9: 781:24
        _0 = <T as Display>::fmt(move _3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:781:9: 781:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:781:18: 781:21
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:782:6: 782:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:912:1: 913:43>::map(_1: MappedReentrantMutexGuard<'_, R, G, T>, _2: F) -> MappedReentrantMutexGuard<'_, R, G, U> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:924:30: 924:31
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:924:39: 924:40
    let mut _0: remutex::MappedReentrantMutexGuard<'_, R, G, U>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:924:48: 924:86
    let _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:928:13: 928:16
    let mut _5: (&T,);                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:929:20: 929:42
    let _6: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:929:31: 929:39
    let _7: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:930:9: 930:23
    let mut _8: *const U;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:933:13: 933:17
    let mut _9: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:924:30: 924:31
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:928:13: 928:16
        let _4: &U;                      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:929:13: 929:17
        scope 2 {
            debug data => _4;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:929:13: 929:17
        }
        scope 3 {
        }
    }

    bb0: {
        _3 = (_1.0: &remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:928:19: 928:24
        _9 = deref_copy (_1.1: *const T); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:929:31: 929:39
        _6 = &(*_9);                     // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:929:31: 929:39
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:929:20: 929:42
        _4 = <F as FnOnce<(&T,)>>::call_once(move _2, move _5) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:929:20: 929:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:929:20: 929:21
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnOnce<(&T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = core::mem::forget::<MappedReentrantMutexGuard<'_, R, G, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:930:9: 930:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:930:9: 930:20
                                         // + literal: Const { ty: fn(MappedReentrantMutexGuard<'_, R, G, T>) {core::mem::forget::<MappedReentrantMutexGuard<'_, R, G, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &raw const (*_4);           // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:933:13: 933:17
        _0 = MappedReentrantMutexGuard::<'_, R, G, U> { raw: _3, data: move _8, marker: const ZeroSized: PhantomData<&U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:931:9: 935:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&U>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:936:6: 936:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:912:1: 913:43>::try_map(_1: MappedReentrantMutexGuard<'_, R, G, T>, _2: F) -> Result<MappedReentrantMutexGuard<'_, R, G, U>, MappedReentrantMutexGuard<'_, R, G, T>> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:949:9: 949:10
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:950:9: 950:10
    let mut _0: core::result::Result<remutex::MappedReentrantMutexGuard<'_, R, G, U>, remutex::MappedReentrantMutexGuard<'_, R, G, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:951:10: 951:62
    let _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:955:13: 955:16
    let mut _4: core::option::Option<&U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:956:26: 956:48
    let mut _5: (&T,);                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:956:26: 956:48
    let _6: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:956:37: 956:45
    let mut _7: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:957:13: 957:23
    let _9: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:960:9: 960:23
    let mut _10: remutex::MappedReentrantMutexGuard<'_, R, G, U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:961:12: 965:10
    let mut _11: *const U;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:963:13: 963:17
    let mut _12: *const T;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:949:9: 949:10
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:955:13: 955:16
        let _8: &U;                      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:957:18: 957:22
        scope 2 {
            debug data => _8;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:956:13: 956:17
        }
        scope 3 {
        }
        scope 4 {
            debug data => _8;            // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:957:18: 957:22
        }
    }

    bb0: {
        _3 = (_1.0: &remutex::RawReentrantMutex<R, G>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:955:19: 955:24
        _12 = deref_copy (_1.1: *const T); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:956:37: 956:45
        _6 = &(*_12);                    // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:956:37: 956:45
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:956:26: 956:48
        _4 = <F as FnOnce<(&T,)>>::call_once(move _2, move _5) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:956:26: 956:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:956:26: 956:27
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnOnce<(&T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_4);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:956:26: 956:48
        switchInt(move _7) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:956:20: 956:48
    }

    bb2: {
        _0 = Result::<MappedReentrantMutexGuard<'_, R, G, U>, MappedReentrantMutexGuard<'_, R, G, T>>::Err(move _1); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:958:28: 958:34
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:966:5: 966:6
    }

    bb3: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:956:26: 956:48
    }

    bb4: {
        _8 = ((_4 as Some).0: &U);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:957:18: 957:22
        _9 = core::mem::forget::<MappedReentrantMutexGuard<'_, R, G, T>>(move _1) -> [return: bb5, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:960:9: 960:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:960:9: 960:20
                                         // + literal: Const { ty: fn(MappedReentrantMutexGuard<'_, R, G, T>) {core::mem::forget::<MappedReentrantMutexGuard<'_, R, G, T>>}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = &raw const (*_8);          // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:963:13: 963:17
        _10 = MappedReentrantMutexGuard::<'_, R, G, U> { raw: _3, data: move _11, marker: const ZeroSized: PhantomData<&U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:961:12: 965:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&U>, val: Value(<ZST>) }
        _0 = Result::<MappedReentrantMutexGuard<'_, R, G, U>, MappedReentrantMutexGuard<'_, R, G, T>>::Ok(move _10); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:961:9: 965:11
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:966:5: 966:6
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:966:6: 966:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:969:1: 970:43>::unlock_fair(_1: MappedReentrantMutexGuard<'_, R, G, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:985:24: 985:25
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:985:33: 985:33
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:988:13: 988:32
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:990:9: 990:23
    let mut _4: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:985:24: 985:25
    scope 1 {
    }

    bb0: {
        _4 = deref_copy (_1.0: &remutex::RawReentrantMutex<R, G>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:988:13: 988:32
        _2 = RawReentrantMutex::<R, G>::unlock_fair(_4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:988:13: 988:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:988:19: 988:30
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RawReentrantMutex<R, G>) {RawReentrantMutex::<R, G>::unlock_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = core::mem::forget::<MappedReentrantMutexGuard<'_, R, G, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:990:9: 990:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:990:9: 990:20
                                         // + literal: Const { ty: fn(MappedReentrantMutexGuard<'_, R, G, T>) {core::mem::forget::<MappedReentrantMutexGuard<'_, R, G, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:991:6: 991:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:994:1: 995:47>::deref(_1: &MappedReentrantMutexGuard<'_, R, G, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:999:14: 999:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:999:24: 999:26
    let mut _2: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:999:14: 999:19
    scope 1 {
    }

    bb0: {
        _2 = deref_copy ((*_1).1: *const T); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1000:18: 1000:29
        _0 = &(*_2);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1000:18: 1000:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1001:6: 1001:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1004:1: 1005:47>::drop(_1: &mut MappedReentrantMutexGuard<'_, R, G, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1008:13: 1008:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1008:24: 1008:24
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1011:13: 1011:30
    let mut _3: &remutex::RawReentrantMutex<R, G>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1008:13: 1008:22
    scope 1 {
    }

    bb0: {
        _3 = deref_copy ((*_1).0: &remutex::RawReentrantMutex<R, G>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1011:13: 1011:30
        _2 = RawReentrantMutex::<R, G>::unlock(_3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1011:13: 1011:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1011:22: 1011:28
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RawReentrantMutex<R, G>) {RawReentrantMutex::<R, G>::unlock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1013:6: 1013:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1016:1: 1017:47>::fmt(_1: &MappedReentrantMutexGuard<'_, R, G, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1019:12: 1019:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1019:19: 1019:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1019:50: 1019:61
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1020:25: 1020:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1020:26: 1020:32

    bb0: {
        _4 = <MappedReentrantMutexGuard<'_, R, G, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1020:26: 1020:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1020:26: 1020:32
                                         // + literal: Const { ty: for<'a> fn(&'a MappedReentrantMutexGuard<'_, R, G, T>) -> &'a <MappedReentrantMutexGuard<'_, R, G, T> as Deref>::Target {<MappedReentrantMutexGuard<'_, R, G, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1020:25: 1020:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1020:9: 1020:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1020:9: 1020:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1021:6: 1021:6
    }
}

fn remutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1024:1: 1025:47>::fmt(_1: &MappedReentrantMutexGuard<'_, R, G, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1027:12: 1027:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1027:19: 1027:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1027:50: 1027:61
    let mut _3: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1028:9: 1028:24
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1028:9: 1028:17

    bb0: {
        _4 = <MappedReentrantMutexGuard<'_, R, G, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1028:9: 1028:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1028:9: 1028:17
                                         // + literal: Const { ty: for<'a> fn(&'a MappedReentrantMutexGuard<'_, R, G, T>) -> &'a <MappedReentrantMutexGuard<'_, R, G, T> as Deref>::Target {<MappedReentrantMutexGuard<'_, R, G, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1028:9: 1028:24
        _0 = <T as Display>::fmt(move _3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1028:9: 1028:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1028:18: 1028:21
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/remutex.rs:1029:6: 1029:6
    }
}

fn RawRwLock::is_locked(_1: &Self) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:77:18: 77:23
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:77:28: 77:32
    let _2: bool;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:78:13: 78:26
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:79:12: 79:25
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:82:17: 82:40
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:85:10: 85:23
    scope 1 {
        debug acquired_lock => _2;       // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:78:13: 78:26
        scope 2 {
        }
    }

    bb0: {
        _2 = <Self as RawRwLock>::try_lock_exclusive(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:78:29: 78:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:78:34: 78:52
                                         // + literal: Const { ty: for<'a> fn(&'a Self) -> bool {<Self as RawRwLock>::try_lock_exclusive}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:79:12: 79:25
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:79:12: 79:25
    }

    bb2: {
        _4 = <Self as RawRwLock>::unlock_exclusive(_1) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:82:17: 82:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:82:22: 82:38
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a Self) {<Self as RawRwLock>::unlock_exclusive}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:85:10: 85:23
        _0 = Not(move _5);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:85:9: 85:23
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:86:6: 86:6
    }
}

fn RawRwLock::is_locked_exclusive(_1: &Self) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:89:28: 89:33
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:89:38: 89:42
    let _2: bool;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:90:13: 90:26
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:91:12: 91:25
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:94:17: 94:37
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:97:10: 97:23
    scope 1 {
        debug acquired_lock => _2;       // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:90:13: 90:26
        scope 2 {
        }
    }

    bb0: {
        _2 = <Self as RawRwLock>::try_lock_shared(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:90:29: 90:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:90:34: 90:49
                                         // + literal: Const { ty: for<'a> fn(&'a Self) -> bool {<Self as RawRwLock>::try_lock_shared}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:91:12: 91:25
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:91:12: 91:25
    }

    bb2: {
        _4 = <Self as RawRwLock>::unlock_shared(_1) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:94:17: 94:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:94:22: 94:35
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a Self) {<Self as RawRwLock>::unlock_shared}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:97:10: 97:23
        _0 = Not(move _5);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:97:9: 97:23
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:98:6: 98:6
    }
}

fn RawRwLockFair::bump_shared(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:131:27: 131:32
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:131:34: 131:34
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:132:9: 132:34
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:133:9: 133:27

    bb0: {
        _2 = <Self as RawRwLockFair>::unlock_shared_fair(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:132:9: 132:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:132:14: 132:32
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a Self) {<Self as RawRwLockFair>::unlock_shared_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Self as RawRwLock>::lock_shared(_1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:133:9: 133:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:133:14: 133:25
                                         // + literal: Const { ty: for<'a> fn(&'a Self) {<Self as RawRwLock>::lock_shared}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:134:6: 134:6
    }
}

fn RawRwLockFair::bump_exclusive(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:145:30: 145:35
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:145:37: 145:37
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:146:9: 146:37
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:147:9: 147:30

    bb0: {
        _2 = <Self as RawRwLockFair>::unlock_exclusive_fair(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:146:9: 146:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:146:14: 146:35
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a Self) {<Self as RawRwLockFair>::unlock_exclusive_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Self as RawRwLock>::lock_exclusive(_1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:147:9: 147:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:147:14: 147:28
                                         // + literal: Const { ty: for<'a> fn(&'a Self) {<Self as RawRwLock>::lock_exclusive}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:148:6: 148:6
    }
}

fn RawRwLockUpgradeFair::bump_upgradable(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:268:31: 268:36
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:268:38: 268:38
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:269:9: 269:38
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:270:9: 270:31

    bb0: {
        _2 = <Self as RawRwLockUpgradeFair>::unlock_upgradable_fair(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:269:9: 269:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:269:14: 269:36
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a Self) {<Self as RawRwLockUpgradeFair>::unlock_upgradable_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Self as RawRwLockUpgrade>::lock_upgradable(_1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:270:9: 270:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:270:14: 270:29
                                         // + literal: Const { ty: for<'a> fn(&'a Self) {<Self as RawRwLockUpgrade>::lock_upgradable}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:271:6: 271:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:367:1: 367:35>::new(_1: T) -> RwLock<R, T> {
    debug val => _1;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:371:22: 371:25
    let mut _0: rwlock::RwLock<R, T>;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:371:33: 371:45
    let mut _2: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:373:19: 373:39
    let mut _3: R;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:374:18: 374:25

    bb0: {
        _2 = UnsafeCell::<T>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:373:19: 373:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:373:19: 373:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:374:18: 374:25
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:374:18: 374:25
                                         // + literal: Const { ty: R, val: Unevaluated(RawRwLock::INIT, [R], None) }
        _0 = RwLock::<R, T> { raw: move _3, data: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:372:9: 375:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:376:6: 376:6
    }
}

// MIR FOR CTFE
fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:367:1: 367:35>::new(_1: T) -> RwLock<R, T> {
    debug val => _1;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:371:22: 371:25
    let mut _0: rwlock::RwLock<R, T>;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:371:33: 371:45
    let mut _2: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:373:19: 373:39
    let mut _3: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:373:35: 373:38
    let mut _4: R;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:374:18: 374:25

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:373:19: 373:39
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:373:35: 373:38
        _3 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:373:35: 373:38
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:373:19: 373:39
        _2 = UnsafeCell::<T>::new(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:373:19: 373:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:373:19: 373:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:373:38: 373:39
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:374:18: 374:25
        _4 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:374:18: 374:25
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:374:18: 374:25
                                         // + literal: Const { ty: R, val: Unevaluated(RawRwLock::INIT, [R], None) }
        _0 = RwLock::<R, T> { raw: move _4, data: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:372:9: 375:10
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:375:9: 375:10
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:375:9: 375:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:376:6: 376:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:367:1: 367:35>::into_inner(_1: RwLock<R, T>) -> T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:391:23: 391:27
    let mut _0: T;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:391:32: 391:33
    let mut _2: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:392:18: 392:27
    scope 1 {
    }

    bb0: {
        _2 = move (_1.1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:392:18: 392:27
        _0 = UnsafeCell::<T>::into_inner(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:392:18: 392:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:392:28: 392:38
                                         // + literal: Const { ty: fn(UnsafeCell<T>) -> T {UnsafeCell::<T>::into_inner}, val: Value(<ZST>) }
    }

    bb1: {
        drop((_1.0: R)) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:393:5: 393:6
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:393:6: 393:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:396:1: 396:24>::const_new(_1: R, _2: T) -> RwLock<R, T> {
    debug raw_rwlock => _1;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:403:28: 403:38
    debug val => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:403:43: 403:46
    let mut _0: rwlock::RwLock<R, T>;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:403:54: 403:66
    let mut _3: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:405:19: 405:39

    bb0: {
        _3 = UnsafeCell::<T>::new(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:405:19: 405:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:405:19: 405:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = RwLock::<R, T> { raw: move _1, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:404:9: 407:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:408:6: 408:6
    }
}

// MIR FOR CTFE
fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:396:1: 396:24>::const_new(_1: R, _2: T) -> RwLock<R, T> {
    debug raw_rwlock => _1;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:403:28: 403:38
    debug val => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:403:43: 403:46
    let mut _0: rwlock::RwLock<R, T>;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:403:54: 403:66
    let mut _3: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:405:19: 405:39
    let mut _4: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:405:35: 405:38
    let mut _5: R;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:406:18: 406:28

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:405:19: 405:39
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:405:35: 405:38
        _4 = move _2;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:405:35: 405:38
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:405:19: 405:39
        _3 = UnsafeCell::<T>::new(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:405:19: 405:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:405:19: 405:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:405:38: 405:39
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:406:18: 406:28
        _5 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:406:18: 406:28
        _0 = RwLock::<R, T> { raw: move _5, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:404:9: 407:10
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:407:9: 407:10
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:407:9: 407:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:408:6: 408:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:411:1: 411:43>::read_guard(_1: &RwLock<R, T>) -> RwLockReadGuard<'_, R, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:416:26: 416:31
    let mut _0: rwlock::RwLockReadGuard<'_, R, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:416:36: 416:61

    bb0: {
        _0 = RwLockReadGuard::<'_, R, T> { rwlock: _1, marker: const ZeroSized: PhantomData<(&T, <R as RawRwLock>::GuardMarker)> }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:417:9: 420:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<(&T, <R as RawRwLock>::GuardMarker)>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:421:6: 421:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:411:1: 411:43>::write_guard(_1: &RwLock<R, T>) -> RwLockWriteGuard<'_, R, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:427:27: 427:32
    let mut _0: rwlock::RwLockWriteGuard<'_, R, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:427:37: 427:63

    bb0: {
        _0 = RwLockWriteGuard::<'_, R, T> { rwlock: _1, marker: const ZeroSized: PhantomData<(&mut T, <R as RawRwLock>::GuardMarker)> }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:428:9: 431:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<(&mut T, <R as RawRwLock>::GuardMarker)>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:432:6: 432:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:411:1: 411:43>::read(_1: &RwLock<R, T>) -> RwLockReadGuard<'_, R, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:447:17: 447:22
    let mut _0: rwlock::RwLockReadGuard<'_, R, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:447:27: 447:52
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:448:9: 448:31
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:448:9: 448:31
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:448:9: 448:31
        _2 = <R as RawRwLock>::lock_shared(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:448:9: 448:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:448:18: 448:29
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawRwLock>::lock_shared}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = RwLock::<R, T>::read_guard(_1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:450:18: 450:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:450:23: 450:33
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockReadGuard<'a, R, T> {RwLock::<R, T>::read_guard}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:451:6: 451:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:411:1: 411:43>::try_read(_1: &RwLock<R, T>) -> Option<RwLockReadGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:461:21: 461:26
    let mut _0: core::option::Option<rwlock::RwLockReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:461:31: 461:64
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:462:12: 462:38
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:462:12: 462:38
    let mut _4: rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:464:18: 464:46
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:462:12: 462:38
        _2 = <R as RawRwLock>::try_lock_shared(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:462:12: 462:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:462:21: 462:36
                                         // + literal: Const { ty: for<'a> fn(&'a R) -> bool {<R as RawRwLock>::try_lock_shared}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:462:12: 462:38
    }

    bb2: {
        _4 = RwLock::<R, T>::read_guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:464:27: 464:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:464:32: 464:42
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockReadGuard<'a, R, T> {RwLock::<R, T>::read_guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<RwLockReadGuard<'_, R, T>>::Some(move _4); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:464:13: 464:47
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:462:9: 467:10
    }

    bb4: {
        _0 = Option::<RwLockReadGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:466:13: 466:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:462:9: 467:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:468:6: 468:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:411:1: 411:43>::write(_1: &RwLock<R, T>) -> RwLockWriteGuard<'_, R, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:479:18: 479:23
    let mut _0: rwlock::RwLockWriteGuard<'_, R, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:479:28: 479:54
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:480:9: 480:34
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:480:9: 480:34
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:480:9: 480:34
        _2 = <R as RawRwLock>::lock_exclusive(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:480:9: 480:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:480:18: 480:32
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawRwLock>::lock_exclusive}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = RwLock::<R, T>::write_guard(_1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:482:18: 482:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:482:23: 482:34
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockWriteGuard<'a, R, T> {RwLock::<R, T>::write_guard}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:483:6: 483:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:411:1: 411:43>::try_write(_1: &RwLock<R, T>) -> Option<RwLockWriteGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:493:22: 493:27
    let mut _0: core::option::Option<rwlock::RwLockWriteGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:493:32: 493:66
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:494:12: 494:41
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:494:12: 494:41
    let mut _4: rwlock::RwLockWriteGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:496:18: 496:47
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:494:12: 494:41
        _2 = <R as RawRwLock>::try_lock_exclusive(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:494:12: 494:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:494:21: 494:39
                                         // + literal: Const { ty: for<'a> fn(&'a R) -> bool {<R as RawRwLock>::try_lock_exclusive}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:494:12: 494:41
    }

    bb2: {
        _4 = RwLock::<R, T>::write_guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:496:27: 496:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:496:32: 496:43
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockWriteGuard<'a, R, T> {RwLock::<R, T>::write_guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<RwLockWriteGuard<'_, R, T>>::Some(move _4); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:496:13: 496:48
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:494:9: 499:10
    }

    bb4: {
        _0 = Option::<RwLockWriteGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:498:13: 498:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:494:9: 499:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:500:6: 500:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:411:1: 411:43>::get_mut(_1: &mut RwLock<R, T>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:507:20: 507:29
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:507:34: 507:40
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:508:24: 508:39
    let mut _3: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:508:24: 508:39
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:508:24: 508:39
        _2 = UnsafeCell::<T>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:508:24: 508:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:508:34: 508:37
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &mut (*_2);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:508:18: 508:39
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:509:6: 509:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:411:1: 411:43>::is_locked(_1: &RwLock<R, T>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:513:22: 513:27
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:513:32: 513:36
    let mut _2: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:514:9: 514:29

    bb0: {
        _2 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:514:9: 514:29
        _0 = <R as RawRwLock>::is_locked(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:514:9: 514:29
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:514:18: 514:27
                                         // + literal: Const { ty: for<'a> fn(&'a R) -> bool {<R as RawRwLock>::is_locked}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:515:6: 515:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:411:1: 411:43>::is_locked_exclusive(_1: &RwLock<R, T>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:519:32: 519:37
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:519:42: 519:46
    let mut _2: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:520:9: 520:39

    bb0: {
        _2 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:520:9: 520:39
        _0 = <R as RawRwLock>::is_locked_exclusive(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:520:9: 520:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:520:18: 520:37
                                         // + literal: Const { ty: for<'a> fn(&'a R) -> bool {<R as RawRwLock>::is_locked_exclusive}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:521:6: 521:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:411:1: 411:43>::force_unlock_read(_1: &RwLock<R, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:535:37: 535:42
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:535:44: 535:44
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:536:9: 536:33
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:536:9: 536:33

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:536:9: 536:33
        _2 = <R as RawRwLock>::unlock_shared(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:536:9: 536:33
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:536:18: 536:31
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLock>::unlock_shared}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:537:6: 537:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:411:1: 411:43>::force_unlock_write(_1: &RwLock<R, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:551:38: 551:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:551:45: 551:45
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:552:9: 552:36
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:552:9: 552:36

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:552:9: 552:36
        _2 = <R as RawRwLock>::unlock_exclusive(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:552:9: 552:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:552:18: 552:34
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLock>::unlock_exclusive}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:553:6: 553:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:411:1: 411:43>::raw(_1: &RwLock<R, T>) -> &R {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:565:23: 565:28
    let mut _0: &R;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:565:33: 565:35

    bb0: {
        _0 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:566:9: 566:18
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:567:6: 567:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:411:1: 411:43>::data_ptr(_1: &RwLock<R, T>) -> *mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:582:21: 582:26
    let mut _0: *mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:582:31: 582:37
    let mut _2: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:583:9: 583:24

    bb0: {
        _2 = &((*_1).1: core::cell::UnsafeCell<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:583:9: 583:24
        _0 = UnsafeCell::<T>::get(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:583:9: 583:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:583:19: 583:22
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:584:6: 584:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:665:1: 665:47>::force_unlock_read_fair(_1: &RwLock<R, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:678:42: 678:47
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:678:49: 678:49
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:679:9: 679:38
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:679:9: 679:38

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:679:9: 679:38
        _2 = <R as RawRwLockFair>::unlock_shared_fair(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:679:9: 679:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:679:18: 679:36
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockFair>::unlock_shared_fair}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:680:6: 680:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:665:1: 665:47>::force_unlock_write_fair(_1: &RwLock<R, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:694:43: 694:48
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:694:50: 694:50
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:695:9: 695:41
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:695:9: 695:41

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:695:9: 695:41
        _2 = <R as RawRwLockFair>::unlock_exclusive_fair(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:695:9: 695:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:695:18: 695:39
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockFair>::unlock_exclusive_fair}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:696:6: 696:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:699:1: 699:48>::try_read_for(_1: &RwLock<R, T>, _2: <R as RawRwLockTimed>::Duration) -> Option<RwLockReadGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:707:25: 707:30
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:707:32: 707:39
    let mut _0: core::option::Option<rwlock::RwLockReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:707:57: 707:90
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:708:12: 708:49
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:708:12: 708:49
    let mut _5: rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:710:18: 710:46
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:708:12: 708:49
        _3 = <R as RawRwLockTimed>::try_lock_shared_for(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:708:12: 708:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:708:21: 708:40
                                         // + literal: Const { ty: for<'a> fn(&'a R, <R as RawRwLockTimed>::Duration) -> bool {<R as RawRwLockTimed>::try_lock_shared_for}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:708:12: 708:49
    }

    bb2: {
        _5 = RwLock::<R, T>::read_guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:710:27: 710:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:710:32: 710:42
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockReadGuard<'a, R, T> {RwLock::<R, T>::read_guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<RwLockReadGuard<'_, R, T>>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:710:13: 710:47
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:708:9: 713:10
    }

    bb4: {
        _0 = Option::<RwLockReadGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:712:13: 712:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:708:9: 713:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:714:6: 714:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:699:1: 699:48>::try_read_until(_1: &RwLock<R, T>, _2: <R as RawRwLockTimed>::Instant) -> Option<RwLockReadGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:723:27: 723:32
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:723:34: 723:41
    let mut _0: core::option::Option<rwlock::RwLockReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:723:58: 723:91
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:724:12: 724:51
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:724:12: 724:51
    let mut _5: rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:726:18: 726:46
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:724:12: 724:51
        _3 = <R as RawRwLockTimed>::try_lock_shared_until(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:724:12: 724:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:724:21: 724:42
                                         // + literal: Const { ty: for<'a> fn(&'a R, <R as RawRwLockTimed>::Instant) -> bool {<R as RawRwLockTimed>::try_lock_shared_until}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:724:12: 724:51
    }

    bb2: {
        _5 = RwLock::<R, T>::read_guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:726:27: 726:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:726:32: 726:42
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockReadGuard<'a, R, T> {RwLock::<R, T>::read_guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<RwLockReadGuard<'_, R, T>>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:726:13: 726:47
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:724:9: 729:10
    }

    bb4: {
        _0 = Option::<RwLockReadGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:728:13: 728:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:724:9: 729:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:730:6: 730:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:699:1: 699:48>::try_write_for(_1: &RwLock<R, T>, _2: <R as RawRwLockTimed>::Duration) -> Option<RwLockWriteGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:739:26: 739:31
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:739:33: 739:40
    let mut _0: core::option::Option<rwlock::RwLockWriteGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:739:58: 739:92
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:740:12: 740:52
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:740:12: 740:52
    let mut _5: rwlock::RwLockWriteGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:742:18: 742:47
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:740:12: 740:52
        _3 = <R as RawRwLockTimed>::try_lock_exclusive_for(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:740:12: 740:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:740:21: 740:43
                                         // + literal: Const { ty: for<'a> fn(&'a R, <R as RawRwLockTimed>::Duration) -> bool {<R as RawRwLockTimed>::try_lock_exclusive_for}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:740:12: 740:52
    }

    bb2: {
        _5 = RwLock::<R, T>::write_guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:742:27: 742:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:742:32: 742:43
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockWriteGuard<'a, R, T> {RwLock::<R, T>::write_guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<RwLockWriteGuard<'_, R, T>>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:742:13: 742:48
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:740:9: 745:10
    }

    bb4: {
        _0 = Option::<RwLockWriteGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:744:13: 744:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:740:9: 745:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:746:6: 746:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:699:1: 699:48>::try_write_until(_1: &RwLock<R, T>, _2: <R as RawRwLockTimed>::Instant) -> Option<RwLockWriteGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:755:28: 755:33
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:755:35: 755:42
    let mut _0: core::option::Option<rwlock::RwLockWriteGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:755:59: 755:93
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:756:12: 756:54
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:756:12: 756:54
    let mut _5: rwlock::RwLockWriteGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:758:18: 758:47
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:756:12: 756:54
        _3 = <R as RawRwLockTimed>::try_lock_exclusive_until(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:756:12: 756:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:756:21: 756:45
                                         // + literal: Const { ty: for<'a> fn(&'a R, <R as RawRwLockTimed>::Instant) -> bool {<R as RawRwLockTimed>::try_lock_exclusive_until}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:756:12: 756:54
    }

    bb2: {
        _5 = RwLock::<R, T>::write_guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:758:27: 758:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:758:32: 758:43
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockWriteGuard<'a, R, T> {RwLock::<R, T>::write_guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<RwLockWriteGuard<'_, R, T>>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:758:13: 758:48
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:756:9: 761:10
    }

    bb4: {
        _0 = Option::<RwLockWriteGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:760:13: 760:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:756:9: 761:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:762:6: 762:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:837:1: 837:52>::read_recursive(_1: &RwLock<R, T>) -> RwLockReadGuard<'_, R, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:854:27: 854:32
    let mut _0: rwlock::RwLockReadGuard<'_, R, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:854:37: 854:62
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:855:9: 855:41
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:855:9: 855:41
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:855:9: 855:41
        _2 = <R as RawRwLockRecursive>::lock_shared_recursive(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:855:9: 855:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:855:18: 855:39
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawRwLockRecursive>::lock_shared_recursive}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = RwLock::<R, T>::read_guard(_1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:857:18: 857:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:857:23: 857:33
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockReadGuard<'a, R, T> {RwLock::<R, T>::read_guard}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:858:6: 858:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:837:1: 837:52>::try_read_recursive(_1: &RwLock<R, T>) -> Option<RwLockReadGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:871:31: 871:36
    let mut _0: core::option::Option<rwlock::RwLockReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:871:41: 871:74
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:872:12: 872:48
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:872:12: 872:48
    let mut _4: rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:874:18: 874:46
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:872:12: 872:48
        _2 = <R as RawRwLockRecursive>::try_lock_shared_recursive(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:872:12: 872:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:872:21: 872:46
                                         // + literal: Const { ty: for<'a> fn(&'a R) -> bool {<R as RawRwLockRecursive>::try_lock_shared_recursive}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:872:12: 872:48
    }

    bb2: {
        _4 = RwLock::<R, T>::read_guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:874:27: 874:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:874:32: 874:42
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockReadGuard<'a, R, T> {RwLock::<R, T>::read_guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<RwLockReadGuard<'_, R, T>>::Some(move _4); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:874:13: 874:47
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:872:9: 877:10
    }

    bb4: {
        _0 = Option::<RwLockReadGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:876:13: 876:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:872:9: 877:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:878:6: 878:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:908:1: 908:57>::try_read_recursive_for(_1: &RwLock<R, T>, _2: <R as RawRwLockTimed>::Duration) -> Option<RwLockReadGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:921:9: 921:14
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:922:9: 922:16
    let mut _0: core::option::Option<rwlock::RwLockReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:923:10: 923:43
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:924:12: 924:59
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:924:12: 924:59
    let mut _5: rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:926:18: 926:46
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:924:12: 924:59
        _3 = <R as RawRwLockRecursiveTimed>::try_lock_shared_recursive_for(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:924:12: 924:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:924:21: 924:50
                                         // + literal: Const { ty: for<'a> fn(&'a R, <R as RawRwLockTimed>::Duration) -> bool {<R as RawRwLockRecursiveTimed>::try_lock_shared_recursive_for}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:924:12: 924:59
    }

    bb2: {
        _5 = RwLock::<R, T>::read_guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:926:27: 926:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:926:32: 926:42
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockReadGuard<'a, R, T> {RwLock::<R, T>::read_guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<RwLockReadGuard<'_, R, T>>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:926:13: 926:47
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:924:9: 929:10
    }

    bb4: {
        _0 = Option::<RwLockReadGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:928:13: 928:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:924:9: 929:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:930:6: 930:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:908:1: 908:57>::try_read_recursive_until(_1: &RwLock<R, T>, _2: <R as RawRwLockTimed>::Instant) -> Option<RwLockReadGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:940:9: 940:14
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:941:9: 941:16
    let mut _0: core::option::Option<rwlock::RwLockReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:942:10: 942:43
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:943:12: 943:61
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:943:12: 943:61
    let mut _5: rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:945:18: 945:46
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:943:12: 943:61
        _3 = <R as RawRwLockRecursiveTimed>::try_lock_shared_recursive_until(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:943:12: 943:61
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:943:21: 943:52
                                         // + literal: Const { ty: for<'a> fn(&'a R, <R as RawRwLockTimed>::Instant) -> bool {<R as RawRwLockRecursiveTimed>::try_lock_shared_recursive_until}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:943:12: 943:61
    }

    bb2: {
        _5 = RwLock::<R, T>::read_guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:945:27: 945:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:945:32: 945:42
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockReadGuard<'a, R, T> {RwLock::<R, T>::read_guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<RwLockReadGuard<'_, R, T>>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:945:13: 945:47
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:943:9: 948:10
    }

    bb4: {
        _0 = Option::<RwLockReadGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:947:13: 947:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:943:9: 948:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:949:6: 949:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:988:1: 988:50>::upgradable_guard(_1: &RwLock<R, T>) -> RwLockUpgradableReadGuard<'_, R, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:993:32: 993:37
    let mut _0: rwlock::RwLockUpgradableReadGuard<'_, R, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:993:42: 993:77

    bb0: {
        _0 = RwLockUpgradableReadGuard::<'_, R, T> { rwlock: _1, marker: const ZeroSized: PhantomData<(&T, <R as RawRwLock>::GuardMarker)> }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:994:9: 997:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<(&T, <R as RawRwLock>::GuardMarker)>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:998:6: 998:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:988:1: 988:50>::upgradable_read(_1: &RwLock<R, T>) -> RwLockUpgradableReadGuard<'_, R, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1010:28: 1010:33
    let mut _0: rwlock::RwLockUpgradableReadGuard<'_, R, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1010:38: 1010:73
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1011:9: 1011:35
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1011:9: 1011:35
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1011:9: 1011:35
        _2 = <R as RawRwLockUpgrade>::lock_upgradable(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1011:9: 1011:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1011:18: 1011:33
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawRwLockUpgrade>::lock_upgradable}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = RwLock::<R, T>::upgradable_guard(_1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1013:18: 1013:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1013:23: 1013:39
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockUpgradableReadGuard<'a, R, T> {RwLock::<R, T>::upgradable_guard}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1014:6: 1014:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:988:1: 988:50>::try_upgradable_read(_1: &RwLock<R, T>) -> Option<RwLockUpgradableReadGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1024:32: 1024:37
    let mut _0: core::option::Option<rwlock::RwLockUpgradableReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1024:42: 1024:85
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1025:12: 1025:42
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1025:12: 1025:42
    let mut _4: rwlock::RwLockUpgradableReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1027:18: 1027:52
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1025:12: 1025:42
        _2 = <R as RawRwLockUpgrade>::try_lock_upgradable(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1025:12: 1025:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1025:21: 1025:40
                                         // + literal: Const { ty: for<'a> fn(&'a R) -> bool {<R as RawRwLockUpgrade>::try_lock_upgradable}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1025:12: 1025:42
    }

    bb2: {
        _4 = RwLock::<R, T>::upgradable_guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1027:27: 1027:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1027:32: 1027:48
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockUpgradableReadGuard<'a, R, T> {RwLock::<R, T>::upgradable_guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<RwLockUpgradableReadGuard<'_, R, T>>::Some(move _4); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1027:13: 1027:53
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1025:9: 1030:10
    }

    bb4: {
        _0 = Option::<RwLockUpgradableReadGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1029:13: 1029:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1025:9: 1030:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1031:6: 1031:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1073:1: 1073:55>::try_upgradable_read_for(_1: &RwLock<R, T>, _2: <R as RawRwLockTimed>::Duration) -> Option<RwLockUpgradableReadGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1082:9: 1082:14
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1083:9: 1083:16
    let mut _0: core::option::Option<rwlock::RwLockUpgradableReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1084:10: 1084:53
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1085:12: 1085:53
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1085:12: 1085:53
    let mut _5: rwlock::RwLockUpgradableReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1087:18: 1087:52
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1085:12: 1085:53
        _3 = <R as RawRwLockUpgradeTimed>::try_lock_upgradable_for(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1085:12: 1085:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1085:21: 1085:44
                                         // + literal: Const { ty: for<'a> fn(&'a R, <R as RawRwLockTimed>::Duration) -> bool {<R as RawRwLockUpgradeTimed>::try_lock_upgradable_for}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1085:12: 1085:53
    }

    bb2: {
        _5 = RwLock::<R, T>::upgradable_guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1087:27: 1087:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1087:32: 1087:48
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockUpgradableReadGuard<'a, R, T> {RwLock::<R, T>::upgradable_guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<RwLockUpgradableReadGuard<'_, R, T>>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1087:13: 1087:53
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1085:9: 1090:10
    }

    bb4: {
        _0 = Option::<RwLockUpgradableReadGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1089:13: 1089:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1085:9: 1090:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1091:6: 1091:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1073:1: 1073:55>::try_upgradable_read_until(_1: &RwLock<R, T>, _2: <R as RawRwLockTimed>::Instant) -> Option<RwLockUpgradableReadGuard<'_, R, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1101:9: 1101:14
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1102:9: 1102:16
    let mut _0: core::option::Option<rwlock::RwLockUpgradableReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1103:10: 1103:53
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1104:12: 1104:55
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1104:12: 1104:55
    let mut _5: rwlock::RwLockUpgradableReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1106:18: 1106:52
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1104:12: 1104:55
        _3 = <R as RawRwLockUpgradeTimed>::try_lock_upgradable_until(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1104:12: 1104:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1104:21: 1104:46
                                         // + literal: Const { ty: for<'a> fn(&'a R, <R as RawRwLockTimed>::Instant) -> bool {<R as RawRwLockUpgradeTimed>::try_lock_upgradable_until}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1104:12: 1104:55
    }

    bb2: {
        _5 = RwLock::<R, T>::upgradable_guard(_1) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1106:27: 1106:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1106:32: 1106:48
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a RwLock<R, T>) -> RwLockUpgradableReadGuard<'a, R, T> {RwLock::<R, T>::upgradable_guard}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<RwLockUpgradableReadGuard<'_, R, T>>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1106:13: 1106:53
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1104:9: 1109:10
    }

    bb4: {
        _0 = Option::<RwLockUpgradableReadGuard<'_, R, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1108:13: 1108:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1104:9: 1109:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1110:6: 1110:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1149:1: 1149:65>::default() -> RwLock<R, T> {
    let mut _0: rwlock::RwLock<R, T>;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1151:21: 1151:33
    let mut _1: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1152:21: 1152:39

    bb0: {
        _1 = <T as Default>::default() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1152:21: 1152:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1152:21: 1152:37
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = RwLock::<R, T>::new(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1152:9: 1152:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1152:9: 1152:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> RwLock<R, T> {RwLock::<R, T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1153:6: 1153:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1156:1: 1156:47>::from(_1: T) -> RwLock<R, T> {
    debug t => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1158:13: 1158:14
    let mut _0: rwlock::RwLock<R, T>;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1158:22: 1158:34

    bb0: {
        _0 = RwLock::<R, T>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1159:9: 1159:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1159:9: 1159:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> RwLock<R, T> {RwLock::<R, T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1160:6: 1160:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1163:1: 1163:71>::fmt(_1: &RwLock<R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1164:12: 1164:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1164:19: 1164:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1164:50: 1164:61
    let mut _3: core::option::Option<rwlock::RwLockReadGuard<'_, R, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1165:15: 1165:30
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:13: 1166:24
    let _5: rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:18: 1166:23
    let mut _6: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:28: 1166:85
    let mut _7: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:28: 1166:76
    let mut _8: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:28: 1166:76
    let mut _9: core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:28: 1166:52
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:43: 1166:51
    let _11: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:59: 1166:65
    let mut _12: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:67: 1166:75
    let _13: &&T;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:67: 1166:75
    let _14: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:68: 1166:75
    let _15: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:69: 1166:75
    let mut _16: &rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:70: 1166:75
    let mut _17: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1175:17: 1177:30
    let mut _18: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1175:17: 1176:55
    let mut _19: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1175:17: 1176:55
    let mut _20: core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1175:17: 1175:41
    let _21: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1175:32: 1175:40
    let _22: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:28: 1176:34
    let mut _23: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:36: 1176:54
    let mut _24: &<rwlock::RwLock<R, T> as core::fmt::Debug>::fmt::LockedPlaceholder; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:36: 1176:54
    scope 1 {
        debug guard => _5;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:18: 1166:23
    }

    bb0: {
        _3 = RwLock::<R, T>::try_read(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1165:15: 1165:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1165:20: 1165:28
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<R, T>) -> Option<RwLockReadGuard<'a, R, T>> {RwLock::<R, T>::try_read}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1165:15: 1165:30
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1165:9: 1165:30
    }

    bb2: {
        _21 = const "RwLock";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1175:32: 1175:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1175:32: 1175:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = Formatter::<'_>::debug_struct(_2, _21) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1175:17: 1175:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1175:19: 1175:31
                                         // + literal: Const { ty: for<'b, 'a> fn(&'b mut Formatter<'_>, &'a str) -> DebugStruct<'b, '_> {Formatter::<'_>::debug_struct}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1165:15: 1165:30
    }

    bb4: {
        _5 = move ((_3 as Some).0: rwlock::RwLockReadGuard<'_, R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:18: 1166:23
        _10 = const "RwLock";            // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:43: 1166:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:43: 1166:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = Formatter::<'_>::debug_struct(_2, _10) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:28: 1166:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:30: 1166:42
                                         // + literal: Const { ty: for<'b, 'a> fn(&'b mut Formatter<'_>, &'a str) -> DebugStruct<'b, '_> {Formatter::<'_>::debug_struct}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = &mut _9;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:28: 1166:76
        _11 = const "data";              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:59: 1166:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:59: 1166:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = &_5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:70: 1166:75
        _15 = <RwLockReadGuard<'_, R, T> as Deref>::deref(move _16) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:69: 1166:75
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:69: 1166:75
                                         // + literal: Const { ty: for<'a> fn(&'a RwLockReadGuard<'_, R, T>) -> &'a <RwLockReadGuard<'_, R, T> as Deref>::Target {<RwLockReadGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = _15;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:68: 1166:75
        _13 = &_14;                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:67: 1166:75
        _12 = _13 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:67: 1166:75
        _7 = DebugStruct::<'_, '_>::field(move _8, _11, move _12) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:28: 1166:76
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:53: 1166:58
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb7: {
        _6 = _7;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:28: 1166:85
        _0 = DebugStruct::<'_, '_>::finish(move _6) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:28: 1166:85
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:77: 1166:83
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugStruct<'_, '_>) -> Result<(), core::fmt::Error> {DebugStruct::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_5) -> [return: bb11, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1166:84: 1166:85
    }

    bb9: {
        _19 = &mut _20;                  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1175:17: 1176:55
        _22 = const "data";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:28: 1176:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:28: 1176:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:36: 1176:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:36: 1176:54
                                         // + literal: Const { ty: &<RwLock<R, T> as Debug>::fmt::LockedPlaceholder, val: Unevaluated(<RwLock<R, T> as Debug>::fmt, [R, T], Some(promoted[0])) }
        _23 = _24 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:36: 1176:54
        _18 = DebugStruct::<'_, '_>::field(move _19, _22, move _23) -> [return: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1175:17: 1176:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:22: 1176:27
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = _18;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1175:17: 1177:30
        _0 = DebugStruct::<'_, '_>::finish(move _17) -> [return: bb11, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1175:17: 1177:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1177:22: 1177:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugStruct<'_, '_>) -> Result<(), core::fmt::Error> {DebugStruct::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1180:6: 1180:6
    }
}

promoted[0] in rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1163:1: 1163:71>::fmt: &<RwLock<R, T> as Debug>::fmt::LockedPlaceholder = {
    let mut _0: &<rwlock::RwLock<R, T> as core::fmt::Debug>::fmt::LockedPlaceholder; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:36: 1176:54
    let mut _1: <rwlock::RwLock<R, T> as core::fmt::Debug>::fmt::LockedPlaceholder; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:37: 1176:54

    bb0: {
        _1 = <RwLock<R, T> as Debug>::fmt::LockedPlaceholder; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:37: 1176:54
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:36: 1176:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1176:36: 1176:54
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1163:1: 1163:71>::fmt::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1169:17: 1169:54>::fmt(_1: &<RwLock<R, T> as Debug>::fmt::LockedPlaceholder, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1170:28: 1170:33
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1170:35: 1170:36
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1170:66: 1170:77
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1171:37: 1171:47

    bb0: {
        _3 = const "<locked>";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1171:37: 1171:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1171:37: 1171:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1171:25: 1171:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1171:27: 1171:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1172:22: 1172:22
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1191:1: 1191:70>::rwlock(_1: &RwLockReadGuard<'_, R, T>) -> &RwLock<R, T> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1193:19: 1193:20
    let mut _0: &rwlock::RwLock<R, T>;   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1193:32: 1193:48

    bb0: {
        _0 = ((*_1).0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1194:9: 1194:17
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1195:6: 1195:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1191:1: 1191:70>::map(_1: RwLockReadGuard<'_, R, T>, _2: F) -> MappedRwLockReadGuard<'_, R, U> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1206:30: 1206:31
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1206:39: 1206:40
    let mut _0: rwlock::MappedRwLockReadGuard<'_, R, U>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1206:48: 1206:79
    let _3: &R;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1210:13: 1210:16
    let mut _5: (&T,);                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:20: 1211:55
    let _6: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:31: 1211:52
    let _7: *mut T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:33: 1211:52
    let mut _8: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:33: 1211:52
    let _9: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1212:9: 1212:23
    let mut _10: *const U;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1215:13: 1215:17
    let mut _11: &rwlock::RwLock<R, T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1206:30: 1206:31
    let mut _12: &rwlock::RwLock<R, T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1206:30: 1206:31
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1210:13: 1210:16
        let _4: &U;                      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:13: 1211:17
        scope 2 {
            debug data => _4;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:13: 1211:17
        }
        scope 3 {
        }
    }

    bb0: {
        _11 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1210:19: 1210:32
        _3 = &((*_11).0: R);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1210:19: 1210:32
        _12 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:33: 1211:52
        _8 = &((*_12).1: core::cell::UnsafeCell<T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:33: 1211:52
        _7 = UnsafeCell::<T>::get(move _8) -> [return: bb1, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:33: 1211:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:47: 1211:50
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &(*_7);                     // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:31: 1211:52
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:20: 1211:55
        _4 = <F as FnOnce<(&T,)>>::call_once(move _2, move _5) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:20: 1211:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1211:20: 1211:21
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnOnce<(&T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = core::mem::forget::<RwLockReadGuard<'_, R, T>>(move _1) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1212:9: 1212:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1212:9: 1212:20
                                         // + literal: Const { ty: fn(RwLockReadGuard<'_, R, T>) {core::mem::forget::<RwLockReadGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &raw const (*_4);          // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1215:13: 1215:17
        _0 = MappedRwLockReadGuard::<'_, R, U> { raw: _3, data: move _10, marker: const ZeroSized: PhantomData<&U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1213:9: 1217:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&U>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1218:6: 1218:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1191:1: 1191:70>::try_map(_1: RwLockReadGuard<'_, R, T>, _2: F) -> Result<MappedRwLockReadGuard<'_, R, U>, RwLockReadGuard<'_, R, T>> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1230:34: 1230:35
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1230:43: 1230:44
    let mut _0: core::result::Result<rwlock::MappedRwLockReadGuard<'_, R, U>, rwlock::RwLockReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1230:52: 1230:97
    let _3: &R;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1234:13: 1234:16
    let mut _4: core::option::Option<&U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:26: 1235:61
    let mut _5: (&T,);                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:26: 1235:61
    let _6: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:37: 1235:58
    let _7: *mut T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:39: 1235:58
    let mut _8: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:39: 1235:58
    let mut _9: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1236:13: 1236:23
    let _11: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1239:9: 1239:23
    let mut _12: rwlock::MappedRwLockReadGuard<'_, R, U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1240:12: 1244:10
    let mut _13: *const U;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1242:13: 1242:17
    let mut _14: &rwlock::RwLock<R, T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1230:34: 1230:35
    let mut _15: &rwlock::RwLock<R, T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1230:34: 1230:35
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1234:13: 1234:16
        let _10: &U;                     // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1236:18: 1236:22
        scope 2 {
            debug data => _10;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:13: 1235:17
        }
        scope 3 {
        }
        scope 4 {
            debug data => _10;           // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1236:18: 1236:22
        }
    }

    bb0: {
        _14 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1234:19: 1234:32
        _3 = &((*_14).0: R);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1234:19: 1234:32
        _15 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:39: 1235:58
        _8 = &((*_15).1: core::cell::UnsafeCell<T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:39: 1235:58
        _7 = UnsafeCell::<T>::get(move _8) -> [return: bb1, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:39: 1235:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:53: 1235:56
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &(*_7);                     // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:37: 1235:58
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:26: 1235:61
        _4 = <F as FnOnce<(&T,)>>::call_once(move _2, move _5) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:26: 1235:61
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:26: 1235:27
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnOnce<(&T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = discriminant(_4);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:26: 1235:61
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:20: 1235:61
    }

    bb3: {
        _0 = Result::<MappedRwLockReadGuard<'_, R, U>, RwLockReadGuard<'_, R, T>>::Err(move _1); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1237:28: 1237:34
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1245:5: 1245:6
    }

    bb4: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1235:26: 1235:61
    }

    bb5: {
        _10 = ((_4 as Some).0: &U);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1236:18: 1236:22
        _11 = core::mem::forget::<RwLockReadGuard<'_, R, T>>(move _1) -> [return: bb6, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1239:9: 1239:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1239:9: 1239:20
                                         // + literal: Const { ty: fn(RwLockReadGuard<'_, R, T>) {core::mem::forget::<RwLockReadGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = &raw const (*_10);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1242:13: 1242:17
        _12 = MappedRwLockReadGuard::<'_, R, U> { raw: _3, data: move _13, marker: const ZeroSized: PhantomData<&U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1240:12: 1244:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&U>, val: Value(<ZST>) }
        _0 = Result::<MappedRwLockReadGuard<'_, R, U>, RwLockReadGuard<'_, R, T>>::Ok(move _12); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1240:9: 1244:11
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1245:5: 1245:6
    }

    bb7: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1245:6: 1245:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1191:1: 1191:70>::unlocked(_1: &mut RwLockReadGuard<'_, R, T>, _2: F) -> U {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1254:27: 1254:28
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1254:41: 1254:42
    let mut _0: U;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1254:50: 1254:51
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1260:13: 1260:41
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1260:13: 1260:41
    let _5: scopeguard::ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    let mut _6: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _7: &&mut rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _8: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1254:27: 1254:28
    scope 1 {
    }
    scope 2 {
        debug _guard => _5;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    }

    bb0: {
        _8 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1260:13: 1260:41
        _4 = &((*_8).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1260:13: 1260:41
        _3 = <R as RawRwLock>::unlock_shared(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1260:13: 1260:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1260:26: 1260:39
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLock>::unlock_shared}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
        _6 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44] { s: move _7 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
                                         // closure
                                         // + def_id: DefId(0:883 ~ lock_api[bfd9]::rwlock::{impl#14}::unlocked::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     R,
                                         //     T,
                                         //     F,
                                         //     U,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)),
                                         //     (&&mut rwlock::RwLockReadGuard<'_, R, T>,),
                                         // ]
        _5 = guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>(const (), move _6) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:35
                                         // + literal: Const { ty: fn((), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]) -> ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]> {guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <F as FnOnce<()>>::call_once(move _2, const ()) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1263:9: 1263:12
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1263:9: 1263:10
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1264:5: 1264:6
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1264:6: 1264:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1191:1: 1191:70>::unlocked::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44], _2: ()) -> () {
    debug s => (*(_1.0: &&mut rwlock::RwLockReadGuard<'_, R, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1254:27: 1254:28
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:45: 253:45
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1262:16: 1262:42
    let mut _4: &&mut rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _5: &mut rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _6: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55

    bb0: {
        _4 = deref_copy (_1.0: &&mut rwlock::RwLockReadGuard<'_, R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1262:16: 1262:42
        _5 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1262:16: 1262:42
        _6 = deref_copy ((*_5).0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1262:16: 1262:42
        _3 = &((*_6).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1262:16: 1262:42
        _0 = <R as RawRwLock>::lock_shared(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1262:16: 1262:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1262:29: 1262:40
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawRwLock>::lock_shared}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:55: 253:55
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1267:1: 1267:74>::unlock_fair(_1: RwLockReadGuard<'_, R, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1281:24: 1281:25
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1281:33: 1281:33
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1284:13: 1284:46
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1284:13: 1284:46
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1286:9: 1286:23
    let mut _5: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1281:24: 1281:25
    scope 1 {
    }

    bb0: {
        _5 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1284:13: 1284:46
        _3 = &((*_5).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1284:13: 1284:46
        _2 = <R as RawRwLockFair>::unlock_shared_fair(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1284:13: 1284:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1284:26: 1284:44
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockFair>::unlock_shared_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = core::mem::forget::<RwLockReadGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1286:9: 1286:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1286:9: 1286:20
                                         // + literal: Const { ty: fn(RwLockReadGuard<'_, R, T>) {core::mem::forget::<RwLockReadGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1287:6: 1287:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1267:1: 1267:74>::unlocked_fair(_1: &mut RwLockReadGuard<'_, R, T>, _2: F) -> U {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1296:32: 1296:33
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1296:46: 1296:47
    let mut _0: U;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1296:55: 1296:56
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1302:13: 1302:46
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1302:13: 1302:46
    let _5: scopeguard::ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    let mut _6: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _7: &&mut rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _8: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1296:32: 1296:33
    scope 1 {
    }
    scope 2 {
        debug _guard => _5;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    }

    bb0: {
        _8 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1302:13: 1302:46
        _4 = &((*_8).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1302:13: 1302:46
        _3 = <R as RawRwLockFair>::unlock_shared_fair(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1302:13: 1302:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1302:26: 1302:44
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockFair>::unlock_shared_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
        _6 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44] { s: move _7 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
                                         // closure
                                         // + def_id: DefId(0:884 ~ lock_api[bfd9]::rwlock::{impl#15}::unlocked_fair::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     R,
                                         //     T,
                                         //     F,
                                         //     U,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)),
                                         //     (&&mut rwlock::RwLockReadGuard<'_, R, T>,),
                                         // ]
        _5 = guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>(const (), move _6) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:35
                                         // + literal: Const { ty: fn((), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]) -> ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]> {guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <F as FnOnce<()>>::call_once(move _2, const ()) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1305:9: 1305:12
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1305:9: 1305:10
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1306:5: 1306:6
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1306:6: 1306:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1267:1: 1267:74>::unlocked_fair::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44], _2: ()) -> () {
    debug s => (*(_1.0: &&mut rwlock::RwLockReadGuard<'_, R, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1296:32: 1296:33
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:45: 253:45
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1304:16: 1304:42
    let mut _4: &&mut rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _5: &mut rwlock::RwLockReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _6: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55

    bb0: {
        _4 = deref_copy (_1.0: &&mut rwlock::RwLockReadGuard<'_, R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1304:16: 1304:42
        _5 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1304:16: 1304:42
        _6 = deref_copy ((*_5).0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1304:16: 1304:42
        _3 = &((*_6).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1304:16: 1304:42
        _0 = <R as RawRwLock>::lock_shared(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1304:16: 1304:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1304:29: 1304:40
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawRwLock>::lock_shared}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:55: 253:55
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1267:1: 1267:74>::bump(_1: &mut RwLockReadGuard<'_, R, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1314:17: 1314:18
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1314:31: 1314:31
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1317:13: 1317:39
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1317:13: 1317:39
    let mut _4: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1314:17: 1314:18
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1317:13: 1317:39
        _3 = &((*_4).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1317:13: 1317:39
        _2 = <R as RawRwLockFair>::bump_shared(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1317:13: 1317:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1317:26: 1317:37
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockFair>::bump_shared}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1319:6: 1319:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1322:1: 1322:80>::deref(_1: &RwLockReadGuard<'_, R, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1325:14: 1325:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1325:24: 1325:26
    let _2: *mut T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1326:20: 1326:42
    let mut _3: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1326:20: 1326:42
    let mut _4: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1325:14: 1325:19
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1326:20: 1326:42
        _3 = &((*_4).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1326:20: 1326:42
        _2 = UnsafeCell::<T>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1326:20: 1326:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1326:37: 1326:40
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_2);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1326:18: 1326:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1327:6: 1327:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1330:1: 1330:79>::drop(_1: &mut RwLockReadGuard<'_, R, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1332:13: 1332:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1332:24: 1332:24
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1335:13: 1335:44
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1335:13: 1335:44
    let mut _4: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1332:13: 1332:22
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1335:13: 1335:44
        _3 = &((*_4).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1335:13: 1335:44
        _2 = <R as RawRwLock>::unlock_shared(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1335:13: 1335:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1335:29: 1335:42
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLock>::unlock_shared}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1337:6: 1337:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1340:1: 1340:98>::fmt(_1: &RwLockReadGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1341:12: 1341:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1341:19: 1341:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1341:50: 1341:61
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1342:25: 1342:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1342:26: 1342:32

    bb0: {
        _4 = <RwLockReadGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1342:26: 1342:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1342:26: 1342:32
                                         // + literal: Const { ty: for<'a> fn(&'a RwLockReadGuard<'_, R, T>) -> &'a <RwLockReadGuard<'_, R, T> as Deref>::Target {<RwLockReadGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1342:25: 1342:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1342:9: 1342:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1342:9: 1342:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1343:6: 1343:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1346:1: 1347:34>::fmt(_1: &RwLockReadGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1349:12: 1349:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1349:19: 1349:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1349:50: 1349:61
    let mut _3: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1350:9: 1350:24
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1350:9: 1350:17

    bb0: {
        _4 = <RwLockReadGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1350:9: 1350:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1350:9: 1350:17
                                         // + literal: Const { ty: for<'a> fn(&'a RwLockReadGuard<'_, R, T>) -> &'a <RwLockReadGuard<'_, R, T> as Deref>::Target {<RwLockReadGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1350:9: 1350:24
        _0 = <T as Display>::fmt(move _3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1350:9: 1350:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1350:18: 1350:21
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1351:6: 1351:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1479:1: 1479:71>::rwlock(_1: &RwLockWriteGuard<'_, R, T>) -> &RwLock<R, T> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1481:19: 1481:20
    let mut _0: &rwlock::RwLock<R, T>;   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1481:32: 1481:48

    bb0: {
        _0 = ((*_1).0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1482:9: 1482:17
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1483:6: 1483:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1479:1: 1479:71>::map(_1: RwLockWriteGuard<'_, R, T>, _2: F) -> MappedRwLockWriteGuard<'_, R, U> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1494:30: 1494:31
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1494:39: 1494:40
    let mut _0: rwlock::MappedRwLockWriteGuard<'_, R, U>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1494:48: 1494:80
    let _3: &R;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1498:13: 1498:16
    let mut _5: (&mut T,);               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:20: 1499:59
    let mut _6: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:31: 1499:56
    let mut _7: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:37: 1499:56
    let mut _8: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:37: 1499:56
    let _9: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1500:9: 1500:23
    let mut _10: *mut U;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1503:13: 1503:17
    let mut _11: &rwlock::RwLock<R, T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1494:30: 1494:31
    let mut _12: &rwlock::RwLock<R, T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1494:30: 1494:31
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1498:13: 1498:16
        let _4: &mut U;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:13: 1499:17
        scope 2 {
            debug data => _4;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:13: 1499:17
        }
        scope 3 {
        }
    }

    bb0: {
        _11 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1498:19: 1498:32
        _3 = &((*_11).0: R);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1498:19: 1498:32
        _12 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:37: 1499:56
        _8 = &((*_12).1: core::cell::UnsafeCell<T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:37: 1499:56
        _7 = UnsafeCell::<T>::get(move _8) -> [return: bb1, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:37: 1499:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:51: 1499:54
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut (*_7);                 // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:31: 1499:56
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:20: 1499:59
        _4 = <F as FnOnce<(&mut T,)>>::call_once(move _2, move _5) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:20: 1499:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1499:20: 1499:21
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&mut T,)) -> <F as FnOnce<(&mut T,)>>::Output {<F as FnOnce<(&mut T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = core::mem::forget::<RwLockWriteGuard<'_, R, T>>(move _1) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1500:9: 1500:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1500:9: 1500:20
                                         // + literal: Const { ty: fn(RwLockWriteGuard<'_, R, T>) {core::mem::forget::<RwLockWriteGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &raw mut (*_4);            // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1503:13: 1503:17
        _0 = MappedRwLockWriteGuard::<'_, R, U> { raw: _3, data: move _10, marker: const ZeroSized: PhantomData<&mut U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1501:9: 1505:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&mut U>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1506:6: 1506:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1479:1: 1479:71>::try_map(_1: RwLockWriteGuard<'_, R, T>, _2: F) -> Result<MappedRwLockWriteGuard<'_, R, U>, RwLockWriteGuard<'_, R, T>> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1518:34: 1518:35
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1518:43: 1518:44
    let mut _0: core::result::Result<rwlock::MappedRwLockWriteGuard<'_, R, U>, rwlock::RwLockWriteGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1518:52: 1518:98
    let _3: &R;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1522:13: 1522:16
    let mut _4: core::option::Option<&mut U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:26: 1523:65
    let mut _5: (&mut T,);               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:26: 1523:65
    let mut _6: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:37: 1523:62
    let mut _7: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:43: 1523:62
    let mut _8: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:43: 1523:62
    let mut _9: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1524:13: 1524:23
    let _11: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1527:9: 1527:23
    let mut _12: rwlock::MappedRwLockWriteGuard<'_, R, U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1528:12: 1532:10
    let mut _13: *mut U;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1530:13: 1530:17
    let mut _14: &rwlock::RwLock<R, T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1518:34: 1518:35
    let mut _15: &rwlock::RwLock<R, T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1518:34: 1518:35
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1522:13: 1522:16
        let _10: &mut U;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1524:18: 1524:22
        scope 2 {
            debug data => _10;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:13: 1523:17
        }
        scope 3 {
        }
        scope 4 {
            debug data => _10;           // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1524:18: 1524:22
        }
    }

    bb0: {
        _14 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1522:19: 1522:32
        _3 = &((*_14).0: R);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1522:19: 1522:32
        _15 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:43: 1523:62
        _8 = &((*_15).1: core::cell::UnsafeCell<T>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:43: 1523:62
        _7 = UnsafeCell::<T>::get(move _8) -> [return: bb1, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:43: 1523:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:57: 1523:60
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut (*_7);                 // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:37: 1523:62
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:26: 1523:65
        _4 = <F as FnOnce<(&mut T,)>>::call_once(move _2, move _5) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:26: 1523:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:26: 1523:27
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&mut T,)) -> <F as FnOnce<(&mut T,)>>::Output {<F as FnOnce<(&mut T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = discriminant(_4);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:26: 1523:65
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:20: 1523:65
    }

    bb3: {
        _0 = Result::<MappedRwLockWriteGuard<'_, R, U>, RwLockWriteGuard<'_, R, T>>::Err(move _1); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1525:28: 1525:34
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1533:5: 1533:6
    }

    bb4: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1523:26: 1523:65
    }

    bb5: {
        _10 = move ((_4 as Some).0: &mut U); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1524:18: 1524:22
        _11 = core::mem::forget::<RwLockWriteGuard<'_, R, T>>(move _1) -> [return: bb6, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1527:9: 1527:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1527:9: 1527:20
                                         // + literal: Const { ty: fn(RwLockWriteGuard<'_, R, T>) {core::mem::forget::<RwLockWriteGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = &raw mut (*_10);           // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1530:13: 1530:17
        _12 = MappedRwLockWriteGuard::<'_, R, U> { raw: _3, data: move _13, marker: const ZeroSized: PhantomData<&mut U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1528:12: 1532:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&mut U>, val: Value(<ZST>) }
        _0 = Result::<MappedRwLockWriteGuard<'_, R, U>, RwLockWriteGuard<'_, R, T>>::Ok(move _12); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1528:9: 1532:11
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1533:5: 1533:6
    }

    bb7: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1533:6: 1533:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1479:1: 1479:71>::unlocked(_1: &mut RwLockWriteGuard<'_, R, T>, _2: F) -> U {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1540:27: 1540:28
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1540:41: 1540:42
    let mut _0: U;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1540:50: 1540:51
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1546:13: 1546:44
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1546:13: 1546:44
    let _5: scopeguard::ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    let mut _6: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _7: &&mut rwlock::RwLockWriteGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _8: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1540:27: 1540:28
    scope 1 {
    }
    scope 2 {
        debug _guard => _5;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    }

    bb0: {
        _8 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1546:13: 1546:44
        _4 = &((*_8).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1546:13: 1546:44
        _3 = <R as RawRwLock>::unlock_exclusive(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1546:13: 1546:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1546:26: 1546:42
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLock>::unlock_exclusive}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
        _6 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44] { s: move _7 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
                                         // closure
                                         // + def_id: DefId(0:885 ~ lock_api[bfd9]::rwlock::{impl#20}::unlocked::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     R,
                                         //     T,
                                         //     F,
                                         //     U,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)),
                                         //     (&&mut rwlock::RwLockWriteGuard<'_, R, T>,),
                                         // ]
        _5 = guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>(const (), move _6) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:35
                                         // + literal: Const { ty: fn((), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]) -> ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]> {guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <F as FnOnce<()>>::call_once(move _2, const ()) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1549:9: 1549:12
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1549:9: 1549:10
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1550:5: 1550:6
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1550:6: 1550:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1479:1: 1479:71>::unlocked::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44], _2: ()) -> () {
    debug s => (*(_1.0: &&mut rwlock::RwLockWriteGuard<'_, R, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1540:27: 1540:28
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:45: 253:45
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1548:16: 1548:45
    let mut _4: &&mut rwlock::RwLockWriteGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _5: &mut rwlock::RwLockWriteGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _6: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55

    bb0: {
        _4 = deref_copy (_1.0: &&mut rwlock::RwLockWriteGuard<'_, R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1548:16: 1548:45
        _5 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1548:16: 1548:45
        _6 = deref_copy ((*_5).0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1548:16: 1548:45
        _3 = &((*_6).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1548:16: 1548:45
        _0 = <R as RawRwLock>::lock_exclusive(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1548:16: 1548:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1548:29: 1548:43
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawRwLock>::lock_exclusive}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:55: 253:55
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1553:1: 1553:80>::downgrade(_1: RwLockWriteGuard<'_, R, T>) -> RwLockReadGuard<'_, R, T> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1560:22: 1560:23
    let mut _0: rwlock::RwLockReadGuard<'_, R, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1560:34: 1560:59
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1563:13: 1563:37
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1563:13: 1563:37
    let _4: &rwlock::RwLock<R, T>;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1565:13: 1565:19
    let _5: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1566:9: 1566:23
    let mut _6: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1560:22: 1560:23
    scope 1 {
    }
    scope 2 {
        debug rwlock => _4;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1565:13: 1565:19
    }

    bb0: {
        _6 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1563:13: 1563:37
        _3 = &((*_6).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1563:13: 1563:37
        _2 = <R as RawRwLockDowngrade>::downgrade(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1563:13: 1563:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1563:26: 1563:35
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockDowngrade>::downgrade}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = (_1.0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1565:22: 1565:30
        _5 = core::mem::forget::<RwLockWriteGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1566:9: 1566:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1566:9: 1566:20
                                         // + literal: Const { ty: fn(RwLockWriteGuard<'_, R, T>) {core::mem::forget::<RwLockWriteGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = RwLockReadGuard::<'_, R, T> { rwlock: _4, marker: const ZeroSized: PhantomData<(&T, <R as RawRwLock>::GuardMarker)> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1567:9: 1570:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<(&T, <R as RawRwLock>::GuardMarker)>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1571:6: 1571:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1574:1: 1574:87>::downgrade_to_upgradable(_1: RwLockWriteGuard<'_, R, T>) -> RwLockUpgradableReadGuard<'_, R, T> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1581:36: 1581:37
    let mut _0: rwlock::RwLockUpgradableReadGuard<'_, R, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1581:48: 1581:83
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1584:13: 1584:51
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1584:13: 1584:51
    let _4: &rwlock::RwLock<R, T>;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1586:13: 1586:19
    let _5: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1587:9: 1587:23
    let mut _6: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1581:36: 1581:37
    scope 1 {
    }
    scope 2 {
        debug rwlock => _4;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1586:13: 1586:19
    }

    bb0: {
        _6 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1584:13: 1584:51
        _3 = &((*_6).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1584:13: 1584:51
        _2 = <R as RawRwLockUpgradeDowngrade>::downgrade_to_upgradable(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1584:13: 1584:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1584:26: 1584:49
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockUpgradeDowngrade>::downgrade_to_upgradable}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = (_1.0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1586:22: 1586:30
        _5 = core::mem::forget::<RwLockWriteGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1587:9: 1587:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1587:9: 1587:20
                                         // + literal: Const { ty: fn(RwLockWriteGuard<'_, R, T>) {core::mem::forget::<RwLockWriteGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = RwLockUpgradableReadGuard::<'_, R, T> { rwlock: _4, marker: const ZeroSized: PhantomData<(&T, <R as RawRwLock>::GuardMarker)> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1588:9: 1591:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<(&T, <R as RawRwLock>::GuardMarker)>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1592:6: 1592:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1595:1: 1595:75>::unlock_fair(_1: RwLockWriteGuard<'_, R, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1609:24: 1609:25
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1609:33: 1609:33
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1612:13: 1612:49
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1612:13: 1612:49
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1614:9: 1614:23
    let mut _5: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1609:24: 1609:25
    scope 1 {
    }

    bb0: {
        _5 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1612:13: 1612:49
        _3 = &((*_5).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1612:13: 1612:49
        _2 = <R as RawRwLockFair>::unlock_exclusive_fair(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1612:13: 1612:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1612:26: 1612:47
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockFair>::unlock_exclusive_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = core::mem::forget::<RwLockWriteGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1614:9: 1614:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1614:9: 1614:20
                                         // + literal: Const { ty: fn(RwLockWriteGuard<'_, R, T>) {core::mem::forget::<RwLockWriteGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1615:6: 1615:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1595:1: 1595:75>::unlocked_fair(_1: &mut RwLockWriteGuard<'_, R, T>, _2: F) -> U {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1624:32: 1624:33
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1624:46: 1624:47
    let mut _0: U;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1624:55: 1624:56
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1630:13: 1630:49
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1630:13: 1630:49
    let _5: scopeguard::ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    let mut _6: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _7: &&mut rwlock::RwLockWriteGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _8: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1624:32: 1624:33
    scope 1 {
    }
    scope 2 {
        debug _guard => _5;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    }

    bb0: {
        _8 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1630:13: 1630:49
        _4 = &((*_8).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1630:13: 1630:49
        _3 = <R as RawRwLockFair>::unlock_exclusive_fair(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1630:13: 1630:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1630:26: 1630:47
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockFair>::unlock_exclusive_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
        _6 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44] { s: move _7 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
                                         // closure
                                         // + def_id: DefId(0:886 ~ lock_api[bfd9]::rwlock::{impl#23}::unlocked_fair::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     R,
                                         //     T,
                                         //     F,
                                         //     U,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)),
                                         //     (&&mut rwlock::RwLockWriteGuard<'_, R, T>,),
                                         // ]
        _5 = guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>(const (), move _6) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:35
                                         // + literal: Const { ty: fn((), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]) -> ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]> {guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <F as FnOnce<()>>::call_once(move _2, const ()) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1633:9: 1633:12
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1633:9: 1633:10
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1634:5: 1634:6
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1634:6: 1634:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1595:1: 1595:75>::unlocked_fair::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44], _2: ()) -> () {
    debug s => (*(_1.0: &&mut rwlock::RwLockWriteGuard<'_, R, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1624:32: 1624:33
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:45: 253:45
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1632:16: 1632:45
    let mut _4: &&mut rwlock::RwLockWriteGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _5: &mut rwlock::RwLockWriteGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _6: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55

    bb0: {
        _4 = deref_copy (_1.0: &&mut rwlock::RwLockWriteGuard<'_, R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1632:16: 1632:45
        _5 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1632:16: 1632:45
        _6 = deref_copy ((*_5).0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1632:16: 1632:45
        _3 = &((*_6).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1632:16: 1632:45
        _0 = <R as RawRwLock>::lock_exclusive(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1632:16: 1632:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1632:29: 1632:43
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawRwLock>::lock_exclusive}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:55: 253:55
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1595:1: 1595:75>::bump(_1: &mut RwLockWriteGuard<'_, R, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1642:17: 1642:18
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1642:31: 1642:31
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1645:13: 1645:42
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1645:13: 1645:42
    let mut _4: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1642:17: 1642:18
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1645:13: 1645:42
        _3 = &((*_4).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1645:13: 1645:42
        _2 = <R as RawRwLockFair>::bump_exclusive(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1645:13: 1645:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1645:26: 1645:40
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockFair>::bump_exclusive}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1647:6: 1647:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1650:1: 1650:81>::deref(_1: &RwLockWriteGuard<'_, R, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1653:14: 1653:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1653:24: 1653:26
    let _2: *mut T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1654:20: 1654:42
    let mut _3: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1654:20: 1654:42
    let mut _4: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1653:14: 1653:19
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1654:20: 1654:42
        _3 = &((*_4).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1654:20: 1654:42
        _2 = UnsafeCell::<T>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1654:20: 1654:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1654:37: 1654:40
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_2);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1654:18: 1654:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1655:6: 1655:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1658:1: 1658:84>::deref_mut(_1: &mut RwLockWriteGuard<'_, R, T>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1660:18: 1660:27
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1660:32: 1660:38
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1661:24: 1661:46
    let mut _3: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1661:24: 1661:46
    let mut _4: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1660:18: 1660:27
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1661:24: 1661:46
        _3 = &((*_4).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1661:24: 1661:46
        _2 = UnsafeCell::<T>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1661:24: 1661:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1661:41: 1661:44
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &mut (*_2);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1661:18: 1661:46
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1662:6: 1662:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1665:1: 1665:80>::drop(_1: &mut RwLockWriteGuard<'_, R, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1667:13: 1667:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1667:24: 1667:24
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1670:13: 1670:47
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1670:13: 1670:47
    let mut _4: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1667:13: 1667:22
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1670:13: 1670:47
        _3 = &((*_4).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1670:13: 1670:47
        _2 = <R as RawRwLock>::unlock_exclusive(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1670:13: 1670:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1670:29: 1670:45
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLock>::unlock_exclusive}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1672:6: 1672:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1675:1: 1675:99>::fmt(_1: &RwLockWriteGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1676:12: 1676:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1676:19: 1676:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1676:50: 1676:61
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1677:25: 1677:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1677:26: 1677:32

    bb0: {
        _4 = <RwLockWriteGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1677:26: 1677:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1677:26: 1677:32
                                         // + literal: Const { ty: for<'a> fn(&'a RwLockWriteGuard<'_, R, T>) -> &'a <RwLockWriteGuard<'_, R, T> as Deref>::Target {<RwLockWriteGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1677:25: 1677:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1677:9: 1677:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1677:9: 1677:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1678:6: 1678:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1681:1: 1682:35>::fmt(_1: &RwLockWriteGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1684:12: 1684:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1684:19: 1684:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1684:50: 1684:61
    let mut _3: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1685:9: 1685:24
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1685:9: 1685:17

    bb0: {
        _4 = <RwLockWriteGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1685:9: 1685:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1685:9: 1685:17
                                         // + literal: Const { ty: for<'a> fn(&'a RwLockWriteGuard<'_, R, T>) -> &'a <RwLockWriteGuard<'_, R, T> as Deref>::Target {<RwLockWriteGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1685:9: 1685:24
        _0 = <T as Display>::fmt(move _3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1685:9: 1685:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1685:18: 1685:21
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1686:6: 1686:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1872:1: 1872:87>::rwlock(_1: &RwLockUpgradableReadGuard<'_, R, T>) -> &RwLock<R, T> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1874:19: 1874:20
    let mut _0: &rwlock::RwLock<R, T>;   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1874:32: 1874:48

    bb0: {
        _0 = ((*_1).0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1875:9: 1875:17
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1876:6: 1876:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1872:1: 1872:87>::unlocked(_1: &mut RwLockUpgradableReadGuard<'_, R, T>, _2: F) -> U {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1883:27: 1883:28
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1883:41: 1883:42
    let mut _0: U;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1883:50: 1883:51
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1889:13: 1889:45
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1889:13: 1889:45
    let _5: scopeguard::ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    let mut _6: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _7: &&mut rwlock::RwLockUpgradableReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _8: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1883:27: 1883:28
    scope 1 {
    }
    scope 2 {
        debug _guard => _5;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    }

    bb0: {
        _8 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1889:13: 1889:45
        _4 = &((*_8).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1889:13: 1889:45
        _3 = <R as RawRwLockUpgrade>::unlock_upgradable(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1889:13: 1889:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1889:26: 1889:43
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockUpgrade>::unlock_upgradable}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
        _6 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44] { s: move _7 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
                                         // closure
                                         // + def_id: DefId(0:887 ~ lock_api[bfd9]::rwlock::{impl#30}::unlocked::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     R,
                                         //     T,
                                         //     F,
                                         //     U,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)),
                                         //     (&&mut rwlock::RwLockUpgradableReadGuard<'_, R, T>,),
                                         // ]
        _5 = guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>(const (), move _6) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:35
                                         // + literal: Const { ty: fn((), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]) -> ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]> {guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <F as FnOnce<()>>::call_once(move _2, const ()) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1892:9: 1892:12
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1892:9: 1892:10
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1893:5: 1893:6
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1893:6: 1893:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1872:1: 1872:87>::unlocked::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44], _2: ()) -> () {
    debug s => (*(_1.0: &&mut rwlock::RwLockUpgradableReadGuard<'_, R, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1883:27: 1883:28
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:45: 253:45
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1891:16: 1891:46
    let mut _4: &&mut rwlock::RwLockUpgradableReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _5: &mut rwlock::RwLockUpgradableReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _6: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55

    bb0: {
        _4 = deref_copy (_1.0: &&mut rwlock::RwLockUpgradableReadGuard<'_, R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1891:16: 1891:46
        _5 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1891:16: 1891:46
        _6 = deref_copy ((*_5).0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1891:16: 1891:46
        _3 = &((*_6).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1891:16: 1891:46
        _0 = <R as RawRwLockUpgrade>::lock_upgradable(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1891:16: 1891:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1891:29: 1891:44
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawRwLockUpgrade>::lock_upgradable}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:55: 253:55
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1872:1: 1872:87>::upgrade(_1: RwLockUpgradableReadGuard<'_, R, T>) -> RwLockWriteGuard<'_, R, T> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1897:20: 1897:21
    let mut _0: rwlock::RwLockWriteGuard<'_, R, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1897:32: 1897:58
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1900:13: 1900:35
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1900:13: 1900:35
    let _4: &rwlock::RwLock<R, T>;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1902:13: 1902:19
    let _5: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1903:9: 1903:23
    let mut _6: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1897:20: 1897:21
    scope 1 {
    }
    scope 2 {
        debug rwlock => _4;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1902:13: 1902:19
    }

    bb0: {
        _6 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1900:13: 1900:35
        _3 = &((*_6).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1900:13: 1900:35
        _2 = <R as RawRwLockUpgrade>::upgrade(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1900:13: 1900:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1900:26: 1900:33
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockUpgrade>::upgrade}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = (_1.0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1902:22: 1902:30
        _5 = core::mem::forget::<RwLockUpgradableReadGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1903:9: 1903:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1903:9: 1903:20
                                         // + literal: Const { ty: fn(RwLockUpgradableReadGuard<'_, R, T>) {core::mem::forget::<RwLockUpgradableReadGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = RwLockWriteGuard::<'_, R, T> { rwlock: _4, marker: const ZeroSized: PhantomData<(&mut T, <R as RawRwLock>::GuardMarker)> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1904:9: 1907:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<(&mut T, <R as RawRwLock>::GuardMarker)>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1908:6: 1908:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1872:1: 1872:87>::try_upgrade(_1: RwLockUpgradableReadGuard<'_, R, T>) -> Result<RwLockWriteGuard<'_, R, T>, RwLockUpgradableReadGuard<'_, R, T>> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1913:24: 1913:25
    let mut _0: core::result::Result<rwlock::RwLockWriteGuard<'_, R, T>, rwlock::RwLockUpgradableReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1913:36: 1913:76
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1915:12: 1915:49
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1915:21: 1915:47
    let _4: &rwlock::RwLock<R, T>;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1916:17: 1916:23
    let _5: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1917:13: 1917:27
    let mut _6: rwlock::RwLockWriteGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1918:16: 1921:14
    let mut _7: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1913:24: 1913:25
    scope 1 {
    }
    scope 2 {
        debug rwlock => _4;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1916:17: 1916:23
    }

    bb0: {
        _7 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1915:21: 1915:47
        _3 = &((*_7).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1915:21: 1915:47
        _2 = <R as RawRwLockUpgrade>::try_upgrade(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1915:21: 1915:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1915:34: 1915:45
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) -> bool {<R as RawRwLockUpgrade>::try_upgrade}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1915:12: 1915:49
    }

    bb2: {
        _4 = (_1.0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1916:26: 1916:34
        _5 = core::mem::forget::<RwLockUpgradableReadGuard<'_, R, T>>(move _1) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1917:13: 1917:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1917:13: 1917:24
                                         // + literal: Const { ty: fn(RwLockUpgradableReadGuard<'_, R, T>) {core::mem::forget::<RwLockUpgradableReadGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = RwLockWriteGuard::<'_, R, T> { rwlock: _4, marker: const ZeroSized: PhantomData<(&mut T, <R as RawRwLock>::GuardMarker)> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1918:16: 1921:14
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<(&mut T, <R as RawRwLock>::GuardMarker)>, val: Value(<ZST>) }
        _0 = Result::<RwLockWriteGuard<'_, R, T>, RwLockUpgradableReadGuard<'_, R, T>>::Ok(move _6); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1918:13: 1921:15
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1915:9: 1924:10
    }

    bb4: {
        _0 = Result::<RwLockWriteGuard<'_, R, T>, RwLockUpgradableReadGuard<'_, R, T>>::Err(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1923:13: 1923:19
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1915:9: 1924:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1925:6: 1925:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1928:1: 1928:91>::unlock_fair(_1: RwLockUpgradableReadGuard<'_, R, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1942:24: 1942:25
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1942:33: 1942:33
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1945:13: 1945:50
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1945:13: 1945:50
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1947:9: 1947:23
    let mut _5: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1942:24: 1942:25
    scope 1 {
    }

    bb0: {
        _5 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1945:13: 1945:50
        _3 = &((*_5).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1945:13: 1945:50
        _2 = <R as RawRwLockUpgradeFair>::unlock_upgradable_fair(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1945:13: 1945:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1945:26: 1945:48
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockUpgradeFair>::unlock_upgradable_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = core::mem::forget::<RwLockUpgradableReadGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1947:9: 1947:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1947:9: 1947:20
                                         // + literal: Const { ty: fn(RwLockUpgradableReadGuard<'_, R, T>) {core::mem::forget::<RwLockUpgradableReadGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1948:6: 1948:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1928:1: 1928:91>::unlocked_fair(_1: &mut RwLockUpgradableReadGuard<'_, R, T>, _2: F) -> U {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1957:32: 1957:33
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1957:46: 1957:47
    let mut _0: U;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1957:55: 1957:56
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1963:13: 1963:50
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1963:13: 1963:50
    let _5: scopeguard::ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    let mut _6: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _7: &&mut rwlock::RwLockUpgradableReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _8: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1957:32: 1957:33
    scope 1 {
    }
    scope 2 {
        debug _guard => _5;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:13: 253:19
    }

    bb0: {
        _8 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1963:13: 1963:50
        _4 = &((*_8).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1963:13: 1963:50
        _3 = <R as RawRwLockUpgradeFair>::unlock_upgradable_fair(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1963:13: 1963:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1963:26: 1963:48
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockUpgradeFair>::unlock_upgradable_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
        _6 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44] { s: move _7 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
                                         // closure
                                         // + def_id: DefId(0:888 ~ lock_api[bfd9]::rwlock::{impl#31}::unlocked_fair::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     R,
                                         //     T,
                                         //     F,
                                         //     U,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)),
                                         //     (&&mut rwlock::RwLockUpgradableReadGuard<'_, R, T>,),
                                         // ]
        _5 = guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>(const (), move _6) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:22: 253:35
                                         // + literal: Const { ty: fn((), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]) -> ScopeGuard<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]> {guard::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44]>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <F as FnOnce<()>>::call_once(move _2, const ()) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1966:9: 1966:12
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1966:9: 1966:10
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1967:5: 1967:6
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1967:6: 1967:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1928:1: 1928:91>::unlocked_fair::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:44], _2: ()) -> () {
    debug s => (*(_1.0: &&mut rwlock::RwLockUpgradableReadGuard<'_, R, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1957:32: 1957:33
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:45: 253:45
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1965:16: 1965:46
    let mut _4: &&mut rwlock::RwLockUpgradableReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _5: &mut rwlock::RwLockUpgradableReadGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55
    let mut _6: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:40: 253:55

    bb0: {
        _4 = deref_copy (_1.0: &&mut rwlock::RwLockUpgradableReadGuard<'_, R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1965:16: 1965:46
        _5 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1965:16: 1965:46
        _6 = deref_copy ((*_5).0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1965:16: 1965:46
        _3 = &((*_6).0: R);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1965:16: 1965:46
        _0 = <R as RawRwLockUpgrade>::lock_upgradable(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1965:16: 1965:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1965:29: 1965:44
                                         // + literal: Const { ty: for<'a> fn(&'a R) {<R as RawRwLockUpgrade>::lock_upgradable}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:253:55: 253:55
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1928:1: 1928:91>::bump(_1: &mut RwLockUpgradableReadGuard<'_, R, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1975:17: 1975:18
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1975:31: 1975:31
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1978:13: 1978:43
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1978:13: 1978:43
    let mut _4: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1975:17: 1975:18
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1978:13: 1978:43
        _3 = &((*_4).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1978:13: 1978:43
        _2 = <R as RawRwLockUpgradeFair>::bump_upgradable(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1978:13: 1978:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1978:26: 1978:41
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockUpgradeFair>::bump_upgradable}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1980:6: 1980:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1983:1: 1983:96>::downgrade(_1: RwLockUpgradableReadGuard<'_, R, T>) -> RwLockReadGuard<'_, R, T> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1991:22: 1991:23
    let mut _0: rwlock::RwLockReadGuard<'_, R, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1991:34: 1991:59
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1994:13: 1994:48
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1994:13: 1994:48
    let _4: &rwlock::RwLock<R, T>;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1996:13: 1996:19
    let _5: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1997:9: 1997:23
    let mut _6: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1991:22: 1991:23
    scope 1 {
    }
    scope 2 {
        debug rwlock => _4;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1996:13: 1996:19
    }

    bb0: {
        _6 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1994:13: 1994:48
        _3 = &((*_6).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1994:13: 1994:48
        _2 = <R as RawRwLockUpgradeDowngrade>::downgrade_upgradable(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1994:13: 1994:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1994:26: 1994:46
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockUpgradeDowngrade>::downgrade_upgradable}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = (_1.0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1996:22: 1996:30
        _5 = core::mem::forget::<RwLockUpgradableReadGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1997:9: 1997:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1997:9: 1997:20
                                         // + literal: Const { ty: fn(RwLockUpgradableReadGuard<'_, R, T>) {core::mem::forget::<RwLockUpgradableReadGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = RwLockReadGuard::<'_, R, T> { rwlock: _4, marker: const ZeroSized: PhantomData<(&T, <R as RawRwLock>::GuardMarker)> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:1998:9: 2001:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<(&T, <R as RawRwLock>::GuardMarker)>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2002:6: 2002:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2005:1: 2005:92>::try_upgrade_for(_1: RwLockUpgradableReadGuard<'_, R, T>, _2: <R as RawRwLockTimed>::Duration) -> Result<RwLockWriteGuard<'_, R, T>, RwLockUpgradableReadGuard<'_, R, T>> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2012:9: 2012:10
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2013:9: 2013:16
    let mut _0: core::result::Result<rwlock::RwLockWriteGuard<'_, R, T>, rwlock::RwLockUpgradableReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2014:10: 2014:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2016:12: 2016:60
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2016:21: 2016:58
    let _5: &rwlock::RwLock<R, T>;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2017:17: 2017:23
    let _6: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2018:13: 2018:27
    let mut _7: rwlock::RwLockWriteGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2019:16: 2022:14
    let mut _8: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2012:9: 2012:10
    scope 1 {
    }
    scope 2 {
        debug rwlock => _5;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2017:17: 2017:23
    }

    bb0: {
        _8 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2016:21: 2016:58
        _4 = &((*_8).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2016:21: 2016:58
        _3 = <R as RawRwLockUpgradeTimed>::try_upgrade_for(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2016:21: 2016:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2016:34: 2016:49
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R, <R as RawRwLockTimed>::Duration) -> bool {<R as RawRwLockUpgradeTimed>::try_upgrade_for}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2016:12: 2016:60
    }

    bb2: {
        _5 = (_1.0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2017:26: 2017:34
        _6 = core::mem::forget::<RwLockUpgradableReadGuard<'_, R, T>>(move _1) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2018:13: 2018:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2018:13: 2018:24
                                         // + literal: Const { ty: fn(RwLockUpgradableReadGuard<'_, R, T>) {core::mem::forget::<RwLockUpgradableReadGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = RwLockWriteGuard::<'_, R, T> { rwlock: _5, marker: const ZeroSized: PhantomData<(&mut T, <R as RawRwLock>::GuardMarker)> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2019:16: 2022:14
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<(&mut T, <R as RawRwLock>::GuardMarker)>, val: Value(<ZST>) }
        _0 = Result::<RwLockWriteGuard<'_, R, T>, RwLockUpgradableReadGuard<'_, R, T>>::Ok(move _7); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2019:13: 2022:15
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2016:9: 2025:10
    }

    bb4: {
        _0 = Result::<RwLockWriteGuard<'_, R, T>, RwLockUpgradableReadGuard<'_, R, T>>::Err(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2024:13: 2024:19
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2016:9: 2025:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2026:6: 2026:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2005:1: 2005:92>::try_upgrade_until(_1: RwLockUpgradableReadGuard<'_, R, T>, _2: <R as RawRwLockTimed>::Instant) -> Result<RwLockWriteGuard<'_, R, T>, RwLockUpgradableReadGuard<'_, R, T>> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2035:9: 2035:10
    debug timeout => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2036:9: 2036:16
    let mut _0: core::result::Result<rwlock::RwLockWriteGuard<'_, R, T>, rwlock::RwLockUpgradableReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2037:10: 2037:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2039:12: 2039:62
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2039:21: 2039:60
    let _5: &rwlock::RwLock<R, T>;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2040:17: 2040:23
    let _6: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2041:13: 2041:27
    let mut _7: rwlock::RwLockWriteGuard<'_, R, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2042:16: 2045:14
    let mut _8: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2035:9: 2035:10
    scope 1 {
    }
    scope 2 {
        debug rwlock => _5;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2040:17: 2040:23
    }

    bb0: {
        _8 = deref_copy (_1.0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2039:21: 2039:60
        _4 = &((*_8).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2039:21: 2039:60
        _3 = <R as RawRwLockUpgradeTimed>::try_upgrade_until(move _4, move _2) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2039:21: 2039:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2039:34: 2039:51
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R, <R as RawRwLockTimed>::Instant) -> bool {<R as RawRwLockUpgradeTimed>::try_upgrade_until}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2039:12: 2039:62
    }

    bb2: {
        _5 = (_1.0: &rwlock::RwLock<R, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2040:26: 2040:34
        _6 = core::mem::forget::<RwLockUpgradableReadGuard<'_, R, T>>(move _1) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2041:13: 2041:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2041:13: 2041:24
                                         // + literal: Const { ty: fn(RwLockUpgradableReadGuard<'_, R, T>) {core::mem::forget::<RwLockUpgradableReadGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = RwLockWriteGuard::<'_, R, T> { rwlock: _5, marker: const ZeroSized: PhantomData<(&mut T, <R as RawRwLock>::GuardMarker)> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2042:16: 2045:14
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<(&mut T, <R as RawRwLock>::GuardMarker)>, val: Value(<ZST>) }
        _0 = Result::<RwLockWriteGuard<'_, R, T>, RwLockUpgradableReadGuard<'_, R, T>>::Ok(move _7); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2042:13: 2045:15
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2039:9: 2048:10
    }

    bb4: {
        _0 = Result::<RwLockWriteGuard<'_, R, T>, RwLockUpgradableReadGuard<'_, R, T>>::Err(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2047:13: 2047:19
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2039:9: 2048:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2049:6: 2049:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2052:1: 2052:97>::deref(_1: &RwLockUpgradableReadGuard<'_, R, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2055:14: 2055:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2055:24: 2055:26
    let _2: *mut T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2056:20: 2056:42
    let mut _3: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2056:20: 2056:42
    let mut _4: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2055:14: 2055:19
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2056:20: 2056:42
        _3 = &((*_4).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2056:20: 2056:42
        _2 = UnsafeCell::<T>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2056:20: 2056:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2056:37: 2056:40
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_2);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2056:18: 2056:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2057:6: 2057:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2060:1: 2060:96>::drop(_1: &mut RwLockUpgradableReadGuard<'_, R, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2062:13: 2062:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2062:24: 2062:24
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2065:13: 2065:48
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2065:13: 2065:48
    let mut _4: &rwlock::RwLock<R, T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2062:13: 2062:22
    scope 1 {
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &rwlock::RwLock<R, T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2065:13: 2065:48
        _3 = &((*_4).0: R);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2065:13: 2065:48
        _2 = <R as RawRwLockUpgrade>::unlock_upgradable(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2065:13: 2065:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2065:29: 2065:46
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockUpgrade>::unlock_upgradable}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2067:6: 2067:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2070:1: 2071:44>::fmt(_1: &RwLockUpgradableReadGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2073:12: 2073:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2073:19: 2073:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2073:50: 2073:61
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2074:25: 2074:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2074:26: 2074:32

    bb0: {
        _4 = <RwLockUpgradableReadGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2074:26: 2074:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2074:26: 2074:32
                                         // + literal: Const { ty: for<'a> fn(&'a RwLockUpgradableReadGuard<'_, R, T>) -> &'a <RwLockUpgradableReadGuard<'_, R, T> as Deref>::Target {<RwLockUpgradableReadGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2074:25: 2074:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2074:9: 2074:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2074:9: 2074:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2075:6: 2075:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2078:1: 2079:44>::fmt(_1: &RwLockUpgradableReadGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2081:12: 2081:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2081:19: 2081:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2081:50: 2081:61
    let mut _3: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2082:9: 2082:24
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2082:9: 2082:17

    bb0: {
        _4 = <RwLockUpgradableReadGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2082:9: 2082:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2082:9: 2082:17
                                         // + literal: Const { ty: for<'a> fn(&'a RwLockUpgradableReadGuard<'_, R, T>) -> &'a <RwLockUpgradableReadGuard<'_, R, T> as Deref>::Target {<RwLockUpgradableReadGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2082:9: 2082:24
        _0 = <T as Display>::fmt(move _3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2082:9: 2082:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2082:18: 2082:21
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2083:6: 2083:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2346:1: 2346:76>::map(_1: MappedRwLockReadGuard<'_, R, T>, _2: F) -> MappedRwLockReadGuard<'_, R, U> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2356:30: 2356:31
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2356:39: 2356:40
    let mut _0: rwlock::MappedRwLockReadGuard<'_, R, U>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2356:48: 2356:79
    let _3: &R;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2360:13: 2360:16
    let mut _5: (&T,);                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2361:20: 2361:42
    let _6: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2361:31: 2361:39
    let _7: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2362:9: 2362:23
    let mut _8: *const U;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2365:13: 2365:17
    let mut _9: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2356:30: 2356:31
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2360:13: 2360:16
        let _4: &U;                      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2361:13: 2361:17
        scope 2 {
            debug data => _4;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2361:13: 2361:17
        }
        scope 3 {
        }
    }

    bb0: {
        _3 = (_1.0: &R);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2360:19: 2360:24
        _9 = deref_copy (_1.1: *const T); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2361:31: 2361:39
        _6 = &(*_9);                     // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2361:31: 2361:39
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2361:20: 2361:42
        _4 = <F as FnOnce<(&T,)>>::call_once(move _2, move _5) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2361:20: 2361:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2361:20: 2361:21
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnOnce<(&T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = core::mem::forget::<MappedRwLockReadGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2362:9: 2362:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2362:9: 2362:20
                                         // + literal: Const { ty: fn(MappedRwLockReadGuard<'_, R, T>) {core::mem::forget::<MappedRwLockReadGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &raw const (*_4);           // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2365:13: 2365:17
        _0 = MappedRwLockReadGuard::<'_, R, U> { raw: _3, data: move _8, marker: const ZeroSized: PhantomData<&U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2363:9: 2367:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&U>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2368:6: 2368:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2346:1: 2346:76>::try_map(_1: MappedRwLockReadGuard<'_, R, T>, _2: F) -> Result<MappedRwLockReadGuard<'_, R, U>, MappedRwLockReadGuard<'_, R, T>> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2380:34: 2380:35
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2380:43: 2380:44
    let mut _0: core::result::Result<rwlock::MappedRwLockReadGuard<'_, R, U>, rwlock::MappedRwLockReadGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2380:52: 2380:97
    let _3: &R;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2384:13: 2384:16
    let mut _4: core::option::Option<&U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2385:26: 2385:48
    let mut _5: (&T,);                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2385:26: 2385:48
    let _6: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2385:37: 2385:45
    let mut _7: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2386:13: 2386:23
    let _9: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2389:9: 2389:23
    let mut _10: rwlock::MappedRwLockReadGuard<'_, R, U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2390:12: 2394:10
    let mut _11: *const U;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2392:13: 2392:17
    let mut _12: *const T;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2380:34: 2380:35
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2384:13: 2384:16
        let _8: &U;                      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2386:18: 2386:22
        scope 2 {
            debug data => _8;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2385:13: 2385:17
        }
        scope 3 {
        }
        scope 4 {
            debug data => _8;            // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2386:18: 2386:22
        }
    }

    bb0: {
        _3 = (_1.0: &R);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2384:19: 2384:24
        _12 = deref_copy (_1.1: *const T); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2385:37: 2385:45
        _6 = &(*_12);                    // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2385:37: 2385:45
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2385:26: 2385:48
        _4 = <F as FnOnce<(&T,)>>::call_once(move _2, move _5) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2385:26: 2385:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2385:26: 2385:27
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnOnce<(&T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_4);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2385:26: 2385:48
        switchInt(move _7) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2385:20: 2385:48
    }

    bb2: {
        _0 = Result::<MappedRwLockReadGuard<'_, R, U>, MappedRwLockReadGuard<'_, R, T>>::Err(move _1); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2387:28: 2387:34
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2395:5: 2395:6
    }

    bb3: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2385:26: 2385:48
    }

    bb4: {
        _8 = ((_4 as Some).0: &U);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2386:18: 2386:22
        _9 = core::mem::forget::<MappedRwLockReadGuard<'_, R, T>>(move _1) -> [return: bb5, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2389:9: 2389:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2389:9: 2389:20
                                         // + literal: Const { ty: fn(MappedRwLockReadGuard<'_, R, T>) {core::mem::forget::<MappedRwLockReadGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = &raw const (*_8);          // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2392:13: 2392:17
        _10 = MappedRwLockReadGuard::<'_, R, U> { raw: _3, data: move _11, marker: const ZeroSized: PhantomData<&U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2390:12: 2394:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&U>, val: Value(<ZST>) }
        _0 = Result::<MappedRwLockReadGuard<'_, R, U>, MappedRwLockReadGuard<'_, R, T>>::Ok(move _10); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2390:9: 2394:11
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2395:5: 2395:6
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2395:6: 2395:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2398:1: 2398:80>::unlock_fair(_1: MappedRwLockReadGuard<'_, R, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2412:24: 2412:25
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2412:33: 2412:33
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2415:13: 2415:39
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2417:9: 2417:23
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2412:24: 2412:25
    scope 1 {
    }

    bb0: {
        _4 = deref_copy (_1.0: &R);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2415:13: 2415:39
        _2 = <R as RawRwLockFair>::unlock_shared_fair(_4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2415:13: 2415:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2415:19: 2415:37
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockFair>::unlock_shared_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = core::mem::forget::<MappedRwLockReadGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2417:9: 2417:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2417:9: 2417:20
                                         // + literal: Const { ty: fn(MappedRwLockReadGuard<'_, R, T>) {core::mem::forget::<MappedRwLockReadGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2418:6: 2418:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2421:1: 2421:86>::deref(_1: &MappedRwLockReadGuard<'_, R, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2424:14: 2424:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2424:24: 2424:26
    let mut _2: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2424:14: 2424:19
    scope 1 {
    }

    bb0: {
        _2 = deref_copy ((*_1).1: *const T); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2425:18: 2425:29
        _0 = &(*_2);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2425:18: 2425:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2426:6: 2426:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2429:1: 2429:85>::drop(_1: &mut MappedRwLockReadGuard<'_, R, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2431:13: 2431:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2431:24: 2431:24
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2434:13: 2434:37
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2431:13: 2431:22
    scope 1 {
    }

    bb0: {
        _3 = deref_copy ((*_1).0: &R);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2434:13: 2434:37
        _2 = <R as RawRwLock>::unlock_shared(_3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2434:13: 2434:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2434:22: 2434:35
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLock>::unlock_shared}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2436:6: 2436:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2439:1: 2440:40>::fmt(_1: &MappedRwLockReadGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2442:12: 2442:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2442:19: 2442:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2442:50: 2442:61
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2443:25: 2443:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2443:26: 2443:32

    bb0: {
        _4 = <MappedRwLockReadGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2443:26: 2443:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2443:26: 2443:32
                                         // + literal: Const { ty: for<'a> fn(&'a MappedRwLockReadGuard<'_, R, T>) -> &'a <MappedRwLockReadGuard<'_, R, T> as Deref>::Target {<MappedRwLockReadGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2443:25: 2443:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2443:9: 2443:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2443:9: 2443:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2444:6: 2444:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2447:1: 2448:40>::fmt(_1: &MappedRwLockReadGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2450:12: 2450:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2450:19: 2450:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2450:50: 2450:61
    let mut _3: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2451:9: 2451:24
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2451:9: 2451:17

    bb0: {
        _4 = <MappedRwLockReadGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2451:9: 2451:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2451:9: 2451:17
                                         // + literal: Const { ty: for<'a> fn(&'a MappedRwLockReadGuard<'_, R, T>) -> &'a <MappedRwLockReadGuard<'_, R, T> as Deref>::Target {<MappedRwLockReadGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2451:9: 2451:24
        _0 = <T as Display>::fmt(move _3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2451:9: 2451:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2451:18: 2451:21
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2452:6: 2452:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2484:1: 2484:77>::map(_1: MappedRwLockWriteGuard<'_, R, T>, _2: F) -> MappedRwLockWriteGuard<'_, R, U> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2494:30: 2494:31
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2494:39: 2494:40
    let mut _0: rwlock::MappedRwLockWriteGuard<'_, R, U>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2494:48: 2494:80
    let _3: &R;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2498:13: 2498:16
    let mut _5: (&mut T,);               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2499:20: 2499:46
    let mut _6: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2499:31: 2499:43
    let _7: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2500:9: 2500:23
    let mut _8: *mut U;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2503:13: 2503:17
    let mut _9: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2494:30: 2494:31
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2498:13: 2498:16
        let _4: &mut U;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2499:13: 2499:17
        scope 2 {
            debug data => _4;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2499:13: 2499:17
        }
        scope 3 {
        }
    }

    bb0: {
        _3 = (_1.0: &R);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2498:19: 2498:24
        _9 = deref_copy (_1.1: *mut T);  // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2499:31: 2499:43
        _6 = &mut (*_9);                 // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2499:31: 2499:43
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2499:20: 2499:46
        _4 = <F as FnOnce<(&mut T,)>>::call_once(move _2, move _5) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2499:20: 2499:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2499:20: 2499:21
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&mut T,)) -> <F as FnOnce<(&mut T,)>>::Output {<F as FnOnce<(&mut T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = core::mem::forget::<MappedRwLockWriteGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2500:9: 2500:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2500:9: 2500:20
                                         // + literal: Const { ty: fn(MappedRwLockWriteGuard<'_, R, T>) {core::mem::forget::<MappedRwLockWriteGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &raw mut (*_4);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2503:13: 2503:17
        _0 = MappedRwLockWriteGuard::<'_, R, U> { raw: _3, data: move _8, marker: const ZeroSized: PhantomData<&mut U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2501:9: 2505:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&mut U>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2506:6: 2506:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2484:1: 2484:77>::try_map(_1: MappedRwLockWriteGuard<'_, R, T>, _2: F) -> Result<MappedRwLockWriteGuard<'_, R, U>, MappedRwLockWriteGuard<'_, R, T>> {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2518:34: 2518:35
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2518:43: 2518:44
    let mut _0: core::result::Result<rwlock::MappedRwLockWriteGuard<'_, R, U>, rwlock::MappedRwLockWriteGuard<'_, R, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2518:52: 2518:98
    let _3: &R;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2522:13: 2522:16
    let mut _4: core::option::Option<&mut U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2523:26: 2523:52
    let mut _5: (&mut T,);               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2523:26: 2523:52
    let mut _6: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2523:37: 2523:49
    let mut _7: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2524:13: 2524:23
    let _9: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2527:9: 2527:23
    let mut _10: rwlock::MappedRwLockWriteGuard<'_, R, U>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2528:12: 2532:10
    let mut _11: *mut U;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2530:13: 2530:17
    let mut _12: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2518:34: 2518:35
    scope 1 {
        debug raw => _3;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2522:13: 2522:16
        let _8: &mut U;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2524:18: 2524:22
        scope 2 {
            debug data => _8;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2523:13: 2523:17
        }
        scope 3 {
        }
        scope 4 {
            debug data => _8;            // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2524:18: 2524:22
        }
    }

    bb0: {
        _3 = (_1.0: &R);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2522:19: 2522:24
        _12 = deref_copy (_1.1: *mut T); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2523:37: 2523:49
        _6 = &mut (*_12);                // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2523:37: 2523:49
        _5 = (_6,);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2523:26: 2523:52
        _4 = <F as FnOnce<(&mut T,)>>::call_once(move _2, move _5) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2523:26: 2523:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2523:26: 2523:27
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&mut T,)) -> <F as FnOnce<(&mut T,)>>::Output {<F as FnOnce<(&mut T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_4);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2523:26: 2523:52
        switchInt(move _7) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2523:20: 2523:52
    }

    bb2: {
        _0 = Result::<MappedRwLockWriteGuard<'_, R, U>, MappedRwLockWriteGuard<'_, R, T>>::Err(move _1); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2525:28: 2525:34
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2533:5: 2533:6
    }

    bb3: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2523:26: 2523:52
    }

    bb4: {
        _8 = move ((_4 as Some).0: &mut U); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2524:18: 2524:22
        _9 = core::mem::forget::<MappedRwLockWriteGuard<'_, R, T>>(move _1) -> [return: bb5, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2527:9: 2527:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2527:9: 2527:20
                                         // + literal: Const { ty: fn(MappedRwLockWriteGuard<'_, R, T>) {core::mem::forget::<MappedRwLockWriteGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = &raw mut (*_8);            // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2530:13: 2530:17
        _10 = MappedRwLockWriteGuard::<'_, R, U> { raw: _3, data: move _11, marker: const ZeroSized: PhantomData<&mut U> }; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2528:12: 2532:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&mut U>, val: Value(<ZST>) }
        _0 = Result::<MappedRwLockWriteGuard<'_, R, U>, MappedRwLockWriteGuard<'_, R, T>>::Ok(move _10); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2528:9: 2532:11
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2533:5: 2533:6
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2533:6: 2533:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2536:1: 2536:81>::unlock_fair(_1: MappedRwLockWriteGuard<'_, R, T>) -> () {
    debug s => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2550:24: 2550:25
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2550:33: 2550:33
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2553:13: 2553:42
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2555:9: 2555:23
    let mut _4: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2550:24: 2550:25
    scope 1 {
    }

    bb0: {
        _4 = deref_copy (_1.0: &R);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2553:13: 2553:42
        _2 = <R as RawRwLockFair>::unlock_exclusive_fair(_4) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2553:13: 2553:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2553:19: 2553:40
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLockFair>::unlock_exclusive_fair}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = core::mem::forget::<MappedRwLockWriteGuard<'_, R, T>>(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2555:9: 2555:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2555:9: 2555:20
                                         // + literal: Const { ty: fn(MappedRwLockWriteGuard<'_, R, T>) {core::mem::forget::<MappedRwLockWriteGuard<'_, R, T>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2556:6: 2556:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2559:1: 2559:87>::deref(_1: &MappedRwLockWriteGuard<'_, R, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2562:14: 2562:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2562:24: 2562:26
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2562:14: 2562:19
    scope 1 {
    }

    bb0: {
        _2 = deref_copy ((*_1).1: *mut T); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2563:18: 2563:29
        _0 = &(*_2);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2563:18: 2563:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2564:6: 2564:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2567:1: 2567:90>::deref_mut(_1: &mut MappedRwLockWriteGuard<'_, R, T>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2569:18: 2569:27
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2569:32: 2569:38
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2569:18: 2569:27
    scope 1 {
    }

    bb0: {
        _2 = deref_copy ((*_1).1: *mut T); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2570:18: 2570:33
        _0 = &mut (*_2);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2570:18: 2570:33
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2571:6: 2571:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2574:1: 2574:86>::drop(_1: &mut MappedRwLockWriteGuard<'_, R, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2576:13: 2576:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2576:24: 2576:24
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2579:13: 2579:40
    let mut _3: &R;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2576:13: 2576:22
    scope 1 {
    }

    bb0: {
        _3 = deref_copy ((*_1).0: &R);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2579:13: 2579:40
        _2 = <R as RawRwLock>::unlock_exclusive(_3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2579:13: 2579:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2579:22: 2579:38
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a R) {<R as RawRwLock>::unlock_exclusive}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2581:6: 2581:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2584:1: 2585:41>::fmt(_1: &MappedRwLockWriteGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2587:12: 2587:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2587:19: 2587:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2587:50: 2587:61
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2588:25: 2588:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2588:26: 2588:32

    bb0: {
        _4 = <MappedRwLockWriteGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2588:26: 2588:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2588:26: 2588:32
                                         // + literal: Const { ty: for<'a> fn(&'a MappedRwLockWriteGuard<'_, R, T>) -> &'a <MappedRwLockWriteGuard<'_, R, T> as Deref>::Target {<MappedRwLockWriteGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2588:25: 2588:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2588:9: 2588:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2588:9: 2588:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2589:6: 2589:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2592:1: 2593:41>::fmt(_1: &MappedRwLockWriteGuard<'_, R, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2595:12: 2595:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2595:19: 2595:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2595:50: 2595:61
    let mut _3: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2596:9: 2596:24
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2596:9: 2596:17

    bb0: {
        _4 = <MappedRwLockWriteGuard<'_, R, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2596:9: 2596:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2596:9: 2596:17
                                         // + literal: Const { ty: for<'a> fn(&'a MappedRwLockWriteGuard<'_, R, T>) -> &'a <MappedRwLockWriteGuard<'_, R, T> as Deref>::Target {<MappedRwLockWriteGuard<'_, R, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2596:9: 2596:24
        _0 = <T as Display>::fmt(move _3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2596:9: 2596:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2596:18: 2596:21
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/rwlock.rs:2597:6: 2597:6
    }
}

fn GuardSend(_1: ()) -> GuardSend {
    let mut _0: GuardSend;               // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/lib.rs:99:1: 99:21

    bb0: {
        _0 = GuardSend(move _1);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/lib.rs:99:1: 99:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/lib.rs:99:1: 99:21
    }
}

// MIR FOR CTFE
fn GuardSend(_1: ()) -> GuardSend {
    let mut _0: GuardSend;               // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/lib.rs:99:1: 99:21

    bb0: {
        _0 = GuardSend(move _1);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/lib.rs:99:1: 99:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/lib.rs:99:1: 99:21
    }
}

fn GuardNoSend(_1: *mut ()) -> GuardNoSend {
    let mut _0: GuardNoSend;             // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/lib.rs:102:1: 102:23

    bb0: {
        _0 = GuardNoSend(move _1);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/lib.rs:102:1: 102:23
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/lib.rs:102:1: 102:23
    }
}

// MIR FOR CTFE
fn GuardNoSend(_1: *mut ()) -> GuardNoSend {
    let mut _0: GuardNoSend;             // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/lib.rs:102:1: 102:23

    bb0: {
        _0 = GuardNoSend(move _1);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/lib.rs:102:1: 102:23
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.9/src/lib.rs:102:1: 102:23
    }
}
