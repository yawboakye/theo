// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at keyboard/src/lib.rs:25:1: 25:47>::new(_1: L, _2: S) -> Keyboard<L, S> {
    debug layout => _1;                  // in scope 0 at keyboard/src/lib.rs:26:16: 26:22
    debug scancode_set => _2;            // in scope 0 at keyboard/src/lib.rs:26:27: 26:39
    let mut _0: Keyboard<L, S>;          // return place in scope 0 at keyboard/src/lib.rs:26:47: 26:51
    let _3: pc_keyboard::Keyboard<L, S>; // in scope 0 at keyboard/src/lib.rs:27:13: 27:21
    let mut _4: pc_keyboard::HandleControl; // in scope 0 at keyboard/src/lib.rs:31:13: 31:34
    let mut _5: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>; // in scope 0 at keyboard/src/lib.rs:35:19: 35:40
    let mut _6: pc_keyboard::Keyboard<L, S>; // in scope 0 at keyboard/src/lib.rs:36:13: 36:21
    scope 1 {
        debug keyboard => _3;            // in scope 1 at keyboard/src/lib.rs:27:13: 27:21
    }

    bb0: {
        _4 = Ignore;                     // scope 0 at keyboard/src/lib.rs:31:13: 31:34
        _3 = pc_keyboard::Keyboard::<L, S>::new(move _2, move _1, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at keyboard/src/lib.rs:27:24: 32:10
                                         // mir::Constant
                                         // + span: keyboard/src/lib.rs:27:24: 27:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(S, L, HandleControl) -> pc_keyboard::Keyboard<L, S> {pc_keyboard::Keyboard::<L, S>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = PortGeneric::<u8, ReadWriteAccess>::new(const 96_u16) -> [return: bb2, unwind unreachable]; // scope 1 at keyboard/src/lib.rs:35:19: 35:40
                                         // mir::Constant
                                         // + span: keyboard/src/lib.rs:35:19: 35:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(u16) -> PortGeneric<u8, ReadWriteAccess> {PortGeneric::<u8, ReadWriteAccess>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = move _3;                    // scope 1 at keyboard/src/lib.rs:36:13: 36:21
        _0 = Keyboard::<L, S> { keyboard: move _6, port: move _5 }; // scope 1 at keyboard/src/lib.rs:34:9: 37:10
        return;                          // scope 0 at keyboard/src/lib.rs:38:6: 38:6
    }
}

fn <impl at keyboard/src/lib.rs:25:1: 25:47>::us_scancode_set_one_keyboard() -> Keyboard<pc_keyboard::layouts::Us104Key, pc_keyboard::ScancodeSet1> {
    let mut _0: Keyboard<pc_keyboard::layouts::Us104Key, pc_keyboard::ScancodeSet1>; // return place in scope 0 at keyboard/src/lib.rs:40:46: 40:78
    let mut _1: pc_keyboard::ScancodeSet1; // in scope 0 at keyboard/src/lib.rs:41:42: 41:61

    bb0: {
        _1 = pc_keyboard::ScancodeSet1::new() -> [return: bb1, unwind unreachable]; // scope 0 at keyboard/src/lib.rs:41:42: 41:61
                                         // mir::Constant
                                         // + span: keyboard/src/lib.rs:41:42: 41:59
                                         // + literal: Const { ty: fn() -> pc_keyboard::ScancodeSet1 {pc_keyboard::ScancodeSet1::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Keyboard::<pc_keyboard::layouts::Us104Key, pc_keyboard::ScancodeSet1>::new(const pc_keyboard::layouts::Us104Key, move _1) -> [return: bb2, unwind unreachable]; // scope 0 at keyboard/src/lib.rs:41:9: 41:62
                                         // mir::Constant
                                         // + span: keyboard/src/lib.rs:41:9: 41:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(pc_keyboard::layouts::Us104Key, pc_keyboard::ScancodeSet1) -> Keyboard<pc_keyboard::layouts::Us104Key, pc_keyboard::ScancodeSet1> {Keyboard::<pc_keyboard::layouts::Us104Key, pc_keyboard::ScancodeSet1>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: pc_keyboard::layouts::Us104Key, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at keyboard/src/lib.rs:42:6: 42:6
    }
}

fn <impl at keyboard/src/lib.rs:25:1: 25:47>::process_decoded_key(_1: &mut Keyboard<L, S>, _2: F) -> () {
    debug self => _1;                    // in scope 0 at keyboard/src/lib.rs:44:38: 44:47
    debug f => _2;                       // in scope 0 at keyboard/src/lib.rs:44:49: 44:50
    let mut _0: ();                      // return place in scope 0 at keyboard/src/lib.rs:45:5: 45:5
    let _3: u8;                          // in scope 0 at keyboard/src/lib.rs:48:13: 48:21
    let mut _4: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>; // in scope 0 at keyboard/src/lib.rs:48:33: 48:49
    let mut _5: core::result::Result<core::option::Option<pc_keyboard::KeyEvent>, pc_keyboard::Error>; // in scope 0 at keyboard/src/lib.rs:49:38: 49:70
    let mut _6: &mut pc_keyboard::Keyboard<L, S>; // in scope 0 at keyboard/src/lib.rs:49:38: 49:70
    let mut _7: u8;                      // in scope 0 at keyboard/src/lib.rs:49:61: 49:69
    let mut _8: isize;                   // in scope 0 at keyboard/src/lib.rs:49:19: 49:34
    let mut _9: isize;                   // in scope 0 at keyboard/src/lib.rs:49:16: 49:35
    let mut _11: core::option::Option<pc_keyboard::DecodedKey>; // in scope 0 at keyboard/src/lib.rs:50:40: 50:81
    let mut _12: &mut pc_keyboard::Keyboard<L, S>; // in scope 0 at keyboard/src/lib.rs:50:40: 50:81
    let mut _13: isize;                  // in scope 0 at keyboard/src/lib.rs:50:20: 50:37
    let _15: R;                          // in scope 0 at keyboard/src/lib.rs:51:17: 51:31
    let mut _16: F;                      // in scope 0 at keyboard/src/lib.rs:51:17: 51:18
    let mut _17: (pc_keyboard::DecodedKey,); // in scope 0 at keyboard/src/lib.rs:51:17: 51:31
    let mut _18: bool;                   // in scope 0 at keyboard/src/lib.rs:54:5: 54:6
    scope 1 {
        debug scancode => _3;            // in scope 1 at keyboard/src/lib.rs:48:13: 48:21
        scope 3 {
            debug key_event => _10;      // in scope 3 at keyboard/src/lib.rs:49:24: 49:33
            let _10: pc_keyboard::KeyEvent; // in scope 3 at keyboard/src/lib.rs:49:24: 49:33
            scope 4 {
                debug decoded_key => _14; // in scope 4 at keyboard/src/lib.rs:50:25: 50:36
                let _14: pc_keyboard::DecodedKey; // in scope 4 at keyboard/src/lib.rs:50:25: 50:36
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _18 = const false;               // scope 0 at keyboard/src/lib.rs:48:13: 48:21
        _18 = const true;                // scope 0 at keyboard/src/lib.rs:48:13: 48:21
        _4 = &mut ((*_1).1: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>); // scope 2 at keyboard/src/lib.rs:48:33: 48:49
        _3 = PortGeneric::<u8, ReadWriteAccess>::read(move _4) -> [return: bb1, unwind unreachable]; // scope 2 at keyboard/src/lib.rs:48:33: 48:49
                                         // mir::Constant
                                         // + span: keyboard/src/lib.rs:48:43: 48:47
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, ReadWriteAccess>) -> u8 {PortGeneric::<u8, ReadWriteAccess>::read}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut ((*_1).0: pc_keyboard::Keyboard<L, S>); // scope 3 at keyboard/src/lib.rs:49:38: 49:70
        _7 = _3;                         // scope 3 at keyboard/src/lib.rs:49:61: 49:69
        _5 = pc_keyboard::Keyboard::<L, S>::add_byte(move _6, move _7) -> [return: bb2, unwind unreachable]; // scope 3 at keyboard/src/lib.rs:49:38: 49:70
                                         // mir::Constant
                                         // + span: keyboard/src/lib.rs:49:52: 49:60
                                         // + literal: Const { ty: for<'a> fn(&'a mut pc_keyboard::Keyboard<L, S>, u8) -> Result<Option<KeyEvent>, pc_keyboard::Error> {pc_keyboard::Keyboard::<L, S>::add_byte}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = discriminant(_5);           // scope 3 at keyboard/src/lib.rs:49:16: 49:35
        switchInt(move _9) -> [0: bb3, otherwise: bb8]; // scope 3 at keyboard/src/lib.rs:49:16: 49:35
    }

    bb3: {
        _8 = discriminant(((_5 as Ok).0: core::option::Option<pc_keyboard::KeyEvent>)); // scope 3 at keyboard/src/lib.rs:49:16: 49:35
        switchInt(move _8) -> [1: bb4, otherwise: bb8]; // scope 3 at keyboard/src/lib.rs:49:16: 49:35
    }

    bb4: {
        _10 = move ((((_5 as Ok).0: core::option::Option<pc_keyboard::KeyEvent>) as Some).0: pc_keyboard::KeyEvent); // scope 3 at keyboard/src/lib.rs:49:24: 49:33
        _12 = &mut ((*_1).0: pc_keyboard::Keyboard<L, S>); // scope 4 at keyboard/src/lib.rs:50:40: 50:81
        _11 = pc_keyboard::Keyboard::<L, S>::process_keyevent(move _12, move _10) -> [return: bb5, unwind unreachable]; // scope 4 at keyboard/src/lib.rs:50:40: 50:81
                                         // mir::Constant
                                         // + span: keyboard/src/lib.rs:50:54: 50:70
                                         // + literal: Const { ty: for<'a> fn(&'a mut pc_keyboard::Keyboard<L, S>, KeyEvent) -> Option<pc_keyboard::DecodedKey> {pc_keyboard::Keyboard::<L, S>::process_keyevent}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = discriminant(_11);         // scope 4 at keyboard/src/lib.rs:50:20: 50:37
        switchInt(move _13) -> [1: bb6, otherwise: bb8]; // scope 4 at keyboard/src/lib.rs:50:20: 50:37
    }

    bb6: {
        _14 = ((_11 as Some).0: pc_keyboard::DecodedKey); // scope 4 at keyboard/src/lib.rs:50:25: 50:36
        _18 = const false;               // scope 4 at keyboard/src/lib.rs:51:17: 51:18
        _16 = move _2;                   // scope 4 at keyboard/src/lib.rs:51:17: 51:18
        _17 = (_14,);                    // scope 4 at keyboard/src/lib.rs:51:17: 51:31
        _15 = <F as FnOnce<(pc_keyboard::DecodedKey,)>>::call_once(move _16, move _17) -> [return: bb7, unwind unreachable]; // scope 4 at keyboard/src/lib.rs:51:17: 51:31
                                         // mir::Constant
                                         // + span: keyboard/src/lib.rs:51:17: 51:18
                                         // + literal: Const { ty: extern "rust-call" fn(F, (pc_keyboard::DecodedKey,)) -> <F as FnOnce<(pc_keyboard::DecodedKey,)>>::Output {<F as FnOnce<(pc_keyboard::DecodedKey,)>>::call_once}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_15) -> [return: bb8, unwind unreachable]; // scope 4 at keyboard/src/lib.rs:51:31: 51:32
    }

    bb8: {
        switchInt(_18) -> [0: bb9, otherwise: bb10]; // scope 0 at keyboard/src/lib.rs:54:5: 54:6
    }

    bb9: {
        return;                          // scope 0 at keyboard/src/lib.rs:54:6: 54:6
    }

    bb10: {
        drop(_2) -> [return: bb9, unwind unreachable]; // scope 0 at keyboard/src/lib.rs:54:5: 54:6
    }
}
