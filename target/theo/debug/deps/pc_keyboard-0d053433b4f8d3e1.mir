// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn dvorak_programmer104::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:10:1: 10:34>::map_keycode(_1: &DVP104Key, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;
    debug keycode => _2;
    debug modifiers => _3;
    debug handle_ctrl => _4;
    let mut _0: DecodedKey;
    let _5: bool;
    let mut _6: &HandleControl;
    let mut _7: u8;
    let mut _8: bool;
    let mut _9: char;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: char;
    let mut _23: char;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: char;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: char;
    let mut _86: bool;
    let mut _87: KeyCode;
    let mut _88: bool;
    let mut _89: KeyCode;
    let mut _90: bool;
    let mut _91: KeyCode;
    let mut _92: bool;
    let mut _93: KeyCode;
    let mut _94: bool;
    let mut _95: KeyCode;
    let mut _96: bool;
    let mut _97: KeyCode;
    let mut _98: bool;
    let mut _99: KeyCode;
    let mut _100: bool;
    let mut _101: KeyCode;
    let mut _102: bool;
    let mut _103: KeyCode;
    let mut _104: bool;
    let mut _105: char;
    let mut _106: char;
    let mut _107: &HandleControl;
    scope 1 {
        debug map_to_unicode => _5;
        scope 2 {
            debug k => _2;
        }
    }

    bb0: {
        _6 = &_4;
        _107 = const _;
        _5 = <HandleControl as PartialEq>::eq(move _6, _107) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _7 = discriminant(_2);
        switchInt(move _7) -> [0: bb7, 17: bb3, 18: bb9, 19: bb13, 20: bb17, 21: bb21, 22: bb25, 23: bb29, 24: bb33, 25: bb37, 26: bb41, 27: bb45, 28: bb49, 29: bb53, 30: bb57, 35: bb306, 36: bb307, 37: bb308, 38: bb59, 39: bb61, 40: bb65, 41: bb69, 42: bb73, 43: bb81, 44: bb89, 45: bb97, 46: bb105, 47: bb113, 48: bb121, 49: bb129, 50: bb133, 52: bb137, 53: bb304, 56: bb309, 57: bb312, 58: bb315, 59: bb318, 61: bb141, 62: bb149, 63: bb157, 64: bb165, 65: bb173, 66: bb181, 67: bb189, 68: bb197, 69: bb205, 70: bb213, 71: bb221, 72: bb225, 73: bb319, 74: bb322, 75: bb323, 77: bb227, 78: bb231, 79: bb239, 80: bb247, 81: bb255, 82: bb263, 83: bb271, 84: bb279, 85: bb287, 86: bb295, 89: bb326, 90: bb329, 91: bb332, 92: bb342, 96: bb303, 104: bb335, 105: bb338, otherwise: bb2];
    }

    bb2: {
        _0 = DecodedKey::RawKey(_2);
        goto -> bb344;
    }

    bb3: {
        _8 = Modifiers::is_shifted(_3) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _0 = DecodedKey::Unicode(const '~');
        goto -> bb344;
    }

    bb6: {
        _0 = DecodedKey::Unicode(const '$');
        goto -> bb344;
    }

    bb7: {
        _9 = <u8 as Into<char>>::into(const 27_u8) -> [return: bb8, unwind unreachable];
    }

    bb8: {
        _0 = DecodedKey::Unicode(move _9);
        goto -> bb344;
    }

    bb9: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb10, unwind unreachable];
    }

    bb10: {
        switchInt(move _10) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _0 = DecodedKey::Unicode(const '%');
        goto -> bb344;
    }

    bb12: {
        _0 = DecodedKey::Unicode(const '&');
        goto -> bb344;
    }

    bb13: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb14, unwind unreachable];
    }

    bb14: {
        switchInt(move _11) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _0 = DecodedKey::Unicode(const '7');
        goto -> bb344;
    }

    bb16: {
        _0 = DecodedKey::Unicode(const '[');
        goto -> bb344;
    }

    bb17: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb18, unwind unreachable];
    }

    bb18: {
        switchInt(move _12) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _0 = DecodedKey::Unicode(const '5');
        goto -> bb344;
    }

    bb20: {
        _0 = DecodedKey::Unicode(const '{');
        goto -> bb344;
    }

    bb21: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb22, unwind unreachable];
    }

    bb22: {
        switchInt(move _13) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _0 = DecodedKey::Unicode(const '3');
        goto -> bb344;
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '}');
        goto -> bb344;
    }

    bb25: {
        _14 = Modifiers::is_shifted(_3) -> [return: bb26, unwind unreachable];
    }

    bb26: {
        switchInt(move _14) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _0 = DecodedKey::Unicode(const '1');
        goto -> bb344;
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '(');
        goto -> bb344;
    }

    bb29: {
        _15 = Modifiers::is_shifted(_3) -> [return: bb30, unwind unreachable];
    }

    bb30: {
        switchInt(move _15) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _0 = DecodedKey::Unicode(const '9');
        goto -> bb344;
    }

    bb32: {
        _0 = DecodedKey::Unicode(const '=');
        goto -> bb344;
    }

    bb33: {
        _16 = Modifiers::is_shifted(_3) -> [return: bb34, unwind unreachable];
    }

    bb34: {
        switchInt(move _16) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _0 = DecodedKey::Unicode(const '0');
        goto -> bb344;
    }

    bb36: {
        _0 = DecodedKey::Unicode(const '*');
        goto -> bb344;
    }

    bb37: {
        _17 = Modifiers::is_shifted(_3) -> [return: bb38, unwind unreachable];
    }

    bb38: {
        switchInt(move _17) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _0 = DecodedKey::Unicode(const '2');
        goto -> bb344;
    }

    bb40: {
        _0 = DecodedKey::Unicode(const ')');
        goto -> bb344;
    }

    bb41: {
        _18 = Modifiers::is_shifted(_3) -> [return: bb42, unwind unreachable];
    }

    bb42: {
        switchInt(move _18) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _0 = DecodedKey::Unicode(const '4');
        goto -> bb344;
    }

    bb44: {
        _0 = DecodedKey::Unicode(const '+');
        goto -> bb344;
    }

    bb45: {
        _19 = Modifiers::is_shifted(_3) -> [return: bb46, unwind unreachable];
    }

    bb46: {
        switchInt(move _19) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _0 = DecodedKey::Unicode(const '6');
        goto -> bb344;
    }

    bb48: {
        _0 = DecodedKey::Unicode(const ']');
        goto -> bb344;
    }

    bb49: {
        _20 = Modifiers::is_shifted(_3) -> [return: bb50, unwind unreachable];
    }

    bb50: {
        switchInt(move _20) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _0 = DecodedKey::Unicode(const '8');
        goto -> bb344;
    }

    bb52: {
        _0 = DecodedKey::Unicode(const '!');
        goto -> bb344;
    }

    bb53: {
        _21 = Modifiers::is_shifted(_3) -> [return: bb54, unwind unreachable];
    }

    bb54: {
        switchInt(move _21) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _0 = DecodedKey::Unicode(const '`');
        goto -> bb344;
    }

    bb56: {
        _0 = DecodedKey::Unicode(const '=');
        goto -> bb344;
    }

    bb57: {
        _22 = <u8 as Into<char>>::into(const 8_u8) -> [return: bb58, unwind unreachable];
    }

    bb58: {
        _0 = DecodedKey::Unicode(move _22);
        goto -> bb344;
    }

    bb59: {
        _23 = <u8 as Into<char>>::into(const 9_u8) -> [return: bb60, unwind unreachable];
    }

    bb60: {
        _0 = DecodedKey::Unicode(move _23);
        goto -> bb344;
    }

    bb61: {
        _24 = Modifiers::is_shifted(_3) -> [return: bb62, unwind unreachable];
    }

    bb62: {
        switchInt(move _24) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _0 = DecodedKey::Unicode(const ':');
        goto -> bb344;
    }

    bb64: {
        _0 = DecodedKey::Unicode(const ';');
        goto -> bb344;
    }

    bb65: {
        _25 = Modifiers::is_shifted(_3) -> [return: bb66, unwind unreachable];
    }

    bb66: {
        switchInt(move _25) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _0 = DecodedKey::Unicode(const '<');
        goto -> bb344;
    }

    bb68: {
        _0 = DecodedKey::Unicode(const ',');
        goto -> bb344;
    }

    bb69: {
        _26 = Modifiers::is_shifted(_3) -> [return: bb70, unwind unreachable];
    }

    bb70: {
        switchInt(move _26) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _0 = DecodedKey::Unicode(const '>');
        goto -> bb344;
    }

    bb72: {
        _0 = DecodedKey::Unicode(const '.');
        goto -> bb344;
    }

    bb73: {
        switchInt(_5) -> [0: bb77, otherwise: bb74];
    }

    bb74: {
        _27 = Modifiers::is_ctrl(_3) -> [return: bb75, unwind unreachable];
    }

    bb75: {
        switchInt(move _27) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _0 = DecodedKey::Unicode(const '\u{10}');
        goto -> bb344;
    }

    bb77: {
        _28 = Modifiers::is_caps(_3) -> [return: bb78, unwind unreachable];
    }

    bb78: {
        switchInt(move _28) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        _0 = DecodedKey::Unicode(const 'P');
        goto -> bb344;
    }

    bb80: {
        _0 = DecodedKey::Unicode(const 'p');
        goto -> bb344;
    }

    bb81: {
        switchInt(_5) -> [0: bb85, otherwise: bb82];
    }

    bb82: {
        _29 = Modifiers::is_ctrl(_3) -> [return: bb83, unwind unreachable];
    }

    bb83: {
        switchInt(move _29) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        _0 = DecodedKey::Unicode(const '\u{19}');
        goto -> bb344;
    }

    bb85: {
        _30 = Modifiers::is_caps(_3) -> [return: bb86, unwind unreachable];
    }

    bb86: {
        switchInt(move _30) -> [0: bb88, otherwise: bb87];
    }

    bb87: {
        _0 = DecodedKey::Unicode(const 'Y');
        goto -> bb344;
    }

    bb88: {
        _0 = DecodedKey::Unicode(const 'y');
        goto -> bb344;
    }

    bb89: {
        switchInt(_5) -> [0: bb93, otherwise: bb90];
    }

    bb90: {
        _31 = Modifiers::is_ctrl(_3) -> [return: bb91, unwind unreachable];
    }

    bb91: {
        switchInt(move _31) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        _0 = DecodedKey::Unicode(const '\u{6}');
        goto -> bb344;
    }

    bb93: {
        _32 = Modifiers::is_caps(_3) -> [return: bb94, unwind unreachable];
    }

    bb94: {
        switchInt(move _32) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _0 = DecodedKey::Unicode(const 'F');
        goto -> bb344;
    }

    bb96: {
        _0 = DecodedKey::Unicode(const 'f');
        goto -> bb344;
    }

    bb97: {
        switchInt(_5) -> [0: bb101, otherwise: bb98];
    }

    bb98: {
        _33 = Modifiers::is_ctrl(_3) -> [return: bb99, unwind unreachable];
    }

    bb99: {
        switchInt(move _33) -> [0: bb101, otherwise: bb100];
    }

    bb100: {
        _0 = DecodedKey::Unicode(const '\u{7}');
        goto -> bb344;
    }

    bb101: {
        _34 = Modifiers::is_caps(_3) -> [return: bb102, unwind unreachable];
    }

    bb102: {
        switchInt(move _34) -> [0: bb104, otherwise: bb103];
    }

    bb103: {
        _0 = DecodedKey::Unicode(const 'G');
        goto -> bb344;
    }

    bb104: {
        _0 = DecodedKey::Unicode(const 'g');
        goto -> bb344;
    }

    bb105: {
        switchInt(_5) -> [0: bb109, otherwise: bb106];
    }

    bb106: {
        _35 = Modifiers::is_ctrl(_3) -> [return: bb107, unwind unreachable];
    }

    bb107: {
        switchInt(move _35) -> [0: bb109, otherwise: bb108];
    }

    bb108: {
        _0 = DecodedKey::Unicode(const '\u{3}');
        goto -> bb344;
    }

    bb109: {
        _36 = Modifiers::is_caps(_3) -> [return: bb110, unwind unreachable];
    }

    bb110: {
        switchInt(move _36) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _0 = DecodedKey::Unicode(const 'C');
        goto -> bb344;
    }

    bb112: {
        _0 = DecodedKey::Unicode(const 'c');
        goto -> bb344;
    }

    bb113: {
        switchInt(_5) -> [0: bb117, otherwise: bb114];
    }

    bb114: {
        _37 = Modifiers::is_ctrl(_3) -> [return: bb115, unwind unreachable];
    }

    bb115: {
        switchInt(move _37) -> [0: bb117, otherwise: bb116];
    }

    bb116: {
        _0 = DecodedKey::Unicode(const '\u{12}');
        goto -> bb344;
    }

    bb117: {
        _38 = Modifiers::is_caps(_3) -> [return: bb118, unwind unreachable];
    }

    bb118: {
        switchInt(move _38) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _0 = DecodedKey::Unicode(const 'R');
        goto -> bb344;
    }

    bb120: {
        _0 = DecodedKey::Unicode(const 'r');
        goto -> bb344;
    }

    bb121: {
        switchInt(_5) -> [0: bb125, otherwise: bb122];
    }

    bb122: {
        _39 = Modifiers::is_ctrl(_3) -> [return: bb123, unwind unreachable];
    }

    bb123: {
        switchInt(move _39) -> [0: bb125, otherwise: bb124];
    }

    bb124: {
        _0 = DecodedKey::Unicode(const '\u{c}');
        goto -> bb344;
    }

    bb125: {
        _40 = Modifiers::is_caps(_3) -> [return: bb126, unwind unreachable];
    }

    bb126: {
        switchInt(move _40) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        _0 = DecodedKey::Unicode(const 'L');
        goto -> bb344;
    }

    bb128: {
        _0 = DecodedKey::Unicode(const 'l');
        goto -> bb344;
    }

    bb129: {
        _41 = Modifiers::is_shifted(_3) -> [return: bb130, unwind unreachable];
    }

    bb130: {
        switchInt(move _41) -> [0: bb132, otherwise: bb131];
    }

    bb131: {
        _0 = DecodedKey::Unicode(const '?');
        goto -> bb344;
    }

    bb132: {
        _0 = DecodedKey::Unicode(const '/');
        goto -> bb344;
    }

    bb133: {
        _42 = Modifiers::is_shifted(_3) -> [return: bb134, unwind unreachable];
    }

    bb134: {
        switchInt(move _42) -> [0: bb136, otherwise: bb135];
    }

    bb135: {
        _0 = DecodedKey::Unicode(const '^');
        goto -> bb344;
    }

    bb136: {
        _0 = DecodedKey::Unicode(const '@');
        goto -> bb344;
    }

    bb137: {
        _43 = Modifiers::is_shifted(_3) -> [return: bb138, unwind unreachable];
    }

    bb138: {
        switchInt(move _43) -> [0: bb140, otherwise: bb139];
    }

    bb139: {
        _0 = DecodedKey::Unicode(const '|');
        goto -> bb344;
    }

    bb140: {
        _0 = DecodedKey::Unicode(const '\\');
        goto -> bb344;
    }

    bb141: {
        switchInt(_5) -> [0: bb145, otherwise: bb142];
    }

    bb142: {
        _44 = Modifiers::is_ctrl(_3) -> [return: bb143, unwind unreachable];
    }

    bb143: {
        switchInt(move _44) -> [0: bb145, otherwise: bb144];
    }

    bb144: {
        _0 = DecodedKey::Unicode(const '\u{1}');
        goto -> bb344;
    }

    bb145: {
        _45 = Modifiers::is_caps(_3) -> [return: bb146, unwind unreachable];
    }

    bb146: {
        switchInt(move _45) -> [0: bb148, otherwise: bb147];
    }

    bb147: {
        _0 = DecodedKey::Unicode(const 'A');
        goto -> bb344;
    }

    bb148: {
        _0 = DecodedKey::Unicode(const 'a');
        goto -> bb344;
    }

    bb149: {
        switchInt(_5) -> [0: bb153, otherwise: bb150];
    }

    bb150: {
        _46 = Modifiers::is_ctrl(_3) -> [return: bb151, unwind unreachable];
    }

    bb151: {
        switchInt(move _46) -> [0: bb153, otherwise: bb152];
    }

    bb152: {
        _0 = DecodedKey::Unicode(const '\u{f}');
        goto -> bb344;
    }

    bb153: {
        _47 = Modifiers::is_caps(_3) -> [return: bb154, unwind unreachable];
    }

    bb154: {
        switchInt(move _47) -> [0: bb156, otherwise: bb155];
    }

    bb155: {
        _0 = DecodedKey::Unicode(const 'O');
        goto -> bb344;
    }

    bb156: {
        _0 = DecodedKey::Unicode(const 'o');
        goto -> bb344;
    }

    bb157: {
        switchInt(_5) -> [0: bb161, otherwise: bb158];
    }

    bb158: {
        _48 = Modifiers::is_ctrl(_3) -> [return: bb159, unwind unreachable];
    }

    bb159: {
        switchInt(move _48) -> [0: bb161, otherwise: bb160];
    }

    bb160: {
        _0 = DecodedKey::Unicode(const '\u{5}');
        goto -> bb344;
    }

    bb161: {
        _49 = Modifiers::is_caps(_3) -> [return: bb162, unwind unreachable];
    }

    bb162: {
        switchInt(move _49) -> [0: bb164, otherwise: bb163];
    }

    bb163: {
        _0 = DecodedKey::Unicode(const 'E');
        goto -> bb344;
    }

    bb164: {
        _0 = DecodedKey::Unicode(const 'e');
        goto -> bb344;
    }

    bb165: {
        switchInt(_5) -> [0: bb169, otherwise: bb166];
    }

    bb166: {
        _50 = Modifiers::is_ctrl(_3) -> [return: bb167, unwind unreachable];
    }

    bb167: {
        switchInt(move _50) -> [0: bb169, otherwise: bb168];
    }

    bb168: {
        _0 = DecodedKey::Unicode(const '\u{15}');
        goto -> bb344;
    }

    bb169: {
        _51 = Modifiers::is_caps(_3) -> [return: bb170, unwind unreachable];
    }

    bb170: {
        switchInt(move _51) -> [0: bb172, otherwise: bb171];
    }

    bb171: {
        _0 = DecodedKey::Unicode(const 'U');
        goto -> bb344;
    }

    bb172: {
        _0 = DecodedKey::Unicode(const 'u');
        goto -> bb344;
    }

    bb173: {
        switchInt(_5) -> [0: bb177, otherwise: bb174];
    }

    bb174: {
        _52 = Modifiers::is_ctrl(_3) -> [return: bb175, unwind unreachable];
    }

    bb175: {
        switchInt(move _52) -> [0: bb177, otherwise: bb176];
    }

    bb176: {
        _0 = DecodedKey::Unicode(const '\t');
        goto -> bb344;
    }

    bb177: {
        _53 = Modifiers::is_caps(_3) -> [return: bb178, unwind unreachable];
    }

    bb178: {
        switchInt(move _53) -> [0: bb180, otherwise: bb179];
    }

    bb179: {
        _0 = DecodedKey::Unicode(const 'I');
        goto -> bb344;
    }

    bb180: {
        _0 = DecodedKey::Unicode(const 'i');
        goto -> bb344;
    }

    bb181: {
        switchInt(_5) -> [0: bb185, otherwise: bb182];
    }

    bb182: {
        _54 = Modifiers::is_ctrl(_3) -> [return: bb183, unwind unreachable];
    }

    bb183: {
        switchInt(move _54) -> [0: bb185, otherwise: bb184];
    }

    bb184: {
        _0 = DecodedKey::Unicode(const '\u{4}');
        goto -> bb344;
    }

    bb185: {
        _55 = Modifiers::is_caps(_3) -> [return: bb186, unwind unreachable];
    }

    bb186: {
        switchInt(move _55) -> [0: bb188, otherwise: bb187];
    }

    bb187: {
        _0 = DecodedKey::Unicode(const 'D');
        goto -> bb344;
    }

    bb188: {
        _0 = DecodedKey::Unicode(const 'd');
        goto -> bb344;
    }

    bb189: {
        switchInt(_5) -> [0: bb193, otherwise: bb190];
    }

    bb190: {
        _56 = Modifiers::is_ctrl(_3) -> [return: bb191, unwind unreachable];
    }

    bb191: {
        switchInt(move _56) -> [0: bb193, otherwise: bb192];
    }

    bb192: {
        _0 = DecodedKey::Unicode(const '\u{8}');
        goto -> bb344;
    }

    bb193: {
        _57 = Modifiers::is_caps(_3) -> [return: bb194, unwind unreachable];
    }

    bb194: {
        switchInt(move _57) -> [0: bb196, otherwise: bb195];
    }

    bb195: {
        _0 = DecodedKey::Unicode(const 'H');
        goto -> bb344;
    }

    bb196: {
        _0 = DecodedKey::Unicode(const 'h');
        goto -> bb344;
    }

    bb197: {
        switchInt(_5) -> [0: bb201, otherwise: bb198];
    }

    bb198: {
        _58 = Modifiers::is_ctrl(_3) -> [return: bb199, unwind unreachable];
    }

    bb199: {
        switchInt(move _58) -> [0: bb201, otherwise: bb200];
    }

    bb200: {
        _0 = DecodedKey::Unicode(const '\u{14}');
        goto -> bb344;
    }

    bb201: {
        _59 = Modifiers::is_caps(_3) -> [return: bb202, unwind unreachable];
    }

    bb202: {
        switchInt(move _59) -> [0: bb204, otherwise: bb203];
    }

    bb203: {
        _0 = DecodedKey::Unicode(const 'T');
        goto -> bb344;
    }

    bb204: {
        _0 = DecodedKey::Unicode(const 't');
        goto -> bb344;
    }

    bb205: {
        switchInt(_5) -> [0: bb209, otherwise: bb206];
    }

    bb206: {
        _60 = Modifiers::is_ctrl(_3) -> [return: bb207, unwind unreachable];
    }

    bb207: {
        switchInt(move _60) -> [0: bb209, otherwise: bb208];
    }

    bb208: {
        _0 = DecodedKey::Unicode(const '\u{e}');
        goto -> bb344;
    }

    bb209: {
        _61 = Modifiers::is_caps(_3) -> [return: bb210, unwind unreachable];
    }

    bb210: {
        switchInt(move _61) -> [0: bb212, otherwise: bb211];
    }

    bb211: {
        _0 = DecodedKey::Unicode(const 'N');
        goto -> bb344;
    }

    bb212: {
        _0 = DecodedKey::Unicode(const 'n');
        goto -> bb344;
    }

    bb213: {
        switchInt(_5) -> [0: bb217, otherwise: bb214];
    }

    bb214: {
        _62 = Modifiers::is_ctrl(_3) -> [return: bb215, unwind unreachable];
    }

    bb215: {
        switchInt(move _62) -> [0: bb217, otherwise: bb216];
    }

    bb216: {
        _0 = DecodedKey::Unicode(const '\u{13}');
        goto -> bb344;
    }

    bb217: {
        _63 = Modifiers::is_caps(_3) -> [return: bb218, unwind unreachable];
    }

    bb218: {
        switchInt(move _63) -> [0: bb220, otherwise: bb219];
    }

    bb219: {
        _0 = DecodedKey::Unicode(const 'S');
        goto -> bb344;
    }

    bb220: {
        _0 = DecodedKey::Unicode(const 's');
        goto -> bb344;
    }

    bb221: {
        _64 = Modifiers::is_shifted(_3) -> [return: bb222, unwind unreachable];
    }

    bb222: {
        switchInt(move _64) -> [0: bb224, otherwise: bb223];
    }

    bb223: {
        _0 = DecodedKey::Unicode(const '_');
        goto -> bb344;
    }

    bb224: {
        _0 = DecodedKey::Unicode(const '-');
        goto -> bb344;
    }

    bb225: {
        _65 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb226, unwind unreachable];
    }

    bb226: {
        _0 = DecodedKey::Unicode(move _65);
        goto -> bb344;
    }

    bb227: {
        _66 = Modifiers::is_shifted(_3) -> [return: bb228, unwind unreachable];
    }

    bb228: {
        switchInt(move _66) -> [0: bb230, otherwise: bb229];
    }

    bb229: {
        _0 = DecodedKey::Unicode(const '"');
        goto -> bb344;
    }

    bb230: {
        _0 = DecodedKey::Unicode(const '\'');
        goto -> bb344;
    }

    bb231: {
        switchInt(_5) -> [0: bb235, otherwise: bb232];
    }

    bb232: {
        _67 = Modifiers::is_ctrl(_3) -> [return: bb233, unwind unreachable];
    }

    bb233: {
        switchInt(move _67) -> [0: bb235, otherwise: bb234];
    }

    bb234: {
        _0 = DecodedKey::Unicode(const '\u{11}');
        goto -> bb344;
    }

    bb235: {
        _68 = Modifiers::is_caps(_3) -> [return: bb236, unwind unreachable];
    }

    bb236: {
        switchInt(move _68) -> [0: bb238, otherwise: bb237];
    }

    bb237: {
        _0 = DecodedKey::Unicode(const 'Q');
        goto -> bb344;
    }

    bb238: {
        _0 = DecodedKey::Unicode(const 'q');
        goto -> bb344;
    }

    bb239: {
        switchInt(_5) -> [0: bb243, otherwise: bb240];
    }

    bb240: {
        _69 = Modifiers::is_ctrl(_3) -> [return: bb241, unwind unreachable];
    }

    bb241: {
        switchInt(move _69) -> [0: bb243, otherwise: bb242];
    }

    bb242: {
        _0 = DecodedKey::Unicode(const '\n');
        goto -> bb344;
    }

    bb243: {
        _70 = Modifiers::is_caps(_3) -> [return: bb244, unwind unreachable];
    }

    bb244: {
        switchInt(move _70) -> [0: bb246, otherwise: bb245];
    }

    bb245: {
        _0 = DecodedKey::Unicode(const 'J');
        goto -> bb344;
    }

    bb246: {
        _0 = DecodedKey::Unicode(const 'j');
        goto -> bb344;
    }

    bb247: {
        switchInt(_5) -> [0: bb251, otherwise: bb248];
    }

    bb248: {
        _71 = Modifiers::is_ctrl(_3) -> [return: bb249, unwind unreachable];
    }

    bb249: {
        switchInt(move _71) -> [0: bb251, otherwise: bb250];
    }

    bb250: {
        _0 = DecodedKey::Unicode(const '\u{b}');
        goto -> bb344;
    }

    bb251: {
        _72 = Modifiers::is_caps(_3) -> [return: bb252, unwind unreachable];
    }

    bb252: {
        switchInt(move _72) -> [0: bb254, otherwise: bb253];
    }

    bb253: {
        _0 = DecodedKey::Unicode(const 'K');
        goto -> bb344;
    }

    bb254: {
        _0 = DecodedKey::Unicode(const 'k');
        goto -> bb344;
    }

    bb255: {
        switchInt(_5) -> [0: bb259, otherwise: bb256];
    }

    bb256: {
        _73 = Modifiers::is_ctrl(_3) -> [return: bb257, unwind unreachable];
    }

    bb257: {
        switchInt(move _73) -> [0: bb259, otherwise: bb258];
    }

    bb258: {
        _0 = DecodedKey::Unicode(const '\u{18}');
        goto -> bb344;
    }

    bb259: {
        _74 = Modifiers::is_caps(_3) -> [return: bb260, unwind unreachable];
    }

    bb260: {
        switchInt(move _74) -> [0: bb262, otherwise: bb261];
    }

    bb261: {
        _0 = DecodedKey::Unicode(const 'X');
        goto -> bb344;
    }

    bb262: {
        _0 = DecodedKey::Unicode(const 'x');
        goto -> bb344;
    }

    bb263: {
        switchInt(_5) -> [0: bb267, otherwise: bb264];
    }

    bb264: {
        _75 = Modifiers::is_ctrl(_3) -> [return: bb265, unwind unreachable];
    }

    bb265: {
        switchInt(move _75) -> [0: bb267, otherwise: bb266];
    }

    bb266: {
        _0 = DecodedKey::Unicode(const '\u{2}');
        goto -> bb344;
    }

    bb267: {
        _76 = Modifiers::is_caps(_3) -> [return: bb268, unwind unreachable];
    }

    bb268: {
        switchInt(move _76) -> [0: bb270, otherwise: bb269];
    }

    bb269: {
        _0 = DecodedKey::Unicode(const 'B');
        goto -> bb344;
    }

    bb270: {
        _0 = DecodedKey::Unicode(const 'b');
        goto -> bb344;
    }

    bb271: {
        switchInt(_5) -> [0: bb275, otherwise: bb272];
    }

    bb272: {
        _77 = Modifiers::is_ctrl(_3) -> [return: bb273, unwind unreachable];
    }

    bb273: {
        switchInt(move _77) -> [0: bb275, otherwise: bb274];
    }

    bb274: {
        _0 = DecodedKey::Unicode(const '\r');
        goto -> bb344;
    }

    bb275: {
        _78 = Modifiers::is_caps(_3) -> [return: bb276, unwind unreachable];
    }

    bb276: {
        switchInt(move _78) -> [0: bb278, otherwise: bb277];
    }

    bb277: {
        _0 = DecodedKey::Unicode(const 'M');
        goto -> bb344;
    }

    bb278: {
        _0 = DecodedKey::Unicode(const 'm');
        goto -> bb344;
    }

    bb279: {
        switchInt(_5) -> [0: bb283, otherwise: bb280];
    }

    bb280: {
        _79 = Modifiers::is_ctrl(_3) -> [return: bb281, unwind unreachable];
    }

    bb281: {
        switchInt(move _79) -> [0: bb283, otherwise: bb282];
    }

    bb282: {
        _0 = DecodedKey::Unicode(const '\u{17}');
        goto -> bb344;
    }

    bb283: {
        _80 = Modifiers::is_caps(_3) -> [return: bb284, unwind unreachable];
    }

    bb284: {
        switchInt(move _80) -> [0: bb286, otherwise: bb285];
    }

    bb285: {
        _0 = DecodedKey::Unicode(const 'W');
        goto -> bb344;
    }

    bb286: {
        _0 = DecodedKey::Unicode(const 'w');
        goto -> bb344;
    }

    bb287: {
        switchInt(_5) -> [0: bb291, otherwise: bb288];
    }

    bb288: {
        _81 = Modifiers::is_ctrl(_3) -> [return: bb289, unwind unreachable];
    }

    bb289: {
        switchInt(move _81) -> [0: bb291, otherwise: bb290];
    }

    bb290: {
        _0 = DecodedKey::Unicode(const '\u{16}');
        goto -> bb344;
    }

    bb291: {
        _82 = Modifiers::is_caps(_3) -> [return: bb292, unwind unreachable];
    }

    bb292: {
        switchInt(move _82) -> [0: bb294, otherwise: bb293];
    }

    bb293: {
        _0 = DecodedKey::Unicode(const 'V');
        goto -> bb344;
    }

    bb294: {
        _0 = DecodedKey::Unicode(const 'v');
        goto -> bb344;
    }

    bb295: {
        switchInt(_5) -> [0: bb299, otherwise: bb296];
    }

    bb296: {
        _83 = Modifiers::is_ctrl(_3) -> [return: bb297, unwind unreachable];
    }

    bb297: {
        switchInt(move _83) -> [0: bb299, otherwise: bb298];
    }

    bb298: {
        _0 = DecodedKey::Unicode(const '\u{1a}');
        goto -> bb344;
    }

    bb299: {
        _84 = Modifiers::is_caps(_3) -> [return: bb300, unwind unreachable];
    }

    bb300: {
        switchInt(move _84) -> [0: bb302, otherwise: bb301];
    }

    bb301: {
        _0 = DecodedKey::Unicode(const 'Z');
        goto -> bb344;
    }

    bb302: {
        _0 = DecodedKey::Unicode(const 'z');
        goto -> bb344;
    }

    bb303: {
        _0 = DecodedKey::Unicode(const ' ');
        goto -> bb344;
    }

    bb304: {
        _85 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb305, unwind unreachable];
    }

    bb305: {
        _0 = DecodedKey::Unicode(move _85);
        goto -> bb344;
    }

    bb306: {
        _0 = DecodedKey::Unicode(const '/');
        goto -> bb344;
    }

    bb307: {
        _0 = DecodedKey::Unicode(const '*');
        goto -> bb344;
    }

    bb308: {
        _0 = DecodedKey::Unicode(const '-');
        goto -> bb344;
    }

    bb309: {
        _86 = ((*_3).4: bool);
        switchInt(move _86) -> [0: bb311, otherwise: bb310];
    }

    bb310: {
        _0 = DecodedKey::Unicode(const '7');
        goto -> bb344;
    }

    bb311: {
        _87 = KeyCode::Home;
        _0 = DecodedKey::RawKey(move _87);
        goto -> bb344;
    }

    bb312: {
        _88 = ((*_3).4: bool);
        switchInt(move _88) -> [0: bb314, otherwise: bb313];
    }

    bb313: {
        _0 = DecodedKey::Unicode(const '8');
        goto -> bb344;
    }

    bb314: {
        _89 = KeyCode::ArrowUp;
        _0 = DecodedKey::RawKey(move _89);
        goto -> bb344;
    }

    bb315: {
        _90 = ((*_3).4: bool);
        switchInt(move _90) -> [0: bb317, otherwise: bb316];
    }

    bb316: {
        _0 = DecodedKey::Unicode(const '9');
        goto -> bb344;
    }

    bb317: {
        _91 = KeyCode::PageUp;
        _0 = DecodedKey::RawKey(move _91);
        goto -> bb344;
    }

    bb318: {
        _0 = DecodedKey::Unicode(const '+');
        goto -> bb344;
    }

    bb319: {
        _92 = ((*_3).4: bool);
        switchInt(move _92) -> [0: bb321, otherwise: bb320];
    }

    bb320: {
        _0 = DecodedKey::Unicode(const '4');
        goto -> bb344;
    }

    bb321: {
        _93 = KeyCode::ArrowLeft;
        _0 = DecodedKey::RawKey(move _93);
        goto -> bb344;
    }

    bb322: {
        _0 = DecodedKey::Unicode(const '5');
        goto -> bb344;
    }

    bb323: {
        _94 = ((*_3).4: bool);
        switchInt(move _94) -> [0: bb325, otherwise: bb324];
    }

    bb324: {
        _0 = DecodedKey::Unicode(const '6');
        goto -> bb344;
    }

    bb325: {
        _95 = KeyCode::ArrowRight;
        _0 = DecodedKey::RawKey(move _95);
        goto -> bb344;
    }

    bb326: {
        _96 = ((*_3).4: bool);
        switchInt(move _96) -> [0: bb328, otherwise: bb327];
    }

    bb327: {
        _0 = DecodedKey::Unicode(const '1');
        goto -> bb344;
    }

    bb328: {
        _97 = KeyCode::End;
        _0 = DecodedKey::RawKey(move _97);
        goto -> bb344;
    }

    bb329: {
        _98 = ((*_3).4: bool);
        switchInt(move _98) -> [0: bb331, otherwise: bb330];
    }

    bb330: {
        _0 = DecodedKey::Unicode(const '2');
        goto -> bb344;
    }

    bb331: {
        _99 = KeyCode::ArrowDown;
        _0 = DecodedKey::RawKey(move _99);
        goto -> bb344;
    }

    bb332: {
        _100 = ((*_3).4: bool);
        switchInt(move _100) -> [0: bb334, otherwise: bb333];
    }

    bb333: {
        _0 = DecodedKey::Unicode(const '3');
        goto -> bb344;
    }

    bb334: {
        _101 = KeyCode::PageDown;
        _0 = DecodedKey::RawKey(move _101);
        goto -> bb344;
    }

    bb335: {
        _102 = ((*_3).4: bool);
        switchInt(move _102) -> [0: bb337, otherwise: bb336];
    }

    bb336: {
        _0 = DecodedKey::Unicode(const '0');
        goto -> bb344;
    }

    bb337: {
        _103 = KeyCode::Insert;
        _0 = DecodedKey::RawKey(move _103);
        goto -> bb344;
    }

    bb338: {
        _104 = ((*_3).4: bool);
        switchInt(move _104) -> [0: bb340, otherwise: bb339];
    }

    bb339: {
        _0 = DecodedKey::Unicode(const '.');
        goto -> bb344;
    }

    bb340: {
        _105 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb341, unwind unreachable];
    }

    bb341: {
        _0 = DecodedKey::Unicode(move _105);
        goto -> bb344;
    }

    bb342: {
        _106 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb343, unwind unreachable];
    }

    bb343: {
        _0 = DecodedKey::Unicode(move _106);
        goto -> bb344;
    }

    bb344: {
        return;
    }
}

promoted[0] in dvorak_programmer104::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:10:1: 10:34>::map_keycode: &HandleControl = {
    let mut _0: &HandleControl;
    let mut _1: HandleControl;

    bb0: {
        _1 = HandleControl::MapLettersToUnicode;
        _0 = &_1;
        return;
    }
}

fn dvorak104::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:10:1: 10:37>::map_keycode(_1: &Dvorak104Key, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;
    debug keycode => _2;
    debug modifiers => _3;
    debug handle_ctrl => _4;
    let mut _0: DecodedKey;
    let _5: bool;
    let mut _6: &HandleControl;
    let mut _7: u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _66: &layouts::us104::Us104Key;
    let mut _67: HandleControl;
    let mut _68: &HandleControl;
    scope 1 {
        debug map_to_unicode => _5;
        scope 2 {
            debug e => _2;
            let _65: layouts::us104::Us104Key;
            scope 3 {
                debug us => const Us104Key;
            }
        }
    }

    bb0: {
        _6 = &_4;
        _68 = const _;
        _5 = <HandleControl as PartialEq>::eq(move _6, _68) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _7 = discriminant(_2);
        switchInt(move _7) -> [28: bb3, 29: bb7, 39: bb11, 40: bb15, 41: bb19, 42: bb23, 43: bb31, 44: bb39, 45: bb47, 46: bb55, 47: bb63, 48: bb71, 49: bb79, 50: bb83, 62: bb87, 63: bb95, 64: bb103, 65: bb111, 66: bb119, 67: bb127, 68: bb135, 69: bb143, 70: bb151, 71: bb159, 77: bb163, 78: bb167, 79: bb175, 80: bb183, 81: bb191, 82: bb199, 84: bb207, 85: bb215, 86: bb223, otherwise: bb2];
    }

    bb2: {
        _66 = &_65;
        _67 = _4;
        _0 = <Us104Key as KeyboardLayout>::map_keycode(move _66, _2, _3, move _67) -> [return: bb231, unwind unreachable];
    }

    bb3: {
        _8 = Modifiers::is_shifted(_3) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _0 = DecodedKey::Unicode(const '{');
        goto -> bb231;
    }

    bb6: {
        _0 = DecodedKey::Unicode(const '[');
        goto -> bb231;
    }

    bb7: {
        _9 = Modifiers::is_shifted(_3) -> [return: bb8, unwind unreachable];
    }

    bb8: {
        switchInt(move _9) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _0 = DecodedKey::Unicode(const '}');
        goto -> bb231;
    }

    bb10: {
        _0 = DecodedKey::Unicode(const ']');
        goto -> bb231;
    }

    bb11: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb12, unwind unreachable];
    }

    bb12: {
        switchInt(move _10) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _0 = DecodedKey::Unicode(const '"');
        goto -> bb231;
    }

    bb14: {
        _0 = DecodedKey::Unicode(const '\'');
        goto -> bb231;
    }

    bb15: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb16, unwind unreachable];
    }

    bb16: {
        switchInt(move _11) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _0 = DecodedKey::Unicode(const '<');
        goto -> bb231;
    }

    bb18: {
        _0 = DecodedKey::Unicode(const ',');
        goto -> bb231;
    }

    bb19: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb20, unwind unreachable];
    }

    bb20: {
        switchInt(move _12) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _0 = DecodedKey::Unicode(const '>');
        goto -> bb231;
    }

    bb22: {
        _0 = DecodedKey::Unicode(const '.');
        goto -> bb231;
    }

    bb23: {
        switchInt(_5) -> [0: bb27, otherwise: bb24];
    }

    bb24: {
        _13 = Modifiers::is_ctrl(_3) -> [return: bb25, unwind unreachable];
    }

    bb25: {
        switchInt(move _13) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _0 = DecodedKey::Unicode(const '\u{10}');
        goto -> bb231;
    }

    bb27: {
        _14 = Modifiers::is_caps(_3) -> [return: bb28, unwind unreachable];
    }

    bb28: {
        switchInt(move _14) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _0 = DecodedKey::Unicode(const 'P');
        goto -> bb231;
    }

    bb30: {
        _0 = DecodedKey::Unicode(const 'p');
        goto -> bb231;
    }

    bb31: {
        switchInt(_5) -> [0: bb35, otherwise: bb32];
    }

    bb32: {
        _15 = Modifiers::is_ctrl(_3) -> [return: bb33, unwind unreachable];
    }

    bb33: {
        switchInt(move _15) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _0 = DecodedKey::Unicode(const '\u{19}');
        goto -> bb231;
    }

    bb35: {
        _16 = Modifiers::is_caps(_3) -> [return: bb36, unwind unreachable];
    }

    bb36: {
        switchInt(move _16) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _0 = DecodedKey::Unicode(const 'Y');
        goto -> bb231;
    }

    bb38: {
        _0 = DecodedKey::Unicode(const 'y');
        goto -> bb231;
    }

    bb39: {
        switchInt(_5) -> [0: bb43, otherwise: bb40];
    }

    bb40: {
        _17 = Modifiers::is_ctrl(_3) -> [return: bb41, unwind unreachable];
    }

    bb41: {
        switchInt(move _17) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _0 = DecodedKey::Unicode(const '\u{6}');
        goto -> bb231;
    }

    bb43: {
        _18 = Modifiers::is_caps(_3) -> [return: bb44, unwind unreachable];
    }

    bb44: {
        switchInt(move _18) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _0 = DecodedKey::Unicode(const 'F');
        goto -> bb231;
    }

    bb46: {
        _0 = DecodedKey::Unicode(const 'f');
        goto -> bb231;
    }

    bb47: {
        switchInt(_5) -> [0: bb51, otherwise: bb48];
    }

    bb48: {
        _19 = Modifiers::is_ctrl(_3) -> [return: bb49, unwind unreachable];
    }

    bb49: {
        switchInt(move _19) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _0 = DecodedKey::Unicode(const '\u{7}');
        goto -> bb231;
    }

    bb51: {
        _20 = Modifiers::is_caps(_3) -> [return: bb52, unwind unreachable];
    }

    bb52: {
        switchInt(move _20) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _0 = DecodedKey::Unicode(const 'G');
        goto -> bb231;
    }

    bb54: {
        _0 = DecodedKey::Unicode(const 'g');
        goto -> bb231;
    }

    bb55: {
        switchInt(_5) -> [0: bb59, otherwise: bb56];
    }

    bb56: {
        _21 = Modifiers::is_ctrl(_3) -> [return: bb57, unwind unreachable];
    }

    bb57: {
        switchInt(move _21) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _0 = DecodedKey::Unicode(const '\u{3}');
        goto -> bb231;
    }

    bb59: {
        _22 = Modifiers::is_caps(_3) -> [return: bb60, unwind unreachable];
    }

    bb60: {
        switchInt(move _22) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        _0 = DecodedKey::Unicode(const 'C');
        goto -> bb231;
    }

    bb62: {
        _0 = DecodedKey::Unicode(const 'c');
        goto -> bb231;
    }

    bb63: {
        switchInt(_5) -> [0: bb67, otherwise: bb64];
    }

    bb64: {
        _23 = Modifiers::is_ctrl(_3) -> [return: bb65, unwind unreachable];
    }

    bb65: {
        switchInt(move _23) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _0 = DecodedKey::Unicode(const '\u{12}');
        goto -> bb231;
    }

    bb67: {
        _24 = Modifiers::is_caps(_3) -> [return: bb68, unwind unreachable];
    }

    bb68: {
        switchInt(move _24) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        _0 = DecodedKey::Unicode(const 'R');
        goto -> bb231;
    }

    bb70: {
        _0 = DecodedKey::Unicode(const 'r');
        goto -> bb231;
    }

    bb71: {
        switchInt(_5) -> [0: bb75, otherwise: bb72];
    }

    bb72: {
        _25 = Modifiers::is_ctrl(_3) -> [return: bb73, unwind unreachable];
    }

    bb73: {
        switchInt(move _25) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _0 = DecodedKey::Unicode(const '\u{c}');
        goto -> bb231;
    }

    bb75: {
        _26 = Modifiers::is_caps(_3) -> [return: bb76, unwind unreachable];
    }

    bb76: {
        switchInt(move _26) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _0 = DecodedKey::Unicode(const 'L');
        goto -> bb231;
    }

    bb78: {
        _0 = DecodedKey::Unicode(const 'l');
        goto -> bb231;
    }

    bb79: {
        _27 = Modifiers::is_shifted(_3) -> [return: bb80, unwind unreachable];
    }

    bb80: {
        switchInt(move _27) -> [0: bb82, otherwise: bb81];
    }

    bb81: {
        _0 = DecodedKey::Unicode(const '?');
        goto -> bb231;
    }

    bb82: {
        _0 = DecodedKey::Unicode(const '/');
        goto -> bb231;
    }

    bb83: {
        _28 = Modifiers::is_shifted(_3) -> [return: bb84, unwind unreachable];
    }

    bb84: {
        switchInt(move _28) -> [0: bb86, otherwise: bb85];
    }

    bb85: {
        _0 = DecodedKey::Unicode(const '+');
        goto -> bb231;
    }

    bb86: {
        _0 = DecodedKey::Unicode(const '=');
        goto -> bb231;
    }

    bb87: {
        switchInt(_5) -> [0: bb91, otherwise: bb88];
    }

    bb88: {
        _29 = Modifiers::is_ctrl(_3) -> [return: bb89, unwind unreachable];
    }

    bb89: {
        switchInt(move _29) -> [0: bb91, otherwise: bb90];
    }

    bb90: {
        _0 = DecodedKey::Unicode(const '\u{f}');
        goto -> bb231;
    }

    bb91: {
        _30 = Modifiers::is_caps(_3) -> [return: bb92, unwind unreachable];
    }

    bb92: {
        switchInt(move _30) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        _0 = DecodedKey::Unicode(const 'O');
        goto -> bb231;
    }

    bb94: {
        _0 = DecodedKey::Unicode(const 'o');
        goto -> bb231;
    }

    bb95: {
        switchInt(_5) -> [0: bb99, otherwise: bb96];
    }

    bb96: {
        _31 = Modifiers::is_ctrl(_3) -> [return: bb97, unwind unreachable];
    }

    bb97: {
        switchInt(move _31) -> [0: bb99, otherwise: bb98];
    }

    bb98: {
        _0 = DecodedKey::Unicode(const '\u{5}');
        goto -> bb231;
    }

    bb99: {
        _32 = Modifiers::is_caps(_3) -> [return: bb100, unwind unreachable];
    }

    bb100: {
        switchInt(move _32) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _0 = DecodedKey::Unicode(const 'E');
        goto -> bb231;
    }

    bb102: {
        _0 = DecodedKey::Unicode(const 'e');
        goto -> bb231;
    }

    bb103: {
        switchInt(_5) -> [0: bb107, otherwise: bb104];
    }

    bb104: {
        _33 = Modifiers::is_ctrl(_3) -> [return: bb105, unwind unreachable];
    }

    bb105: {
        switchInt(move _33) -> [0: bb107, otherwise: bb106];
    }

    bb106: {
        _0 = DecodedKey::Unicode(const '\u{15}');
        goto -> bb231;
    }

    bb107: {
        _34 = Modifiers::is_caps(_3) -> [return: bb108, unwind unreachable];
    }

    bb108: {
        switchInt(move _34) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _0 = DecodedKey::Unicode(const 'U');
        goto -> bb231;
    }

    bb110: {
        _0 = DecodedKey::Unicode(const 'u');
        goto -> bb231;
    }

    bb111: {
        switchInt(_5) -> [0: bb115, otherwise: bb112];
    }

    bb112: {
        _35 = Modifiers::is_ctrl(_3) -> [return: bb113, unwind unreachable];
    }

    bb113: {
        switchInt(move _35) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        _0 = DecodedKey::Unicode(const '\t');
        goto -> bb231;
    }

    bb115: {
        _36 = Modifiers::is_caps(_3) -> [return: bb116, unwind unreachable];
    }

    bb116: {
        switchInt(move _36) -> [0: bb118, otherwise: bb117];
    }

    bb117: {
        _0 = DecodedKey::Unicode(const 'I');
        goto -> bb231;
    }

    bb118: {
        _0 = DecodedKey::Unicode(const 'i');
        goto -> bb231;
    }

    bb119: {
        switchInt(_5) -> [0: bb123, otherwise: bb120];
    }

    bb120: {
        _37 = Modifiers::is_ctrl(_3) -> [return: bb121, unwind unreachable];
    }

    bb121: {
        switchInt(move _37) -> [0: bb123, otherwise: bb122];
    }

    bb122: {
        _0 = DecodedKey::Unicode(const '\u{4}');
        goto -> bb231;
    }

    bb123: {
        _38 = Modifiers::is_caps(_3) -> [return: bb124, unwind unreachable];
    }

    bb124: {
        switchInt(move _38) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _0 = DecodedKey::Unicode(const 'D');
        goto -> bb231;
    }

    bb126: {
        _0 = DecodedKey::Unicode(const 'd');
        goto -> bb231;
    }

    bb127: {
        switchInt(_5) -> [0: bb131, otherwise: bb128];
    }

    bb128: {
        _39 = Modifiers::is_ctrl(_3) -> [return: bb129, unwind unreachable];
    }

    bb129: {
        switchInt(move _39) -> [0: bb131, otherwise: bb130];
    }

    bb130: {
        _0 = DecodedKey::Unicode(const '\u{8}');
        goto -> bb231;
    }

    bb131: {
        _40 = Modifiers::is_caps(_3) -> [return: bb132, unwind unreachable];
    }

    bb132: {
        switchInt(move _40) -> [0: bb134, otherwise: bb133];
    }

    bb133: {
        _0 = DecodedKey::Unicode(const 'H');
        goto -> bb231;
    }

    bb134: {
        _0 = DecodedKey::Unicode(const 'h');
        goto -> bb231;
    }

    bb135: {
        switchInt(_5) -> [0: bb139, otherwise: bb136];
    }

    bb136: {
        _41 = Modifiers::is_ctrl(_3) -> [return: bb137, unwind unreachable];
    }

    bb137: {
        switchInt(move _41) -> [0: bb139, otherwise: bb138];
    }

    bb138: {
        _0 = DecodedKey::Unicode(const '\u{14}');
        goto -> bb231;
    }

    bb139: {
        _42 = Modifiers::is_caps(_3) -> [return: bb140, unwind unreachable];
    }

    bb140: {
        switchInt(move _42) -> [0: bb142, otherwise: bb141];
    }

    bb141: {
        _0 = DecodedKey::Unicode(const 'T');
        goto -> bb231;
    }

    bb142: {
        _0 = DecodedKey::Unicode(const 't');
        goto -> bb231;
    }

    bb143: {
        switchInt(_5) -> [0: bb147, otherwise: bb144];
    }

    bb144: {
        _43 = Modifiers::is_ctrl(_3) -> [return: bb145, unwind unreachable];
    }

    bb145: {
        switchInt(move _43) -> [0: bb147, otherwise: bb146];
    }

    bb146: {
        _0 = DecodedKey::Unicode(const '\u{e}');
        goto -> bb231;
    }

    bb147: {
        _44 = Modifiers::is_caps(_3) -> [return: bb148, unwind unreachable];
    }

    bb148: {
        switchInt(move _44) -> [0: bb150, otherwise: bb149];
    }

    bb149: {
        _0 = DecodedKey::Unicode(const 'N');
        goto -> bb231;
    }

    bb150: {
        _0 = DecodedKey::Unicode(const 'n');
        goto -> bb231;
    }

    bb151: {
        switchInt(_5) -> [0: bb155, otherwise: bb152];
    }

    bb152: {
        _45 = Modifiers::is_ctrl(_3) -> [return: bb153, unwind unreachable];
    }

    bb153: {
        switchInt(move _45) -> [0: bb155, otherwise: bb154];
    }

    bb154: {
        _0 = DecodedKey::Unicode(const '\u{13}');
        goto -> bb231;
    }

    bb155: {
        _46 = Modifiers::is_caps(_3) -> [return: bb156, unwind unreachable];
    }

    bb156: {
        switchInt(move _46) -> [0: bb158, otherwise: bb157];
    }

    bb157: {
        _0 = DecodedKey::Unicode(const 'S');
        goto -> bb231;
    }

    bb158: {
        _0 = DecodedKey::Unicode(const 's');
        goto -> bb231;
    }

    bb159: {
        _47 = Modifiers::is_shifted(_3) -> [return: bb160, unwind unreachable];
    }

    bb160: {
        switchInt(move _47) -> [0: bb162, otherwise: bb161];
    }

    bb161: {
        _0 = DecodedKey::Unicode(const '_');
        goto -> bb231;
    }

    bb162: {
        _0 = DecodedKey::Unicode(const '-');
        goto -> bb231;
    }

    bb163: {
        _48 = Modifiers::is_shifted(_3) -> [return: bb164, unwind unreachable];
    }

    bb164: {
        switchInt(move _48) -> [0: bb166, otherwise: bb165];
    }

    bb165: {
        _0 = DecodedKey::Unicode(const ':');
        goto -> bb231;
    }

    bb166: {
        _0 = DecodedKey::Unicode(const ';');
        goto -> bb231;
    }

    bb167: {
        switchInt(_5) -> [0: bb171, otherwise: bb168];
    }

    bb168: {
        _49 = Modifiers::is_ctrl(_3) -> [return: bb169, unwind unreachable];
    }

    bb169: {
        switchInt(move _49) -> [0: bb171, otherwise: bb170];
    }

    bb170: {
        _0 = DecodedKey::Unicode(const '\u{11}');
        goto -> bb231;
    }

    bb171: {
        _50 = Modifiers::is_caps(_3) -> [return: bb172, unwind unreachable];
    }

    bb172: {
        switchInt(move _50) -> [0: bb174, otherwise: bb173];
    }

    bb173: {
        _0 = DecodedKey::Unicode(const 'Q');
        goto -> bb231;
    }

    bb174: {
        _0 = DecodedKey::Unicode(const 'q');
        goto -> bb231;
    }

    bb175: {
        switchInt(_5) -> [0: bb179, otherwise: bb176];
    }

    bb176: {
        _51 = Modifiers::is_ctrl(_3) -> [return: bb177, unwind unreachable];
    }

    bb177: {
        switchInt(move _51) -> [0: bb179, otherwise: bb178];
    }

    bb178: {
        _0 = DecodedKey::Unicode(const '\n');
        goto -> bb231;
    }

    bb179: {
        _52 = Modifiers::is_caps(_3) -> [return: bb180, unwind unreachable];
    }

    bb180: {
        switchInt(move _52) -> [0: bb182, otherwise: bb181];
    }

    bb181: {
        _0 = DecodedKey::Unicode(const 'J');
        goto -> bb231;
    }

    bb182: {
        _0 = DecodedKey::Unicode(const 'j');
        goto -> bb231;
    }

    bb183: {
        switchInt(_5) -> [0: bb187, otherwise: bb184];
    }

    bb184: {
        _53 = Modifiers::is_ctrl(_3) -> [return: bb185, unwind unreachable];
    }

    bb185: {
        switchInt(move _53) -> [0: bb187, otherwise: bb186];
    }

    bb186: {
        _0 = DecodedKey::Unicode(const '\u{b}');
        goto -> bb231;
    }

    bb187: {
        _54 = Modifiers::is_caps(_3) -> [return: bb188, unwind unreachable];
    }

    bb188: {
        switchInt(move _54) -> [0: bb190, otherwise: bb189];
    }

    bb189: {
        _0 = DecodedKey::Unicode(const 'K');
        goto -> bb231;
    }

    bb190: {
        _0 = DecodedKey::Unicode(const 'k');
        goto -> bb231;
    }

    bb191: {
        switchInt(_5) -> [0: bb195, otherwise: bb192];
    }

    bb192: {
        _55 = Modifiers::is_ctrl(_3) -> [return: bb193, unwind unreachable];
    }

    bb193: {
        switchInt(move _55) -> [0: bb195, otherwise: bb194];
    }

    bb194: {
        _0 = DecodedKey::Unicode(const '\u{18}');
        goto -> bb231;
    }

    bb195: {
        _56 = Modifiers::is_caps(_3) -> [return: bb196, unwind unreachable];
    }

    bb196: {
        switchInt(move _56) -> [0: bb198, otherwise: bb197];
    }

    bb197: {
        _0 = DecodedKey::Unicode(const 'X');
        goto -> bb231;
    }

    bb198: {
        _0 = DecodedKey::Unicode(const 'x');
        goto -> bb231;
    }

    bb199: {
        switchInt(_5) -> [0: bb203, otherwise: bb200];
    }

    bb200: {
        _57 = Modifiers::is_ctrl(_3) -> [return: bb201, unwind unreachable];
    }

    bb201: {
        switchInt(move _57) -> [0: bb203, otherwise: bb202];
    }

    bb202: {
        _0 = DecodedKey::Unicode(const '\u{2}');
        goto -> bb231;
    }

    bb203: {
        _58 = Modifiers::is_caps(_3) -> [return: bb204, unwind unreachable];
    }

    bb204: {
        switchInt(move _58) -> [0: bb206, otherwise: bb205];
    }

    bb205: {
        _0 = DecodedKey::Unicode(const 'B');
        goto -> bb231;
    }

    bb206: {
        _0 = DecodedKey::Unicode(const 'b');
        goto -> bb231;
    }

    bb207: {
        switchInt(_5) -> [0: bb211, otherwise: bb208];
    }

    bb208: {
        _59 = Modifiers::is_ctrl(_3) -> [return: bb209, unwind unreachable];
    }

    bb209: {
        switchInt(move _59) -> [0: bb211, otherwise: bb210];
    }

    bb210: {
        _0 = DecodedKey::Unicode(const '\u{17}');
        goto -> bb231;
    }

    bb211: {
        _60 = Modifiers::is_caps(_3) -> [return: bb212, unwind unreachable];
    }

    bb212: {
        switchInt(move _60) -> [0: bb214, otherwise: bb213];
    }

    bb213: {
        _0 = DecodedKey::Unicode(const 'W');
        goto -> bb231;
    }

    bb214: {
        _0 = DecodedKey::Unicode(const 'w');
        goto -> bb231;
    }

    bb215: {
        switchInt(_5) -> [0: bb219, otherwise: bb216];
    }

    bb216: {
        _61 = Modifiers::is_ctrl(_3) -> [return: bb217, unwind unreachable];
    }

    bb217: {
        switchInt(move _61) -> [0: bb219, otherwise: bb218];
    }

    bb218: {
        _0 = DecodedKey::Unicode(const '\u{16}');
        goto -> bb231;
    }

    bb219: {
        _62 = Modifiers::is_caps(_3) -> [return: bb220, unwind unreachable];
    }

    bb220: {
        switchInt(move _62) -> [0: bb222, otherwise: bb221];
    }

    bb221: {
        _0 = DecodedKey::Unicode(const 'V');
        goto -> bb231;
    }

    bb222: {
        _0 = DecodedKey::Unicode(const 'v');
        goto -> bb231;
    }

    bb223: {
        switchInt(_5) -> [0: bb227, otherwise: bb224];
    }

    bb224: {
        _63 = Modifiers::is_ctrl(_3) -> [return: bb225, unwind unreachable];
    }

    bb225: {
        switchInt(move _63) -> [0: bb227, otherwise: bb226];
    }

    bb226: {
        _0 = DecodedKey::Unicode(const '\u{1a}');
        goto -> bb231;
    }

    bb227: {
        _64 = Modifiers::is_caps(_3) -> [return: bb228, unwind unreachable];
    }

    bb228: {
        switchInt(move _64) -> [0: bb230, otherwise: bb229];
    }

    bb229: {
        _0 = DecodedKey::Unicode(const 'Z');
        goto -> bb231;
    }

    bb230: {
        _0 = DecodedKey::Unicode(const 'z');
        goto -> bb231;
    }

    bb231: {
        return;
    }
}

promoted[0] in dvorak104::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:10:1: 10:37>::map_keycode: &HandleControl = {
    let mut _0: &HandleControl;
    let mut _1: HandleControl;

    bb0: {
        _1 = HandleControl::MapLettersToUnicode;
        _0 = &_1;
        return;
    }
}

fn us104::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:10:1: 10:33>::map_keycode(_1: &Us104Key, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;
    debug keycode => _2;
    debug modifiers => _3;
    debug handle_ctrl => _4;
    let mut _0: DecodedKey;
    let _5: bool;
    let mut _6: &HandleControl;
    let mut _7: u8;
    let mut _8: bool;
    let mut _9: char;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: char;
    let mut _23: char;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: char;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: char;
    let mut _86: bool;
    let mut _87: KeyCode;
    let mut _88: bool;
    let mut _89: KeyCode;
    let mut _90: bool;
    let mut _91: KeyCode;
    let mut _92: bool;
    let mut _93: KeyCode;
    let mut _94: bool;
    let mut _95: KeyCode;
    let mut _96: bool;
    let mut _97: KeyCode;
    let mut _98: bool;
    let mut _99: KeyCode;
    let mut _100: bool;
    let mut _101: KeyCode;
    let mut _102: bool;
    let mut _103: KeyCode;
    let mut _104: bool;
    let mut _105: char;
    let mut _106: char;
    let mut _107: &HandleControl;
    scope 1 {
        debug map_to_unicode => _5;
        scope 2 {
            debug k => _2;
        }
    }

    bb0: {
        _6 = &_4;
        _107 = const _;
        _5 = <HandleControl as PartialEq>::eq(move _6, _107) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _7 = discriminant(_2);
        switchInt(move _7) -> [0: bb7, 17: bb3, 18: bb9, 19: bb13, 20: bb17, 21: bb21, 22: bb25, 23: bb29, 24: bb33, 25: bb37, 26: bb41, 27: bb45, 28: bb49, 29: bb53, 30: bb57, 35: bb306, 36: bb307, 37: bb308, 38: bb59, 39: bb61, 40: bb69, 41: bb77, 42: bb85, 43: bb93, 44: bb101, 45: bb109, 46: bb117, 47: bb125, 48: bb133, 49: bb141, 50: bb145, 51: bb149, 53: bb304, 56: bb309, 57: bb312, 58: bb315, 59: bb318, 61: bb153, 62: bb161, 63: bb169, 64: bb177, 65: bb185, 66: bb193, 67: bb201, 68: bb209, 69: bb217, 70: bb225, 71: bb229, 72: bb233, 73: bb319, 74: bb322, 75: bb323, 77: bb235, 78: bb243, 79: bb251, 80: bb259, 81: bb267, 82: bb275, 83: bb283, 84: bb291, 85: bb295, 86: bb299, 89: bb326, 90: bb329, 91: bb332, 92: bb342, 96: bb303, 104: bb335, 105: bb338, otherwise: bb2];
    }

    bb2: {
        _0 = DecodedKey::RawKey(_2);
        goto -> bb344;
    }

    bb3: {
        _8 = Modifiers::is_shifted(_3) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _0 = DecodedKey::Unicode(const '~');
        goto -> bb344;
    }

    bb6: {
        _0 = DecodedKey::Unicode(const '`');
        goto -> bb344;
    }

    bb7: {
        _9 = <u8 as Into<char>>::into(const 27_u8) -> [return: bb8, unwind unreachable];
    }

    bb8: {
        _0 = DecodedKey::Unicode(move _9);
        goto -> bb344;
    }

    bb9: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb10, unwind unreachable];
    }

    bb10: {
        switchInt(move _10) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _0 = DecodedKey::Unicode(const '!');
        goto -> bb344;
    }

    bb12: {
        _0 = DecodedKey::Unicode(const '1');
        goto -> bb344;
    }

    bb13: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb14, unwind unreachable];
    }

    bb14: {
        switchInt(move _11) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _0 = DecodedKey::Unicode(const '@');
        goto -> bb344;
    }

    bb16: {
        _0 = DecodedKey::Unicode(const '2');
        goto -> bb344;
    }

    bb17: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb18, unwind unreachable];
    }

    bb18: {
        switchInt(move _12) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _0 = DecodedKey::Unicode(const '#');
        goto -> bb344;
    }

    bb20: {
        _0 = DecodedKey::Unicode(const '3');
        goto -> bb344;
    }

    bb21: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb22, unwind unreachable];
    }

    bb22: {
        switchInt(move _13) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _0 = DecodedKey::Unicode(const '$');
        goto -> bb344;
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '4');
        goto -> bb344;
    }

    bb25: {
        _14 = Modifiers::is_shifted(_3) -> [return: bb26, unwind unreachable];
    }

    bb26: {
        switchInt(move _14) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _0 = DecodedKey::Unicode(const '%');
        goto -> bb344;
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '5');
        goto -> bb344;
    }

    bb29: {
        _15 = Modifiers::is_shifted(_3) -> [return: bb30, unwind unreachable];
    }

    bb30: {
        switchInt(move _15) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _0 = DecodedKey::Unicode(const '^');
        goto -> bb344;
    }

    bb32: {
        _0 = DecodedKey::Unicode(const '6');
        goto -> bb344;
    }

    bb33: {
        _16 = Modifiers::is_shifted(_3) -> [return: bb34, unwind unreachable];
    }

    bb34: {
        switchInt(move _16) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _0 = DecodedKey::Unicode(const '&');
        goto -> bb344;
    }

    bb36: {
        _0 = DecodedKey::Unicode(const '7');
        goto -> bb344;
    }

    bb37: {
        _17 = Modifiers::is_shifted(_3) -> [return: bb38, unwind unreachable];
    }

    bb38: {
        switchInt(move _17) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _0 = DecodedKey::Unicode(const '*');
        goto -> bb344;
    }

    bb40: {
        _0 = DecodedKey::Unicode(const '8');
        goto -> bb344;
    }

    bb41: {
        _18 = Modifiers::is_shifted(_3) -> [return: bb42, unwind unreachable];
    }

    bb42: {
        switchInt(move _18) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _0 = DecodedKey::Unicode(const '(');
        goto -> bb344;
    }

    bb44: {
        _0 = DecodedKey::Unicode(const '9');
        goto -> bb344;
    }

    bb45: {
        _19 = Modifiers::is_shifted(_3) -> [return: bb46, unwind unreachable];
    }

    bb46: {
        switchInt(move _19) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _0 = DecodedKey::Unicode(const ')');
        goto -> bb344;
    }

    bb48: {
        _0 = DecodedKey::Unicode(const '0');
        goto -> bb344;
    }

    bb49: {
        _20 = Modifiers::is_shifted(_3) -> [return: bb50, unwind unreachable];
    }

    bb50: {
        switchInt(move _20) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _0 = DecodedKey::Unicode(const '_');
        goto -> bb344;
    }

    bb52: {
        _0 = DecodedKey::Unicode(const '-');
        goto -> bb344;
    }

    bb53: {
        _21 = Modifiers::is_shifted(_3) -> [return: bb54, unwind unreachable];
    }

    bb54: {
        switchInt(move _21) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _0 = DecodedKey::Unicode(const '+');
        goto -> bb344;
    }

    bb56: {
        _0 = DecodedKey::Unicode(const '=');
        goto -> bb344;
    }

    bb57: {
        _22 = <u8 as Into<char>>::into(const 8_u8) -> [return: bb58, unwind unreachable];
    }

    bb58: {
        _0 = DecodedKey::Unicode(move _22);
        goto -> bb344;
    }

    bb59: {
        _23 = <u8 as Into<char>>::into(const 9_u8) -> [return: bb60, unwind unreachable];
    }

    bb60: {
        _0 = DecodedKey::Unicode(move _23);
        goto -> bb344;
    }

    bb61: {
        switchInt(_5) -> [0: bb65, otherwise: bb62];
    }

    bb62: {
        _24 = Modifiers::is_ctrl(_3) -> [return: bb63, unwind unreachable];
    }

    bb63: {
        switchInt(move _24) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _0 = DecodedKey::Unicode(const '\u{11}');
        goto -> bb344;
    }

    bb65: {
        _25 = Modifiers::is_caps(_3) -> [return: bb66, unwind unreachable];
    }

    bb66: {
        switchInt(move _25) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _0 = DecodedKey::Unicode(const 'Q');
        goto -> bb344;
    }

    bb68: {
        _0 = DecodedKey::Unicode(const 'q');
        goto -> bb344;
    }

    bb69: {
        switchInt(_5) -> [0: bb73, otherwise: bb70];
    }

    bb70: {
        _26 = Modifiers::is_ctrl(_3) -> [return: bb71, unwind unreachable];
    }

    bb71: {
        switchInt(move _26) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _0 = DecodedKey::Unicode(const '\u{17}');
        goto -> bb344;
    }

    bb73: {
        _27 = Modifiers::is_caps(_3) -> [return: bb74, unwind unreachable];
    }

    bb74: {
        switchInt(move _27) -> [0: bb76, otherwise: bb75];
    }

    bb75: {
        _0 = DecodedKey::Unicode(const 'W');
        goto -> bb344;
    }

    bb76: {
        _0 = DecodedKey::Unicode(const 'w');
        goto -> bb344;
    }

    bb77: {
        switchInt(_5) -> [0: bb81, otherwise: bb78];
    }

    bb78: {
        _28 = Modifiers::is_ctrl(_3) -> [return: bb79, unwind unreachable];
    }

    bb79: {
        switchInt(move _28) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _0 = DecodedKey::Unicode(const '\u{5}');
        goto -> bb344;
    }

    bb81: {
        _29 = Modifiers::is_caps(_3) -> [return: bb82, unwind unreachable];
    }

    bb82: {
        switchInt(move _29) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _0 = DecodedKey::Unicode(const 'E');
        goto -> bb344;
    }

    bb84: {
        _0 = DecodedKey::Unicode(const 'e');
        goto -> bb344;
    }

    bb85: {
        switchInt(_5) -> [0: bb89, otherwise: bb86];
    }

    bb86: {
        _30 = Modifiers::is_ctrl(_3) -> [return: bb87, unwind unreachable];
    }

    bb87: {
        switchInt(move _30) -> [0: bb89, otherwise: bb88];
    }

    bb88: {
        _0 = DecodedKey::Unicode(const '\u{12}');
        goto -> bb344;
    }

    bb89: {
        _31 = Modifiers::is_caps(_3) -> [return: bb90, unwind unreachable];
    }

    bb90: {
        switchInt(move _31) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _0 = DecodedKey::Unicode(const 'R');
        goto -> bb344;
    }

    bb92: {
        _0 = DecodedKey::Unicode(const 'r');
        goto -> bb344;
    }

    bb93: {
        switchInt(_5) -> [0: bb97, otherwise: bb94];
    }

    bb94: {
        _32 = Modifiers::is_ctrl(_3) -> [return: bb95, unwind unreachable];
    }

    bb95: {
        switchInt(move _32) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        _0 = DecodedKey::Unicode(const '\u{14}');
        goto -> bb344;
    }

    bb97: {
        _33 = Modifiers::is_caps(_3) -> [return: bb98, unwind unreachable];
    }

    bb98: {
        switchInt(move _33) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _0 = DecodedKey::Unicode(const 'T');
        goto -> bb344;
    }

    bb100: {
        _0 = DecodedKey::Unicode(const 't');
        goto -> bb344;
    }

    bb101: {
        switchInt(_5) -> [0: bb105, otherwise: bb102];
    }

    bb102: {
        _34 = Modifiers::is_ctrl(_3) -> [return: bb103, unwind unreachable];
    }

    bb103: {
        switchInt(move _34) -> [0: bb105, otherwise: bb104];
    }

    bb104: {
        _0 = DecodedKey::Unicode(const '\u{19}');
        goto -> bb344;
    }

    bb105: {
        _35 = Modifiers::is_caps(_3) -> [return: bb106, unwind unreachable];
    }

    bb106: {
        switchInt(move _35) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _0 = DecodedKey::Unicode(const 'Y');
        goto -> bb344;
    }

    bb108: {
        _0 = DecodedKey::Unicode(const 'y');
        goto -> bb344;
    }

    bb109: {
        switchInt(_5) -> [0: bb113, otherwise: bb110];
    }

    bb110: {
        _36 = Modifiers::is_ctrl(_3) -> [return: bb111, unwind unreachable];
    }

    bb111: {
        switchInt(move _36) -> [0: bb113, otherwise: bb112];
    }

    bb112: {
        _0 = DecodedKey::Unicode(const '\u{15}');
        goto -> bb344;
    }

    bb113: {
        _37 = Modifiers::is_caps(_3) -> [return: bb114, unwind unreachable];
    }

    bb114: {
        switchInt(move _37) -> [0: bb116, otherwise: bb115];
    }

    bb115: {
        _0 = DecodedKey::Unicode(const 'U');
        goto -> bb344;
    }

    bb116: {
        _0 = DecodedKey::Unicode(const 'u');
        goto -> bb344;
    }

    bb117: {
        switchInt(_5) -> [0: bb121, otherwise: bb118];
    }

    bb118: {
        _38 = Modifiers::is_ctrl(_3) -> [return: bb119, unwind unreachable];
    }

    bb119: {
        switchInt(move _38) -> [0: bb121, otherwise: bb120];
    }

    bb120: {
        _0 = DecodedKey::Unicode(const '\t');
        goto -> bb344;
    }

    bb121: {
        _39 = Modifiers::is_caps(_3) -> [return: bb122, unwind unreachable];
    }

    bb122: {
        switchInt(move _39) -> [0: bb124, otherwise: bb123];
    }

    bb123: {
        _0 = DecodedKey::Unicode(const 'I');
        goto -> bb344;
    }

    bb124: {
        _0 = DecodedKey::Unicode(const 'i');
        goto -> bb344;
    }

    bb125: {
        switchInt(_5) -> [0: bb129, otherwise: bb126];
    }

    bb126: {
        _40 = Modifiers::is_ctrl(_3) -> [return: bb127, unwind unreachable];
    }

    bb127: {
        switchInt(move _40) -> [0: bb129, otherwise: bb128];
    }

    bb128: {
        _0 = DecodedKey::Unicode(const '\u{f}');
        goto -> bb344;
    }

    bb129: {
        _41 = Modifiers::is_caps(_3) -> [return: bb130, unwind unreachable];
    }

    bb130: {
        switchInt(move _41) -> [0: bb132, otherwise: bb131];
    }

    bb131: {
        _0 = DecodedKey::Unicode(const 'O');
        goto -> bb344;
    }

    bb132: {
        _0 = DecodedKey::Unicode(const 'o');
        goto -> bb344;
    }

    bb133: {
        switchInt(_5) -> [0: bb137, otherwise: bb134];
    }

    bb134: {
        _42 = Modifiers::is_ctrl(_3) -> [return: bb135, unwind unreachable];
    }

    bb135: {
        switchInt(move _42) -> [0: bb137, otherwise: bb136];
    }

    bb136: {
        _0 = DecodedKey::Unicode(const '\u{10}');
        goto -> bb344;
    }

    bb137: {
        _43 = Modifiers::is_caps(_3) -> [return: bb138, unwind unreachable];
    }

    bb138: {
        switchInt(move _43) -> [0: bb140, otherwise: bb139];
    }

    bb139: {
        _0 = DecodedKey::Unicode(const 'P');
        goto -> bb344;
    }

    bb140: {
        _0 = DecodedKey::Unicode(const 'p');
        goto -> bb344;
    }

    bb141: {
        _44 = Modifiers::is_shifted(_3) -> [return: bb142, unwind unreachable];
    }

    bb142: {
        switchInt(move _44) -> [0: bb144, otherwise: bb143];
    }

    bb143: {
        _0 = DecodedKey::Unicode(const '{');
        goto -> bb344;
    }

    bb144: {
        _0 = DecodedKey::Unicode(const '[');
        goto -> bb344;
    }

    bb145: {
        _45 = Modifiers::is_shifted(_3) -> [return: bb146, unwind unreachable];
    }

    bb146: {
        switchInt(move _45) -> [0: bb148, otherwise: bb147];
    }

    bb147: {
        _0 = DecodedKey::Unicode(const '}');
        goto -> bb344;
    }

    bb148: {
        _0 = DecodedKey::Unicode(const ']');
        goto -> bb344;
    }

    bb149: {
        _46 = Modifiers::is_shifted(_3) -> [return: bb150, unwind unreachable];
    }

    bb150: {
        switchInt(move _46) -> [0: bb152, otherwise: bb151];
    }

    bb151: {
        _0 = DecodedKey::Unicode(const '|');
        goto -> bb344;
    }

    bb152: {
        _0 = DecodedKey::Unicode(const '\\');
        goto -> bb344;
    }

    bb153: {
        switchInt(_5) -> [0: bb157, otherwise: bb154];
    }

    bb154: {
        _47 = Modifiers::is_ctrl(_3) -> [return: bb155, unwind unreachable];
    }

    bb155: {
        switchInt(move _47) -> [0: bb157, otherwise: bb156];
    }

    bb156: {
        _0 = DecodedKey::Unicode(const '\u{1}');
        goto -> bb344;
    }

    bb157: {
        _48 = Modifiers::is_caps(_3) -> [return: bb158, unwind unreachable];
    }

    bb158: {
        switchInt(move _48) -> [0: bb160, otherwise: bb159];
    }

    bb159: {
        _0 = DecodedKey::Unicode(const 'A');
        goto -> bb344;
    }

    bb160: {
        _0 = DecodedKey::Unicode(const 'a');
        goto -> bb344;
    }

    bb161: {
        switchInt(_5) -> [0: bb165, otherwise: bb162];
    }

    bb162: {
        _49 = Modifiers::is_ctrl(_3) -> [return: bb163, unwind unreachable];
    }

    bb163: {
        switchInt(move _49) -> [0: bb165, otherwise: bb164];
    }

    bb164: {
        _0 = DecodedKey::Unicode(const '\u{13}');
        goto -> bb344;
    }

    bb165: {
        _50 = Modifiers::is_caps(_3) -> [return: bb166, unwind unreachable];
    }

    bb166: {
        switchInt(move _50) -> [0: bb168, otherwise: bb167];
    }

    bb167: {
        _0 = DecodedKey::Unicode(const 'S');
        goto -> bb344;
    }

    bb168: {
        _0 = DecodedKey::Unicode(const 's');
        goto -> bb344;
    }

    bb169: {
        switchInt(_5) -> [0: bb173, otherwise: bb170];
    }

    bb170: {
        _51 = Modifiers::is_ctrl(_3) -> [return: bb171, unwind unreachable];
    }

    bb171: {
        switchInt(move _51) -> [0: bb173, otherwise: bb172];
    }

    bb172: {
        _0 = DecodedKey::Unicode(const '\u{4}');
        goto -> bb344;
    }

    bb173: {
        _52 = Modifiers::is_caps(_3) -> [return: bb174, unwind unreachable];
    }

    bb174: {
        switchInt(move _52) -> [0: bb176, otherwise: bb175];
    }

    bb175: {
        _0 = DecodedKey::Unicode(const 'D');
        goto -> bb344;
    }

    bb176: {
        _0 = DecodedKey::Unicode(const 'd');
        goto -> bb344;
    }

    bb177: {
        switchInt(_5) -> [0: bb181, otherwise: bb178];
    }

    bb178: {
        _53 = Modifiers::is_ctrl(_3) -> [return: bb179, unwind unreachable];
    }

    bb179: {
        switchInt(move _53) -> [0: bb181, otherwise: bb180];
    }

    bb180: {
        _0 = DecodedKey::Unicode(const '\u{6}');
        goto -> bb344;
    }

    bb181: {
        _54 = Modifiers::is_caps(_3) -> [return: bb182, unwind unreachable];
    }

    bb182: {
        switchInt(move _54) -> [0: bb184, otherwise: bb183];
    }

    bb183: {
        _0 = DecodedKey::Unicode(const 'F');
        goto -> bb344;
    }

    bb184: {
        _0 = DecodedKey::Unicode(const 'f');
        goto -> bb344;
    }

    bb185: {
        switchInt(_5) -> [0: bb189, otherwise: bb186];
    }

    bb186: {
        _55 = Modifiers::is_ctrl(_3) -> [return: bb187, unwind unreachable];
    }

    bb187: {
        switchInt(move _55) -> [0: bb189, otherwise: bb188];
    }

    bb188: {
        _0 = DecodedKey::Unicode(const '\u{7}');
        goto -> bb344;
    }

    bb189: {
        _56 = Modifiers::is_caps(_3) -> [return: bb190, unwind unreachable];
    }

    bb190: {
        switchInt(move _56) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        _0 = DecodedKey::Unicode(const 'G');
        goto -> bb344;
    }

    bb192: {
        _0 = DecodedKey::Unicode(const 'g');
        goto -> bb344;
    }

    bb193: {
        switchInt(_5) -> [0: bb197, otherwise: bb194];
    }

    bb194: {
        _57 = Modifiers::is_ctrl(_3) -> [return: bb195, unwind unreachable];
    }

    bb195: {
        switchInt(move _57) -> [0: bb197, otherwise: bb196];
    }

    bb196: {
        _0 = DecodedKey::Unicode(const '\u{8}');
        goto -> bb344;
    }

    bb197: {
        _58 = Modifiers::is_caps(_3) -> [return: bb198, unwind unreachable];
    }

    bb198: {
        switchInt(move _58) -> [0: bb200, otherwise: bb199];
    }

    bb199: {
        _0 = DecodedKey::Unicode(const 'H');
        goto -> bb344;
    }

    bb200: {
        _0 = DecodedKey::Unicode(const 'h');
        goto -> bb344;
    }

    bb201: {
        switchInt(_5) -> [0: bb205, otherwise: bb202];
    }

    bb202: {
        _59 = Modifiers::is_ctrl(_3) -> [return: bb203, unwind unreachable];
    }

    bb203: {
        switchInt(move _59) -> [0: bb205, otherwise: bb204];
    }

    bb204: {
        _0 = DecodedKey::Unicode(const '\n');
        goto -> bb344;
    }

    bb205: {
        _60 = Modifiers::is_caps(_3) -> [return: bb206, unwind unreachable];
    }

    bb206: {
        switchInt(move _60) -> [0: bb208, otherwise: bb207];
    }

    bb207: {
        _0 = DecodedKey::Unicode(const 'J');
        goto -> bb344;
    }

    bb208: {
        _0 = DecodedKey::Unicode(const 'j');
        goto -> bb344;
    }

    bb209: {
        switchInt(_5) -> [0: bb213, otherwise: bb210];
    }

    bb210: {
        _61 = Modifiers::is_ctrl(_3) -> [return: bb211, unwind unreachable];
    }

    bb211: {
        switchInt(move _61) -> [0: bb213, otherwise: bb212];
    }

    bb212: {
        _0 = DecodedKey::Unicode(const '\u{b}');
        goto -> bb344;
    }

    bb213: {
        _62 = Modifiers::is_caps(_3) -> [return: bb214, unwind unreachable];
    }

    bb214: {
        switchInt(move _62) -> [0: bb216, otherwise: bb215];
    }

    bb215: {
        _0 = DecodedKey::Unicode(const 'K');
        goto -> bb344;
    }

    bb216: {
        _0 = DecodedKey::Unicode(const 'k');
        goto -> bb344;
    }

    bb217: {
        switchInt(_5) -> [0: bb221, otherwise: bb218];
    }

    bb218: {
        _63 = Modifiers::is_ctrl(_3) -> [return: bb219, unwind unreachable];
    }

    bb219: {
        switchInt(move _63) -> [0: bb221, otherwise: bb220];
    }

    bb220: {
        _0 = DecodedKey::Unicode(const '\u{c}');
        goto -> bb344;
    }

    bb221: {
        _64 = Modifiers::is_caps(_3) -> [return: bb222, unwind unreachable];
    }

    bb222: {
        switchInt(move _64) -> [0: bb224, otherwise: bb223];
    }

    bb223: {
        _0 = DecodedKey::Unicode(const 'L');
        goto -> bb344;
    }

    bb224: {
        _0 = DecodedKey::Unicode(const 'l');
        goto -> bb344;
    }

    bb225: {
        _65 = Modifiers::is_shifted(_3) -> [return: bb226, unwind unreachable];
    }

    bb226: {
        switchInt(move _65) -> [0: bb228, otherwise: bb227];
    }

    bb227: {
        _0 = DecodedKey::Unicode(const ':');
        goto -> bb344;
    }

    bb228: {
        _0 = DecodedKey::Unicode(const ';');
        goto -> bb344;
    }

    bb229: {
        _66 = Modifiers::is_shifted(_3) -> [return: bb230, unwind unreachable];
    }

    bb230: {
        switchInt(move _66) -> [0: bb232, otherwise: bb231];
    }

    bb231: {
        _0 = DecodedKey::Unicode(const '"');
        goto -> bb344;
    }

    bb232: {
        _0 = DecodedKey::Unicode(const '\'');
        goto -> bb344;
    }

    bb233: {
        _67 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb234, unwind unreachable];
    }

    bb234: {
        _0 = DecodedKey::Unicode(move _67);
        goto -> bb344;
    }

    bb235: {
        switchInt(_5) -> [0: bb239, otherwise: bb236];
    }

    bb236: {
        _68 = Modifiers::is_ctrl(_3) -> [return: bb237, unwind unreachable];
    }

    bb237: {
        switchInt(move _68) -> [0: bb239, otherwise: bb238];
    }

    bb238: {
        _0 = DecodedKey::Unicode(const '\u{1a}');
        goto -> bb344;
    }

    bb239: {
        _69 = Modifiers::is_caps(_3) -> [return: bb240, unwind unreachable];
    }

    bb240: {
        switchInt(move _69) -> [0: bb242, otherwise: bb241];
    }

    bb241: {
        _0 = DecodedKey::Unicode(const 'Z');
        goto -> bb344;
    }

    bb242: {
        _0 = DecodedKey::Unicode(const 'z');
        goto -> bb344;
    }

    bb243: {
        switchInt(_5) -> [0: bb247, otherwise: bb244];
    }

    bb244: {
        _70 = Modifiers::is_ctrl(_3) -> [return: bb245, unwind unreachable];
    }

    bb245: {
        switchInt(move _70) -> [0: bb247, otherwise: bb246];
    }

    bb246: {
        _0 = DecodedKey::Unicode(const '\u{18}');
        goto -> bb344;
    }

    bb247: {
        _71 = Modifiers::is_caps(_3) -> [return: bb248, unwind unreachable];
    }

    bb248: {
        switchInt(move _71) -> [0: bb250, otherwise: bb249];
    }

    bb249: {
        _0 = DecodedKey::Unicode(const 'X');
        goto -> bb344;
    }

    bb250: {
        _0 = DecodedKey::Unicode(const 'x');
        goto -> bb344;
    }

    bb251: {
        switchInt(_5) -> [0: bb255, otherwise: bb252];
    }

    bb252: {
        _72 = Modifiers::is_ctrl(_3) -> [return: bb253, unwind unreachable];
    }

    bb253: {
        switchInt(move _72) -> [0: bb255, otherwise: bb254];
    }

    bb254: {
        _0 = DecodedKey::Unicode(const '\u{3}');
        goto -> bb344;
    }

    bb255: {
        _73 = Modifiers::is_caps(_3) -> [return: bb256, unwind unreachable];
    }

    bb256: {
        switchInt(move _73) -> [0: bb258, otherwise: bb257];
    }

    bb257: {
        _0 = DecodedKey::Unicode(const 'C');
        goto -> bb344;
    }

    bb258: {
        _0 = DecodedKey::Unicode(const 'c');
        goto -> bb344;
    }

    bb259: {
        switchInt(_5) -> [0: bb263, otherwise: bb260];
    }

    bb260: {
        _74 = Modifiers::is_ctrl(_3) -> [return: bb261, unwind unreachable];
    }

    bb261: {
        switchInt(move _74) -> [0: bb263, otherwise: bb262];
    }

    bb262: {
        _0 = DecodedKey::Unicode(const '\u{16}');
        goto -> bb344;
    }

    bb263: {
        _75 = Modifiers::is_caps(_3) -> [return: bb264, unwind unreachable];
    }

    bb264: {
        switchInt(move _75) -> [0: bb266, otherwise: bb265];
    }

    bb265: {
        _0 = DecodedKey::Unicode(const 'V');
        goto -> bb344;
    }

    bb266: {
        _0 = DecodedKey::Unicode(const 'v');
        goto -> bb344;
    }

    bb267: {
        switchInt(_5) -> [0: bb271, otherwise: bb268];
    }

    bb268: {
        _76 = Modifiers::is_ctrl(_3) -> [return: bb269, unwind unreachable];
    }

    bb269: {
        switchInt(move _76) -> [0: bb271, otherwise: bb270];
    }

    bb270: {
        _0 = DecodedKey::Unicode(const '\u{2}');
        goto -> bb344;
    }

    bb271: {
        _77 = Modifiers::is_caps(_3) -> [return: bb272, unwind unreachable];
    }

    bb272: {
        switchInt(move _77) -> [0: bb274, otherwise: bb273];
    }

    bb273: {
        _0 = DecodedKey::Unicode(const 'B');
        goto -> bb344;
    }

    bb274: {
        _0 = DecodedKey::Unicode(const 'b');
        goto -> bb344;
    }

    bb275: {
        switchInt(_5) -> [0: bb279, otherwise: bb276];
    }

    bb276: {
        _78 = Modifiers::is_ctrl(_3) -> [return: bb277, unwind unreachable];
    }

    bb277: {
        switchInt(move _78) -> [0: bb279, otherwise: bb278];
    }

    bb278: {
        _0 = DecodedKey::Unicode(const '\u{e}');
        goto -> bb344;
    }

    bb279: {
        _79 = Modifiers::is_caps(_3) -> [return: bb280, unwind unreachable];
    }

    bb280: {
        switchInt(move _79) -> [0: bb282, otherwise: bb281];
    }

    bb281: {
        _0 = DecodedKey::Unicode(const 'N');
        goto -> bb344;
    }

    bb282: {
        _0 = DecodedKey::Unicode(const 'n');
        goto -> bb344;
    }

    bb283: {
        switchInt(_5) -> [0: bb287, otherwise: bb284];
    }

    bb284: {
        _80 = Modifiers::is_ctrl(_3) -> [return: bb285, unwind unreachable];
    }

    bb285: {
        switchInt(move _80) -> [0: bb287, otherwise: bb286];
    }

    bb286: {
        _0 = DecodedKey::Unicode(const '\r');
        goto -> bb344;
    }

    bb287: {
        _81 = Modifiers::is_caps(_3) -> [return: bb288, unwind unreachable];
    }

    bb288: {
        switchInt(move _81) -> [0: bb290, otherwise: bb289];
    }

    bb289: {
        _0 = DecodedKey::Unicode(const 'M');
        goto -> bb344;
    }

    bb290: {
        _0 = DecodedKey::Unicode(const 'm');
        goto -> bb344;
    }

    bb291: {
        _82 = Modifiers::is_shifted(_3) -> [return: bb292, unwind unreachable];
    }

    bb292: {
        switchInt(move _82) -> [0: bb294, otherwise: bb293];
    }

    bb293: {
        _0 = DecodedKey::Unicode(const '<');
        goto -> bb344;
    }

    bb294: {
        _0 = DecodedKey::Unicode(const ',');
        goto -> bb344;
    }

    bb295: {
        _83 = Modifiers::is_shifted(_3) -> [return: bb296, unwind unreachable];
    }

    bb296: {
        switchInt(move _83) -> [0: bb298, otherwise: bb297];
    }

    bb297: {
        _0 = DecodedKey::Unicode(const '>');
        goto -> bb344;
    }

    bb298: {
        _0 = DecodedKey::Unicode(const '.');
        goto -> bb344;
    }

    bb299: {
        _84 = Modifiers::is_shifted(_3) -> [return: bb300, unwind unreachable];
    }

    bb300: {
        switchInt(move _84) -> [0: bb302, otherwise: bb301];
    }

    bb301: {
        _0 = DecodedKey::Unicode(const '?');
        goto -> bb344;
    }

    bb302: {
        _0 = DecodedKey::Unicode(const '/');
        goto -> bb344;
    }

    bb303: {
        _0 = DecodedKey::Unicode(const ' ');
        goto -> bb344;
    }

    bb304: {
        _85 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb305, unwind unreachable];
    }

    bb305: {
        _0 = DecodedKey::Unicode(move _85);
        goto -> bb344;
    }

    bb306: {
        _0 = DecodedKey::Unicode(const '/');
        goto -> bb344;
    }

    bb307: {
        _0 = DecodedKey::Unicode(const '*');
        goto -> bb344;
    }

    bb308: {
        _0 = DecodedKey::Unicode(const '-');
        goto -> bb344;
    }

    bb309: {
        _86 = ((*_3).4: bool);
        switchInt(move _86) -> [0: bb311, otherwise: bb310];
    }

    bb310: {
        _0 = DecodedKey::Unicode(const '7');
        goto -> bb344;
    }

    bb311: {
        _87 = KeyCode::Home;
        _0 = DecodedKey::RawKey(move _87);
        goto -> bb344;
    }

    bb312: {
        _88 = ((*_3).4: bool);
        switchInt(move _88) -> [0: bb314, otherwise: bb313];
    }

    bb313: {
        _0 = DecodedKey::Unicode(const '8');
        goto -> bb344;
    }

    bb314: {
        _89 = KeyCode::ArrowUp;
        _0 = DecodedKey::RawKey(move _89);
        goto -> bb344;
    }

    bb315: {
        _90 = ((*_3).4: bool);
        switchInt(move _90) -> [0: bb317, otherwise: bb316];
    }

    bb316: {
        _0 = DecodedKey::Unicode(const '9');
        goto -> bb344;
    }

    bb317: {
        _91 = KeyCode::PageUp;
        _0 = DecodedKey::RawKey(move _91);
        goto -> bb344;
    }

    bb318: {
        _0 = DecodedKey::Unicode(const '+');
        goto -> bb344;
    }

    bb319: {
        _92 = ((*_3).4: bool);
        switchInt(move _92) -> [0: bb321, otherwise: bb320];
    }

    bb320: {
        _0 = DecodedKey::Unicode(const '4');
        goto -> bb344;
    }

    bb321: {
        _93 = KeyCode::ArrowLeft;
        _0 = DecodedKey::RawKey(move _93);
        goto -> bb344;
    }

    bb322: {
        _0 = DecodedKey::Unicode(const '5');
        goto -> bb344;
    }

    bb323: {
        _94 = ((*_3).4: bool);
        switchInt(move _94) -> [0: bb325, otherwise: bb324];
    }

    bb324: {
        _0 = DecodedKey::Unicode(const '6');
        goto -> bb344;
    }

    bb325: {
        _95 = KeyCode::ArrowRight;
        _0 = DecodedKey::RawKey(move _95);
        goto -> bb344;
    }

    bb326: {
        _96 = ((*_3).4: bool);
        switchInt(move _96) -> [0: bb328, otherwise: bb327];
    }

    bb327: {
        _0 = DecodedKey::Unicode(const '1');
        goto -> bb344;
    }

    bb328: {
        _97 = KeyCode::End;
        _0 = DecodedKey::RawKey(move _97);
        goto -> bb344;
    }

    bb329: {
        _98 = ((*_3).4: bool);
        switchInt(move _98) -> [0: bb331, otherwise: bb330];
    }

    bb330: {
        _0 = DecodedKey::Unicode(const '2');
        goto -> bb344;
    }

    bb331: {
        _99 = KeyCode::ArrowDown;
        _0 = DecodedKey::RawKey(move _99);
        goto -> bb344;
    }

    bb332: {
        _100 = ((*_3).4: bool);
        switchInt(move _100) -> [0: bb334, otherwise: bb333];
    }

    bb333: {
        _0 = DecodedKey::Unicode(const '3');
        goto -> bb344;
    }

    bb334: {
        _101 = KeyCode::PageDown;
        _0 = DecodedKey::RawKey(move _101);
        goto -> bb344;
    }

    bb335: {
        _102 = ((*_3).4: bool);
        switchInt(move _102) -> [0: bb337, otherwise: bb336];
    }

    bb336: {
        _0 = DecodedKey::Unicode(const '0');
        goto -> bb344;
    }

    bb337: {
        _103 = KeyCode::Insert;
        _0 = DecodedKey::RawKey(move _103);
        goto -> bb344;
    }

    bb338: {
        _104 = ((*_3).4: bool);
        switchInt(move _104) -> [0: bb340, otherwise: bb339];
    }

    bb339: {
        _0 = DecodedKey::Unicode(const '.');
        goto -> bb344;
    }

    bb340: {
        _105 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb341, unwind unreachable];
    }

    bb341: {
        _0 = DecodedKey::Unicode(move _105);
        goto -> bb344;
    }

    bb342: {
        _106 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb343, unwind unreachable];
    }

    bb343: {
        _0 = DecodedKey::Unicode(move _106);
        goto -> bb344;
    }

    bb344: {
        return;
    }
}

promoted[0] in us104::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:10:1: 10:33>::map_keycode: &HandleControl = {
    let mut _0: &HandleControl;
    let mut _1: HandleControl;

    bb0: {
        _1 = HandleControl::MapLettersToUnicode;
        _0 = &_1;
        return;
    }
}

fn uk105::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:10:1: 10:33>::map_keycode(_1: &Uk105Key, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;
    debug keycode => _2;
    debug modifiers => _3;
    debug handle_ctrl => _4;
    let mut _0: DecodedKey;
    let mut _5: u8;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _16: &layouts::us104::Us104Key;
    scope 1 {
        debug e => _2;
        let _15: layouts::us104::Us104Key;
        scope 2 {
            debug us => const Us104Key;
        }
    }

    bb0: {
        _5 = discriminant(_2);
        switchInt(move _5) -> [17: bb2, 19: bb8, 20: bb16, 21: bb20, 51: bb30, 52: bb26, 71: bb12, otherwise: bb1];
    }

    bb1: {
        _16 = &_15;
        _0 = <Us104Key as KeyboardLayout>::map_keycode(move _16, _2, _3, _4) -> [return: bb34, unwind unreachable];
    }

    bb2: {
        _6 = ((*_3).6: bool);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = DecodedKey::Unicode(const '|');
        goto -> bb34;
    }

    bb4: {
        _7 = Modifiers::is_shifted(_3) -> [return: bb5, unwind unreachable];
    }

    bb5: {
        switchInt(move _7) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _0 = DecodedKey::Unicode(const '¬');
        goto -> bb34;
    }

    bb7: {
        _0 = DecodedKey::Unicode(const '`');
        goto -> bb34;
    }

    bb8: {
        _8 = Modifiers::is_shifted(_3) -> [return: bb9, unwind unreachable];
    }

    bb9: {
        switchInt(move _8) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _0 = DecodedKey::Unicode(const '"');
        goto -> bb34;
    }

    bb11: {
        _0 = DecodedKey::Unicode(const '2');
        goto -> bb34;
    }

    bb12: {
        _9 = Modifiers::is_shifted(_3) -> [return: bb13, unwind unreachable];
    }

    bb13: {
        switchInt(move _9) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _0 = DecodedKey::Unicode(const '@');
        goto -> bb34;
    }

    bb15: {
        _0 = DecodedKey::Unicode(const '\'');
        goto -> bb34;
    }

    bb16: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb17, unwind unreachable];
    }

    bb17: {
        switchInt(move _10) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _0 = DecodedKey::Unicode(const '£');
        goto -> bb34;
    }

    bb19: {
        _0 = DecodedKey::Unicode(const '3');
        goto -> bb34;
    }

    bb20: {
        _11 = ((*_3).6: bool);
        switchInt(move _11) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _0 = DecodedKey::Unicode(const '€');
        goto -> bb34;
    }

    bb22: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb23, unwind unreachable];
    }

    bb23: {
        switchInt(move _12) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '$');
        goto -> bb34;
    }

    bb25: {
        _0 = DecodedKey::Unicode(const '4');
        goto -> bb34;
    }

    bb26: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb27, unwind unreachable];
    }

    bb27: {
        switchInt(move _13) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '~');
        goto -> bb34;
    }

    bb29: {
        _0 = DecodedKey::Unicode(const '#');
        goto -> bb34;
    }

    bb30: {
        _14 = Modifiers::is_shifted(_3) -> [return: bb31, unwind unreachable];
    }

    bb31: {
        switchInt(move _14) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _0 = DecodedKey::Unicode(const '|');
        goto -> bb34;
    }

    bb33: {
        _0 = DecodedKey::Unicode(const '\\');
        goto -> bb34;
    }

    bb34: {
        return;
    }
}

fn jis109::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:13:1: 13:34>::map_keycode(_1: &Jis109Key, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;
    debug keycode => _2;
    debug modifiers => _3;
    debug handle_ctrl => _4;
    let mut _0: DecodedKey;
    let mut _5: u8;
    let mut _6: KeyCode;
    let mut _7: char;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _28: &layouts::us104::Us104Key;
    scope 1 {
        debug e => _2;
        let _27: layouts::us104::Us104Key;
        scope 2 {
            debug us => const Us104Key;
        }
    }

    bb0: {
        _5 = discriminant(_2);
        switchInt(move _5) -> [0: bb3, 17: bb2, 18: bb5, 19: bb9, 20: bb13, 21: bb17, 22: bb21, 23: bb25, 24: bb29, 25: bb33, 26: bb37, 27: bb41, 28: bb45, 29: bb49, 49: bb53, 50: bb57, 52: bb61, 70: bb65, 71: bb69, 106: bb73, 107: bb74, 108: bb75, 109: bb76, 110: bb80, otherwise: bb1];
    }

    bb1: {
        _28 = &_27;
        _0 = <Us104Key as KeyboardLayout>::map_keycode(move _28, _2, _3, _4) -> [return: bb84, unwind unreachable];
    }

    bb2: {
        _6 = KeyCode::Oem8;
        _0 = DecodedKey::RawKey(move _6);
        goto -> bb84;
    }

    bb3: {
        _7 = <u8 as Into<char>>::into(const 27_u8) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        _0 = DecodedKey::Unicode(move _7);
        goto -> bb84;
    }

    bb5: {
        _8 = Modifiers::is_shifted(_3) -> [return: bb6, unwind unreachable];
    }

    bb6: {
        switchInt(move _8) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _0 = DecodedKey::Unicode(const '!');
        goto -> bb84;
    }

    bb8: {
        _0 = DecodedKey::Unicode(const '1');
        goto -> bb84;
    }

    bb9: {
        _9 = Modifiers::is_shifted(_3) -> [return: bb10, unwind unreachable];
    }

    bb10: {
        switchInt(move _9) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _0 = DecodedKey::Unicode(const '"');
        goto -> bb84;
    }

    bb12: {
        _0 = DecodedKey::Unicode(const '2');
        goto -> bb84;
    }

    bb13: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb14, unwind unreachable];
    }

    bb14: {
        switchInt(move _10) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _0 = DecodedKey::Unicode(const '#');
        goto -> bb84;
    }

    bb16: {
        _0 = DecodedKey::Unicode(const '3');
        goto -> bb84;
    }

    bb17: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb18, unwind unreachable];
    }

    bb18: {
        switchInt(move _11) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _0 = DecodedKey::Unicode(const '$');
        goto -> bb84;
    }

    bb20: {
        _0 = DecodedKey::Unicode(const '4');
        goto -> bb84;
    }

    bb21: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb22, unwind unreachable];
    }

    bb22: {
        switchInt(move _12) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _0 = DecodedKey::Unicode(const '%');
        goto -> bb84;
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '5');
        goto -> bb84;
    }

    bb25: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb26, unwind unreachable];
    }

    bb26: {
        switchInt(move _13) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _0 = DecodedKey::Unicode(const '&');
        goto -> bb84;
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '6');
        goto -> bb84;
    }

    bb29: {
        _14 = Modifiers::is_shifted(_3) -> [return: bb30, unwind unreachable];
    }

    bb30: {
        switchInt(move _14) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _0 = DecodedKey::Unicode(const '\'');
        goto -> bb84;
    }

    bb32: {
        _0 = DecodedKey::Unicode(const '7');
        goto -> bb84;
    }

    bb33: {
        _15 = Modifiers::is_shifted(_3) -> [return: bb34, unwind unreachable];
    }

    bb34: {
        switchInt(move _15) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _0 = DecodedKey::Unicode(const '(');
        goto -> bb84;
    }

    bb36: {
        _0 = DecodedKey::Unicode(const '8');
        goto -> bb84;
    }

    bb37: {
        _16 = Modifiers::is_shifted(_3) -> [return: bb38, unwind unreachable];
    }

    bb38: {
        switchInt(move _16) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _0 = DecodedKey::Unicode(const ')');
        goto -> bb84;
    }

    bb40: {
        _0 = DecodedKey::Unicode(const '9');
        goto -> bb84;
    }

    bb41: {
        _17 = Modifiers::is_shifted(_3) -> [return: bb42, unwind unreachable];
    }

    bb42: {
        switchInt(move _17) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _0 = DecodedKey::Unicode(const '~');
        goto -> bb84;
    }

    bb44: {
        _0 = DecodedKey::Unicode(const '0');
        goto -> bb84;
    }

    bb45: {
        _18 = Modifiers::is_shifted(_3) -> [return: bb46, unwind unreachable];
    }

    bb46: {
        switchInt(move _18) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _0 = DecodedKey::Unicode(const '=');
        goto -> bb84;
    }

    bb48: {
        _0 = DecodedKey::Unicode(const '-');
        goto -> bb84;
    }

    bb49: {
        _19 = Modifiers::is_shifted(_3) -> [return: bb50, unwind unreachable];
    }

    bb50: {
        switchInt(move _19) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _0 = DecodedKey::Unicode(const '¯');
        goto -> bb84;
    }

    bb52: {
        _0 = DecodedKey::Unicode(const '^');
        goto -> bb84;
    }

    bb53: {
        _20 = Modifiers::is_shifted(_3) -> [return: bb54, unwind unreachable];
    }

    bb54: {
        switchInt(move _20) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _0 = DecodedKey::Unicode(const '`');
        goto -> bb84;
    }

    bb56: {
        _0 = DecodedKey::Unicode(const '@');
        goto -> bb84;
    }

    bb57: {
        _21 = Modifiers::is_shifted(_3) -> [return: bb58, unwind unreachable];
    }

    bb58: {
        switchInt(move _21) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _0 = DecodedKey::Unicode(const '{');
        goto -> bb84;
    }

    bb60: {
        _0 = DecodedKey::Unicode(const '[');
        goto -> bb84;
    }

    bb61: {
        _22 = Modifiers::is_shifted(_3) -> [return: bb62, unwind unreachable];
    }

    bb62: {
        switchInt(move _22) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _0 = DecodedKey::Unicode(const '}');
        goto -> bb84;
    }

    bb64: {
        _0 = DecodedKey::Unicode(const ']');
        goto -> bb84;
    }

    bb65: {
        _23 = Modifiers::is_shifted(_3) -> [return: bb66, unwind unreachable];
    }

    bb66: {
        switchInt(move _23) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _0 = DecodedKey::Unicode(const '+');
        goto -> bb84;
    }

    bb68: {
        _0 = DecodedKey::Unicode(const ';');
        goto -> bb84;
    }

    bb69: {
        _24 = Modifiers::is_shifted(_3) -> [return: bb70, unwind unreachable];
    }

    bb70: {
        switchInt(move _24) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _0 = DecodedKey::Unicode(const '*');
        goto -> bb84;
    }

    bb72: {
        _0 = DecodedKey::Unicode(const ':');
        goto -> bb84;
    }

    bb73: {
        _0 = DecodedKey::RawKey(_2);
        goto -> bb84;
    }

    bb74: {
        _0 = DecodedKey::RawKey(_2);
        goto -> bb84;
    }

    bb75: {
        _0 = DecodedKey::RawKey(_2);
        goto -> bb84;
    }

    bb76: {
        _25 = Modifiers::is_shifted(_3) -> [return: bb77, unwind unreachable];
    }

    bb77: {
        switchInt(move _25) -> [0: bb79, otherwise: bb78];
    }

    bb78: {
        _0 = DecodedKey::Unicode(const '_');
        goto -> bb84;
    }

    bb79: {
        _0 = DecodedKey::Unicode(const '\\');
        goto -> bb84;
    }

    bb80: {
        _26 = Modifiers::is_shifted(_3) -> [return: bb81, unwind unreachable];
    }

    bb81: {
        switchInt(move _26) -> [0: bb83, otherwise: bb82];
    }

    bb82: {
        _0 = DecodedKey::Unicode(const '|');
        goto -> bb84;
    }

    bb83: {
        _0 = DecodedKey::Unicode(const '¥');
        goto -> bb84;
    }

    bb84: {
        return;
    }
}

fn azerty::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:12:1: 12:31>::map_keycode(_1: &Azerty, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;
    debug keycode => _2;
    debug modifiers => _3;
    debug handle_ctrl => _4;
    let mut _0: DecodedKey;
    let _5: bool;
    let mut _6: &HandleControl;
    let mut _7: u8;
    let mut _8: char;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: char;
    let mut _34: char;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: char;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: char;
    let mut _99: bool;
    let mut _100: KeyCode;
    let mut _101: bool;
    let mut _102: KeyCode;
    let mut _103: bool;
    let mut _104: KeyCode;
    let mut _105: bool;
    let mut _106: KeyCode;
    let mut _107: bool;
    let mut _108: KeyCode;
    let mut _109: bool;
    let mut _110: KeyCode;
    let mut _111: bool;
    let mut _112: KeyCode;
    let mut _113: bool;
    let mut _114: KeyCode;
    let mut _115: bool;
    let mut _116: KeyCode;
    let mut _117: bool;
    let mut _118: char;
    let mut _119: char;
    let mut _120: &HandleControl;
    scope 1 {
        debug map_to_unicode => _5;
        scope 2 {
            debug k => _2;
        }
    }

    bb0: {
        _6 = &_4;
        _120 = const _;
        _5 = <HandleControl as PartialEq>::eq(move _6, _120) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _7 = discriminant(_2);
        switchInt(move _7) -> [0: bb3, 17: bb5, 18: bb10, 19: bb14, 20: bb20, 21: bb26, 22: bb32, 23: bb38, 24: bb44, 25: bb50, 26: bb56, 27: bb62, 28: bb68, 29: bb74, 30: bb80, 35: bb333, 36: bb334, 37: bb335, 38: bb82, 39: bb84, 40: bb92, 41: bb100, 42: bb108, 43: bb116, 44: bb124, 45: bb132, 46: bb140, 47: bb148, 48: bb156, 49: bb164, 50: bb170, 51: bb6, 52: bb176, 53: bb331, 56: bb336, 57: bb339, 58: bb342, 59: bb345, 61: bb180, 62: bb188, 63: bb196, 64: bb204, 65: bb212, 66: bb220, 67: bb228, 68: bb236, 69: bb244, 70: bb252, 71: bb260, 72: bb264, 73: bb346, 74: bb349, 75: bb350, 76: bb371, 77: bb266, 78: bb274, 79: bb282, 80: bb290, 81: bb298, 82: bb306, 83: bb314, 84: bb318, 85: bb322, 86: bb326, 89: bb353, 90: bb356, 91: bb359, 92: bb369, 96: bb330, 104: bb362, 105: bb365, otherwise: bb2];
    }

    bb2: {
        _0 = DecodedKey::RawKey(_2);
        goto -> bb372;
    }

    bb3: {
        _8 = <u8 as Into<char>>::into(const 27_u8) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        _0 = DecodedKey::Unicode(move _8);
        goto -> bb372;
    }

    bb5: {
        _0 = DecodedKey::Unicode(const '²');
        goto -> bb372;
    }

    bb6: {
        _9 = Modifiers::is_shifted(_3) -> [return: bb7, unwind unreachable];
    }

    bb7: {
        switchInt(move _9) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _0 = DecodedKey::Unicode(const '*');
        goto -> bb372;
    }

    bb9: {
        _0 = DecodedKey::Unicode(const 'µ');
        goto -> bb372;
    }

    bb10: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb11, unwind unreachable];
    }

    bb11: {
        switchInt(move _10) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _0 = DecodedKey::Unicode(const '1');
        goto -> bb372;
    }

    bb13: {
        _0 = DecodedKey::Unicode(const '&');
        goto -> bb372;
    }

    bb14: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb15, unwind unreachable];
    }

    bb15: {
        switchInt(move _11) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _0 = DecodedKey::Unicode(const '2');
        goto -> bb372;
    }

    bb17: {
        _12 = ((*_3).6: bool);
        switchInt(move _12) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _0 = DecodedKey::Unicode(const '~');
        goto -> bb372;
    }

    bb19: {
        _0 = DecodedKey::Unicode(const 'é');
        goto -> bb372;
    }

    bb20: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb21, unwind unreachable];
    }

    bb21: {
        switchInt(move _13) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _0 = DecodedKey::Unicode(const '3');
        goto -> bb372;
    }

    bb23: {
        _14 = ((*_3).6: bool);
        switchInt(move _14) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '#');
        goto -> bb372;
    }

    bb25: {
        _0 = DecodedKey::Unicode(const '"');
        goto -> bb372;
    }

    bb26: {
        _15 = Modifiers::is_shifted(_3) -> [return: bb27, unwind unreachable];
    }

    bb27: {
        switchInt(move _15) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '4');
        goto -> bb372;
    }

    bb29: {
        _16 = ((*_3).6: bool);
        switchInt(move _16) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _0 = DecodedKey::Unicode(const '{');
        goto -> bb372;
    }

    bb31: {
        _0 = DecodedKey::Unicode(const '\'');
        goto -> bb372;
    }

    bb32: {
        _17 = Modifiers::is_shifted(_3) -> [return: bb33, unwind unreachable];
    }

    bb33: {
        switchInt(move _17) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _0 = DecodedKey::Unicode(const '5');
        goto -> bb372;
    }

    bb35: {
        _18 = ((*_3).6: bool);
        switchInt(move _18) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _0 = DecodedKey::Unicode(const '[');
        goto -> bb372;
    }

    bb37: {
        _0 = DecodedKey::Unicode(const '(');
        goto -> bb372;
    }

    bb38: {
        _19 = Modifiers::is_shifted(_3) -> [return: bb39, unwind unreachable];
    }

    bb39: {
        switchInt(move _19) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _0 = DecodedKey::Unicode(const '6');
        goto -> bb372;
    }

    bb41: {
        _20 = ((*_3).6: bool);
        switchInt(move _20) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _0 = DecodedKey::Unicode(const '|');
        goto -> bb372;
    }

    bb43: {
        _0 = DecodedKey::Unicode(const '-');
        goto -> bb372;
    }

    bb44: {
        _21 = Modifiers::is_shifted(_3) -> [return: bb45, unwind unreachable];
    }

    bb45: {
        switchInt(move _21) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _0 = DecodedKey::Unicode(const '7');
        goto -> bb372;
    }

    bb47: {
        _22 = ((*_3).6: bool);
        switchInt(move _22) -> [0: bb49, otherwise: bb48];
    }

    bb48: {
        _0 = DecodedKey::Unicode(const '`');
        goto -> bb372;
    }

    bb49: {
        _0 = DecodedKey::Unicode(const 'è');
        goto -> bb372;
    }

    bb50: {
        _23 = Modifiers::is_shifted(_3) -> [return: bb51, unwind unreachable];
    }

    bb51: {
        switchInt(move _23) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        _0 = DecodedKey::Unicode(const '8');
        goto -> bb372;
    }

    bb53: {
        _24 = ((*_3).6: bool);
        switchInt(move _24) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _0 = DecodedKey::Unicode(const '\\');
        goto -> bb372;
    }

    bb55: {
        _0 = DecodedKey::Unicode(const '_');
        goto -> bb372;
    }

    bb56: {
        _25 = Modifiers::is_shifted(_3) -> [return: bb57, unwind unreachable];
    }

    bb57: {
        switchInt(move _25) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _0 = DecodedKey::Unicode(const '9');
        goto -> bb372;
    }

    bb59: {
        _26 = ((*_3).6: bool);
        switchInt(move _26) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _0 = DecodedKey::Unicode(const '^');
        goto -> bb372;
    }

    bb61: {
        _0 = DecodedKey::Unicode(const 'ç');
        goto -> bb372;
    }

    bb62: {
        _27 = Modifiers::is_shifted(_3) -> [return: bb63, unwind unreachable];
    }

    bb63: {
        switchInt(move _27) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _0 = DecodedKey::Unicode(const '0');
        goto -> bb372;
    }

    bb65: {
        _28 = ((*_3).6: bool);
        switchInt(move _28) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _0 = DecodedKey::Unicode(const '@');
        goto -> bb372;
    }

    bb67: {
        _0 = DecodedKey::Unicode(const 'à');
        goto -> bb372;
    }

    bb68: {
        _29 = Modifiers::is_shifted(_3) -> [return: bb69, unwind unreachable];
    }

    bb69: {
        switchInt(move _29) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        _0 = DecodedKey::Unicode(const '°');
        goto -> bb372;
    }

    bb71: {
        _30 = ((*_3).6: bool);
        switchInt(move _30) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _0 = DecodedKey::Unicode(const ']');
        goto -> bb372;
    }

    bb73: {
        _0 = DecodedKey::Unicode(const ')');
        goto -> bb372;
    }

    bb74: {
        _31 = Modifiers::is_shifted(_3) -> [return: bb75, unwind unreachable];
    }

    bb75: {
        switchInt(move _31) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _0 = DecodedKey::Unicode(const '+');
        goto -> bb372;
    }

    bb77: {
        _32 = ((*_3).6: bool);
        switchInt(move _32) -> [0: bb79, otherwise: bb78];
    }

    bb78: {
        _0 = DecodedKey::Unicode(const '}');
        goto -> bb372;
    }

    bb79: {
        _0 = DecodedKey::Unicode(const '=');
        goto -> bb372;
    }

    bb80: {
        _33 = <u8 as Into<char>>::into(const 8_u8) -> [return: bb81, unwind unreachable];
    }

    bb81: {
        _0 = DecodedKey::Unicode(move _33);
        goto -> bb372;
    }

    bb82: {
        _34 = <u8 as Into<char>>::into(const 9_u8) -> [return: bb83, unwind unreachable];
    }

    bb83: {
        _0 = DecodedKey::Unicode(move _34);
        goto -> bb372;
    }

    bb84: {
        switchInt(_5) -> [0: bb88, otherwise: bb85];
    }

    bb85: {
        _35 = Modifiers::is_ctrl(_3) -> [return: bb86, unwind unreachable];
    }

    bb86: {
        switchInt(move _35) -> [0: bb88, otherwise: bb87];
    }

    bb87: {
        _0 = DecodedKey::Unicode(const '\u{1}');
        goto -> bb372;
    }

    bb88: {
        _36 = Modifiers::is_caps(_3) -> [return: bb89, unwind unreachable];
    }

    bb89: {
        switchInt(move _36) -> [0: bb91, otherwise: bb90];
    }

    bb90: {
        _0 = DecodedKey::Unicode(const 'A');
        goto -> bb372;
    }

    bb91: {
        _0 = DecodedKey::Unicode(const 'a');
        goto -> bb372;
    }

    bb92: {
        switchInt(_5) -> [0: bb96, otherwise: bb93];
    }

    bb93: {
        _37 = Modifiers::is_ctrl(_3) -> [return: bb94, unwind unreachable];
    }

    bb94: {
        switchInt(move _37) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _0 = DecodedKey::Unicode(const '\u{1a}');
        goto -> bb372;
    }

    bb96: {
        _38 = Modifiers::is_caps(_3) -> [return: bb97, unwind unreachable];
    }

    bb97: {
        switchInt(move _38) -> [0: bb99, otherwise: bb98];
    }

    bb98: {
        _0 = DecodedKey::Unicode(const 'Z');
        goto -> bb372;
    }

    bb99: {
        _0 = DecodedKey::Unicode(const 'z');
        goto -> bb372;
    }

    bb100: {
        switchInt(_5) -> [0: bb104, otherwise: bb101];
    }

    bb101: {
        _39 = Modifiers::is_ctrl(_3) -> [return: bb102, unwind unreachable];
    }

    bb102: {
        switchInt(move _39) -> [0: bb104, otherwise: bb103];
    }

    bb103: {
        _0 = DecodedKey::Unicode(const '\u{5}');
        goto -> bb372;
    }

    bb104: {
        _40 = Modifiers::is_caps(_3) -> [return: bb105, unwind unreachable];
    }

    bb105: {
        switchInt(move _40) -> [0: bb107, otherwise: bb106];
    }

    bb106: {
        _0 = DecodedKey::Unicode(const 'E');
        goto -> bb372;
    }

    bb107: {
        _0 = DecodedKey::Unicode(const 'e');
        goto -> bb372;
    }

    bb108: {
        switchInt(_5) -> [0: bb112, otherwise: bb109];
    }

    bb109: {
        _41 = Modifiers::is_ctrl(_3) -> [return: bb110, unwind unreachable];
    }

    bb110: {
        switchInt(move _41) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _0 = DecodedKey::Unicode(const '\u{12}');
        goto -> bb372;
    }

    bb112: {
        _42 = Modifiers::is_caps(_3) -> [return: bb113, unwind unreachable];
    }

    bb113: {
        switchInt(move _42) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        _0 = DecodedKey::Unicode(const 'R');
        goto -> bb372;
    }

    bb115: {
        _0 = DecodedKey::Unicode(const 'r');
        goto -> bb372;
    }

    bb116: {
        switchInt(_5) -> [0: bb120, otherwise: bb117];
    }

    bb117: {
        _43 = Modifiers::is_ctrl(_3) -> [return: bb118, unwind unreachable];
    }

    bb118: {
        switchInt(move _43) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _0 = DecodedKey::Unicode(const '\u{14}');
        goto -> bb372;
    }

    bb120: {
        _44 = Modifiers::is_caps(_3) -> [return: bb121, unwind unreachable];
    }

    bb121: {
        switchInt(move _44) -> [0: bb123, otherwise: bb122];
    }

    bb122: {
        _0 = DecodedKey::Unicode(const 'T');
        goto -> bb372;
    }

    bb123: {
        _0 = DecodedKey::Unicode(const 't');
        goto -> bb372;
    }

    bb124: {
        switchInt(_5) -> [0: bb128, otherwise: bb125];
    }

    bb125: {
        _45 = Modifiers::is_ctrl(_3) -> [return: bb126, unwind unreachable];
    }

    bb126: {
        switchInt(move _45) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        _0 = DecodedKey::Unicode(const '\u{19}');
        goto -> bb372;
    }

    bb128: {
        _46 = Modifiers::is_caps(_3) -> [return: bb129, unwind unreachable];
    }

    bb129: {
        switchInt(move _46) -> [0: bb131, otherwise: bb130];
    }

    bb130: {
        _0 = DecodedKey::Unicode(const 'Y');
        goto -> bb372;
    }

    bb131: {
        _0 = DecodedKey::Unicode(const 'y');
        goto -> bb372;
    }

    bb132: {
        switchInt(_5) -> [0: bb136, otherwise: bb133];
    }

    bb133: {
        _47 = Modifiers::is_ctrl(_3) -> [return: bb134, unwind unreachable];
    }

    bb134: {
        switchInt(move _47) -> [0: bb136, otherwise: bb135];
    }

    bb135: {
        _0 = DecodedKey::Unicode(const '\u{15}');
        goto -> bb372;
    }

    bb136: {
        _48 = Modifiers::is_caps(_3) -> [return: bb137, unwind unreachable];
    }

    bb137: {
        switchInt(move _48) -> [0: bb139, otherwise: bb138];
    }

    bb138: {
        _0 = DecodedKey::Unicode(const 'U');
        goto -> bb372;
    }

    bb139: {
        _0 = DecodedKey::Unicode(const 'u');
        goto -> bb372;
    }

    bb140: {
        switchInt(_5) -> [0: bb144, otherwise: bb141];
    }

    bb141: {
        _49 = Modifiers::is_ctrl(_3) -> [return: bb142, unwind unreachable];
    }

    bb142: {
        switchInt(move _49) -> [0: bb144, otherwise: bb143];
    }

    bb143: {
        _0 = DecodedKey::Unicode(const '\t');
        goto -> bb372;
    }

    bb144: {
        _50 = Modifiers::is_caps(_3) -> [return: bb145, unwind unreachable];
    }

    bb145: {
        switchInt(move _50) -> [0: bb147, otherwise: bb146];
    }

    bb146: {
        _0 = DecodedKey::Unicode(const 'I');
        goto -> bb372;
    }

    bb147: {
        _0 = DecodedKey::Unicode(const 'i');
        goto -> bb372;
    }

    bb148: {
        switchInt(_5) -> [0: bb152, otherwise: bb149];
    }

    bb149: {
        _51 = Modifiers::is_ctrl(_3) -> [return: bb150, unwind unreachable];
    }

    bb150: {
        switchInt(move _51) -> [0: bb152, otherwise: bb151];
    }

    bb151: {
        _0 = DecodedKey::Unicode(const '\u{f}');
        goto -> bb372;
    }

    bb152: {
        _52 = Modifiers::is_caps(_3) -> [return: bb153, unwind unreachable];
    }

    bb153: {
        switchInt(move _52) -> [0: bb155, otherwise: bb154];
    }

    bb154: {
        _0 = DecodedKey::Unicode(const 'O');
        goto -> bb372;
    }

    bb155: {
        _0 = DecodedKey::Unicode(const 'o');
        goto -> bb372;
    }

    bb156: {
        switchInt(_5) -> [0: bb160, otherwise: bb157];
    }

    bb157: {
        _53 = Modifiers::is_ctrl(_3) -> [return: bb158, unwind unreachable];
    }

    bb158: {
        switchInt(move _53) -> [0: bb160, otherwise: bb159];
    }

    bb159: {
        _0 = DecodedKey::Unicode(const '\u{10}');
        goto -> bb372;
    }

    bb160: {
        _54 = Modifiers::is_caps(_3) -> [return: bb161, unwind unreachable];
    }

    bb161: {
        switchInt(move _54) -> [0: bb163, otherwise: bb162];
    }

    bb162: {
        _0 = DecodedKey::Unicode(const 'P');
        goto -> bb372;
    }

    bb163: {
        _0 = DecodedKey::Unicode(const 'p');
        goto -> bb372;
    }

    bb164: {
        _55 = Modifiers::is_shifted(_3) -> [return: bb165, unwind unreachable];
    }

    bb165: {
        switchInt(move _55) -> [0: bb167, otherwise: bb166];
    }

    bb166: {
        _0 = DecodedKey::Unicode(const '¨');
        goto -> bb372;
    }

    bb167: {
        _56 = ((*_3).6: bool);
        switchInt(move _56) -> [0: bb169, otherwise: bb168];
    }

    bb168: {
        _0 = DecodedKey::Unicode(const 'ˇ');
        goto -> bb372;
    }

    bb169: {
        _0 = DecodedKey::Unicode(const '^');
        goto -> bb372;
    }

    bb170: {
        _57 = Modifiers::is_shifted(_3) -> [return: bb171, unwind unreachable];
    }

    bb171: {
        switchInt(move _57) -> [0: bb173, otherwise: bb172];
    }

    bb172: {
        _0 = DecodedKey::Unicode(const '£');
        goto -> bb372;
    }

    bb173: {
        _58 = ((*_3).6: bool);
        switchInt(move _58) -> [0: bb175, otherwise: bb174];
    }

    bb174: {
        _0 = DecodedKey::Unicode(const '¤');
        goto -> bb372;
    }

    bb175: {
        _0 = DecodedKey::Unicode(const '$');
        goto -> bb372;
    }

    bb176: {
        _59 = Modifiers::is_shifted(_3) -> [return: bb177, unwind unreachable];
    }

    bb177: {
        switchInt(move _59) -> [0: bb179, otherwise: bb178];
    }

    bb178: {
        _0 = DecodedKey::Unicode(const 'µ');
        goto -> bb372;
    }

    bb179: {
        _0 = DecodedKey::Unicode(const '*');
        goto -> bb372;
    }

    bb180: {
        switchInt(_5) -> [0: bb184, otherwise: bb181];
    }

    bb181: {
        _60 = Modifiers::is_ctrl(_3) -> [return: bb182, unwind unreachable];
    }

    bb182: {
        switchInt(move _60) -> [0: bb184, otherwise: bb183];
    }

    bb183: {
        _0 = DecodedKey::Unicode(const '\u{11}');
        goto -> bb372;
    }

    bb184: {
        _61 = Modifiers::is_caps(_3) -> [return: bb185, unwind unreachable];
    }

    bb185: {
        switchInt(move _61) -> [0: bb187, otherwise: bb186];
    }

    bb186: {
        _0 = DecodedKey::Unicode(const 'Q');
        goto -> bb372;
    }

    bb187: {
        _0 = DecodedKey::Unicode(const 'q');
        goto -> bb372;
    }

    bb188: {
        switchInt(_5) -> [0: bb192, otherwise: bb189];
    }

    bb189: {
        _62 = Modifiers::is_ctrl(_3) -> [return: bb190, unwind unreachable];
    }

    bb190: {
        switchInt(move _62) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        _0 = DecodedKey::Unicode(const '\u{13}');
        goto -> bb372;
    }

    bb192: {
        _63 = Modifiers::is_caps(_3) -> [return: bb193, unwind unreachable];
    }

    bb193: {
        switchInt(move _63) -> [0: bb195, otherwise: bb194];
    }

    bb194: {
        _0 = DecodedKey::Unicode(const 'S');
        goto -> bb372;
    }

    bb195: {
        _0 = DecodedKey::Unicode(const 's');
        goto -> bb372;
    }

    bb196: {
        switchInt(_5) -> [0: bb200, otherwise: bb197];
    }

    bb197: {
        _64 = Modifiers::is_ctrl(_3) -> [return: bb198, unwind unreachable];
    }

    bb198: {
        switchInt(move _64) -> [0: bb200, otherwise: bb199];
    }

    bb199: {
        _0 = DecodedKey::Unicode(const '\u{4}');
        goto -> bb372;
    }

    bb200: {
        _65 = Modifiers::is_caps(_3) -> [return: bb201, unwind unreachable];
    }

    bb201: {
        switchInt(move _65) -> [0: bb203, otherwise: bb202];
    }

    bb202: {
        _0 = DecodedKey::Unicode(const 'D');
        goto -> bb372;
    }

    bb203: {
        _0 = DecodedKey::Unicode(const 'd');
        goto -> bb372;
    }

    bb204: {
        switchInt(_5) -> [0: bb208, otherwise: bb205];
    }

    bb205: {
        _66 = Modifiers::is_ctrl(_3) -> [return: bb206, unwind unreachable];
    }

    bb206: {
        switchInt(move _66) -> [0: bb208, otherwise: bb207];
    }

    bb207: {
        _0 = DecodedKey::Unicode(const '\u{6}');
        goto -> bb372;
    }

    bb208: {
        _67 = Modifiers::is_caps(_3) -> [return: bb209, unwind unreachable];
    }

    bb209: {
        switchInt(move _67) -> [0: bb211, otherwise: bb210];
    }

    bb210: {
        _0 = DecodedKey::Unicode(const 'F');
        goto -> bb372;
    }

    bb211: {
        _0 = DecodedKey::Unicode(const 'f');
        goto -> bb372;
    }

    bb212: {
        switchInt(_5) -> [0: bb216, otherwise: bb213];
    }

    bb213: {
        _68 = Modifiers::is_ctrl(_3) -> [return: bb214, unwind unreachable];
    }

    bb214: {
        switchInt(move _68) -> [0: bb216, otherwise: bb215];
    }

    bb215: {
        _0 = DecodedKey::Unicode(const '\u{7}');
        goto -> bb372;
    }

    bb216: {
        _69 = Modifiers::is_caps(_3) -> [return: bb217, unwind unreachable];
    }

    bb217: {
        switchInt(move _69) -> [0: bb219, otherwise: bb218];
    }

    bb218: {
        _0 = DecodedKey::Unicode(const 'G');
        goto -> bb372;
    }

    bb219: {
        _0 = DecodedKey::Unicode(const 'g');
        goto -> bb372;
    }

    bb220: {
        switchInt(_5) -> [0: bb224, otherwise: bb221];
    }

    bb221: {
        _70 = Modifiers::is_ctrl(_3) -> [return: bb222, unwind unreachable];
    }

    bb222: {
        switchInt(move _70) -> [0: bb224, otherwise: bb223];
    }

    bb223: {
        _0 = DecodedKey::Unicode(const '\u{8}');
        goto -> bb372;
    }

    bb224: {
        _71 = Modifiers::is_caps(_3) -> [return: bb225, unwind unreachable];
    }

    bb225: {
        switchInt(move _71) -> [0: bb227, otherwise: bb226];
    }

    bb226: {
        _0 = DecodedKey::Unicode(const 'H');
        goto -> bb372;
    }

    bb227: {
        _0 = DecodedKey::Unicode(const 'h');
        goto -> bb372;
    }

    bb228: {
        switchInt(_5) -> [0: bb232, otherwise: bb229];
    }

    bb229: {
        _72 = Modifiers::is_ctrl(_3) -> [return: bb230, unwind unreachable];
    }

    bb230: {
        switchInt(move _72) -> [0: bb232, otherwise: bb231];
    }

    bb231: {
        _0 = DecodedKey::Unicode(const '\n');
        goto -> bb372;
    }

    bb232: {
        _73 = Modifiers::is_caps(_3) -> [return: bb233, unwind unreachable];
    }

    bb233: {
        switchInt(move _73) -> [0: bb235, otherwise: bb234];
    }

    bb234: {
        _0 = DecodedKey::Unicode(const 'J');
        goto -> bb372;
    }

    bb235: {
        _0 = DecodedKey::Unicode(const 'j');
        goto -> bb372;
    }

    bb236: {
        switchInt(_5) -> [0: bb240, otherwise: bb237];
    }

    bb237: {
        _74 = Modifiers::is_ctrl(_3) -> [return: bb238, unwind unreachable];
    }

    bb238: {
        switchInt(move _74) -> [0: bb240, otherwise: bb239];
    }

    bb239: {
        _0 = DecodedKey::Unicode(const '\u{b}');
        goto -> bb372;
    }

    bb240: {
        _75 = Modifiers::is_caps(_3) -> [return: bb241, unwind unreachable];
    }

    bb241: {
        switchInt(move _75) -> [0: bb243, otherwise: bb242];
    }

    bb242: {
        _0 = DecodedKey::Unicode(const 'K');
        goto -> bb372;
    }

    bb243: {
        _0 = DecodedKey::Unicode(const 'k');
        goto -> bb372;
    }

    bb244: {
        switchInt(_5) -> [0: bb248, otherwise: bb245];
    }

    bb245: {
        _76 = Modifiers::is_ctrl(_3) -> [return: bb246, unwind unreachable];
    }

    bb246: {
        switchInt(move _76) -> [0: bb248, otherwise: bb247];
    }

    bb247: {
        _0 = DecodedKey::Unicode(const '\u{c}');
        goto -> bb372;
    }

    bb248: {
        _77 = Modifiers::is_caps(_3) -> [return: bb249, unwind unreachable];
    }

    bb249: {
        switchInt(move _77) -> [0: bb251, otherwise: bb250];
    }

    bb250: {
        _0 = DecodedKey::Unicode(const 'L');
        goto -> bb372;
    }

    bb251: {
        _0 = DecodedKey::Unicode(const 'l');
        goto -> bb372;
    }

    bb252: {
        switchInt(_5) -> [0: bb256, otherwise: bb253];
    }

    bb253: {
        _78 = Modifiers::is_ctrl(_3) -> [return: bb254, unwind unreachable];
    }

    bb254: {
        switchInt(move _78) -> [0: bb256, otherwise: bb255];
    }

    bb255: {
        _0 = DecodedKey::Unicode(const '\r');
        goto -> bb372;
    }

    bb256: {
        _79 = Modifiers::is_caps(_3) -> [return: bb257, unwind unreachable];
    }

    bb257: {
        switchInt(move _79) -> [0: bb259, otherwise: bb258];
    }

    bb258: {
        _0 = DecodedKey::Unicode(const 'M');
        goto -> bb372;
    }

    bb259: {
        _0 = DecodedKey::Unicode(const 'm');
        goto -> bb372;
    }

    bb260: {
        _80 = Modifiers::is_shifted(_3) -> [return: bb261, unwind unreachable];
    }

    bb261: {
        switchInt(move _80) -> [0: bb263, otherwise: bb262];
    }

    bb262: {
        _0 = DecodedKey::Unicode(const '%');
        goto -> bb372;
    }

    bb263: {
        _0 = DecodedKey::Unicode(const 'ù');
        goto -> bb372;
    }

    bb264: {
        _81 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb265, unwind unreachable];
    }

    bb265: {
        _0 = DecodedKey::Unicode(move _81);
        goto -> bb372;
    }

    bb266: {
        switchInt(_5) -> [0: bb270, otherwise: bb267];
    }

    bb267: {
        _82 = Modifiers::is_ctrl(_3) -> [return: bb268, unwind unreachable];
    }

    bb268: {
        switchInt(move _82) -> [0: bb270, otherwise: bb269];
    }

    bb269: {
        _0 = DecodedKey::Unicode(const '\u{17}');
        goto -> bb372;
    }

    bb270: {
        _83 = Modifiers::is_caps(_3) -> [return: bb271, unwind unreachable];
    }

    bb271: {
        switchInt(move _83) -> [0: bb273, otherwise: bb272];
    }

    bb272: {
        _0 = DecodedKey::Unicode(const 'W');
        goto -> bb372;
    }

    bb273: {
        _0 = DecodedKey::Unicode(const 'w');
        goto -> bb372;
    }

    bb274: {
        switchInt(_5) -> [0: bb278, otherwise: bb275];
    }

    bb275: {
        _84 = Modifiers::is_ctrl(_3) -> [return: bb276, unwind unreachable];
    }

    bb276: {
        switchInt(move _84) -> [0: bb278, otherwise: bb277];
    }

    bb277: {
        _0 = DecodedKey::Unicode(const '\u{18}');
        goto -> bb372;
    }

    bb278: {
        _85 = Modifiers::is_caps(_3) -> [return: bb279, unwind unreachable];
    }

    bb279: {
        switchInt(move _85) -> [0: bb281, otherwise: bb280];
    }

    bb280: {
        _0 = DecodedKey::Unicode(const 'X');
        goto -> bb372;
    }

    bb281: {
        _0 = DecodedKey::Unicode(const 'x');
        goto -> bb372;
    }

    bb282: {
        switchInt(_5) -> [0: bb286, otherwise: bb283];
    }

    bb283: {
        _86 = Modifiers::is_ctrl(_3) -> [return: bb284, unwind unreachable];
    }

    bb284: {
        switchInt(move _86) -> [0: bb286, otherwise: bb285];
    }

    bb285: {
        _0 = DecodedKey::Unicode(const '\u{3}');
        goto -> bb372;
    }

    bb286: {
        _87 = Modifiers::is_caps(_3) -> [return: bb287, unwind unreachable];
    }

    bb287: {
        switchInt(move _87) -> [0: bb289, otherwise: bb288];
    }

    bb288: {
        _0 = DecodedKey::Unicode(const 'C');
        goto -> bb372;
    }

    bb289: {
        _0 = DecodedKey::Unicode(const 'c');
        goto -> bb372;
    }

    bb290: {
        switchInt(_5) -> [0: bb294, otherwise: bb291];
    }

    bb291: {
        _88 = Modifiers::is_ctrl(_3) -> [return: bb292, unwind unreachable];
    }

    bb292: {
        switchInt(move _88) -> [0: bb294, otherwise: bb293];
    }

    bb293: {
        _0 = DecodedKey::Unicode(const '\u{16}');
        goto -> bb372;
    }

    bb294: {
        _89 = Modifiers::is_caps(_3) -> [return: bb295, unwind unreachable];
    }

    bb295: {
        switchInt(move _89) -> [0: bb297, otherwise: bb296];
    }

    bb296: {
        _0 = DecodedKey::Unicode(const 'V');
        goto -> bb372;
    }

    bb297: {
        _0 = DecodedKey::Unicode(const 'v');
        goto -> bb372;
    }

    bb298: {
        switchInt(_5) -> [0: bb302, otherwise: bb299];
    }

    bb299: {
        _90 = Modifiers::is_ctrl(_3) -> [return: bb300, unwind unreachable];
    }

    bb300: {
        switchInt(move _90) -> [0: bb302, otherwise: bb301];
    }

    bb301: {
        _0 = DecodedKey::Unicode(const '\u{2}');
        goto -> bb372;
    }

    bb302: {
        _91 = Modifiers::is_caps(_3) -> [return: bb303, unwind unreachable];
    }

    bb303: {
        switchInt(move _91) -> [0: bb305, otherwise: bb304];
    }

    bb304: {
        _0 = DecodedKey::Unicode(const 'B');
        goto -> bb372;
    }

    bb305: {
        _0 = DecodedKey::Unicode(const 'b');
        goto -> bb372;
    }

    bb306: {
        switchInt(_5) -> [0: bb310, otherwise: bb307];
    }

    bb307: {
        _92 = Modifiers::is_ctrl(_3) -> [return: bb308, unwind unreachable];
    }

    bb308: {
        switchInt(move _92) -> [0: bb310, otherwise: bb309];
    }

    bb309: {
        _0 = DecodedKey::Unicode(const '\u{e}');
        goto -> bb372;
    }

    bb310: {
        _93 = Modifiers::is_caps(_3) -> [return: bb311, unwind unreachable];
    }

    bb311: {
        switchInt(move _93) -> [0: bb313, otherwise: bb312];
    }

    bb312: {
        _0 = DecodedKey::Unicode(const 'N');
        goto -> bb372;
    }

    bb313: {
        _0 = DecodedKey::Unicode(const 'n');
        goto -> bb372;
    }

    bb314: {
        _94 = Modifiers::is_caps(_3) -> [return: bb315, unwind unreachable];
    }

    bb315: {
        switchInt(move _94) -> [0: bb317, otherwise: bb316];
    }

    bb316: {
        _0 = DecodedKey::Unicode(const '?');
        goto -> bb372;
    }

    bb317: {
        _0 = DecodedKey::Unicode(const ',');
        goto -> bb372;
    }

    bb318: {
        _95 = Modifiers::is_shifted(_3) -> [return: bb319, unwind unreachable];
    }

    bb319: {
        switchInt(move _95) -> [0: bb321, otherwise: bb320];
    }

    bb320: {
        _0 = DecodedKey::Unicode(const '.');
        goto -> bb372;
    }

    bb321: {
        _0 = DecodedKey::Unicode(const ';');
        goto -> bb372;
    }

    bb322: {
        _96 = Modifiers::is_shifted(_3) -> [return: bb323, unwind unreachable];
    }

    bb323: {
        switchInt(move _96) -> [0: bb325, otherwise: bb324];
    }

    bb324: {
        _0 = DecodedKey::Unicode(const '/');
        goto -> bb372;
    }

    bb325: {
        _0 = DecodedKey::Unicode(const ':');
        goto -> bb372;
    }

    bb326: {
        _97 = Modifiers::is_shifted(_3) -> [return: bb327, unwind unreachable];
    }

    bb327: {
        switchInt(move _97) -> [0: bb329, otherwise: bb328];
    }

    bb328: {
        _0 = DecodedKey::Unicode(const '§');
        goto -> bb372;
    }

    bb329: {
        _0 = DecodedKey::Unicode(const '!');
        goto -> bb372;
    }

    bb330: {
        _0 = DecodedKey::Unicode(const ' ');
        goto -> bb372;
    }

    bb331: {
        _98 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb332, unwind unreachable];
    }

    bb332: {
        _0 = DecodedKey::Unicode(move _98);
        goto -> bb372;
    }

    bb333: {
        _0 = DecodedKey::Unicode(const '/');
        goto -> bb372;
    }

    bb334: {
        _0 = DecodedKey::Unicode(const '*');
        goto -> bb372;
    }

    bb335: {
        _0 = DecodedKey::Unicode(const '-');
        goto -> bb372;
    }

    bb336: {
        _99 = ((*_3).4: bool);
        switchInt(move _99) -> [0: bb338, otherwise: bb337];
    }

    bb337: {
        _0 = DecodedKey::Unicode(const '7');
        goto -> bb372;
    }

    bb338: {
        _100 = KeyCode::Home;
        _0 = DecodedKey::RawKey(move _100);
        goto -> bb372;
    }

    bb339: {
        _101 = ((*_3).4: bool);
        switchInt(move _101) -> [0: bb341, otherwise: bb340];
    }

    bb340: {
        _0 = DecodedKey::Unicode(const '8');
        goto -> bb372;
    }

    bb341: {
        _102 = KeyCode::ArrowUp;
        _0 = DecodedKey::RawKey(move _102);
        goto -> bb372;
    }

    bb342: {
        _103 = ((*_3).4: bool);
        switchInt(move _103) -> [0: bb344, otherwise: bb343];
    }

    bb343: {
        _0 = DecodedKey::Unicode(const '9');
        goto -> bb372;
    }

    bb344: {
        _104 = KeyCode::PageUp;
        _0 = DecodedKey::RawKey(move _104);
        goto -> bb372;
    }

    bb345: {
        _0 = DecodedKey::Unicode(const '+');
        goto -> bb372;
    }

    bb346: {
        _105 = ((*_3).4: bool);
        switchInt(move _105) -> [0: bb348, otherwise: bb347];
    }

    bb347: {
        _0 = DecodedKey::Unicode(const '4');
        goto -> bb372;
    }

    bb348: {
        _106 = KeyCode::ArrowLeft;
        _0 = DecodedKey::RawKey(move _106);
        goto -> bb372;
    }

    bb349: {
        _0 = DecodedKey::Unicode(const '5');
        goto -> bb372;
    }

    bb350: {
        _107 = ((*_3).4: bool);
        switchInt(move _107) -> [0: bb352, otherwise: bb351];
    }

    bb351: {
        _0 = DecodedKey::Unicode(const '6');
        goto -> bb372;
    }

    bb352: {
        _108 = KeyCode::ArrowRight;
        _0 = DecodedKey::RawKey(move _108);
        goto -> bb372;
    }

    bb353: {
        _109 = ((*_3).4: bool);
        switchInt(move _109) -> [0: bb355, otherwise: bb354];
    }

    bb354: {
        _0 = DecodedKey::Unicode(const '1');
        goto -> bb372;
    }

    bb355: {
        _110 = KeyCode::End;
        _0 = DecodedKey::RawKey(move _110);
        goto -> bb372;
    }

    bb356: {
        _111 = ((*_3).4: bool);
        switchInt(move _111) -> [0: bb358, otherwise: bb357];
    }

    bb357: {
        _0 = DecodedKey::Unicode(const '2');
        goto -> bb372;
    }

    bb358: {
        _112 = KeyCode::ArrowDown;
        _0 = DecodedKey::RawKey(move _112);
        goto -> bb372;
    }

    bb359: {
        _113 = ((*_3).4: bool);
        switchInt(move _113) -> [0: bb361, otherwise: bb360];
    }

    bb360: {
        _0 = DecodedKey::Unicode(const '3');
        goto -> bb372;
    }

    bb361: {
        _114 = KeyCode::PageDown;
        _0 = DecodedKey::RawKey(move _114);
        goto -> bb372;
    }

    bb362: {
        _115 = ((*_3).4: bool);
        switchInt(move _115) -> [0: bb364, otherwise: bb363];
    }

    bb363: {
        _0 = DecodedKey::Unicode(const '0');
        goto -> bb372;
    }

    bb364: {
        _116 = KeyCode::Insert;
        _0 = DecodedKey::RawKey(move _116);
        goto -> bb372;
    }

    bb365: {
        _117 = ((*_3).4: bool);
        switchInt(move _117) -> [0: bb367, otherwise: bb366];
    }

    bb366: {
        _0 = DecodedKey::Unicode(const '.');
        goto -> bb372;
    }

    bb367: {
        _118 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb368, unwind unreachable];
    }

    bb368: {
        _0 = DecodedKey::Unicode(move _118);
        goto -> bb372;
    }

    bb369: {
        _119 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb370, unwind unreachable];
    }

    bb370: {
        _0 = DecodedKey::Unicode(move _119);
        goto -> bb372;
    }

    bb371: {
        _0 = DecodedKey::Unicode(const '<');
        goto -> bb372;
    }

    bb372: {
        return;
    }
}

promoted[0] in azerty::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:12:1: 12:31>::map_keycode: &HandleControl = {
    let mut _0: &HandleControl;
    let mut _1: HandleControl;

    bb0: {
        _1 = HandleControl::MapLettersToUnicode;
        _0 = &_1;
        return;
    }
}

fn colemak::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:10:1: 10:32>::map_keycode(_1: &Colemak, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;
    debug keycode => _2;
    debug modifiers => _3;
    debug handle_ctrl => _4;
    let mut _0: DecodedKey;
    let _5: bool;
    let mut _6: &HandleControl;
    let mut _7: u8;
    let mut _8: bool;
    let mut _9: char;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: char;
    let mut _23: char;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: char;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: char;
    let mut _86: bool;
    let mut _87: KeyCode;
    let mut _88: bool;
    let mut _89: KeyCode;
    let mut _90: bool;
    let mut _91: KeyCode;
    let mut _92: bool;
    let mut _93: KeyCode;
    let mut _94: bool;
    let mut _95: KeyCode;
    let mut _96: bool;
    let mut _97: KeyCode;
    let mut _98: bool;
    let mut _99: KeyCode;
    let mut _100: bool;
    let mut _101: KeyCode;
    let mut _102: bool;
    let mut _103: KeyCode;
    let mut _104: bool;
    let mut _105: char;
    let mut _106: char;
    let mut _107: &HandleControl;
    scope 1 {
        debug map_to_unicode => _5;
        scope 2 {
            debug k => _2;
        }
    }

    bb0: {
        _6 = &_4;
        _107 = const _;
        _5 = <HandleControl as PartialEq>::eq(move _6, _107) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _7 = discriminant(_2);
        switchInt(move _7) -> [0: bb7, 17: bb3, 18: bb9, 19: bb13, 20: bb17, 21: bb21, 22: bb25, 23: bb29, 24: bb33, 25: bb37, 26: bb41, 27: bb45, 28: bb49, 29: bb53, 30: bb57, 35: bb306, 36: bb307, 37: bb308, 38: bb59, 39: bb61, 40: bb69, 41: bb77, 42: bb85, 43: bb93, 44: bb101, 45: bb109, 46: bb117, 47: bb125, 48: bb133, 49: bb137, 50: bb141, 52: bb145, 53: bb304, 56: bb309, 57: bb312, 58: bb315, 59: bb318, 61: bb149, 62: bb157, 63: bb165, 64: bb173, 65: bb181, 66: bb189, 67: bb197, 68: bb205, 69: bb213, 70: bb221, 71: bb229, 72: bb233, 73: bb319, 74: bb322, 75: bb323, 77: bb235, 78: bb243, 79: bb251, 80: bb259, 81: bb267, 82: bb275, 83: bb283, 84: bb291, 85: bb295, 86: bb299, 89: bb326, 90: bb329, 91: bb332, 92: bb342, 96: bb303, 104: bb335, 105: bb338, otherwise: bb2];
    }

    bb2: {
        _0 = DecodedKey::RawKey(_2);
        goto -> bb344;
    }

    bb3: {
        _8 = Modifiers::is_shifted(_3) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _0 = DecodedKey::Unicode(const '~');
        goto -> bb344;
    }

    bb6: {
        _0 = DecodedKey::Unicode(const '`');
        goto -> bb344;
    }

    bb7: {
        _9 = <u8 as Into<char>>::into(const 27_u8) -> [return: bb8, unwind unreachable];
    }

    bb8: {
        _0 = DecodedKey::Unicode(move _9);
        goto -> bb344;
    }

    bb9: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb10, unwind unreachable];
    }

    bb10: {
        switchInt(move _10) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _0 = DecodedKey::Unicode(const '!');
        goto -> bb344;
    }

    bb12: {
        _0 = DecodedKey::Unicode(const '1');
        goto -> bb344;
    }

    bb13: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb14, unwind unreachable];
    }

    bb14: {
        switchInt(move _11) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _0 = DecodedKey::Unicode(const '@');
        goto -> bb344;
    }

    bb16: {
        _0 = DecodedKey::Unicode(const '2');
        goto -> bb344;
    }

    bb17: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb18, unwind unreachable];
    }

    bb18: {
        switchInt(move _12) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _0 = DecodedKey::Unicode(const '#');
        goto -> bb344;
    }

    bb20: {
        _0 = DecodedKey::Unicode(const '3');
        goto -> bb344;
    }

    bb21: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb22, unwind unreachable];
    }

    bb22: {
        switchInt(move _13) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _0 = DecodedKey::Unicode(const '$');
        goto -> bb344;
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '4');
        goto -> bb344;
    }

    bb25: {
        _14 = Modifiers::is_shifted(_3) -> [return: bb26, unwind unreachable];
    }

    bb26: {
        switchInt(move _14) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _0 = DecodedKey::Unicode(const '%');
        goto -> bb344;
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '5');
        goto -> bb344;
    }

    bb29: {
        _15 = Modifiers::is_shifted(_3) -> [return: bb30, unwind unreachable];
    }

    bb30: {
        switchInt(move _15) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _0 = DecodedKey::Unicode(const '^');
        goto -> bb344;
    }

    bb32: {
        _0 = DecodedKey::Unicode(const '6');
        goto -> bb344;
    }

    bb33: {
        _16 = Modifiers::is_shifted(_3) -> [return: bb34, unwind unreachable];
    }

    bb34: {
        switchInt(move _16) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _0 = DecodedKey::Unicode(const '&');
        goto -> bb344;
    }

    bb36: {
        _0 = DecodedKey::Unicode(const '7');
        goto -> bb344;
    }

    bb37: {
        _17 = Modifiers::is_shifted(_3) -> [return: bb38, unwind unreachable];
    }

    bb38: {
        switchInt(move _17) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _0 = DecodedKey::Unicode(const '*');
        goto -> bb344;
    }

    bb40: {
        _0 = DecodedKey::Unicode(const '8');
        goto -> bb344;
    }

    bb41: {
        _18 = Modifiers::is_shifted(_3) -> [return: bb42, unwind unreachable];
    }

    bb42: {
        switchInt(move _18) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _0 = DecodedKey::Unicode(const '(');
        goto -> bb344;
    }

    bb44: {
        _0 = DecodedKey::Unicode(const '9');
        goto -> bb344;
    }

    bb45: {
        _19 = Modifiers::is_shifted(_3) -> [return: bb46, unwind unreachable];
    }

    bb46: {
        switchInt(move _19) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _0 = DecodedKey::Unicode(const ')');
        goto -> bb344;
    }

    bb48: {
        _0 = DecodedKey::Unicode(const '0');
        goto -> bb344;
    }

    bb49: {
        _20 = Modifiers::is_shifted(_3) -> [return: bb50, unwind unreachable];
    }

    bb50: {
        switchInt(move _20) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _0 = DecodedKey::Unicode(const '_');
        goto -> bb344;
    }

    bb52: {
        _0 = DecodedKey::Unicode(const '-');
        goto -> bb344;
    }

    bb53: {
        _21 = Modifiers::is_shifted(_3) -> [return: bb54, unwind unreachable];
    }

    bb54: {
        switchInt(move _21) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _0 = DecodedKey::Unicode(const '+');
        goto -> bb344;
    }

    bb56: {
        _0 = DecodedKey::Unicode(const '=');
        goto -> bb344;
    }

    bb57: {
        _22 = <u8 as Into<char>>::into(const 8_u8) -> [return: bb58, unwind unreachable];
    }

    bb58: {
        _0 = DecodedKey::Unicode(move _22);
        goto -> bb344;
    }

    bb59: {
        _23 = <u8 as Into<char>>::into(const 9_u8) -> [return: bb60, unwind unreachable];
    }

    bb60: {
        _0 = DecodedKey::Unicode(move _23);
        goto -> bb344;
    }

    bb61: {
        switchInt(_5) -> [0: bb65, otherwise: bb62];
    }

    bb62: {
        _24 = Modifiers::is_ctrl(_3) -> [return: bb63, unwind unreachable];
    }

    bb63: {
        switchInt(move _24) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _0 = DecodedKey::Unicode(const '\u{11}');
        goto -> bb344;
    }

    bb65: {
        _25 = Modifiers::is_caps(_3) -> [return: bb66, unwind unreachable];
    }

    bb66: {
        switchInt(move _25) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _0 = DecodedKey::Unicode(const 'Q');
        goto -> bb344;
    }

    bb68: {
        _0 = DecodedKey::Unicode(const 'q');
        goto -> bb344;
    }

    bb69: {
        switchInt(_5) -> [0: bb73, otherwise: bb70];
    }

    bb70: {
        _26 = Modifiers::is_ctrl(_3) -> [return: bb71, unwind unreachable];
    }

    bb71: {
        switchInt(move _26) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _0 = DecodedKey::Unicode(const '\u{17}');
        goto -> bb344;
    }

    bb73: {
        _27 = Modifiers::is_caps(_3) -> [return: bb74, unwind unreachable];
    }

    bb74: {
        switchInt(move _27) -> [0: bb76, otherwise: bb75];
    }

    bb75: {
        _0 = DecodedKey::Unicode(const 'W');
        goto -> bb344;
    }

    bb76: {
        _0 = DecodedKey::Unicode(const 'w');
        goto -> bb344;
    }

    bb77: {
        switchInt(_5) -> [0: bb81, otherwise: bb78];
    }

    bb78: {
        _28 = Modifiers::is_ctrl(_3) -> [return: bb79, unwind unreachable];
    }

    bb79: {
        switchInt(move _28) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _0 = DecodedKey::Unicode(const '\u{6}');
        goto -> bb344;
    }

    bb81: {
        _29 = Modifiers::is_caps(_3) -> [return: bb82, unwind unreachable];
    }

    bb82: {
        switchInt(move _29) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _0 = DecodedKey::Unicode(const 'F');
        goto -> bb344;
    }

    bb84: {
        _0 = DecodedKey::Unicode(const 'f');
        goto -> bb344;
    }

    bb85: {
        switchInt(_5) -> [0: bb89, otherwise: bb86];
    }

    bb86: {
        _30 = Modifiers::is_ctrl(_3) -> [return: bb87, unwind unreachable];
    }

    bb87: {
        switchInt(move _30) -> [0: bb89, otherwise: bb88];
    }

    bb88: {
        _0 = DecodedKey::Unicode(const '\u{12}');
        goto -> bb344;
    }

    bb89: {
        _31 = Modifiers::is_caps(_3) -> [return: bb90, unwind unreachable];
    }

    bb90: {
        switchInt(move _31) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _0 = DecodedKey::Unicode(const 'P');
        goto -> bb344;
    }

    bb92: {
        _0 = DecodedKey::Unicode(const 'p');
        goto -> bb344;
    }

    bb93: {
        switchInt(_5) -> [0: bb97, otherwise: bb94];
    }

    bb94: {
        _32 = Modifiers::is_ctrl(_3) -> [return: bb95, unwind unreachable];
    }

    bb95: {
        switchInt(move _32) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        _0 = DecodedKey::Unicode(const '\u{7}');
        goto -> bb344;
    }

    bb97: {
        _33 = Modifiers::is_caps(_3) -> [return: bb98, unwind unreachable];
    }

    bb98: {
        switchInt(move _33) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _0 = DecodedKey::Unicode(const 'G');
        goto -> bb344;
    }

    bb100: {
        _0 = DecodedKey::Unicode(const 'g');
        goto -> bb344;
    }

    bb101: {
        switchInt(_5) -> [0: bb105, otherwise: bb102];
    }

    bb102: {
        _34 = Modifiers::is_ctrl(_3) -> [return: bb103, unwind unreachable];
    }

    bb103: {
        switchInt(move _34) -> [0: bb105, otherwise: bb104];
    }

    bb104: {
        _0 = DecodedKey::Unicode(const '\n');
        goto -> bb344;
    }

    bb105: {
        _35 = Modifiers::is_caps(_3) -> [return: bb106, unwind unreachable];
    }

    bb106: {
        switchInt(move _35) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _0 = DecodedKey::Unicode(const 'J');
        goto -> bb344;
    }

    bb108: {
        _0 = DecodedKey::Unicode(const 'j');
        goto -> bb344;
    }

    bb109: {
        switchInt(_5) -> [0: bb113, otherwise: bb110];
    }

    bb110: {
        _36 = Modifiers::is_ctrl(_3) -> [return: bb111, unwind unreachable];
    }

    bb111: {
        switchInt(move _36) -> [0: bb113, otherwise: bb112];
    }

    bb112: {
        _0 = DecodedKey::Unicode(const '\u{c}');
        goto -> bb344;
    }

    bb113: {
        _37 = Modifiers::is_caps(_3) -> [return: bb114, unwind unreachable];
    }

    bb114: {
        switchInt(move _37) -> [0: bb116, otherwise: bb115];
    }

    bb115: {
        _0 = DecodedKey::Unicode(const 'L');
        goto -> bb344;
    }

    bb116: {
        _0 = DecodedKey::Unicode(const 'l');
        goto -> bb344;
    }

    bb117: {
        switchInt(_5) -> [0: bb121, otherwise: bb118];
    }

    bb118: {
        _38 = Modifiers::is_ctrl(_3) -> [return: bb119, unwind unreachable];
    }

    bb119: {
        switchInt(move _38) -> [0: bb121, otherwise: bb120];
    }

    bb120: {
        _0 = DecodedKey::Unicode(const '\u{15}');
        goto -> bb344;
    }

    bb121: {
        _39 = Modifiers::is_caps(_3) -> [return: bb122, unwind unreachable];
    }

    bb122: {
        switchInt(move _39) -> [0: bb124, otherwise: bb123];
    }

    bb123: {
        _0 = DecodedKey::Unicode(const 'U');
        goto -> bb344;
    }

    bb124: {
        _0 = DecodedKey::Unicode(const 'u');
        goto -> bb344;
    }

    bb125: {
        switchInt(_5) -> [0: bb129, otherwise: bb126];
    }

    bb126: {
        _40 = Modifiers::is_ctrl(_3) -> [return: bb127, unwind unreachable];
    }

    bb127: {
        switchInt(move _40) -> [0: bb129, otherwise: bb128];
    }

    bb128: {
        _0 = DecodedKey::Unicode(const '\u{19}');
        goto -> bb344;
    }

    bb129: {
        _41 = Modifiers::is_caps(_3) -> [return: bb130, unwind unreachable];
    }

    bb130: {
        switchInt(move _41) -> [0: bb132, otherwise: bb131];
    }

    bb131: {
        _0 = DecodedKey::Unicode(const 'Y');
        goto -> bb344;
    }

    bb132: {
        _0 = DecodedKey::Unicode(const 'y');
        goto -> bb344;
    }

    bb133: {
        _42 = Modifiers::is_caps(_3) -> [return: bb134, unwind unreachable];
    }

    bb134: {
        switchInt(move _42) -> [0: bb136, otherwise: bb135];
    }

    bb135: {
        _0 = DecodedKey::Unicode(const ':');
        goto -> bb344;
    }

    bb136: {
        _0 = DecodedKey::Unicode(const ';');
        goto -> bb344;
    }

    bb137: {
        _43 = Modifiers::is_shifted(_3) -> [return: bb138, unwind unreachable];
    }

    bb138: {
        switchInt(move _43) -> [0: bb140, otherwise: bb139];
    }

    bb139: {
        _0 = DecodedKey::Unicode(const '{');
        goto -> bb344;
    }

    bb140: {
        _0 = DecodedKey::Unicode(const '[');
        goto -> bb344;
    }

    bb141: {
        _44 = Modifiers::is_shifted(_3) -> [return: bb142, unwind unreachable];
    }

    bb142: {
        switchInt(move _44) -> [0: bb144, otherwise: bb143];
    }

    bb143: {
        _0 = DecodedKey::Unicode(const '}');
        goto -> bb344;
    }

    bb144: {
        _0 = DecodedKey::Unicode(const ']');
        goto -> bb344;
    }

    bb145: {
        _45 = Modifiers::is_shifted(_3) -> [return: bb146, unwind unreachable];
    }

    bb146: {
        switchInt(move _45) -> [0: bb148, otherwise: bb147];
    }

    bb147: {
        _0 = DecodedKey::Unicode(const '|');
        goto -> bb344;
    }

    bb148: {
        _0 = DecodedKey::Unicode(const '\\');
        goto -> bb344;
    }

    bb149: {
        switchInt(_5) -> [0: bb153, otherwise: bb150];
    }

    bb150: {
        _46 = Modifiers::is_ctrl(_3) -> [return: bb151, unwind unreachable];
    }

    bb151: {
        switchInt(move _46) -> [0: bb153, otherwise: bb152];
    }

    bb152: {
        _0 = DecodedKey::Unicode(const '\u{1}');
        goto -> bb344;
    }

    bb153: {
        _47 = Modifiers::is_caps(_3) -> [return: bb154, unwind unreachable];
    }

    bb154: {
        switchInt(move _47) -> [0: bb156, otherwise: bb155];
    }

    bb155: {
        _0 = DecodedKey::Unicode(const 'A');
        goto -> bb344;
    }

    bb156: {
        _0 = DecodedKey::Unicode(const 'a');
        goto -> bb344;
    }

    bb157: {
        switchInt(_5) -> [0: bb161, otherwise: bb158];
    }

    bb158: {
        _48 = Modifiers::is_ctrl(_3) -> [return: bb159, unwind unreachable];
    }

    bb159: {
        switchInt(move _48) -> [0: bb161, otherwise: bb160];
    }

    bb160: {
        _0 = DecodedKey::Unicode(const '\u{12}');
        goto -> bb344;
    }

    bb161: {
        _49 = Modifiers::is_caps(_3) -> [return: bb162, unwind unreachable];
    }

    bb162: {
        switchInt(move _49) -> [0: bb164, otherwise: bb163];
    }

    bb163: {
        _0 = DecodedKey::Unicode(const 'R');
        goto -> bb344;
    }

    bb164: {
        _0 = DecodedKey::Unicode(const 'r');
        goto -> bb344;
    }

    bb165: {
        switchInt(_5) -> [0: bb169, otherwise: bb166];
    }

    bb166: {
        _50 = Modifiers::is_ctrl(_3) -> [return: bb167, unwind unreachable];
    }

    bb167: {
        switchInt(move _50) -> [0: bb169, otherwise: bb168];
    }

    bb168: {
        _0 = DecodedKey::Unicode(const '\u{13}');
        goto -> bb344;
    }

    bb169: {
        _51 = Modifiers::is_caps(_3) -> [return: bb170, unwind unreachable];
    }

    bb170: {
        switchInt(move _51) -> [0: bb172, otherwise: bb171];
    }

    bb171: {
        _0 = DecodedKey::Unicode(const 'S');
        goto -> bb344;
    }

    bb172: {
        _0 = DecodedKey::Unicode(const 's');
        goto -> bb344;
    }

    bb173: {
        switchInt(_5) -> [0: bb177, otherwise: bb174];
    }

    bb174: {
        _52 = Modifiers::is_ctrl(_3) -> [return: bb175, unwind unreachable];
    }

    bb175: {
        switchInt(move _52) -> [0: bb177, otherwise: bb176];
    }

    bb176: {
        _0 = DecodedKey::Unicode(const '\u{14}');
        goto -> bb344;
    }

    bb177: {
        _53 = Modifiers::is_caps(_3) -> [return: bb178, unwind unreachable];
    }

    bb178: {
        switchInt(move _53) -> [0: bb180, otherwise: bb179];
    }

    bb179: {
        _0 = DecodedKey::Unicode(const 'T');
        goto -> bb344;
    }

    bb180: {
        _0 = DecodedKey::Unicode(const 't');
        goto -> bb344;
    }

    bb181: {
        switchInt(_5) -> [0: bb185, otherwise: bb182];
    }

    bb182: {
        _54 = Modifiers::is_ctrl(_3) -> [return: bb183, unwind unreachable];
    }

    bb183: {
        switchInt(move _54) -> [0: bb185, otherwise: bb184];
    }

    bb184: {
        _0 = DecodedKey::Unicode(const '\u{4}');
        goto -> bb344;
    }

    bb185: {
        _55 = Modifiers::is_caps(_3) -> [return: bb186, unwind unreachable];
    }

    bb186: {
        switchInt(move _55) -> [0: bb188, otherwise: bb187];
    }

    bb187: {
        _0 = DecodedKey::Unicode(const 'D');
        goto -> bb344;
    }

    bb188: {
        _0 = DecodedKey::Unicode(const 'd');
        goto -> bb344;
    }

    bb189: {
        switchInt(_5) -> [0: bb193, otherwise: bb190];
    }

    bb190: {
        _56 = Modifiers::is_ctrl(_3) -> [return: bb191, unwind unreachable];
    }

    bb191: {
        switchInt(move _56) -> [0: bb193, otherwise: bb192];
    }

    bb192: {
        _0 = DecodedKey::Unicode(const '\u{8}');
        goto -> bb344;
    }

    bb193: {
        _57 = Modifiers::is_caps(_3) -> [return: bb194, unwind unreachable];
    }

    bb194: {
        switchInt(move _57) -> [0: bb196, otherwise: bb195];
    }

    bb195: {
        _0 = DecodedKey::Unicode(const 'H');
        goto -> bb344;
    }

    bb196: {
        _0 = DecodedKey::Unicode(const 'h');
        goto -> bb344;
    }

    bb197: {
        switchInt(_5) -> [0: bb201, otherwise: bb198];
    }

    bb198: {
        _58 = Modifiers::is_ctrl(_3) -> [return: bb199, unwind unreachable];
    }

    bb199: {
        switchInt(move _58) -> [0: bb201, otherwise: bb200];
    }

    bb200: {
        _0 = DecodedKey::Unicode(const '\u{e}');
        goto -> bb344;
    }

    bb201: {
        _59 = Modifiers::is_caps(_3) -> [return: bb202, unwind unreachable];
    }

    bb202: {
        switchInt(move _59) -> [0: bb204, otherwise: bb203];
    }

    bb203: {
        _0 = DecodedKey::Unicode(const 'N');
        goto -> bb344;
    }

    bb204: {
        _0 = DecodedKey::Unicode(const 'n');
        goto -> bb344;
    }

    bb205: {
        switchInt(_5) -> [0: bb209, otherwise: bb206];
    }

    bb206: {
        _60 = Modifiers::is_ctrl(_3) -> [return: bb207, unwind unreachable];
    }

    bb207: {
        switchInt(move _60) -> [0: bb209, otherwise: bb208];
    }

    bb208: {
        _0 = DecodedKey::Unicode(const '\u{5}');
        goto -> bb344;
    }

    bb209: {
        _61 = Modifiers::is_caps(_3) -> [return: bb210, unwind unreachable];
    }

    bb210: {
        switchInt(move _61) -> [0: bb212, otherwise: bb211];
    }

    bb211: {
        _0 = DecodedKey::Unicode(const 'E');
        goto -> bb344;
    }

    bb212: {
        _0 = DecodedKey::Unicode(const 'e');
        goto -> bb344;
    }

    bb213: {
        switchInt(_5) -> [0: bb217, otherwise: bb214];
    }

    bb214: {
        _62 = Modifiers::is_ctrl(_3) -> [return: bb215, unwind unreachable];
    }

    bb215: {
        switchInt(move _62) -> [0: bb217, otherwise: bb216];
    }

    bb216: {
        _0 = DecodedKey::Unicode(const '\t');
        goto -> bb344;
    }

    bb217: {
        _63 = Modifiers::is_caps(_3) -> [return: bb218, unwind unreachable];
    }

    bb218: {
        switchInt(move _63) -> [0: bb220, otherwise: bb219];
    }

    bb219: {
        _0 = DecodedKey::Unicode(const 'I');
        goto -> bb344;
    }

    bb220: {
        _0 = DecodedKey::Unicode(const 'i');
        goto -> bb344;
    }

    bb221: {
        switchInt(_5) -> [0: bb225, otherwise: bb222];
    }

    bb222: {
        _64 = Modifiers::is_ctrl(_3) -> [return: bb223, unwind unreachable];
    }

    bb223: {
        switchInt(move _64) -> [0: bb225, otherwise: bb224];
    }

    bb224: {
        _0 = DecodedKey::Unicode(const '\u{f}');
        goto -> bb344;
    }

    bb225: {
        _65 = Modifiers::is_shifted(_3) -> [return: bb226, unwind unreachable];
    }

    bb226: {
        switchInt(move _65) -> [0: bb228, otherwise: bb227];
    }

    bb227: {
        _0 = DecodedKey::Unicode(const 'O');
        goto -> bb344;
    }

    bb228: {
        _0 = DecodedKey::Unicode(const 'o');
        goto -> bb344;
    }

    bb229: {
        _66 = Modifiers::is_shifted(_3) -> [return: bb230, unwind unreachable];
    }

    bb230: {
        switchInt(move _66) -> [0: bb232, otherwise: bb231];
    }

    bb231: {
        _0 = DecodedKey::Unicode(const '"');
        goto -> bb344;
    }

    bb232: {
        _0 = DecodedKey::Unicode(const '\'');
        goto -> bb344;
    }

    bb233: {
        _67 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb234, unwind unreachable];
    }

    bb234: {
        _0 = DecodedKey::Unicode(move _67);
        goto -> bb344;
    }

    bb235: {
        switchInt(_5) -> [0: bb239, otherwise: bb236];
    }

    bb236: {
        _68 = Modifiers::is_ctrl(_3) -> [return: bb237, unwind unreachable];
    }

    bb237: {
        switchInt(move _68) -> [0: bb239, otherwise: bb238];
    }

    bb238: {
        _0 = DecodedKey::Unicode(const '\u{1a}');
        goto -> bb344;
    }

    bb239: {
        _69 = Modifiers::is_caps(_3) -> [return: bb240, unwind unreachable];
    }

    bb240: {
        switchInt(move _69) -> [0: bb242, otherwise: bb241];
    }

    bb241: {
        _0 = DecodedKey::Unicode(const 'Z');
        goto -> bb344;
    }

    bb242: {
        _0 = DecodedKey::Unicode(const 'z');
        goto -> bb344;
    }

    bb243: {
        switchInt(_5) -> [0: bb247, otherwise: bb244];
    }

    bb244: {
        _70 = Modifiers::is_ctrl(_3) -> [return: bb245, unwind unreachable];
    }

    bb245: {
        switchInt(move _70) -> [0: bb247, otherwise: bb246];
    }

    bb246: {
        _0 = DecodedKey::Unicode(const '\u{18}');
        goto -> bb344;
    }

    bb247: {
        _71 = Modifiers::is_caps(_3) -> [return: bb248, unwind unreachable];
    }

    bb248: {
        switchInt(move _71) -> [0: bb250, otherwise: bb249];
    }

    bb249: {
        _0 = DecodedKey::Unicode(const 'X');
        goto -> bb344;
    }

    bb250: {
        _0 = DecodedKey::Unicode(const 'x');
        goto -> bb344;
    }

    bb251: {
        switchInt(_5) -> [0: bb255, otherwise: bb252];
    }

    bb252: {
        _72 = Modifiers::is_ctrl(_3) -> [return: bb253, unwind unreachable];
    }

    bb253: {
        switchInt(move _72) -> [0: bb255, otherwise: bb254];
    }

    bb254: {
        _0 = DecodedKey::Unicode(const '\u{3}');
        goto -> bb344;
    }

    bb255: {
        _73 = Modifiers::is_caps(_3) -> [return: bb256, unwind unreachable];
    }

    bb256: {
        switchInt(move _73) -> [0: bb258, otherwise: bb257];
    }

    bb257: {
        _0 = DecodedKey::Unicode(const 'C');
        goto -> bb344;
    }

    bb258: {
        _0 = DecodedKey::Unicode(const 'c');
        goto -> bb344;
    }

    bb259: {
        switchInt(_5) -> [0: bb263, otherwise: bb260];
    }

    bb260: {
        _74 = Modifiers::is_ctrl(_3) -> [return: bb261, unwind unreachable];
    }

    bb261: {
        switchInt(move _74) -> [0: bb263, otherwise: bb262];
    }

    bb262: {
        _0 = DecodedKey::Unicode(const '\u{16}');
        goto -> bb344;
    }

    bb263: {
        _75 = Modifiers::is_caps(_3) -> [return: bb264, unwind unreachable];
    }

    bb264: {
        switchInt(move _75) -> [0: bb266, otherwise: bb265];
    }

    bb265: {
        _0 = DecodedKey::Unicode(const 'V');
        goto -> bb344;
    }

    bb266: {
        _0 = DecodedKey::Unicode(const 'v');
        goto -> bb344;
    }

    bb267: {
        switchInt(_5) -> [0: bb271, otherwise: bb268];
    }

    bb268: {
        _76 = Modifiers::is_ctrl(_3) -> [return: bb269, unwind unreachable];
    }

    bb269: {
        switchInt(move _76) -> [0: bb271, otherwise: bb270];
    }

    bb270: {
        _0 = DecodedKey::Unicode(const '\u{2}');
        goto -> bb344;
    }

    bb271: {
        _77 = Modifiers::is_caps(_3) -> [return: bb272, unwind unreachable];
    }

    bb272: {
        switchInt(move _77) -> [0: bb274, otherwise: bb273];
    }

    bb273: {
        _0 = DecodedKey::Unicode(const 'B');
        goto -> bb344;
    }

    bb274: {
        _0 = DecodedKey::Unicode(const 'b');
        goto -> bb344;
    }

    bb275: {
        switchInt(_5) -> [0: bb279, otherwise: bb276];
    }

    bb276: {
        _78 = Modifiers::is_ctrl(_3) -> [return: bb277, unwind unreachable];
    }

    bb277: {
        switchInt(move _78) -> [0: bb279, otherwise: bb278];
    }

    bb278: {
        _0 = DecodedKey::Unicode(const '\u{b}');
        goto -> bb344;
    }

    bb279: {
        _79 = Modifiers::is_caps(_3) -> [return: bb280, unwind unreachable];
    }

    bb280: {
        switchInt(move _79) -> [0: bb282, otherwise: bb281];
    }

    bb281: {
        _0 = DecodedKey::Unicode(const 'K');
        goto -> bb344;
    }

    bb282: {
        _0 = DecodedKey::Unicode(const 'k');
        goto -> bb344;
    }

    bb283: {
        switchInt(_5) -> [0: bb287, otherwise: bb284];
    }

    bb284: {
        _80 = Modifiers::is_ctrl(_3) -> [return: bb285, unwind unreachable];
    }

    bb285: {
        switchInt(move _80) -> [0: bb287, otherwise: bb286];
    }

    bb286: {
        _0 = DecodedKey::Unicode(const '\r');
        goto -> bb344;
    }

    bb287: {
        _81 = Modifiers::is_caps(_3) -> [return: bb288, unwind unreachable];
    }

    bb288: {
        switchInt(move _81) -> [0: bb290, otherwise: bb289];
    }

    bb289: {
        _0 = DecodedKey::Unicode(const 'M');
        goto -> bb344;
    }

    bb290: {
        _0 = DecodedKey::Unicode(const 'm');
        goto -> bb344;
    }

    bb291: {
        _82 = Modifiers::is_shifted(_3) -> [return: bb292, unwind unreachable];
    }

    bb292: {
        switchInt(move _82) -> [0: bb294, otherwise: bb293];
    }

    bb293: {
        _0 = DecodedKey::Unicode(const '<');
        goto -> bb344;
    }

    bb294: {
        _0 = DecodedKey::Unicode(const ',');
        goto -> bb344;
    }

    bb295: {
        _83 = Modifiers::is_shifted(_3) -> [return: bb296, unwind unreachable];
    }

    bb296: {
        switchInt(move _83) -> [0: bb298, otherwise: bb297];
    }

    bb297: {
        _0 = DecodedKey::Unicode(const '>');
        goto -> bb344;
    }

    bb298: {
        _0 = DecodedKey::Unicode(const '.');
        goto -> bb344;
    }

    bb299: {
        _84 = Modifiers::is_shifted(_3) -> [return: bb300, unwind unreachable];
    }

    bb300: {
        switchInt(move _84) -> [0: bb302, otherwise: bb301];
    }

    bb301: {
        _0 = DecodedKey::Unicode(const '?');
        goto -> bb344;
    }

    bb302: {
        _0 = DecodedKey::Unicode(const '/');
        goto -> bb344;
    }

    bb303: {
        _0 = DecodedKey::Unicode(const ' ');
        goto -> bb344;
    }

    bb304: {
        _85 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb305, unwind unreachable];
    }

    bb305: {
        _0 = DecodedKey::Unicode(move _85);
        goto -> bb344;
    }

    bb306: {
        _0 = DecodedKey::Unicode(const '/');
        goto -> bb344;
    }

    bb307: {
        _0 = DecodedKey::Unicode(const '*');
        goto -> bb344;
    }

    bb308: {
        _0 = DecodedKey::Unicode(const '-');
        goto -> bb344;
    }

    bb309: {
        _86 = ((*_3).4: bool);
        switchInt(move _86) -> [0: bb311, otherwise: bb310];
    }

    bb310: {
        _0 = DecodedKey::Unicode(const '7');
        goto -> bb344;
    }

    bb311: {
        _87 = KeyCode::Home;
        _0 = DecodedKey::RawKey(move _87);
        goto -> bb344;
    }

    bb312: {
        _88 = ((*_3).4: bool);
        switchInt(move _88) -> [0: bb314, otherwise: bb313];
    }

    bb313: {
        _0 = DecodedKey::Unicode(const '8');
        goto -> bb344;
    }

    bb314: {
        _89 = KeyCode::ArrowUp;
        _0 = DecodedKey::RawKey(move _89);
        goto -> bb344;
    }

    bb315: {
        _90 = ((*_3).4: bool);
        switchInt(move _90) -> [0: bb317, otherwise: bb316];
    }

    bb316: {
        _0 = DecodedKey::Unicode(const '9');
        goto -> bb344;
    }

    bb317: {
        _91 = KeyCode::PageUp;
        _0 = DecodedKey::RawKey(move _91);
        goto -> bb344;
    }

    bb318: {
        _0 = DecodedKey::Unicode(const '+');
        goto -> bb344;
    }

    bb319: {
        _92 = ((*_3).4: bool);
        switchInt(move _92) -> [0: bb321, otherwise: bb320];
    }

    bb320: {
        _0 = DecodedKey::Unicode(const '4');
        goto -> bb344;
    }

    bb321: {
        _93 = KeyCode::ArrowLeft;
        _0 = DecodedKey::RawKey(move _93);
        goto -> bb344;
    }

    bb322: {
        _0 = DecodedKey::Unicode(const '5');
        goto -> bb344;
    }

    bb323: {
        _94 = ((*_3).4: bool);
        switchInt(move _94) -> [0: bb325, otherwise: bb324];
    }

    bb324: {
        _0 = DecodedKey::Unicode(const '6');
        goto -> bb344;
    }

    bb325: {
        _95 = KeyCode::ArrowRight;
        _0 = DecodedKey::RawKey(move _95);
        goto -> bb344;
    }

    bb326: {
        _96 = ((*_3).4: bool);
        switchInt(move _96) -> [0: bb328, otherwise: bb327];
    }

    bb327: {
        _0 = DecodedKey::Unicode(const '1');
        goto -> bb344;
    }

    bb328: {
        _97 = KeyCode::End;
        _0 = DecodedKey::RawKey(move _97);
        goto -> bb344;
    }

    bb329: {
        _98 = ((*_3).4: bool);
        switchInt(move _98) -> [0: bb331, otherwise: bb330];
    }

    bb330: {
        _0 = DecodedKey::Unicode(const '2');
        goto -> bb344;
    }

    bb331: {
        _99 = KeyCode::ArrowDown;
        _0 = DecodedKey::RawKey(move _99);
        goto -> bb344;
    }

    bb332: {
        _100 = ((*_3).4: bool);
        switchInt(move _100) -> [0: bb334, otherwise: bb333];
    }

    bb333: {
        _0 = DecodedKey::Unicode(const '3');
        goto -> bb344;
    }

    bb334: {
        _101 = KeyCode::PageDown;
        _0 = DecodedKey::RawKey(move _101);
        goto -> bb344;
    }

    bb335: {
        _102 = ((*_3).4: bool);
        switchInt(move _102) -> [0: bb337, otherwise: bb336];
    }

    bb336: {
        _0 = DecodedKey::Unicode(const '0');
        goto -> bb344;
    }

    bb337: {
        _103 = KeyCode::Insert;
        _0 = DecodedKey::RawKey(move _103);
        goto -> bb344;
    }

    bb338: {
        _104 = ((*_3).4: bool);
        switchInt(move _104) -> [0: bb340, otherwise: bb339];
    }

    bb339: {
        _0 = DecodedKey::Unicode(const '.');
        goto -> bb344;
    }

    bb340: {
        _105 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb341, unwind unreachable];
    }

    bb341: {
        _0 = DecodedKey::Unicode(move _105);
        goto -> bb344;
    }

    bb342: {
        _106 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb343, unwind unreachable];
    }

    bb343: {
        _0 = DecodedKey::Unicode(move _106);
        goto -> bb344;
    }

    bb344: {
        return;
    }
}

promoted[0] in colemak::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:10:1: 10:32>::map_keycode: &HandleControl = {
    let mut _0: &HandleControl;
    let mut _1: HandleControl;

    bb0: {
        _1 = HandleControl::MapLettersToUnicode;
        _0 = &_1;
        return;
    }
}

fn de105::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:12:1: 12:33>::map_keycode(_1: &De105Key, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;
    debug keycode => _2;
    debug modifiers => _3;
    debug handle_ctrl => _4;
    let mut _0: DecodedKey;
    let _5: bool;
    let mut _6: &HandleControl;
    let mut _7: u8;
    let mut _8: char;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: char;
    let mut _23: char;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: char;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _47: &layouts::us104::Us104Key;
    let mut _48: HandleControl;
    let mut _49: &HandleControl;
    scope 1 {
        debug map_to_unicode => _5;
        scope 2 {
            debug e => _2;
            let _46: layouts::us104::Us104Key;
            scope 3 {
                debug us => const Us104Key;
            }
        }
    }

    bb0: {
        _6 = &_4;
        _49 = const _;
        _5 = <HandleControl as PartialEq>::eq(move _6, _49) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _7 = discriminant(_2);
        switchInt(move _7) -> [0: bb3, 17: bb5, 18: bb9, 19: bb13, 20: bb17, 21: bb21, 22: bb25, 23: bb29, 24: bb33, 25: bb37, 26: bb41, 27: bb45, 28: bb49, 29: bb53, 30: bb57, 38: bb59, 39: bb61, 41: bb71, 44: bb81, 49: bb89, 50: bb93, 51: bb133, 52: bb101, 70: bb105, 71: bb109, 72: bb99, 77: bb113, 84: bb121, 85: bb125, 86: bb129, otherwise: bb2];
    }

    bb2: {
        _47 = &_46;
        _48 = _4;
        _0 = <Us104Key as KeyboardLayout>::map_keycode(move _47, _2, _3, move _48) -> [return: bb139, unwind unreachable];
    }

    bb3: {
        _8 = <u8 as Into<char>>::into(const 27_u8) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        _0 = DecodedKey::Unicode(move _8);
        goto -> bb139;
    }

    bb5: {
        _9 = Modifiers::is_shifted(_3) -> [return: bb6, unwind unreachable];
    }

    bb6: {
        switchInt(move _9) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _0 = DecodedKey::Unicode(const '°');
        goto -> bb139;
    }

    bb8: {
        _0 = DecodedKey::Unicode(const '^');
        goto -> bb139;
    }

    bb9: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb10, unwind unreachable];
    }

    bb10: {
        switchInt(move _10) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _0 = DecodedKey::Unicode(const '!');
        goto -> bb139;
    }

    bb12: {
        _0 = DecodedKey::Unicode(const '1');
        goto -> bb139;
    }

    bb13: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb14, unwind unreachable];
    }

    bb14: {
        switchInt(move _11) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _0 = DecodedKey::Unicode(const '"');
        goto -> bb139;
    }

    bb16: {
        _0 = DecodedKey::Unicode(const '2');
        goto -> bb139;
    }

    bb17: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb18, unwind unreachable];
    }

    bb18: {
        switchInt(move _12) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _0 = DecodedKey::Unicode(const '§');
        goto -> bb139;
    }

    bb20: {
        _0 = DecodedKey::Unicode(const '3');
        goto -> bb139;
    }

    bb21: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb22, unwind unreachable];
    }

    bb22: {
        switchInt(move _13) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _0 = DecodedKey::Unicode(const '$');
        goto -> bb139;
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '4');
        goto -> bb139;
    }

    bb25: {
        _14 = Modifiers::is_shifted(_3) -> [return: bb26, unwind unreachable];
    }

    bb26: {
        switchInt(move _14) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _0 = DecodedKey::Unicode(const '%');
        goto -> bb139;
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '5');
        goto -> bb139;
    }

    bb29: {
        _15 = Modifiers::is_shifted(_3) -> [return: bb30, unwind unreachable];
    }

    bb30: {
        switchInt(move _15) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _0 = DecodedKey::Unicode(const '&');
        goto -> bb139;
    }

    bb32: {
        _0 = DecodedKey::Unicode(const '6');
        goto -> bb139;
    }

    bb33: {
        _16 = Modifiers::is_shifted(_3) -> [return: bb34, unwind unreachable];
    }

    bb34: {
        switchInt(move _16) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _0 = DecodedKey::Unicode(const '/');
        goto -> bb139;
    }

    bb36: {
        _0 = DecodedKey::Unicode(const '7');
        goto -> bb139;
    }

    bb37: {
        _17 = Modifiers::is_shifted(_3) -> [return: bb38, unwind unreachable];
    }

    bb38: {
        switchInt(move _17) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _0 = DecodedKey::Unicode(const '(');
        goto -> bb139;
    }

    bb40: {
        _0 = DecodedKey::Unicode(const '8');
        goto -> bb139;
    }

    bb41: {
        _18 = Modifiers::is_shifted(_3) -> [return: bb42, unwind unreachable];
    }

    bb42: {
        switchInt(move _18) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _0 = DecodedKey::Unicode(const ')');
        goto -> bb139;
    }

    bb44: {
        _0 = DecodedKey::Unicode(const '9');
        goto -> bb139;
    }

    bb45: {
        _19 = Modifiers::is_shifted(_3) -> [return: bb46, unwind unreachable];
    }

    bb46: {
        switchInt(move _19) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _0 = DecodedKey::Unicode(const '=');
        goto -> bb139;
    }

    bb48: {
        _0 = DecodedKey::Unicode(const '0');
        goto -> bb139;
    }

    bb49: {
        _20 = Modifiers::is_shifted(_3) -> [return: bb50, unwind unreachable];
    }

    bb50: {
        switchInt(move _20) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _0 = DecodedKey::Unicode(const '?');
        goto -> bb139;
    }

    bb52: {
        _0 = DecodedKey::Unicode(const 'ß');
        goto -> bb139;
    }

    bb53: {
        _21 = Modifiers::is_shifted(_3) -> [return: bb54, unwind unreachable];
    }

    bb54: {
        switchInt(move _21) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _0 = DecodedKey::Unicode(const '`');
        goto -> bb139;
    }

    bb56: {
        _0 = DecodedKey::Unicode(const '´');
        goto -> bb139;
    }

    bb57: {
        _22 = <u8 as Into<char>>::into(const 8_u8) -> [return: bb58, unwind unreachable];
    }

    bb58: {
        _0 = DecodedKey::Unicode(move _22);
        goto -> bb139;
    }

    bb59: {
        _23 = <u8 as Into<char>>::into(const 9_u8) -> [return: bb60, unwind unreachable];
    }

    bb60: {
        _0 = DecodedKey::Unicode(move _23);
        goto -> bb139;
    }

    bb61: {
        switchInt(_5) -> [0: bb65, otherwise: bb62];
    }

    bb62: {
        _24 = Modifiers::is_ctrl(_3) -> [return: bb63, unwind unreachable];
    }

    bb63: {
        switchInt(move _24) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _0 = DecodedKey::Unicode(const '\u{11}');
        goto -> bb139;
    }

    bb65: {
        _25 = ((*_3).6: bool);
        switchInt(move _25) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _0 = DecodedKey::Unicode(const '@');
        goto -> bb139;
    }

    bb67: {
        _26 = Modifiers::is_caps(_3) -> [return: bb68, unwind unreachable];
    }

    bb68: {
        switchInt(move _26) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        _0 = DecodedKey::Unicode(const 'Q');
        goto -> bb139;
    }

    bb70: {
        _0 = DecodedKey::Unicode(const 'q');
        goto -> bb139;
    }

    bb71: {
        switchInt(_5) -> [0: bb75, otherwise: bb72];
    }

    bb72: {
        _27 = Modifiers::is_ctrl(_3) -> [return: bb73, unwind unreachable];
    }

    bb73: {
        switchInt(move _27) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _0 = DecodedKey::Unicode(const '\u{5}');
        goto -> bb139;
    }

    bb75: {
        _28 = ((*_3).6: bool);
        switchInt(move _28) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _0 = DecodedKey::Unicode(const '€');
        goto -> bb139;
    }

    bb77: {
        _29 = Modifiers::is_caps(_3) -> [return: bb78, unwind unreachable];
    }

    bb78: {
        switchInt(move _29) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        _0 = DecodedKey::Unicode(const 'E');
        goto -> bb139;
    }

    bb80: {
        _0 = DecodedKey::Unicode(const 'e');
        goto -> bb139;
    }

    bb81: {
        switchInt(_5) -> [0: bb85, otherwise: bb82];
    }

    bb82: {
        _30 = Modifiers::is_ctrl(_3) -> [return: bb83, unwind unreachable];
    }

    bb83: {
        switchInt(move _30) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        _0 = DecodedKey::Unicode(const '\u{14}');
        goto -> bb139;
    }

    bb85: {
        _31 = Modifiers::is_caps(_3) -> [return: bb86, unwind unreachable];
    }

    bb86: {
        switchInt(move _31) -> [0: bb88, otherwise: bb87];
    }

    bb87: {
        _0 = DecodedKey::Unicode(const 'Z');
        goto -> bb139;
    }

    bb88: {
        _0 = DecodedKey::Unicode(const 'z');
        goto -> bb139;
    }

    bb89: {
        _32 = Modifiers::is_caps(_3) -> [return: bb90, unwind unreachable];
    }

    bb90: {
        switchInt(move _32) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _0 = DecodedKey::Unicode(const 'Ü');
        goto -> bb139;
    }

    bb92: {
        _0 = DecodedKey::Unicode(const 'ü');
        goto -> bb139;
    }

    bb93: {
        _33 = ((*_3).6: bool);
        switchInt(move _33) -> [0: bb95, otherwise: bb94];
    }

    bb94: {
        _0 = DecodedKey::Unicode(const '~');
        goto -> bb139;
    }

    bb95: {
        _34 = Modifiers::is_caps(_3) -> [return: bb96, unwind unreachable];
    }

    bb96: {
        switchInt(move _34) -> [0: bb98, otherwise: bb97];
    }

    bb97: {
        _0 = DecodedKey::Unicode(const '*');
        goto -> bb139;
    }

    bb98: {
        _0 = DecodedKey::Unicode(const '+');
        goto -> bb139;
    }

    bb99: {
        _35 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb100, unwind unreachable];
    }

    bb100: {
        _0 = DecodedKey::Unicode(move _35);
        goto -> bb139;
    }

    bb101: {
        _36 = Modifiers::is_shifted(_3) -> [return: bb102, unwind unreachable];
    }

    bb102: {
        switchInt(move _36) -> [0: bb104, otherwise: bb103];
    }

    bb103: {
        _0 = DecodedKey::Unicode(const '\'');
        goto -> bb139;
    }

    bb104: {
        _0 = DecodedKey::Unicode(const '#');
        goto -> bb139;
    }

    bb105: {
        _37 = Modifiers::is_shifted(_3) -> [return: bb106, unwind unreachable];
    }

    bb106: {
        switchInt(move _37) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _0 = DecodedKey::Unicode(const 'Ö');
        goto -> bb139;
    }

    bb108: {
        _0 = DecodedKey::Unicode(const 'ö');
        goto -> bb139;
    }

    bb109: {
        _38 = Modifiers::is_shifted(_3) -> [return: bb110, unwind unreachable];
    }

    bb110: {
        switchInt(move _38) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _0 = DecodedKey::Unicode(const 'Ä');
        goto -> bb139;
    }

    bb112: {
        _0 = DecodedKey::Unicode(const 'ä');
        goto -> bb139;
    }

    bb113: {
        switchInt(_5) -> [0: bb117, otherwise: bb114];
    }

    bb114: {
        _39 = Modifiers::is_ctrl(_3) -> [return: bb115, unwind unreachable];
    }

    bb115: {
        switchInt(move _39) -> [0: bb117, otherwise: bb116];
    }

    bb116: {
        _0 = DecodedKey::Unicode(const '\u{1a}');
        goto -> bb139;
    }

    bb117: {
        _40 = Modifiers::is_caps(_3) -> [return: bb118, unwind unreachable];
    }

    bb118: {
        switchInt(move _40) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _0 = DecodedKey::Unicode(const 'Y');
        goto -> bb139;
    }

    bb120: {
        _0 = DecodedKey::Unicode(const 'y');
        goto -> bb139;
    }

    bb121: {
        _41 = Modifiers::is_shifted(_3) -> [return: bb122, unwind unreachable];
    }

    bb122: {
        switchInt(move _41) -> [0: bb124, otherwise: bb123];
    }

    bb123: {
        _0 = DecodedKey::Unicode(const ';');
        goto -> bb139;
    }

    bb124: {
        _0 = DecodedKey::Unicode(const ',');
        goto -> bb139;
    }

    bb125: {
        _42 = Modifiers::is_shifted(_3) -> [return: bb126, unwind unreachable];
    }

    bb126: {
        switchInt(move _42) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        _0 = DecodedKey::Unicode(const ':');
        goto -> bb139;
    }

    bb128: {
        _0 = DecodedKey::Unicode(const '.');
        goto -> bb139;
    }

    bb129: {
        _43 = Modifiers::is_shifted(_3) -> [return: bb130, unwind unreachable];
    }

    bb130: {
        switchInt(move _43) -> [0: bb132, otherwise: bb131];
    }

    bb131: {
        _0 = DecodedKey::Unicode(const '_');
        goto -> bb139;
    }

    bb132: {
        _0 = DecodedKey::Unicode(const '-');
        goto -> bb139;
    }

    bb133: {
        _44 = Modifiers::is_shifted(_3) -> [return: bb134, unwind unreachable];
    }

    bb134: {
        switchInt(move _44) -> [0: bb136, otherwise: bb135];
    }

    bb135: {
        _0 = DecodedKey::Unicode(const '>');
        goto -> bb139;
    }

    bb136: {
        _45 = ((*_3).6: bool);
        switchInt(move _45) -> [0: bb138, otherwise: bb137];
    }

    bb137: {
        _0 = DecodedKey::Unicode(const '|');
        goto -> bb139;
    }

    bb138: {
        _0 = DecodedKey::Unicode(const '<');
        goto -> bb139;
    }

    bb139: {
        return;
    }
}

promoted[0] in de105::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:12:1: 12:33>::map_keycode: &HandleControl = {
    let mut _0: &HandleControl;
    let mut _1: HandleControl;

    bb0: {
        _1 = HandleControl::MapLettersToUnicode;
        _0 = &_1;
        return;
    }
}

fn layouts::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:43:1: 43:41>::map_keycode(_1: &AnyLayout, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;
    debug keycode => _2;
    debug modifiers => _3;
    debug handle_ctrl => _4;
    let mut _0: DecodedKey;
    let mut _5: isize;
    let _6: &layouts::dvorak_programmer104::DVP104Key;
    let _7: &layouts::dvorak104::Dvorak104Key;
    let _8: &layouts::us104::Us104Key;
    let _9: &layouts::uk105::Uk105Key;
    let _10: &layouts::jis109::Jis109Key;
    let _11: &layouts::azerty::Azerty;
    let _12: &layouts::colemak::Colemak;
    let _13: &layouts::de105::De105Key;
    scope 1 {
        debug inner => _6;
    }
    scope 2 {
        debug inner => _7;
    }
    scope 3 {
        debug inner => _8;
    }
    scope 4 {
        debug inner => _9;
    }
    scope 5 {
        debug inner => _10;
    }
    scope 6 {
        debug inner => _11;
    }
    scope 7 {
        debug inner => _12;
    }
    scope 8 {
        debug inner => _13;
    }

    bb0: {
        _5 = discriminant((*_1));
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb1, otherwise: bb2];
    }

    bb1: {
        _13 = &(((*_1) as De105Key).0: layouts::de105::De105Key);
        _0 = <De105Key as KeyboardLayout>::map_keycode(_13, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _6 = &(((*_1) as DVP104Key).0: layouts::dvorak_programmer104::DVP104Key);
        _0 = <DVP104Key as KeyboardLayout>::map_keycode(_6, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb4: {
        _7 = &(((*_1) as Dvorak104Key).0: layouts::dvorak104::Dvorak104Key);
        _0 = <Dvorak104Key as KeyboardLayout>::map_keycode(_7, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb5: {
        _8 = &(((*_1) as Us104Key).0: layouts::us104::Us104Key);
        _0 = <Us104Key as KeyboardLayout>::map_keycode(_8, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb6: {
        _9 = &(((*_1) as Uk105Key).0: layouts::uk105::Uk105Key);
        _0 = <Uk105Key as KeyboardLayout>::map_keycode(_9, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb7: {
        _10 = &(((*_1) as Jis109Key).0: layouts::jis109::Jis109Key);
        _0 = <Jis109Key as KeyboardLayout>::map_keycode(_10, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb8: {
        _11 = &(((*_1) as Azerty).0: layouts::azerty::Azerty);
        _0 = <Azerty as KeyboardLayout>::map_keycode(_11, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb9: {
        _12 = &(((*_1) as Colemak).0: layouts::colemak::Colemak);
        _0 = <Colemak as KeyboardLayout>::map_keycode(_12, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb10: {
        return;
    }
}

fn layouts::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:63:1: 63:42>::map_keycode(_1: &&AnyLayout, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;
    debug keycode => _2;
    debug modifiers => _3;
    debug handle_ctrl => _4;
    let mut _0: DecodedKey;
    let mut _5: isize;
    let _6: &layouts::dvorak_programmer104::DVP104Key;
    let _7: &layouts::dvorak104::Dvorak104Key;
    let _8: &layouts::us104::Us104Key;
    let _9: &layouts::uk105::Uk105Key;
    let _10: &layouts::jis109::Jis109Key;
    let _11: &layouts::azerty::Azerty;
    let _12: &layouts::colemak::Colemak;
    let _13: &layouts::de105::De105Key;
    let mut _14: &layouts::AnyLayout;
    let mut _15: &layouts::AnyLayout;
    let mut _16: &layouts::AnyLayout;
    let mut _17: &layouts::AnyLayout;
    let mut _18: &layouts::AnyLayout;
    let mut _19: &layouts::AnyLayout;
    let mut _20: &layouts::AnyLayout;
    let mut _21: &layouts::AnyLayout;
    let mut _22: &layouts::AnyLayout;
    scope 1 {
        debug inner => _6;
    }
    scope 2 {
        debug inner => _7;
    }
    scope 3 {
        debug inner => _8;
    }
    scope 4 {
        debug inner => _9;
    }
    scope 5 {
        debug inner => _10;
    }
    scope 6 {
        debug inner => _11;
    }
    scope 7 {
        debug inner => _12;
    }
    scope 8 {
        debug inner => _13;
    }

    bb0: {
        _14 = deref_copy (*_1);
        _5 = discriminant((*_14));
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb1, otherwise: bb2];
    }

    bb1: {
        _15 = deref_copy (*_1);
        _13 = &(((*_15) as De105Key).0: layouts::de105::De105Key);
        _0 = <De105Key as KeyboardLayout>::map_keycode(_13, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _16 = deref_copy (*_1);
        _6 = &(((*_16) as DVP104Key).0: layouts::dvorak_programmer104::DVP104Key);
        _0 = <DVP104Key as KeyboardLayout>::map_keycode(_6, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb4: {
        _17 = deref_copy (*_1);
        _7 = &(((*_17) as Dvorak104Key).0: layouts::dvorak104::Dvorak104Key);
        _0 = <Dvorak104Key as KeyboardLayout>::map_keycode(_7, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb5: {
        _18 = deref_copy (*_1);
        _8 = &(((*_18) as Us104Key).0: layouts::us104::Us104Key);
        _0 = <Us104Key as KeyboardLayout>::map_keycode(_8, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb6: {
        _19 = deref_copy (*_1);
        _9 = &(((*_19) as Uk105Key).0: layouts::uk105::Uk105Key);
        _0 = <Uk105Key as KeyboardLayout>::map_keycode(_9, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb7: {
        _20 = deref_copy (*_1);
        _10 = &(((*_20) as Jis109Key).0: layouts::jis109::Jis109Key);
        _0 = <Jis109Key as KeyboardLayout>::map_keycode(_10, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb8: {
        _21 = deref_copy (*_1);
        _11 = &(((*_21) as Azerty).0: layouts::azerty::Azerty);
        _0 = <Azerty as KeyboardLayout>::map_keycode(_11, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb9: {
        _22 = deref_copy (*_1);
        _12 = &(((*_22) as Colemak).0: layouts::colemak::Colemak);
        _0 = <Colemak as KeyboardLayout>::map_keycode(_12, _2, _3, _4) -> [return: bb10, unwind unreachable];
    }

    bb10: {
        return;
    }
}

fn set1::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:15:1: 15:18>::new() -> ScancodeSet1 {
    let mut _0: scancodes::set1::ScancodeSet1;
    let mut _1: DecodeState;

    bb0: {
        _1 = DecodeState::Start;
        _0 = ScancodeSet1 { state: move _1 };
        return;
    }
}

// MIR FOR CTFE
fn set1::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:15:1: 15:18>::new() -> ScancodeSet1 {
    let mut _0: scancodes::set1::ScancodeSet1;
    let mut _1: DecodeState;

    bb0: {
        StorageLive(_1);
        _1 = DecodeState::Start;
        _0 = ScancodeSet1 { state: move _1 };
        StorageDead(_1);
        return;
    }
}

fn set1::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:15:1: 15:18>::map_scancode(_1: u8) -> Result<KeyCode, Error> {
    debug code => _1;
    let mut _0: core::result::Result<KeyCode, Error>;
    let mut _2: KeyCode;
    let mut _3: KeyCode;
    let mut _4: KeyCode;
    let mut _5: KeyCode;
    let mut _6: KeyCode;
    let mut _7: KeyCode;
    let mut _8: KeyCode;
    let mut _9: KeyCode;
    let mut _10: KeyCode;
    let mut _11: KeyCode;
    let mut _12: KeyCode;
    let mut _13: KeyCode;
    let mut _14: KeyCode;
    let mut _15: KeyCode;
    let mut _16: KeyCode;
    let mut _17: KeyCode;
    let mut _18: KeyCode;
    let mut _19: KeyCode;
    let mut _20: KeyCode;
    let mut _21: KeyCode;
    let mut _22: KeyCode;
    let mut _23: KeyCode;
    let mut _24: KeyCode;
    let mut _25: KeyCode;
    let mut _26: KeyCode;
    let mut _27: KeyCode;
    let mut _28: KeyCode;
    let mut _29: KeyCode;
    let mut _30: KeyCode;
    let mut _31: KeyCode;
    let mut _32: KeyCode;
    let mut _33: KeyCode;
    let mut _34: KeyCode;
    let mut _35: KeyCode;
    let mut _36: KeyCode;
    let mut _37: KeyCode;
    let mut _38: KeyCode;
    let mut _39: KeyCode;
    let mut _40: KeyCode;
    let mut _41: KeyCode;
    let mut _42: KeyCode;
    let mut _43: KeyCode;
    let mut _44: KeyCode;
    let mut _45: KeyCode;
    let mut _46: KeyCode;
    let mut _47: KeyCode;
    let mut _48: KeyCode;
    let mut _49: KeyCode;
    let mut _50: KeyCode;
    let mut _51: KeyCode;
    let mut _52: KeyCode;
    let mut _53: KeyCode;
    let mut _54: KeyCode;
    let mut _55: KeyCode;
    let mut _56: KeyCode;
    let mut _57: KeyCode;
    let mut _58: KeyCode;
    let mut _59: KeyCode;
    let mut _60: KeyCode;
    let mut _61: KeyCode;
    let mut _62: KeyCode;
    let mut _63: KeyCode;
    let mut _64: KeyCode;
    let mut _65: KeyCode;
    let mut _66: KeyCode;
    let mut _67: KeyCode;
    let mut _68: KeyCode;
    let mut _69: KeyCode;
    let mut _70: KeyCode;
    let mut _71: KeyCode;
    let mut _72: KeyCode;
    let mut _73: KeyCode;
    let mut _74: KeyCode;
    let mut _75: KeyCode;
    let mut _76: KeyCode;
    let mut _77: KeyCode;
    let mut _78: KeyCode;
    let mut _79: KeyCode;
    let mut _80: KeyCode;
    let mut _81: KeyCode;
    let mut _82: KeyCode;
    let mut _83: KeyCode;
    let mut _84: KeyCode;
    let mut _85: KeyCode;
    let mut _86: KeyCode;
    let mut _87: KeyCode;
    let mut _88: KeyCode;
    let mut _89: Error;

    bb0: {
        switchInt(_1) -> [1: bb2, 2: bb3, 3: bb4, 4: bb5, 5: bb6, 6: bb7, 7: bb8, 8: bb9, 9: bb10, 10: bb11, 11: bb12, 12: bb13, 13: bb14, 14: bb15, 15: bb16, 16: bb17, 17: bb18, 18: bb19, 19: bb20, 20: bb21, 21: bb22, 22: bb23, 23: bb24, 24: bb25, 25: bb26, 26: bb27, 27: bb28, 28: bb29, 29: bb30, 30: bb31, 31: bb32, 32: bb33, 33: bb34, 34: bb35, 35: bb36, 36: bb37, 37: bb38, 38: bb39, 39: bb40, 40: bb41, 41: bb42, 42: bb43, 43: bb44, 44: bb45, 45: bb46, 46: bb47, 47: bb48, 48: bb49, 49: bb50, 50: bb51, 51: bb52, 52: bb53, 53: bb54, 54: bb55, 55: bb56, 56: bb57, 57: bb58, 58: bb59, 59: bb60, 60: bb61, 61: bb62, 62: bb63, 63: bb64, 64: bb65, 65: bb66, 66: bb67, 67: bb68, 68: bb69, 69: bb70, 70: bb71, 71: bb72, 72: bb73, 73: bb74, 74: bb75, 75: bb76, 76: bb77, 77: bb78, 78: bb79, 79: bb80, 80: bb81, 81: bb82, 82: bb83, 83: bb84, 84: bb85, 86: bb86, 87: bb87, 88: bb88, otherwise: bb1];
    }

    bb1: {
        _89 = Error::UnknownKeyCode;
        _0 = Result::<KeyCode, Error>::Err(move _89);
        goto -> bb89;
    }

    bb2: {
        _2 = KeyCode::Escape;
        _0 = Result::<KeyCode, Error>::Ok(move _2);
        goto -> bb89;
    }

    bb3: {
        _3 = KeyCode::Key1;
        _0 = Result::<KeyCode, Error>::Ok(move _3);
        goto -> bb89;
    }

    bb4: {
        _4 = KeyCode::Key2;
        _0 = Result::<KeyCode, Error>::Ok(move _4);
        goto -> bb89;
    }

    bb5: {
        _5 = KeyCode::Key3;
        _0 = Result::<KeyCode, Error>::Ok(move _5);
        goto -> bb89;
    }

    bb6: {
        _6 = KeyCode::Key4;
        _0 = Result::<KeyCode, Error>::Ok(move _6);
        goto -> bb89;
    }

    bb7: {
        _7 = KeyCode::Key5;
        _0 = Result::<KeyCode, Error>::Ok(move _7);
        goto -> bb89;
    }

    bb8: {
        _8 = KeyCode::Key6;
        _0 = Result::<KeyCode, Error>::Ok(move _8);
        goto -> bb89;
    }

    bb9: {
        _9 = KeyCode::Key7;
        _0 = Result::<KeyCode, Error>::Ok(move _9);
        goto -> bb89;
    }

    bb10: {
        _10 = KeyCode::Key8;
        _0 = Result::<KeyCode, Error>::Ok(move _10);
        goto -> bb89;
    }

    bb11: {
        _11 = KeyCode::Key9;
        _0 = Result::<KeyCode, Error>::Ok(move _11);
        goto -> bb89;
    }

    bb12: {
        _12 = KeyCode::Key0;
        _0 = Result::<KeyCode, Error>::Ok(move _12);
        goto -> bb89;
    }

    bb13: {
        _13 = KeyCode::OemMinus;
        _0 = Result::<KeyCode, Error>::Ok(move _13);
        goto -> bb89;
    }

    bb14: {
        _14 = KeyCode::OemPlus;
        _0 = Result::<KeyCode, Error>::Ok(move _14);
        goto -> bb89;
    }

    bb15: {
        _15 = KeyCode::Backspace;
        _0 = Result::<KeyCode, Error>::Ok(move _15);
        goto -> bb89;
    }

    bb16: {
        _16 = KeyCode::Tab;
        _0 = Result::<KeyCode, Error>::Ok(move _16);
        goto -> bb89;
    }

    bb17: {
        _17 = KeyCode::Q;
        _0 = Result::<KeyCode, Error>::Ok(move _17);
        goto -> bb89;
    }

    bb18: {
        _18 = KeyCode::W;
        _0 = Result::<KeyCode, Error>::Ok(move _18);
        goto -> bb89;
    }

    bb19: {
        _19 = KeyCode::E;
        _0 = Result::<KeyCode, Error>::Ok(move _19);
        goto -> bb89;
    }

    bb20: {
        _20 = KeyCode::R;
        _0 = Result::<KeyCode, Error>::Ok(move _20);
        goto -> bb89;
    }

    bb21: {
        _21 = KeyCode::T;
        _0 = Result::<KeyCode, Error>::Ok(move _21);
        goto -> bb89;
    }

    bb22: {
        _22 = KeyCode::Y;
        _0 = Result::<KeyCode, Error>::Ok(move _22);
        goto -> bb89;
    }

    bb23: {
        _23 = KeyCode::U;
        _0 = Result::<KeyCode, Error>::Ok(move _23);
        goto -> bb89;
    }

    bb24: {
        _24 = KeyCode::I;
        _0 = Result::<KeyCode, Error>::Ok(move _24);
        goto -> bb89;
    }

    bb25: {
        _25 = KeyCode::O;
        _0 = Result::<KeyCode, Error>::Ok(move _25);
        goto -> bb89;
    }

    bb26: {
        _26 = KeyCode::P;
        _0 = Result::<KeyCode, Error>::Ok(move _26);
        goto -> bb89;
    }

    bb27: {
        _27 = KeyCode::Oem4;
        _0 = Result::<KeyCode, Error>::Ok(move _27);
        goto -> bb89;
    }

    bb28: {
        _28 = KeyCode::Oem6;
        _0 = Result::<KeyCode, Error>::Ok(move _28);
        goto -> bb89;
    }

    bb29: {
        _29 = KeyCode::Return;
        _0 = Result::<KeyCode, Error>::Ok(move _29);
        goto -> bb89;
    }

    bb30: {
        _30 = KeyCode::LControl;
        _0 = Result::<KeyCode, Error>::Ok(move _30);
        goto -> bb89;
    }

    bb31: {
        _31 = KeyCode::A;
        _0 = Result::<KeyCode, Error>::Ok(move _31);
        goto -> bb89;
    }

    bb32: {
        _32 = KeyCode::S;
        _0 = Result::<KeyCode, Error>::Ok(move _32);
        goto -> bb89;
    }

    bb33: {
        _33 = KeyCode::D;
        _0 = Result::<KeyCode, Error>::Ok(move _33);
        goto -> bb89;
    }

    bb34: {
        _34 = KeyCode::F;
        _0 = Result::<KeyCode, Error>::Ok(move _34);
        goto -> bb89;
    }

    bb35: {
        _35 = KeyCode::G;
        _0 = Result::<KeyCode, Error>::Ok(move _35);
        goto -> bb89;
    }

    bb36: {
        _36 = KeyCode::H;
        _0 = Result::<KeyCode, Error>::Ok(move _36);
        goto -> bb89;
    }

    bb37: {
        _37 = KeyCode::J;
        _0 = Result::<KeyCode, Error>::Ok(move _37);
        goto -> bb89;
    }

    bb38: {
        _38 = KeyCode::K;
        _0 = Result::<KeyCode, Error>::Ok(move _38);
        goto -> bb89;
    }

    bb39: {
        _39 = KeyCode::L;
        _0 = Result::<KeyCode, Error>::Ok(move _39);
        goto -> bb89;
    }

    bb40: {
        _40 = KeyCode::Oem1;
        _0 = Result::<KeyCode, Error>::Ok(move _40);
        goto -> bb89;
    }

    bb41: {
        _41 = KeyCode::Oem3;
        _0 = Result::<KeyCode, Error>::Ok(move _41);
        goto -> bb89;
    }

    bb42: {
        _42 = KeyCode::Oem8;
        _0 = Result::<KeyCode, Error>::Ok(move _42);
        goto -> bb89;
    }

    bb43: {
        _43 = KeyCode::LShift;
        _0 = Result::<KeyCode, Error>::Ok(move _43);
        goto -> bb89;
    }

    bb44: {
        _44 = KeyCode::Oem7;
        _0 = Result::<KeyCode, Error>::Ok(move _44);
        goto -> bb89;
    }

    bb45: {
        _45 = KeyCode::Z;
        _0 = Result::<KeyCode, Error>::Ok(move _45);
        goto -> bb89;
    }

    bb46: {
        _46 = KeyCode::X;
        _0 = Result::<KeyCode, Error>::Ok(move _46);
        goto -> bb89;
    }

    bb47: {
        _47 = KeyCode::C;
        _0 = Result::<KeyCode, Error>::Ok(move _47);
        goto -> bb89;
    }

    bb48: {
        _48 = KeyCode::V;
        _0 = Result::<KeyCode, Error>::Ok(move _48);
        goto -> bb89;
    }

    bb49: {
        _49 = KeyCode::B;
        _0 = Result::<KeyCode, Error>::Ok(move _49);
        goto -> bb89;
    }

    bb50: {
        _50 = KeyCode::N;
        _0 = Result::<KeyCode, Error>::Ok(move _50);
        goto -> bb89;
    }

    bb51: {
        _51 = KeyCode::M;
        _0 = Result::<KeyCode, Error>::Ok(move _51);
        goto -> bb89;
    }

    bb52: {
        _52 = KeyCode::OemComma;
        _0 = Result::<KeyCode, Error>::Ok(move _52);
        goto -> bb89;
    }

    bb53: {
        _53 = KeyCode::OemPeriod;
        _0 = Result::<KeyCode, Error>::Ok(move _53);
        goto -> bb89;
    }

    bb54: {
        _54 = KeyCode::Oem2;
        _0 = Result::<KeyCode, Error>::Ok(move _54);
        goto -> bb89;
    }

    bb55: {
        _55 = KeyCode::RShift;
        _0 = Result::<KeyCode, Error>::Ok(move _55);
        goto -> bb89;
    }

    bb56: {
        _56 = KeyCode::NumpadMultiply;
        _0 = Result::<KeyCode, Error>::Ok(move _56);
        goto -> bb89;
    }

    bb57: {
        _57 = KeyCode::LAlt;
        _0 = Result::<KeyCode, Error>::Ok(move _57);
        goto -> bb89;
    }

    bb58: {
        _58 = KeyCode::Spacebar;
        _0 = Result::<KeyCode, Error>::Ok(move _58);
        goto -> bb89;
    }

    bb59: {
        _59 = KeyCode::CapsLock;
        _0 = Result::<KeyCode, Error>::Ok(move _59);
        goto -> bb89;
    }

    bb60: {
        _60 = KeyCode::F1;
        _0 = Result::<KeyCode, Error>::Ok(move _60);
        goto -> bb89;
    }

    bb61: {
        _61 = KeyCode::F2;
        _0 = Result::<KeyCode, Error>::Ok(move _61);
        goto -> bb89;
    }

    bb62: {
        _62 = KeyCode::F3;
        _0 = Result::<KeyCode, Error>::Ok(move _62);
        goto -> bb89;
    }

    bb63: {
        _63 = KeyCode::F4;
        _0 = Result::<KeyCode, Error>::Ok(move _63);
        goto -> bb89;
    }

    bb64: {
        _64 = KeyCode::F5;
        _0 = Result::<KeyCode, Error>::Ok(move _64);
        goto -> bb89;
    }

    bb65: {
        _65 = KeyCode::F6;
        _0 = Result::<KeyCode, Error>::Ok(move _65);
        goto -> bb89;
    }

    bb66: {
        _66 = KeyCode::F7;
        _0 = Result::<KeyCode, Error>::Ok(move _66);
        goto -> bb89;
    }

    bb67: {
        _67 = KeyCode::F8;
        _0 = Result::<KeyCode, Error>::Ok(move _67);
        goto -> bb89;
    }

    bb68: {
        _68 = KeyCode::F9;
        _0 = Result::<KeyCode, Error>::Ok(move _68);
        goto -> bb89;
    }

    bb69: {
        _69 = KeyCode::F10;
        _0 = Result::<KeyCode, Error>::Ok(move _69);
        goto -> bb89;
    }

    bb70: {
        _70 = KeyCode::NumpadLock;
        _0 = Result::<KeyCode, Error>::Ok(move _70);
        goto -> bb89;
    }

    bb71: {
        _71 = KeyCode::ScrollLock;
        _0 = Result::<KeyCode, Error>::Ok(move _71);
        goto -> bb89;
    }

    bb72: {
        _72 = KeyCode::Numpad7;
        _0 = Result::<KeyCode, Error>::Ok(move _72);
        goto -> bb89;
    }

    bb73: {
        _73 = KeyCode::Numpad8;
        _0 = Result::<KeyCode, Error>::Ok(move _73);
        goto -> bb89;
    }

    bb74: {
        _74 = KeyCode::Numpad9;
        _0 = Result::<KeyCode, Error>::Ok(move _74);
        goto -> bb89;
    }

    bb75: {
        _75 = KeyCode::NumpadSubtract;
        _0 = Result::<KeyCode, Error>::Ok(move _75);
        goto -> bb89;
    }

    bb76: {
        _76 = KeyCode::Numpad4;
        _0 = Result::<KeyCode, Error>::Ok(move _76);
        goto -> bb89;
    }

    bb77: {
        _77 = KeyCode::Numpad5;
        _0 = Result::<KeyCode, Error>::Ok(move _77);
        goto -> bb89;
    }

    bb78: {
        _78 = KeyCode::Numpad6;
        _0 = Result::<KeyCode, Error>::Ok(move _78);
        goto -> bb89;
    }

    bb79: {
        _79 = KeyCode::NumpadAdd;
        _0 = Result::<KeyCode, Error>::Ok(move _79);
        goto -> bb89;
    }

    bb80: {
        _80 = KeyCode::Numpad1;
        _0 = Result::<KeyCode, Error>::Ok(move _80);
        goto -> bb89;
    }

    bb81: {
        _81 = KeyCode::Numpad2;
        _0 = Result::<KeyCode, Error>::Ok(move _81);
        goto -> bb89;
    }

    bb82: {
        _82 = KeyCode::Numpad3;
        _0 = Result::<KeyCode, Error>::Ok(move _82);
        goto -> bb89;
    }

    bb83: {
        _83 = KeyCode::Numpad0;
        _0 = Result::<KeyCode, Error>::Ok(move _83);
        goto -> bb89;
    }

    bb84: {
        _84 = KeyCode::NumpadPeriod;
        _0 = Result::<KeyCode, Error>::Ok(move _84);
        goto -> bb89;
    }

    bb85: {
        _85 = KeyCode::SysRq;
        _0 = Result::<KeyCode, Error>::Ok(move _85);
        goto -> bb89;
    }

    bb86: {
        _86 = KeyCode::Oem5;
        _0 = Result::<KeyCode, Error>::Ok(move _86);
        goto -> bb89;
    }

    bb87: {
        _87 = KeyCode::F11;
        _0 = Result::<KeyCode, Error>::Ok(move _87);
        goto -> bb89;
    }

    bb88: {
        _88 = KeyCode::F12;
        _0 = Result::<KeyCode, Error>::Ok(move _88);
        goto -> bb89;
    }

    bb89: {
        return;
    }
}

fn set1::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:15:1: 15:18>::map_extended_scancode(_1: u8) -> Result<KeyCode, Error> {
    debug code => _1;
    let mut _0: core::result::Result<KeyCode, Error>;
    let mut _2: KeyCode;
    let mut _3: KeyCode;
    let mut _4: KeyCode;
    let mut _5: KeyCode;
    let mut _6: KeyCode;
    let mut _7: KeyCode;
    let mut _8: KeyCode;
    let mut _9: KeyCode;
    let mut _10: KeyCode;
    let mut _11: KeyCode;
    let mut _12: KeyCode;
    let mut _13: KeyCode;
    let mut _14: KeyCode;
    let mut _15: KeyCode;
    let mut _16: KeyCode;
    let mut _17: KeyCode;
    let mut _18: KeyCode;
    let mut _19: KeyCode;
    let mut _20: KeyCode;
    let mut _21: KeyCode;
    let mut _22: KeyCode;
    let mut _23: KeyCode;
    let mut _24: KeyCode;
    let mut _25: KeyCode;
    let mut _26: KeyCode;
    let mut _27: KeyCode;
    let mut _28: KeyCode;
    let mut _29: KeyCode;
    let mut _30: KeyCode;
    let mut _31: KeyCode;
    let mut _32: KeyCode;
    let mut _33: KeyCode;
    let mut _34: KeyCode;
    let mut _35: Error;

    bb0: {
        switchInt(_1) -> [16: bb2, 25: bb3, 28: bb4, 29: bb5, 32: bb6, 33: bb7, 34: bb8, 36: bb9, 42: bb10, 46: bb11, 48: bb12, 50: bb13, 53: bb14, 55: bb15, 56: bb16, 71: bb17, 72: bb18, 73: bb19, 75: bb20, 77: bb21, 79: bb22, 80: bb23, 81: bb24, 82: bb25, 83: bb26, 91: bb27, 92: bb28, 93: bb29, 112: bb30, 115: bb31, 121: bb32, 123: bb33, 125: bb34, otherwise: bb1];
    }

    bb1: {
        _35 = Error::UnknownKeyCode;
        _0 = Result::<KeyCode, Error>::Err(move _35);
        goto -> bb35;
    }

    bb2: {
        _2 = KeyCode::PrevTrack;
        _0 = Result::<KeyCode, Error>::Ok(move _2);
        goto -> bb35;
    }

    bb3: {
        _3 = KeyCode::NextTrack;
        _0 = Result::<KeyCode, Error>::Ok(move _3);
        goto -> bb35;
    }

    bb4: {
        _4 = KeyCode::NumpadEnter;
        _0 = Result::<KeyCode, Error>::Ok(move _4);
        goto -> bb35;
    }

    bb5: {
        _5 = KeyCode::RControl;
        _0 = Result::<KeyCode, Error>::Ok(move _5);
        goto -> bb35;
    }

    bb6: {
        _6 = KeyCode::Mute;
        _0 = Result::<KeyCode, Error>::Ok(move _6);
        goto -> bb35;
    }

    bb7: {
        _7 = KeyCode::Calculator;
        _0 = Result::<KeyCode, Error>::Ok(move _7);
        goto -> bb35;
    }

    bb8: {
        _8 = KeyCode::Play;
        _0 = Result::<KeyCode, Error>::Ok(move _8);
        goto -> bb35;
    }

    bb9: {
        _9 = KeyCode::Stop;
        _0 = Result::<KeyCode, Error>::Ok(move _9);
        goto -> bb35;
    }

    bb10: {
        _10 = KeyCode::RAlt2;
        _0 = Result::<KeyCode, Error>::Ok(move _10);
        goto -> bb35;
    }

    bb11: {
        _11 = KeyCode::VolumeDown;
        _0 = Result::<KeyCode, Error>::Ok(move _11);
        goto -> bb35;
    }

    bb12: {
        _12 = KeyCode::VolumeUp;
        _0 = Result::<KeyCode, Error>::Ok(move _12);
        goto -> bb35;
    }

    bb13: {
        _13 = KeyCode::WWWHome;
        _0 = Result::<KeyCode, Error>::Ok(move _13);
        goto -> bb35;
    }

    bb14: {
        _14 = KeyCode::NumpadDivide;
        _0 = Result::<KeyCode, Error>::Ok(move _14);
        goto -> bb35;
    }

    bb15: {
        _15 = KeyCode::PrintScreen;
        _0 = Result::<KeyCode, Error>::Ok(move _15);
        goto -> bb35;
    }

    bb16: {
        _16 = KeyCode::RAltGr;
        _0 = Result::<KeyCode, Error>::Ok(move _16);
        goto -> bb35;
    }

    bb17: {
        _17 = KeyCode::Home;
        _0 = Result::<KeyCode, Error>::Ok(move _17);
        goto -> bb35;
    }

    bb18: {
        _18 = KeyCode::ArrowUp;
        _0 = Result::<KeyCode, Error>::Ok(move _18);
        goto -> bb35;
    }

    bb19: {
        _19 = KeyCode::PageUp;
        _0 = Result::<KeyCode, Error>::Ok(move _19);
        goto -> bb35;
    }

    bb20: {
        _20 = KeyCode::ArrowLeft;
        _0 = Result::<KeyCode, Error>::Ok(move _20);
        goto -> bb35;
    }

    bb21: {
        _21 = KeyCode::ArrowRight;
        _0 = Result::<KeyCode, Error>::Ok(move _21);
        goto -> bb35;
    }

    bb22: {
        _22 = KeyCode::End;
        _0 = Result::<KeyCode, Error>::Ok(move _22);
        goto -> bb35;
    }

    bb23: {
        _23 = KeyCode::ArrowDown;
        _0 = Result::<KeyCode, Error>::Ok(move _23);
        goto -> bb35;
    }

    bb24: {
        _24 = KeyCode::PageDown;
        _0 = Result::<KeyCode, Error>::Ok(move _24);
        goto -> bb35;
    }

    bb25: {
        _25 = KeyCode::Insert;
        _0 = Result::<KeyCode, Error>::Ok(move _25);
        goto -> bb35;
    }

    bb26: {
        _26 = KeyCode::Delete;
        _0 = Result::<KeyCode, Error>::Ok(move _26);
        goto -> bb35;
    }

    bb27: {
        _27 = KeyCode::LWin;
        _0 = Result::<KeyCode, Error>::Ok(move _27);
        goto -> bb35;
    }

    bb28: {
        _28 = KeyCode::RWin;
        _0 = Result::<KeyCode, Error>::Ok(move _28);
        goto -> bb35;
    }

    bb29: {
        _29 = KeyCode::Apps;
        _0 = Result::<KeyCode, Error>::Ok(move _29);
        goto -> bb35;
    }

    bb30: {
        _30 = KeyCode::Oem11;
        _0 = Result::<KeyCode, Error>::Ok(move _30);
        goto -> bb35;
    }

    bb31: {
        _31 = KeyCode::Oem12;
        _0 = Result::<KeyCode, Error>::Ok(move _31);
        goto -> bb35;
    }

    bb32: {
        _32 = KeyCode::Oem10;
        _0 = Result::<KeyCode, Error>::Ok(move _32);
        goto -> bb35;
    }

    bb33: {
        _33 = KeyCode::Oem9;
        _0 = Result::<KeyCode, Error>::Ok(move _33);
        goto -> bb35;
    }

    bb34: {
        _34 = KeyCode::Oem13;
        _0 = Result::<KeyCode, Error>::Ok(move _34);
        goto -> bb35;
    }

    bb35: {
        return;
    }
}

fn set1::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:15:1: 15:18>::map_extended2_scancode(_1: u8) -> Result<KeyCode, Error> {
    debug code => _1;
    let mut _0: core::result::Result<KeyCode, Error>;
    let mut _2: KeyCode;
    let mut _3: Error;

    bb0: {
        switchInt(_1) -> [29: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = Error::UnknownKeyCode;
        _0 = Result::<KeyCode, Error>::Err(move _3);
        goto -> bb3;
    }

    bb2: {
        _2 = KeyCode::RControl2;
        _0 = Result::<KeyCode, Error>::Ok(move _2);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn set1::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:226:1: 226:34>::advance_state(_1: &mut ScancodeSet1, _2: u8) -> Result<Option<KeyEvent>, Error> {
    debug self => _1;
    debug code => _2;
    let mut _0: core::result::Result<core::option::Option<KeyEvent>, Error>;
    let mut _3: isize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: DecodeState;
    let mut _7: core::option::Option<KeyEvent>;
    let mut _8: DecodeState;
    let mut _9: core::option::Option<KeyEvent>;
    let mut _10: core::option::Option<KeyEvent>;
    let mut _11: KeyEvent;
    let mut _12: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>;
    let mut _13: core::result::Result<KeyCode, Error>;
    let mut _14: u8;
    let mut _15: (u8, bool);
    let mut _16: isize;
    let _17: core::result::Result<core::convert::Infallible, Error>;
    let _18: KeyCode;
    let mut _19: KeyState;
    let mut _20: core::option::Option<KeyEvent>;
    let mut _21: KeyEvent;
    let mut _22: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>;
    let mut _23: core::result::Result<KeyCode, Error>;
    let mut _24: isize;
    let _25: core::result::Result<core::convert::Infallible, Error>;
    let _26: KeyCode;
    let mut _27: KeyState;
    let mut _28: DecodeState;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: core::option::Option<KeyEvent>;
    let mut _32: KeyEvent;
    let mut _33: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>;
    let mut _34: core::result::Result<KeyCode, Error>;
    let mut _35: u8;
    let mut _36: (u8, bool);
    let mut _37: isize;
    let _38: core::result::Result<core::convert::Infallible, Error>;
    let _39: KeyCode;
    let mut _40: KeyState;
    let mut _41: core::option::Option<KeyEvent>;
    let mut _42: KeyEvent;
    let mut _43: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>;
    let mut _44: core::result::Result<KeyCode, Error>;
    let mut _45: isize;
    let _46: core::result::Result<core::convert::Infallible, Error>;
    let _47: KeyCode;
    let mut _48: KeyState;
    let mut _49: DecodeState;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: core::option::Option<KeyEvent>;
    let mut _53: KeyEvent;
    let mut _54: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>;
    let mut _55: core::result::Result<KeyCode, Error>;
    let mut _56: u8;
    let mut _57: (u8, bool);
    let mut _58: isize;
    let _59: core::result::Result<core::convert::Infallible, Error>;
    let _60: KeyCode;
    let mut _61: KeyState;
    let mut _62: core::option::Option<KeyEvent>;
    let mut _63: KeyEvent;
    let mut _64: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>;
    let mut _65: core::result::Result<KeyCode, Error>;
    let mut _66: isize;
    let _67: core::result::Result<core::convert::Infallible, Error>;
    let _68: KeyCode;
    let mut _69: KeyState;
    let _70: !;
    scope 1 {
        debug residual => _17;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _18;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _25;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _26;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _38;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _39;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _46;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _47;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _59;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _60;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _67;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _68;
        scope 24 {
        }
    }

    bb0: {
        _3 = discriminant(((*_1).0: DecodeState));
        switchInt(move _3) -> [0: bb2, 1: bb21, 4: bb36, otherwise: bb1];
    }

    bb1: {
        _70 = panic(const "not implemented") -> unwind unreachable;
    }

    bb2: {
        switchInt(_2) -> [224: bb6, 225: bb7, otherwise: bb3];
    }

    bb3: {
        _4 = Le(const 128_u8, _2);
        switchInt(move _4) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _5 = Le(_2, const u8::MAX);
        switchInt(move _5) -> [0: bb5, otherwise: bb8];
    }

    bb5: {
        _23 = ScancodeSet1::map_scancode(_2) -> [return: bb16, unwind unreachable];
    }

    bb6: {
        _6 = DecodeState::Extended;
        ((*_1).0: DecodeState) = move _6;
        _7 = Option::<KeyEvent>::None;
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _7);
        goto -> bb51;
    }

    bb7: {
        _8 = DecodeState::Extended2;
        ((*_1).0: DecodeState) = move _8;
        _9 = Option::<KeyEvent>::None;
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _9);
        goto -> bb51;
    }

    bb8: {
        _15 = CheckedSub(_2, const 128_u8);
        assert(!move (_15.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 128_u8) -> [success: bb9, unwind unreachable];
    }

    bb9: {
        _14 = move (_15.0: u8);
        _13 = ScancodeSet1::map_scancode(move _14) -> [return: bb10, unwind unreachable];
    }

    bb10: {
        _12 = <Result<KeyCode, Error> as Try>::branch(move _13) -> [return: bb11, unwind unreachable];
    }

    bb11: {
        _16 = discriminant(_12);
        switchInt(move _16) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        _18 = ((_12 as Continue).0: KeyCode);
        _19 = KeyState::Up;
        _11 = KeyEvent::new(_18, move _19) -> [return: bb15, unwind unreachable];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _17 = ((_12 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_17) -> [return: bb51, unwind unreachable];
    }

    bb15: {
        _10 = Option::<KeyEvent>::Some(move _11);
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _10);
        goto -> bb51;
    }

    bb16: {
        _22 = <Result<KeyCode, Error> as Try>::branch(move _23) -> [return: bb17, unwind unreachable];
    }

    bb17: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb18, 1: bb19, otherwise: bb13];
    }

    bb18: {
        _26 = ((_22 as Continue).0: KeyCode);
        _27 = KeyState::Down;
        _21 = KeyEvent::new(_26, move _27) -> [return: bb20, unwind unreachable];
    }

    bb19: {
        _25 = ((_22 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_25) -> [return: bb51, unwind unreachable];
    }

    bb20: {
        _20 = Option::<KeyEvent>::Some(move _21);
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _20);
        goto -> bb51;
    }

    bb21: {
        _28 = DecodeState::Start;
        ((*_1).0: DecodeState) = move _28;
        _29 = Le(const 128_u8, _2);
        switchInt(move _29) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _30 = Le(_2, const u8::MAX);
        switchInt(move _30) -> [0: bb23, otherwise: bb24];
    }

    bb23: {
        _44 = ScancodeSet1::map_extended_scancode(_2) -> [return: bb31, unwind unreachable];
    }

    bb24: {
        _36 = CheckedSub(_2, const 128_u8);
        assert(!move (_36.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 128_u8) -> [success: bb25, unwind unreachable];
    }

    bb25: {
        _35 = move (_36.0: u8);
        _34 = ScancodeSet1::map_extended_scancode(move _35) -> [return: bb26, unwind unreachable];
    }

    bb26: {
        _33 = <Result<KeyCode, Error> as Try>::branch(move _34) -> [return: bb27, unwind unreachable];
    }

    bb27: {
        _37 = discriminant(_33);
        switchInt(move _37) -> [0: bb28, 1: bb29, otherwise: bb13];
    }

    bb28: {
        _39 = ((_33 as Continue).0: KeyCode);
        _40 = KeyState::Up;
        _32 = KeyEvent::new(_39, move _40) -> [return: bb30, unwind unreachable];
    }

    bb29: {
        _38 = ((_33 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_38) -> [return: bb51, unwind unreachable];
    }

    bb30: {
        _31 = Option::<KeyEvent>::Some(move _32);
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _31);
        goto -> bb51;
    }

    bb31: {
        _43 = <Result<KeyCode, Error> as Try>::branch(move _44) -> [return: bb32, unwind unreachable];
    }

    bb32: {
        _45 = discriminant(_43);
        switchInt(move _45) -> [0: bb33, 1: bb34, otherwise: bb13];
    }

    bb33: {
        _47 = ((_43 as Continue).0: KeyCode);
        _48 = KeyState::Down;
        _42 = KeyEvent::new(_47, move _48) -> [return: bb35, unwind unreachable];
    }

    bb34: {
        _46 = ((_43 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_46) -> [return: bb51, unwind unreachable];
    }

    bb35: {
        _41 = Option::<KeyEvent>::Some(move _42);
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _41);
        goto -> bb51;
    }

    bb36: {
        _49 = DecodeState::Start;
        ((*_1).0: DecodeState) = move _49;
        _50 = Le(const 128_u8, _2);
        switchInt(move _50) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _51 = Le(_2, const u8::MAX);
        switchInt(move _51) -> [0: bb38, otherwise: bb39];
    }

    bb38: {
        _65 = ScancodeSet1::map_extended2_scancode(_2) -> [return: bb46, unwind unreachable];
    }

    bb39: {
        _57 = CheckedSub(_2, const 128_u8);
        assert(!move (_57.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 128_u8) -> [success: bb40, unwind unreachable];
    }

    bb40: {
        _56 = move (_57.0: u8);
        _55 = ScancodeSet1::map_extended2_scancode(move _56) -> [return: bb41, unwind unreachable];
    }

    bb41: {
        _54 = <Result<KeyCode, Error> as Try>::branch(move _55) -> [return: bb42, unwind unreachable];
    }

    bb42: {
        _58 = discriminant(_54);
        switchInt(move _58) -> [0: bb43, 1: bb44, otherwise: bb13];
    }

    bb43: {
        _60 = ((_54 as Continue).0: KeyCode);
        _61 = KeyState::Up;
        _53 = KeyEvent::new(_60, move _61) -> [return: bb45, unwind unreachable];
    }

    bb44: {
        _59 = ((_54 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_59) -> [return: bb51, unwind unreachable];
    }

    bb45: {
        _52 = Option::<KeyEvent>::Some(move _53);
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _52);
        goto -> bb51;
    }

    bb46: {
        _64 = <Result<KeyCode, Error> as Try>::branch(move _65) -> [return: bb47, unwind unreachable];
    }

    bb47: {
        _66 = discriminant(_64);
        switchInt(move _66) -> [0: bb48, 1: bb49, otherwise: bb13];
    }

    bb48: {
        _68 = ((_64 as Continue).0: KeyCode);
        _69 = KeyState::Down;
        _63 = KeyEvent::new(_68, move _69) -> [return: bb50, unwind unreachable];
    }

    bb49: {
        _67 = ((_64 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_67) -> [return: bb51, unwind unreachable];
    }

    bb50: {
        _62 = Option::<KeyEvent>::Some(move _63);
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _62);
        goto -> bb51;
    }

    bb51: {
        return;
    }
}

fn set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:16:1: 16:18>::new() -> ScancodeSet2 {
    let mut _0: scancodes::set2::ScancodeSet2;
    let mut _1: DecodeState;

    bb0: {
        _1 = DecodeState::Start;
        _0 = ScancodeSet2 { state: move _1 };
        return;
    }
}

// MIR FOR CTFE
fn set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:16:1: 16:18>::new() -> ScancodeSet2 {
    let mut _0: scancodes::set2::ScancodeSet2;
    let mut _1: DecodeState;

    bb0: {
        StorageLive(_1);
        _1 = DecodeState::Start;
        _0 = ScancodeSet2 { state: move _1 };
        StorageDead(_1);
        return;
    }
}

fn set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:16:1: 16:18>::map_scancode(_1: u8) -> Result<KeyCode, Error> {
    debug code => _1;
    let mut _0: core::result::Result<KeyCode, Error>;
    let mut _2: KeyCode;
    let mut _3: KeyCode;
    let mut _4: KeyCode;
    let mut _5: KeyCode;
    let mut _6: KeyCode;
    let mut _7: KeyCode;
    let mut _8: KeyCode;
    let mut _9: KeyCode;
    let mut _10: KeyCode;
    let mut _11: KeyCode;
    let mut _12: KeyCode;
    let mut _13: KeyCode;
    let mut _14: KeyCode;
    let mut _15: KeyCode;
    let mut _16: KeyCode;
    let mut _17: KeyCode;
    let mut _18: KeyCode;
    let mut _19: KeyCode;
    let mut _20: KeyCode;
    let mut _21: KeyCode;
    let mut _22: KeyCode;
    let mut _23: KeyCode;
    let mut _24: KeyCode;
    let mut _25: KeyCode;
    let mut _26: KeyCode;
    let mut _27: KeyCode;
    let mut _28: KeyCode;
    let mut _29: KeyCode;
    let mut _30: KeyCode;
    let mut _31: KeyCode;
    let mut _32: KeyCode;
    let mut _33: KeyCode;
    let mut _34: KeyCode;
    let mut _35: KeyCode;
    let mut _36: KeyCode;
    let mut _37: KeyCode;
    let mut _38: KeyCode;
    let mut _39: KeyCode;
    let mut _40: KeyCode;
    let mut _41: KeyCode;
    let mut _42: KeyCode;
    let mut _43: KeyCode;
    let mut _44: KeyCode;
    let mut _45: KeyCode;
    let mut _46: KeyCode;
    let mut _47: KeyCode;
    let mut _48: KeyCode;
    let mut _49: KeyCode;
    let mut _50: KeyCode;
    let mut _51: KeyCode;
    let mut _52: KeyCode;
    let mut _53: KeyCode;
    let mut _54: KeyCode;
    let mut _55: KeyCode;
    let mut _56: KeyCode;
    let mut _57: KeyCode;
    let mut _58: KeyCode;
    let mut _59: KeyCode;
    let mut _60: KeyCode;
    let mut _61: KeyCode;
    let mut _62: KeyCode;
    let mut _63: KeyCode;
    let mut _64: KeyCode;
    let mut _65: KeyCode;
    let mut _66: KeyCode;
    let mut _67: KeyCode;
    let mut _68: KeyCode;
    let mut _69: KeyCode;
    let mut _70: KeyCode;
    let mut _71: KeyCode;
    let mut _72: KeyCode;
    let mut _73: KeyCode;
    let mut _74: KeyCode;
    let mut _75: KeyCode;
    let mut _76: KeyCode;
    let mut _77: KeyCode;
    let mut _78: KeyCode;
    let mut _79: KeyCode;
    let mut _80: KeyCode;
    let mut _81: KeyCode;
    let mut _82: KeyCode;
    let mut _83: KeyCode;
    let mut _84: KeyCode;
    let mut _85: KeyCode;
    let mut _86: KeyCode;
    let mut _87: KeyCode;
    let mut _88: KeyCode;
    let mut _89: KeyCode;
    let mut _90: KeyCode;
    let mut _91: KeyCode;
    let mut _92: KeyCode;
    let mut _93: KeyCode;
    let mut _94: KeyCode;
    let mut _95: KeyCode;
    let mut _96: Error;

    bb0: {
        switchInt(_1) -> [0: bb2, 1: bb3, 3: bb4, 4: bb5, 5: bb6, 6: bb7, 7: bb8, 9: bb9, 10: bb10, 11: bb11, 12: bb12, 13: bb13, 14: bb14, 17: bb15, 18: bb16, 19: bb17, 20: bb18, 21: bb19, 22: bb20, 26: bb21, 27: bb22, 28: bb23, 29: bb24, 30: bb25, 33: bb26, 34: bb27, 35: bb28, 36: bb29, 37: bb30, 38: bb31, 41: bb32, 42: bb33, 43: bb34, 44: bb35, 45: bb36, 46: bb37, 49: bb38, 50: bb39, 51: bb40, 52: bb41, 53: bb42, 54: bb43, 58: bb44, 59: bb45, 60: bb46, 61: bb47, 62: bb48, 65: bb49, 66: bb50, 67: bb51, 68: bb52, 69: bb53, 70: bb54, 73: bb55, 74: bb56, 75: bb57, 76: bb58, 77: bb59, 78: bb60, 81: bb61, 82: bb62, 84: bb63, 85: bb64, 88: bb65, 89: bb66, 90: bb67, 91: bb68, 93: bb69, 97: bb70, 100: bb71, 102: bb72, 103: bb73, 105: bb74, 106: bb75, 107: bb76, 108: bb77, 112: bb78, 113: bb79, 114: bb80, 115: bb81, 116: bb82, 117: bb83, 118: bb84, 119: bb85, 120: bb86, 121: bb87, 122: bb88, 123: bb89, 124: bb90, 125: bb91, 126: bb92, 127: bb93, 131: bb94, 170: bb95, otherwise: bb1];
    }

    bb1: {
        _96 = Error::UnknownKeyCode;
        _0 = Result::<KeyCode, Error>::Err(move _96);
        goto -> bb96;
    }

    bb2: {
        _2 = KeyCode::TooManyKeys;
        _0 = Result::<KeyCode, Error>::Ok(move _2);
        goto -> bb96;
    }

    bb3: {
        _3 = KeyCode::F9;
        _0 = Result::<KeyCode, Error>::Ok(move _3);
        goto -> bb96;
    }

    bb4: {
        _4 = KeyCode::F5;
        _0 = Result::<KeyCode, Error>::Ok(move _4);
        goto -> bb96;
    }

    bb5: {
        _5 = KeyCode::F3;
        _0 = Result::<KeyCode, Error>::Ok(move _5);
        goto -> bb96;
    }

    bb6: {
        _6 = KeyCode::F1;
        _0 = Result::<KeyCode, Error>::Ok(move _6);
        goto -> bb96;
    }

    bb7: {
        _7 = KeyCode::F2;
        _0 = Result::<KeyCode, Error>::Ok(move _7);
        goto -> bb96;
    }

    bb8: {
        _8 = KeyCode::F12;
        _0 = Result::<KeyCode, Error>::Ok(move _8);
        goto -> bb96;
    }

    bb9: {
        _9 = KeyCode::F10;
        _0 = Result::<KeyCode, Error>::Ok(move _9);
        goto -> bb96;
    }

    bb10: {
        _10 = KeyCode::F8;
        _0 = Result::<KeyCode, Error>::Ok(move _10);
        goto -> bb96;
    }

    bb11: {
        _11 = KeyCode::F6;
        _0 = Result::<KeyCode, Error>::Ok(move _11);
        goto -> bb96;
    }

    bb12: {
        _12 = KeyCode::F4;
        _0 = Result::<KeyCode, Error>::Ok(move _12);
        goto -> bb96;
    }

    bb13: {
        _13 = KeyCode::Tab;
        _0 = Result::<KeyCode, Error>::Ok(move _13);
        goto -> bb96;
    }

    bb14: {
        _14 = KeyCode::Oem8;
        _0 = Result::<KeyCode, Error>::Ok(move _14);
        goto -> bb96;
    }

    bb15: {
        _15 = KeyCode::LAlt;
        _0 = Result::<KeyCode, Error>::Ok(move _15);
        goto -> bb96;
    }

    bb16: {
        _16 = KeyCode::LShift;
        _0 = Result::<KeyCode, Error>::Ok(move _16);
        goto -> bb96;
    }

    bb17: {
        _17 = KeyCode::Oem11;
        _0 = Result::<KeyCode, Error>::Ok(move _17);
        goto -> bb96;
    }

    bb18: {
        _18 = KeyCode::LControl;
        _0 = Result::<KeyCode, Error>::Ok(move _18);
        goto -> bb96;
    }

    bb19: {
        _19 = KeyCode::Q;
        _0 = Result::<KeyCode, Error>::Ok(move _19);
        goto -> bb96;
    }

    bb20: {
        _20 = KeyCode::Key1;
        _0 = Result::<KeyCode, Error>::Ok(move _20);
        goto -> bb96;
    }

    bb21: {
        _21 = KeyCode::Z;
        _0 = Result::<KeyCode, Error>::Ok(move _21);
        goto -> bb96;
    }

    bb22: {
        _22 = KeyCode::S;
        _0 = Result::<KeyCode, Error>::Ok(move _22);
        goto -> bb96;
    }

    bb23: {
        _23 = KeyCode::A;
        _0 = Result::<KeyCode, Error>::Ok(move _23);
        goto -> bb96;
    }

    bb24: {
        _24 = KeyCode::W;
        _0 = Result::<KeyCode, Error>::Ok(move _24);
        goto -> bb96;
    }

    bb25: {
        _25 = KeyCode::Key2;
        _0 = Result::<KeyCode, Error>::Ok(move _25);
        goto -> bb96;
    }

    bb26: {
        _26 = KeyCode::C;
        _0 = Result::<KeyCode, Error>::Ok(move _26);
        goto -> bb96;
    }

    bb27: {
        _27 = KeyCode::X;
        _0 = Result::<KeyCode, Error>::Ok(move _27);
        goto -> bb96;
    }

    bb28: {
        _28 = KeyCode::D;
        _0 = Result::<KeyCode, Error>::Ok(move _28);
        goto -> bb96;
    }

    bb29: {
        _29 = KeyCode::E;
        _0 = Result::<KeyCode, Error>::Ok(move _29);
        goto -> bb96;
    }

    bb30: {
        _30 = KeyCode::Key4;
        _0 = Result::<KeyCode, Error>::Ok(move _30);
        goto -> bb96;
    }

    bb31: {
        _31 = KeyCode::Key3;
        _0 = Result::<KeyCode, Error>::Ok(move _31);
        goto -> bb96;
    }

    bb32: {
        _32 = KeyCode::Spacebar;
        _0 = Result::<KeyCode, Error>::Ok(move _32);
        goto -> bb96;
    }

    bb33: {
        _33 = KeyCode::V;
        _0 = Result::<KeyCode, Error>::Ok(move _33);
        goto -> bb96;
    }

    bb34: {
        _34 = KeyCode::F;
        _0 = Result::<KeyCode, Error>::Ok(move _34);
        goto -> bb96;
    }

    bb35: {
        _35 = KeyCode::T;
        _0 = Result::<KeyCode, Error>::Ok(move _35);
        goto -> bb96;
    }

    bb36: {
        _36 = KeyCode::R;
        _0 = Result::<KeyCode, Error>::Ok(move _36);
        goto -> bb96;
    }

    bb37: {
        _37 = KeyCode::Key5;
        _0 = Result::<KeyCode, Error>::Ok(move _37);
        goto -> bb96;
    }

    bb38: {
        _38 = KeyCode::N;
        _0 = Result::<KeyCode, Error>::Ok(move _38);
        goto -> bb96;
    }

    bb39: {
        _39 = KeyCode::B;
        _0 = Result::<KeyCode, Error>::Ok(move _39);
        goto -> bb96;
    }

    bb40: {
        _40 = KeyCode::H;
        _0 = Result::<KeyCode, Error>::Ok(move _40);
        goto -> bb96;
    }

    bb41: {
        _41 = KeyCode::G;
        _0 = Result::<KeyCode, Error>::Ok(move _41);
        goto -> bb96;
    }

    bb42: {
        _42 = KeyCode::Y;
        _0 = Result::<KeyCode, Error>::Ok(move _42);
        goto -> bb96;
    }

    bb43: {
        _43 = KeyCode::Key6;
        _0 = Result::<KeyCode, Error>::Ok(move _43);
        goto -> bb96;
    }

    bb44: {
        _44 = KeyCode::M;
        _0 = Result::<KeyCode, Error>::Ok(move _44);
        goto -> bb96;
    }

    bb45: {
        _45 = KeyCode::J;
        _0 = Result::<KeyCode, Error>::Ok(move _45);
        goto -> bb96;
    }

    bb46: {
        _46 = KeyCode::U;
        _0 = Result::<KeyCode, Error>::Ok(move _46);
        goto -> bb96;
    }

    bb47: {
        _47 = KeyCode::Key7;
        _0 = Result::<KeyCode, Error>::Ok(move _47);
        goto -> bb96;
    }

    bb48: {
        _48 = KeyCode::Key8;
        _0 = Result::<KeyCode, Error>::Ok(move _48);
        goto -> bb96;
    }

    bb49: {
        _49 = KeyCode::OemComma;
        _0 = Result::<KeyCode, Error>::Ok(move _49);
        goto -> bb96;
    }

    bb50: {
        _50 = KeyCode::K;
        _0 = Result::<KeyCode, Error>::Ok(move _50);
        goto -> bb96;
    }

    bb51: {
        _51 = KeyCode::I;
        _0 = Result::<KeyCode, Error>::Ok(move _51);
        goto -> bb96;
    }

    bb52: {
        _52 = KeyCode::O;
        _0 = Result::<KeyCode, Error>::Ok(move _52);
        goto -> bb96;
    }

    bb53: {
        _53 = KeyCode::Key0;
        _0 = Result::<KeyCode, Error>::Ok(move _53);
        goto -> bb96;
    }

    bb54: {
        _54 = KeyCode::Key9;
        _0 = Result::<KeyCode, Error>::Ok(move _54);
        goto -> bb96;
    }

    bb55: {
        _55 = KeyCode::OemPeriod;
        _0 = Result::<KeyCode, Error>::Ok(move _55);
        goto -> bb96;
    }

    bb56: {
        _56 = KeyCode::Oem2;
        _0 = Result::<KeyCode, Error>::Ok(move _56);
        goto -> bb96;
    }

    bb57: {
        _57 = KeyCode::L;
        _0 = Result::<KeyCode, Error>::Ok(move _57);
        goto -> bb96;
    }

    bb58: {
        _58 = KeyCode::Oem1;
        _0 = Result::<KeyCode, Error>::Ok(move _58);
        goto -> bb96;
    }

    bb59: {
        _59 = KeyCode::P;
        _0 = Result::<KeyCode, Error>::Ok(move _59);
        goto -> bb96;
    }

    bb60: {
        _60 = KeyCode::OemMinus;
        _0 = Result::<KeyCode, Error>::Ok(move _60);
        goto -> bb96;
    }

    bb61: {
        _61 = KeyCode::Oem12;
        _0 = Result::<KeyCode, Error>::Ok(move _61);
        goto -> bb96;
    }

    bb62: {
        _62 = KeyCode::Oem3;
        _0 = Result::<KeyCode, Error>::Ok(move _62);
        goto -> bb96;
    }

    bb63: {
        _63 = KeyCode::Oem4;
        _0 = Result::<KeyCode, Error>::Ok(move _63);
        goto -> bb96;
    }

    bb64: {
        _64 = KeyCode::OemPlus;
        _0 = Result::<KeyCode, Error>::Ok(move _64);
        goto -> bb96;
    }

    bb65: {
        _65 = KeyCode::CapsLock;
        _0 = Result::<KeyCode, Error>::Ok(move _65);
        goto -> bb96;
    }

    bb66: {
        _66 = KeyCode::RShift;
        _0 = Result::<KeyCode, Error>::Ok(move _66);
        goto -> bb96;
    }

    bb67: {
        _67 = KeyCode::Return;
        _0 = Result::<KeyCode, Error>::Ok(move _67);
        goto -> bb96;
    }

    bb68: {
        _68 = KeyCode::Oem6;
        _0 = Result::<KeyCode, Error>::Ok(move _68);
        goto -> bb96;
    }

    bb69: {
        _69 = KeyCode::Oem7;
        _0 = Result::<KeyCode, Error>::Ok(move _69);
        goto -> bb96;
    }

    bb70: {
        _70 = KeyCode::Oem5;
        _0 = Result::<KeyCode, Error>::Ok(move _70);
        goto -> bb96;
    }

    bb71: {
        _71 = KeyCode::Oem10;
        _0 = Result::<KeyCode, Error>::Ok(move _71);
        goto -> bb96;
    }

    bb72: {
        _72 = KeyCode::Backspace;
        _0 = Result::<KeyCode, Error>::Ok(move _72);
        goto -> bb96;
    }

    bb73: {
        _73 = KeyCode::Oem9;
        _0 = Result::<KeyCode, Error>::Ok(move _73);
        goto -> bb96;
    }

    bb74: {
        _74 = KeyCode::Numpad1;
        _0 = Result::<KeyCode, Error>::Ok(move _74);
        goto -> bb96;
    }

    bb75: {
        _75 = KeyCode::Oem13;
        _0 = Result::<KeyCode, Error>::Ok(move _75);
        goto -> bb96;
    }

    bb76: {
        _76 = KeyCode::Numpad4;
        _0 = Result::<KeyCode, Error>::Ok(move _76);
        goto -> bb96;
    }

    bb77: {
        _77 = KeyCode::Numpad7;
        _0 = Result::<KeyCode, Error>::Ok(move _77);
        goto -> bb96;
    }

    bb78: {
        _78 = KeyCode::Numpad0;
        _0 = Result::<KeyCode, Error>::Ok(move _78);
        goto -> bb96;
    }

    bb79: {
        _79 = KeyCode::NumpadPeriod;
        _0 = Result::<KeyCode, Error>::Ok(move _79);
        goto -> bb96;
    }

    bb80: {
        _80 = KeyCode::Numpad2;
        _0 = Result::<KeyCode, Error>::Ok(move _80);
        goto -> bb96;
    }

    bb81: {
        _81 = KeyCode::Numpad5;
        _0 = Result::<KeyCode, Error>::Ok(move _81);
        goto -> bb96;
    }

    bb82: {
        _82 = KeyCode::Numpad6;
        _0 = Result::<KeyCode, Error>::Ok(move _82);
        goto -> bb96;
    }

    bb83: {
        _83 = KeyCode::Numpad8;
        _0 = Result::<KeyCode, Error>::Ok(move _83);
        goto -> bb96;
    }

    bb84: {
        _84 = KeyCode::Escape;
        _0 = Result::<KeyCode, Error>::Ok(move _84);
        goto -> bb96;
    }

    bb85: {
        _85 = KeyCode::NumpadLock;
        _0 = Result::<KeyCode, Error>::Ok(move _85);
        goto -> bb96;
    }

    bb86: {
        _86 = KeyCode::F11;
        _0 = Result::<KeyCode, Error>::Ok(move _86);
        goto -> bb96;
    }

    bb87: {
        _87 = KeyCode::NumpadAdd;
        _0 = Result::<KeyCode, Error>::Ok(move _87);
        goto -> bb96;
    }

    bb88: {
        _88 = KeyCode::Numpad3;
        _0 = Result::<KeyCode, Error>::Ok(move _88);
        goto -> bb96;
    }

    bb89: {
        _89 = KeyCode::NumpadSubtract;
        _0 = Result::<KeyCode, Error>::Ok(move _89);
        goto -> bb96;
    }

    bb90: {
        _90 = KeyCode::NumpadMultiply;
        _0 = Result::<KeyCode, Error>::Ok(move _90);
        goto -> bb96;
    }

    bb91: {
        _91 = KeyCode::Numpad9;
        _0 = Result::<KeyCode, Error>::Ok(move _91);
        goto -> bb96;
    }

    bb92: {
        _92 = KeyCode::ScrollLock;
        _0 = Result::<KeyCode, Error>::Ok(move _92);
        goto -> bb96;
    }

    bb93: {
        _93 = KeyCode::SysRq;
        _0 = Result::<KeyCode, Error>::Ok(move _93);
        goto -> bb96;
    }

    bb94: {
        _94 = KeyCode::F7;
        _0 = Result::<KeyCode, Error>::Ok(move _94);
        goto -> bb96;
    }

    bb95: {
        _95 = KeyCode::PowerOnTestOk;
        _0 = Result::<KeyCode, Error>::Ok(move _95);
        goto -> bb96;
    }

    bb96: {
        return;
    }
}

fn set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:16:1: 16:18>::map_extended_scancode(_1: u8) -> Result<KeyCode, Error> {
    debug code => _1;
    let mut _0: core::result::Result<KeyCode, Error>;
    let mut _2: KeyCode;
    let mut _3: KeyCode;
    let mut _4: KeyCode;
    let mut _5: KeyCode;
    let mut _6: KeyCode;
    let mut _7: KeyCode;
    let mut _8: KeyCode;
    let mut _9: KeyCode;
    let mut _10: KeyCode;
    let mut _11: KeyCode;
    let mut _12: KeyCode;
    let mut _13: KeyCode;
    let mut _14: KeyCode;
    let mut _15: KeyCode;
    let mut _16: KeyCode;
    let mut _17: KeyCode;
    let mut _18: KeyCode;
    let mut _19: KeyCode;
    let mut _20: KeyCode;
    let mut _21: KeyCode;
    let mut _22: KeyCode;
    let mut _23: KeyCode;
    let mut _24: KeyCode;
    let mut _25: KeyCode;
    let mut _26: KeyCode;
    let mut _27: KeyCode;
    let mut _28: KeyCode;
    let mut _29: KeyCode;
    let mut _30: Error;

    bb0: {
        switchInt(_1) -> [17: bb2, 18: bb3, 20: bb4, 21: bb5, 31: bb6, 33: bb7, 35: bb8, 39: bb9, 43: bb10, 47: bb11, 50: bb12, 52: bb13, 58: bb14, 59: bb15, 74: bb16, 77: bb17, 90: bb18, 105: bb19, 107: bb20, 108: bb21, 112: bb22, 113: bb23, 114: bb24, 116: bb25, 117: bb26, 122: bb27, 124: bb28, 125: bb29, otherwise: bb1];
    }

    bb1: {
        _30 = Error::UnknownKeyCode;
        _0 = Result::<KeyCode, Error>::Err(move _30);
        goto -> bb30;
    }

    bb2: {
        _2 = KeyCode::RAltGr;
        _0 = Result::<KeyCode, Error>::Ok(move _2);
        goto -> bb30;
    }

    bb3: {
        _3 = KeyCode::RAlt2;
        _0 = Result::<KeyCode, Error>::Ok(move _3);
        goto -> bb30;
    }

    bb4: {
        _4 = KeyCode::RControl;
        _0 = Result::<KeyCode, Error>::Ok(move _4);
        goto -> bb30;
    }

    bb5: {
        _5 = KeyCode::PrevTrack;
        _0 = Result::<KeyCode, Error>::Ok(move _5);
        goto -> bb30;
    }

    bb6: {
        _6 = KeyCode::LWin;
        _0 = Result::<KeyCode, Error>::Ok(move _6);
        goto -> bb30;
    }

    bb7: {
        _7 = KeyCode::VolumeDown;
        _0 = Result::<KeyCode, Error>::Ok(move _7);
        goto -> bb30;
    }

    bb8: {
        _8 = KeyCode::Mute;
        _0 = Result::<KeyCode, Error>::Ok(move _8);
        goto -> bb30;
    }

    bb9: {
        _9 = KeyCode::RWin;
        _0 = Result::<KeyCode, Error>::Ok(move _9);
        goto -> bb30;
    }

    bb10: {
        _10 = KeyCode::Calculator;
        _0 = Result::<KeyCode, Error>::Ok(move _10);
        goto -> bb30;
    }

    bb11: {
        _11 = KeyCode::Apps;
        _0 = Result::<KeyCode, Error>::Ok(move _11);
        goto -> bb30;
    }

    bb12: {
        _12 = KeyCode::VolumeUp;
        _0 = Result::<KeyCode, Error>::Ok(move _12);
        goto -> bb30;
    }

    bb13: {
        _13 = KeyCode::Play;
        _0 = Result::<KeyCode, Error>::Ok(move _13);
        goto -> bb30;
    }

    bb14: {
        _14 = KeyCode::WWWHome;
        _0 = Result::<KeyCode, Error>::Ok(move _14);
        goto -> bb30;
    }

    bb15: {
        _15 = KeyCode::Stop;
        _0 = Result::<KeyCode, Error>::Ok(move _15);
        goto -> bb30;
    }

    bb16: {
        _16 = KeyCode::NumpadDivide;
        _0 = Result::<KeyCode, Error>::Ok(move _16);
        goto -> bb30;
    }

    bb17: {
        _17 = KeyCode::NextTrack;
        _0 = Result::<KeyCode, Error>::Ok(move _17);
        goto -> bb30;
    }

    bb18: {
        _18 = KeyCode::NumpadEnter;
        _0 = Result::<KeyCode, Error>::Ok(move _18);
        goto -> bb30;
    }

    bb19: {
        _19 = KeyCode::End;
        _0 = Result::<KeyCode, Error>::Ok(move _19);
        goto -> bb30;
    }

    bb20: {
        _20 = KeyCode::ArrowLeft;
        _0 = Result::<KeyCode, Error>::Ok(move _20);
        goto -> bb30;
    }

    bb21: {
        _21 = KeyCode::Home;
        _0 = Result::<KeyCode, Error>::Ok(move _21);
        goto -> bb30;
    }

    bb22: {
        _22 = KeyCode::Insert;
        _0 = Result::<KeyCode, Error>::Ok(move _22);
        goto -> bb30;
    }

    bb23: {
        _23 = KeyCode::Delete;
        _0 = Result::<KeyCode, Error>::Ok(move _23);
        goto -> bb30;
    }

    bb24: {
        _24 = KeyCode::ArrowDown;
        _0 = Result::<KeyCode, Error>::Ok(move _24);
        goto -> bb30;
    }

    bb25: {
        _25 = KeyCode::ArrowRight;
        _0 = Result::<KeyCode, Error>::Ok(move _25);
        goto -> bb30;
    }

    bb26: {
        _26 = KeyCode::ArrowUp;
        _0 = Result::<KeyCode, Error>::Ok(move _26);
        goto -> bb30;
    }

    bb27: {
        _27 = KeyCode::PageDown;
        _0 = Result::<KeyCode, Error>::Ok(move _27);
        goto -> bb30;
    }

    bb28: {
        _28 = KeyCode::PrintScreen;
        _0 = Result::<KeyCode, Error>::Ok(move _28);
        goto -> bb30;
    }

    bb29: {
        _29 = KeyCode::PageUp;
        _0 = Result::<KeyCode, Error>::Ok(move _29);
        goto -> bb30;
    }

    bb30: {
        return;
    }
}

fn set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:16:1: 16:18>::map_extended2_scancode(_1: u8) -> Result<KeyCode, Error> {
    debug code => _1;
    let mut _0: core::result::Result<KeyCode, Error>;
    let mut _2: KeyCode;
    let mut _3: Error;

    bb0: {
        switchInt(_1) -> [20: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = Error::UnknownKeyCode;
        _0 = Result::<KeyCode, Error>::Err(move _3);
        goto -> bb3;
    }

    bb2: {
        _2 = KeyCode::RControl2;
        _0 = Result::<KeyCode, Error>::Ok(move _2);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:170:1: 170:34>::advance_state(_1: &mut ScancodeSet2, _2: u8) -> Result<Option<KeyEvent>, Error> {
    debug self => _1;
    debug code => _2;
    let mut _0: core::result::Result<core::option::Option<KeyEvent>, Error>;
    let mut _3: isize;
    let mut _4: DecodeState;
    let mut _5: core::option::Option<KeyEvent>;
    let mut _6: DecodeState;
    let mut _7: core::option::Option<KeyEvent>;
    let mut _8: DecodeState;
    let mut _9: core::option::Option<KeyEvent>;
    let _10: KeyCode;
    let mut _11: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>;
    let mut _12: core::result::Result<KeyCode, Error>;
    let mut _13: isize;
    let _14: core::result::Result<core::convert::Infallible, Error>;
    let _15: KeyCode;
    let mut _16: bool;
    let mut _17: &KeyCode;
    let mut _18: bool;
    let mut _19: &KeyCode;
    let mut _20: core::option::Option<KeyEvent>;
    let mut _21: KeyEvent;
    let mut _22: KeyCode;
    let mut _23: KeyState;
    let mut _24: core::option::Option<KeyEvent>;
    let mut _25: KeyEvent;
    let mut _26: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>;
    let mut _27: core::result::Result<KeyCode, Error>;
    let mut _28: isize;
    let mut _31: KeyState;
    let mut _32: DecodeState;
    let mut _33: core::option::Option<KeyEvent>;
    let mut _34: KeyEvent;
    let mut _35: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>;
    let mut _36: core::result::Result<KeyCode, Error>;
    let mut _37: isize;
    let _38: core::result::Result<core::convert::Infallible, Error>;
    let _39: KeyCode;
    let mut _40: KeyState;
    let mut _41: DecodeState;
    let mut _42: core::option::Option<KeyEvent>;
    let mut _43: DecodeState;
    let mut _44: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>;
    let mut _45: core::result::Result<KeyCode, Error>;
    let mut _46: isize;
    let _47: core::result::Result<core::convert::Infallible, Error>;
    let _48: KeyCode;
    let mut _49: core::option::Option<KeyEvent>;
    let mut _50: KeyEvent;
    let mut _51: KeyState;
    let mut _52: DecodeState;
    let mut _53: core::option::Option<KeyEvent>;
    let mut _54: KeyEvent;
    let mut _55: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>;
    let mut _56: core::result::Result<KeyCode, Error>;
    let mut _57: isize;
    let _58: core::result::Result<core::convert::Infallible, Error>;
    let _59: KeyCode;
    let mut _60: KeyState;
    let mut _61: DecodeState;
    let mut _62: core::option::Option<KeyEvent>;
    let mut _63: DecodeState;
    let mut _64: core::option::Option<KeyEvent>;
    let mut _65: KeyEvent;
    let mut _66: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>;
    let mut _67: core::result::Result<KeyCode, Error>;
    let mut _68: isize;
    let _69: core::result::Result<core::convert::Infallible, Error>;
    let _70: KeyCode;
    let mut _71: KeyState;
    let mut _72: DecodeState;
    let mut _73: core::option::Option<KeyEvent>;
    let mut _74: KeyEvent;
    let mut _75: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>;
    let mut _76: core::result::Result<KeyCode, Error>;
    let mut _77: isize;
    let _78: core::result::Result<core::convert::Infallible, Error>;
    let _79: KeyCode;
    let mut _80: KeyState;
    scope 1 {
        debug keycode => _10;
        let _29: core::result::Result<core::convert::Infallible, Error>;
        let _30: KeyCode;
        let mut _81: &KeyCode;
        let mut _82: &KeyCode;
        scope 6 {
            debug residual => _29;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _30;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }
    scope 10 {
        debug residual => _38;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _39;
        scope 13 {
        }
    }
    scope 14 {
        debug keycode => _48;
    }
    scope 15 {
        debug residual => _47;
        scope 16 {
        }
    }
    scope 17 {
        debug val => _48;
        scope 18 {
        }
    }
    scope 19 {
        debug residual => _58;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _59;
        scope 22 {
        }
    }
    scope 23 {
        debug residual => _69;
        scope 24 {
        }
    }
    scope 25 {
        debug val => _70;
        scope 26 {
        }
    }
    scope 27 {
        debug residual => _78;
        scope 28 {
        }
    }
    scope 29 {
        debug val => _79;
        scope 30 {
        }
    }

    bb0: {
        _3 = discriminant(((*_1).0: DecodeState));
        switchInt(move _3) -> [0: bb3, 1: bb29, 2: bb23, 3: bb37, 4: bb43, 5: bb1, otherwise: bb2];
    }

    bb1: {
        _72 = DecodeState::Start;
        ((*_1).0: DecodeState) = move _72;
        _76 = ScancodeSet2::map_extended2_scancode(_2) -> [return: bb51, unwind unreachable];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        switchInt(_2) -> [224: bb5, 225: bb6, 240: bb7, otherwise: bb4];
    }

    bb4: {
        _12 = ScancodeSet2::map_scancode(_2) -> [return: bb8, unwind unreachable];
    }

    bb5: {
        _4 = DecodeState::Extended;
        ((*_1).0: DecodeState) = move _4;
        _5 = Option::<KeyEvent>::None;
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _5);
        goto -> bb56;
    }

    bb6: {
        _6 = DecodeState::Extended2;
        ((*_1).0: DecodeState) = move _6;
        _7 = Option::<KeyEvent>::None;
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _7);
        goto -> bb56;
    }

    bb7: {
        _8 = DecodeState::Release;
        ((*_1).0: DecodeState) = move _8;
        _9 = Option::<KeyEvent>::None;
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _9);
        goto -> bb56;
    }

    bb8: {
        _11 = <Result<KeyCode, Error> as Try>::branch(move _12) -> [return: bb9, unwind unreachable];
    }

    bb9: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb10, 1: bb11, otherwise: bb2];
    }

    bb10: {
        _15 = ((_11 as Continue).0: KeyCode);
        _10 = _15;
        _17 = &_10;
        _82 = const _;
        _16 = <KeyCode as PartialEq>::eq(move _17, _82) -> [return: bb12, unwind unreachable];
    }

    bb11: {
        _14 = ((_11 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_14) -> [return: bb56, unwind unreachable];
    }

    bb12: {
        switchInt(move _16) -> [0: bb13, otherwise: bb15];
    }

    bb13: {
        _19 = &_10;
        _81 = const _;
        _18 = <KeyCode as PartialEq>::eq(move _19, _81) -> [return: bb14, unwind unreachable];
    }

    bb14: {
        switchInt(move _18) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        _22 = _10;
        _23 = KeyState::SingleShot;
        _21 = KeyEvent::new(move _22, move _23) -> [return: bb16, unwind unreachable];
    }

    bb16: {
        _20 = Option::<KeyEvent>::Some(move _21);
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _20);
        goto -> bb56;
    }

    bb17: {
        _27 = ScancodeSet2::map_scancode(_2) -> [return: bb18, unwind unreachable];
    }

    bb18: {
        _26 = <Result<KeyCode, Error> as Try>::branch(move _27) -> [return: bb19, unwind unreachable];
    }

    bb19: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb20, 1: bb21, otherwise: bb2];
    }

    bb20: {
        _30 = ((_26 as Continue).0: KeyCode);
        _31 = KeyState::Down;
        _25 = KeyEvent::new(_30, move _31) -> [return: bb22, unwind unreachable];
    }

    bb21: {
        _29 = ((_26 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_29) -> [return: bb56, unwind unreachable];
    }

    bb22: {
        _24 = Option::<KeyEvent>::Some(move _25);
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _24);
        goto -> bb56;
    }

    bb23: {
        _32 = DecodeState::Start;
        ((*_1).0: DecodeState) = move _32;
        _36 = ScancodeSet2::map_scancode(_2) -> [return: bb24, unwind unreachable];
    }

    bb24: {
        _35 = <Result<KeyCode, Error> as Try>::branch(move _36) -> [return: bb25, unwind unreachable];
    }

    bb25: {
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb26, 1: bb27, otherwise: bb2];
    }

    bb26: {
        _39 = ((_35 as Continue).0: KeyCode);
        _40 = KeyState::Up;
        _34 = KeyEvent::new(_39, move _40) -> [return: bb28, unwind unreachable];
    }

    bb27: {
        _38 = ((_35 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_38) -> [return: bb56, unwind unreachable];
    }

    bb28: {
        _33 = Option::<KeyEvent>::Some(move _34);
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _33);
        goto -> bb56;
    }

    bb29: {
        switchInt(_2) -> [240: bb31, otherwise: bb30];
    }

    bb30: {
        _43 = DecodeState::Start;
        ((*_1).0: DecodeState) = move _43;
        _45 = ScancodeSet2::map_extended_scancode(_2) -> [return: bb32, unwind unreachable];
    }

    bb31: {
        _41 = DecodeState::ExtendedRelease;
        ((*_1).0: DecodeState) = move _41;
        _42 = Option::<KeyEvent>::None;
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _42);
        goto -> bb56;
    }

    bb32: {
        _44 = <Result<KeyCode, Error> as Try>::branch(move _45) -> [return: bb33, unwind unreachable];
    }

    bb33: {
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb34, 1: bb35, otherwise: bb2];
    }

    bb34: {
        _48 = ((_44 as Continue).0: KeyCode);
        _51 = KeyState::Down;
        _50 = KeyEvent::new(_48, move _51) -> [return: bb36, unwind unreachable];
    }

    bb35: {
        _47 = ((_44 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_47) -> [return: bb56, unwind unreachable];
    }

    bb36: {
        _49 = Option::<KeyEvent>::Some(move _50);
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _49);
        goto -> bb56;
    }

    bb37: {
        _52 = DecodeState::Start;
        ((*_1).0: DecodeState) = move _52;
        _56 = ScancodeSet2::map_extended_scancode(_2) -> [return: bb38, unwind unreachable];
    }

    bb38: {
        _55 = <Result<KeyCode, Error> as Try>::branch(move _56) -> [return: bb39, unwind unreachable];
    }

    bb39: {
        _57 = discriminant(_55);
        switchInt(move _57) -> [0: bb40, 1: bb41, otherwise: bb2];
    }

    bb40: {
        _59 = ((_55 as Continue).0: KeyCode);
        _60 = KeyState::Up;
        _54 = KeyEvent::new(_59, move _60) -> [return: bb42, unwind unreachable];
    }

    bb41: {
        _58 = ((_55 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_58) -> [return: bb56, unwind unreachable];
    }

    bb42: {
        _53 = Option::<KeyEvent>::Some(move _54);
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _53);
        goto -> bb56;
    }

    bb43: {
        switchInt(_2) -> [240: bb45, otherwise: bb44];
    }

    bb44: {
        _63 = DecodeState::Start;
        ((*_1).0: DecodeState) = move _63;
        _67 = ScancodeSet2::map_extended2_scancode(_2) -> [return: bb46, unwind unreachable];
    }

    bb45: {
        _61 = DecodeState::Extended2Release;
        ((*_1).0: DecodeState) = move _61;
        _62 = Option::<KeyEvent>::None;
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _62);
        goto -> bb56;
    }

    bb46: {
        _66 = <Result<KeyCode, Error> as Try>::branch(move _67) -> [return: bb47, unwind unreachable];
    }

    bb47: {
        _68 = discriminant(_66);
        switchInt(move _68) -> [0: bb48, 1: bb49, otherwise: bb2];
    }

    bb48: {
        _70 = ((_66 as Continue).0: KeyCode);
        _71 = KeyState::Down;
        _65 = KeyEvent::new(_70, move _71) -> [return: bb50, unwind unreachable];
    }

    bb49: {
        _69 = ((_66 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_69) -> [return: bb56, unwind unreachable];
    }

    bb50: {
        _64 = Option::<KeyEvent>::Some(move _65);
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _64);
        goto -> bb56;
    }

    bb51: {
        _75 = <Result<KeyCode, Error> as Try>::branch(move _76) -> [return: bb52, unwind unreachable];
    }

    bb52: {
        _77 = discriminant(_75);
        switchInt(move _77) -> [0: bb53, 1: bb54, otherwise: bb2];
    }

    bb53: {
        _79 = ((_75 as Continue).0: KeyCode);
        _80 = KeyState::Up;
        _74 = KeyEvent::new(_79, move _80) -> [return: bb55, unwind unreachable];
    }

    bb54: {
        _78 = ((_75 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_78) -> [return: bb56, unwind unreachable];
    }

    bb55: {
        _73 = Option::<KeyEvent>::Some(move _74);
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _73);
        goto -> bb56;
    }

    bb56: {
        return;
    }
}

promoted[0] in set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:170:1: 170:34>::advance_state: &KeyCode = {
    let mut _0: &KeyCode;
    let mut _1: KeyCode;

    bb0: {
        _1 = KeyCode::PowerOnTestOk;
        _0 = &_1;
        return;
    }
}

promoted[1] in set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:170:1: 170:34>::advance_state: &KeyCode = {
    let mut _0: &KeyCode;
    let mut _1: KeyCode;

    bb0: {
        _1 = KeyCode::TooManyKeys;
        _0 = &_1;
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:40:10: 40:15>::fmt(_1: &Keyboard<L, S>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: core::result::Result<(), core::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn core::fmt::Debug;
    let _6: &Ps2Decoder;
    let _7: &str;
    let mut _8: &dyn core::fmt::Debug;
    let _9: &S;
    let _10: &str;
    let mut _11: &dyn core::fmt::Debug;
    let _12: &&EventDecoder<L>;
    let _13: &EventDecoder<L>;

    bb0: {
        _3 = const "Keyboard";
        _4 = const "ps2_decoder";
        _6 = &((*_1).0: Ps2Decoder);
        _5 = _6 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "scancode_set";
        _9 = &((*_1).1: S);
        _8 = _9 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "event_decoder";
        _13 = &((*_1).2: EventDecoder<L>);
        _12 = &_13;
        _11 = _12 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:52:10: 52:15>::fmt(_1: &Ps2Decoder, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: core::result::Result<(), core::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn core::fmt::Debug;
    let _6: &u16;
    let _7: &str;
    let mut _8: &dyn core::fmt::Debug;
    let _9: &&u8;
    let _10: &u8;

    bb0: {
        _3 = const "Ps2Decoder";
        _4 = const "register";
        _6 = &((*_1).0: u16);
        _5 = _6 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "num_bits";
        _10 = &((*_1).1: u8);
        _9 = &_10;
        _8 = _9 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:59:10: 59:15>::fmt(_1: &EventDecoder<L>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: core::result::Result<(), core::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn core::fmt::Debug;
    let _6: &HandleControl;
    let _7: &str;
    let mut _8: &dyn core::fmt::Debug;
    let _9: &Modifiers;
    let _10: &str;
    let mut _11: &dyn core::fmt::Debug;
    let _12: &&L;
    let _13: &L;

    bb0: {
        _3 = const "EventDecoder";
        _4 = const "handle_ctrl";
        _6 = &((*_1).0: HandleControl);
        _5 = _6 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "modifiers";
        _9 = &((*_1).1: Modifiers);
        _8 = _9 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "layout";
        _13 = &((*_1).2: L);
        _12 = &_13;
        _11 = _12 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15>::fmt(_1: &Error, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: core::result::Result<(), core::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let _9: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb1, otherwise: bb2];
    }

    bb1: {
        _9 = const "InvalidState";
        _3 = _9;
        goto -> bb7;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "BadStartBit";
        _3 = _5;
        goto -> bb7;
    }

    bb4: {
        _6 = const "BadStopBit";
        _3 = _6;
        goto -> bb7;
    }

    bb5: {
        _7 = const "ParityError";
        _3 = _7;
        goto -> bb7;
    }

    bb6: {
        _8 = const "UnknownKeyCode";
        _3 = _8;
        goto -> bb7;
    }

    bb7: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb8, unwind unreachable];
    }

    bb8: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:17: 70:26>::eq(_1: &Error, _2: &Error) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:28: 70:30>::assert_receiver_is_total_eq(_1: &Error) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:38: 70:43>::clone(_1: &Error) -> Error {
    debug self => _1;
    let mut _0: Error;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15>::fmt(_1: &KeyCode, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: core::result::Result<(), core::fmt::Error>;
    let mut _3: &str;
    let mut _4: u8;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let _9: &str;
    let _10: &str;
    let _11: &str;
    let _12: &str;
    let _13: &str;
    let _14: &str;
    let _15: &str;
    let _16: &str;
    let _17: &str;
    let _18: &str;
    let _19: &str;
    let _20: &str;
    let _21: &str;
    let _22: &str;
    let _23: &str;
    let _24: &str;
    let _25: &str;
    let _26: &str;
    let _27: &str;
    let _28: &str;
    let _29: &str;
    let _30: &str;
    let _31: &str;
    let _32: &str;
    let _33: &str;
    let _34: &str;
    let _35: &str;
    let _36: &str;
    let _37: &str;
    let _38: &str;
    let _39: &str;
    let _40: &str;
    let _41: &str;
    let _42: &str;
    let _43: &str;
    let _44: &str;
    let _45: &str;
    let _46: &str;
    let _47: &str;
    let _48: &str;
    let _49: &str;
    let _50: &str;
    let _51: &str;
    let _52: &str;
    let _53: &str;
    let _54: &str;
    let _55: &str;
    let _56: &str;
    let _57: &str;
    let _58: &str;
    let _59: &str;
    let _60: &str;
    let _61: &str;
    let _62: &str;
    let _63: &str;
    let _64: &str;
    let _65: &str;
    let _66: &str;
    let _67: &str;
    let _68: &str;
    let _69: &str;
    let _70: &str;
    let _71: &str;
    let _72: &str;
    let _73: &str;
    let _74: &str;
    let _75: &str;
    let _76: &str;
    let _77: &str;
    let _78: &str;
    let _79: &str;
    let _80: &str;
    let _81: &str;
    let _82: &str;
    let _83: &str;
    let _84: &str;
    let _85: &str;
    let _86: &str;
    let _87: &str;
    let _88: &str;
    let _89: &str;
    let _90: &str;
    let _91: &str;
    let _92: &str;
    let _93: &str;
    let _94: &str;
    let _95: &str;
    let _96: &str;
    let _97: &str;
    let _98: &str;
    let _99: &str;
    let _100: &str;
    let _101: &str;
    let _102: &str;
    let _103: &str;
    let _104: &str;
    let _105: &str;
    let _106: &str;
    let _107: &str;
    let _108: &str;
    let _109: &str;
    let _110: &str;
    let _111: &str;
    let _112: &str;
    let _113: &str;
    let _114: &str;
    let _115: &str;
    let _116: &str;
    let _117: &str;
    let _118: &str;
    let _119: &str;
    let _120: &str;
    let _121: &str;
    let _122: &str;
    let _123: &str;
    let _124: &str;
    let _125: &str;
    let _126: &str;
    let _127: &str;
    let _128: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb18, 16: bb19, 17: bb20, 18: bb21, 19: bb22, 20: bb23, 21: bb24, 22: bb25, 23: bb26, 24: bb27, 25: bb28, 26: bb29, 27: bb30, 28: bb31, 29: bb32, 30: bb33, 31: bb34, 32: bb35, 33: bb36, 34: bb37, 35: bb38, 36: bb39, 37: bb40, 38: bb41, 39: bb42, 40: bb43, 41: bb44, 42: bb45, 43: bb46, 44: bb47, 45: bb48, 46: bb49, 47: bb50, 48: bb51, 49: bb52, 50: bb53, 51: bb54, 52: bb55, 53: bb56, 54: bb57, 55: bb58, 56: bb59, 57: bb60, 58: bb61, 59: bb62, 60: bb63, 61: bb64, 62: bb65, 63: bb66, 64: bb67, 65: bb68, 66: bb69, 67: bb70, 68: bb71, 69: bb72, 70: bb73, 71: bb74, 72: bb75, 73: bb76, 74: bb77, 75: bb78, 76: bb79, 77: bb80, 78: bb81, 79: bb82, 80: bb83, 81: bb84, 82: bb85, 83: bb86, 84: bb87, 85: bb88, 86: bb89, 87: bb90, 88: bb91, 89: bb92, 90: bb93, 91: bb94, 92: bb95, 93: bb96, 94: bb97, 95: bb98, 96: bb99, 97: bb100, 98: bb101, 99: bb102, 100: bb103, 101: bb104, 102: bb105, 103: bb106, 104: bb107, 105: bb108, 106: bb109, 107: bb110, 108: bb111, 109: bb112, 110: bb113, 111: bb114, 112: bb115, 113: bb116, 114: bb117, 115: bb118, 116: bb119, 117: bb120, 118: bb121, 119: bb122, 120: bb123, 121: bb124, 122: bb125, 123: bb1, otherwise: bb2];
    }

    bb1: {
        _128 = const "RAlt2";
        _3 = _128;
        goto -> bb126;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Escape";
        _3 = _5;
        goto -> bb126;
    }

    bb4: {
        _6 = const "F1";
        _3 = _6;
        goto -> bb126;
    }

    bb5: {
        _7 = const "F2";
        _3 = _7;
        goto -> bb126;
    }

    bb6: {
        _8 = const "F3";
        _3 = _8;
        goto -> bb126;
    }

    bb7: {
        _9 = const "F4";
        _3 = _9;
        goto -> bb126;
    }

    bb8: {
        _10 = const "F5";
        _3 = _10;
        goto -> bb126;
    }

    bb9: {
        _11 = const "F6";
        _3 = _11;
        goto -> bb126;
    }

    bb10: {
        _12 = const "F7";
        _3 = _12;
        goto -> bb126;
    }

    bb11: {
        _13 = const "F8";
        _3 = _13;
        goto -> bb126;
    }

    bb12: {
        _14 = const "F9";
        _3 = _14;
        goto -> bb126;
    }

    bb13: {
        _15 = const "F10";
        _3 = _15;
        goto -> bb126;
    }

    bb14: {
        _16 = const "F11";
        _3 = _16;
        goto -> bb126;
    }

    bb15: {
        _17 = const "F12";
        _3 = _17;
        goto -> bb126;
    }

    bb16: {
        _18 = const "PrintScreen";
        _3 = _18;
        goto -> bb126;
    }

    bb17: {
        _19 = const "SysRq";
        _3 = _19;
        goto -> bb126;
    }

    bb18: {
        _20 = const "ScrollLock";
        _3 = _20;
        goto -> bb126;
    }

    bb19: {
        _21 = const "PauseBreak";
        _3 = _21;
        goto -> bb126;
    }

    bb20: {
        _22 = const "Oem8";
        _3 = _22;
        goto -> bb126;
    }

    bb21: {
        _23 = const "Key1";
        _3 = _23;
        goto -> bb126;
    }

    bb22: {
        _24 = const "Key2";
        _3 = _24;
        goto -> bb126;
    }

    bb23: {
        _25 = const "Key3";
        _3 = _25;
        goto -> bb126;
    }

    bb24: {
        _26 = const "Key4";
        _3 = _26;
        goto -> bb126;
    }

    bb25: {
        _27 = const "Key5";
        _3 = _27;
        goto -> bb126;
    }

    bb26: {
        _28 = const "Key6";
        _3 = _28;
        goto -> bb126;
    }

    bb27: {
        _29 = const "Key7";
        _3 = _29;
        goto -> bb126;
    }

    bb28: {
        _30 = const "Key8";
        _3 = _30;
        goto -> bb126;
    }

    bb29: {
        _31 = const "Key9";
        _3 = _31;
        goto -> bb126;
    }

    bb30: {
        _32 = const "Key0";
        _3 = _32;
        goto -> bb126;
    }

    bb31: {
        _33 = const "OemMinus";
        _3 = _33;
        goto -> bb126;
    }

    bb32: {
        _34 = const "OemPlus";
        _3 = _34;
        goto -> bb126;
    }

    bb33: {
        _35 = const "Backspace";
        _3 = _35;
        goto -> bb126;
    }

    bb34: {
        _36 = const "Insert";
        _3 = _36;
        goto -> bb126;
    }

    bb35: {
        _37 = const "Home";
        _3 = _37;
        goto -> bb126;
    }

    bb36: {
        _38 = const "PageUp";
        _3 = _38;
        goto -> bb126;
    }

    bb37: {
        _39 = const "NumpadLock";
        _3 = _39;
        goto -> bb126;
    }

    bb38: {
        _40 = const "NumpadDivide";
        _3 = _40;
        goto -> bb126;
    }

    bb39: {
        _41 = const "NumpadMultiply";
        _3 = _41;
        goto -> bb126;
    }

    bb40: {
        _42 = const "NumpadSubtract";
        _3 = _42;
        goto -> bb126;
    }

    bb41: {
        _43 = const "Tab";
        _3 = _43;
        goto -> bb126;
    }

    bb42: {
        _44 = const "Q";
        _3 = _44;
        goto -> bb126;
    }

    bb43: {
        _45 = const "W";
        _3 = _45;
        goto -> bb126;
    }

    bb44: {
        _46 = const "E";
        _3 = _46;
        goto -> bb126;
    }

    bb45: {
        _47 = const "R";
        _3 = _47;
        goto -> bb126;
    }

    bb46: {
        _48 = const "T";
        _3 = _48;
        goto -> bb126;
    }

    bb47: {
        _49 = const "Y";
        _3 = _49;
        goto -> bb126;
    }

    bb48: {
        _50 = const "U";
        _3 = _50;
        goto -> bb126;
    }

    bb49: {
        _51 = const "I";
        _3 = _51;
        goto -> bb126;
    }

    bb50: {
        _52 = const "O";
        _3 = _52;
        goto -> bb126;
    }

    bb51: {
        _53 = const "P";
        _3 = _53;
        goto -> bb126;
    }

    bb52: {
        _54 = const "Oem4";
        _3 = _54;
        goto -> bb126;
    }

    bb53: {
        _55 = const "Oem6";
        _3 = _55;
        goto -> bb126;
    }

    bb54: {
        _56 = const "Oem5";
        _3 = _56;
        goto -> bb126;
    }

    bb55: {
        _57 = const "Oem7";
        _3 = _57;
        goto -> bb126;
    }

    bb56: {
        _58 = const "Delete";
        _3 = _58;
        goto -> bb126;
    }

    bb57: {
        _59 = const "End";
        _3 = _59;
        goto -> bb126;
    }

    bb58: {
        _60 = const "PageDown";
        _3 = _60;
        goto -> bb126;
    }

    bb59: {
        _61 = const "Numpad7";
        _3 = _61;
        goto -> bb126;
    }

    bb60: {
        _62 = const "Numpad8";
        _3 = _62;
        goto -> bb126;
    }

    bb61: {
        _63 = const "Numpad9";
        _3 = _63;
        goto -> bb126;
    }

    bb62: {
        _64 = const "NumpadAdd";
        _3 = _64;
        goto -> bb126;
    }

    bb63: {
        _65 = const "CapsLock";
        _3 = _65;
        goto -> bb126;
    }

    bb64: {
        _66 = const "A";
        _3 = _66;
        goto -> bb126;
    }

    bb65: {
        _67 = const "S";
        _3 = _67;
        goto -> bb126;
    }

    bb66: {
        _68 = const "D";
        _3 = _68;
        goto -> bb126;
    }

    bb67: {
        _69 = const "F";
        _3 = _69;
        goto -> bb126;
    }

    bb68: {
        _70 = const "G";
        _3 = _70;
        goto -> bb126;
    }

    bb69: {
        _71 = const "H";
        _3 = _71;
        goto -> bb126;
    }

    bb70: {
        _72 = const "J";
        _3 = _72;
        goto -> bb126;
    }

    bb71: {
        _73 = const "K";
        _3 = _73;
        goto -> bb126;
    }

    bb72: {
        _74 = const "L";
        _3 = _74;
        goto -> bb126;
    }

    bb73: {
        _75 = const "Oem1";
        _3 = _75;
        goto -> bb126;
    }

    bb74: {
        _76 = const "Oem3";
        _3 = _76;
        goto -> bb126;
    }

    bb75: {
        _77 = const "Return";
        _3 = _77;
        goto -> bb126;
    }

    bb76: {
        _78 = const "Numpad4";
        _3 = _78;
        goto -> bb126;
    }

    bb77: {
        _79 = const "Numpad5";
        _3 = _79;
        goto -> bb126;
    }

    bb78: {
        _80 = const "Numpad6";
        _3 = _80;
        goto -> bb126;
    }

    bb79: {
        _81 = const "LShift";
        _3 = _81;
        goto -> bb126;
    }

    bb80: {
        _82 = const "Z";
        _3 = _82;
        goto -> bb126;
    }

    bb81: {
        _83 = const "X";
        _3 = _83;
        goto -> bb126;
    }

    bb82: {
        _84 = const "C";
        _3 = _84;
        goto -> bb126;
    }

    bb83: {
        _85 = const "V";
        _3 = _85;
        goto -> bb126;
    }

    bb84: {
        _86 = const "B";
        _3 = _86;
        goto -> bb126;
    }

    bb85: {
        _87 = const "N";
        _3 = _87;
        goto -> bb126;
    }

    bb86: {
        _88 = const "M";
        _3 = _88;
        goto -> bb126;
    }

    bb87: {
        _89 = const "OemComma";
        _3 = _89;
        goto -> bb126;
    }

    bb88: {
        _90 = const "OemPeriod";
        _3 = _90;
        goto -> bb126;
    }

    bb89: {
        _91 = const "Oem2";
        _3 = _91;
        goto -> bb126;
    }

    bb90: {
        _92 = const "RShift";
        _3 = _92;
        goto -> bb126;
    }

    bb91: {
        _93 = const "ArrowUp";
        _3 = _93;
        goto -> bb126;
    }

    bb92: {
        _94 = const "Numpad1";
        _3 = _94;
        goto -> bb126;
    }

    bb93: {
        _95 = const "Numpad2";
        _3 = _95;
        goto -> bb126;
    }

    bb94: {
        _96 = const "Numpad3";
        _3 = _96;
        goto -> bb126;
    }

    bb95: {
        _97 = const "NumpadEnter";
        _3 = _97;
        goto -> bb126;
    }

    bb96: {
        _98 = const "LControl";
        _3 = _98;
        goto -> bb126;
    }

    bb97: {
        _99 = const "LWin";
        _3 = _99;
        goto -> bb126;
    }

    bb98: {
        _100 = const "LAlt";
        _3 = _100;
        goto -> bb126;
    }

    bb99: {
        _101 = const "Spacebar";
        _3 = _101;
        goto -> bb126;
    }

    bb100: {
        _102 = const "RAltGr";
        _3 = _102;
        goto -> bb126;
    }

    bb101: {
        _103 = const "RWin";
        _3 = _103;
        goto -> bb126;
    }

    bb102: {
        _104 = const "Apps";
        _3 = _104;
        goto -> bb126;
    }

    bb103: {
        _105 = const "RControl";
        _3 = _105;
        goto -> bb126;
    }

    bb104: {
        _106 = const "ArrowLeft";
        _3 = _106;
        goto -> bb126;
    }

    bb105: {
        _107 = const "ArrowDown";
        _3 = _107;
        goto -> bb126;
    }

    bb106: {
        _108 = const "ArrowRight";
        _3 = _108;
        goto -> bb126;
    }

    bb107: {
        _109 = const "Numpad0";
        _3 = _109;
        goto -> bb126;
    }

    bb108: {
        _110 = const "NumpadPeriod";
        _3 = _110;
        goto -> bb126;
    }

    bb109: {
        _111 = const "Oem9";
        _3 = _111;
        goto -> bb126;
    }

    bb110: {
        _112 = const "Oem10";
        _3 = _112;
        goto -> bb126;
    }

    bb111: {
        _113 = const "Oem11";
        _3 = _113;
        goto -> bb126;
    }

    bb112: {
        _114 = const "Oem12";
        _3 = _114;
        goto -> bb126;
    }

    bb113: {
        _115 = const "Oem13";
        _3 = _115;
        goto -> bb126;
    }

    bb114: {
        _116 = const "PrevTrack";
        _3 = _116;
        goto -> bb126;
    }

    bb115: {
        _117 = const "NextTrack";
        _3 = _117;
        goto -> bb126;
    }

    bb116: {
        _118 = const "Mute";
        _3 = _118;
        goto -> bb126;
    }

    bb117: {
        _119 = const "Calculator";
        _3 = _119;
        goto -> bb126;
    }

    bb118: {
        _120 = const "Play";
        _3 = _120;
        goto -> bb126;
    }

    bb119: {
        _121 = const "Stop";
        _3 = _121;
        goto -> bb126;
    }

    bb120: {
        _122 = const "VolumeDown";
        _3 = _122;
        goto -> bb126;
    }

    bb121: {
        _123 = const "VolumeUp";
        _3 = _123;
        goto -> bb126;
    }

    bb122: {
        _124 = const "WWWHome";
        _3 = _124;
        goto -> bb126;
    }

    bb123: {
        _125 = const "PowerOnTestOk";
        _3 = _125;
        goto -> bb126;
    }

    bb124: {
        _126 = const "TooManyKeys";
        _3 = _126;
        goto -> bb126;
    }

    bb125: {
        _127 = const "RControl2";
        _3 = _127;
        goto -> bb126;
    }

    bb126: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb127, unwind unreachable];
    }

    bb127: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:17: 85:26>::eq(_1: &KeyCode, _2: &KeyCode) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: u8;
    scope 1 {
        debug __self_tag => _3;
        let _4: u8;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:28: 85:30>::assert_receiver_is_total_eq(_1: &KeyCode) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:38: 85:43>::clone(_1: &KeyCode) -> KeyCode {
    debug self => _1;
    let mut _0: KeyCode;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55>::partial_cmp(_1: &KeyCode, _2: &KeyCode) -> Option<core::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: core::option::Option<core::cmp::Ordering>;
    let _3: u8;
    let _5: &u8;
    let _6: &u8;
    scope 1 {
        debug __self_tag => _3;
        let _4: u8;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = &_3;
        _6 = &_4;
        _0 = <u8 as PartialOrd>::partial_cmp(_5, _6) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60>::cmp(_1: &KeyCode, _2: &KeyCode) -> core::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: core::cmp::Ordering;
    let _3: u8;
    let _5: &u8;
    let _6: &u8;
    scope 1 {
        debug __self_tag => _3;
        let _4: u8;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = &_3;
        _6 = &_4;
        _0 = <u8 as Ord>::cmp(_5, _6) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15>::fmt(_1: &KeyState, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: core::result::Result<(), core::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "SingleShot";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Up";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "Down";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb6, unwind unreachable];
    }

    bb6: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:17: 365:26>::eq(_1: &KeyState, _2: &KeyState) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:28: 365:30>::assert_receiver_is_total_eq(_1: &KeyState) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:38: 365:43>::clone(_1: &KeyState) -> KeyState {
    debug self => _1;
    let mut _0: KeyState;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15>::fmt(_1: &HandleControl, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: core::result::Result<(), core::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = const "Ignore";
        _3 = _6;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "MapLettersToUnicode";
        _3 = _5;
        goto -> bb4;
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb5, unwind unreachable];
    }

    bb5: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:17: 378:26>::eq(_1: &HandleControl, _2: &HandleControl) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:28: 378:30>::assert_receiver_is_total_eq(_1: &HandleControl) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:38: 378:43>::clone(_1: &HandleControl) -> HandleControl {
    debug self => _1;
    let mut _0: HandleControl;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:10: 390:15>::fmt(_1: &KeyEvent, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: core::result::Result<(), core::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn core::fmt::Debug;
    let _6: &KeyCode;
    let _7: &str;
    let mut _8: &dyn core::fmt::Debug;
    let _9: &&KeyState;
    let _10: &KeyState;

    bb0: {
        _3 = const "KeyEvent";
        _4 = const "code";
        _6 = &((*_1).0: KeyCode);
        _5 = _6 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "state";
        _10 = &((*_1).1: KeyState);
        _9 = &_10;
        _8 = _9 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:17: 390:26>::eq(_1: &KeyEvent, _2: &KeyEvent) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &KeyCode;
    let mut _5: &KeyCode;
    let mut _6: &KeyState;
    let mut _7: &KeyState;

    bb0: {
        _4 = &((*_1).0: KeyCode);
        _5 = &((*_2).0: KeyCode);
        _3 = <KeyCode as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = &((*_1).1: KeyState);
        _7 = &((*_2).1: KeyState);
        _0 = <KeyState as PartialEq>::eq(move _6, move _7) -> [return: bb4, unwind unreachable];
    }

    bb3: {
        _0 = const false;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:28: 390:30>::assert_receiver_is_total_eq(_1: &KeyEvent) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:32: 390:37>::clone(_1: &KeyEvent) -> KeyEvent {
    debug self => _1;
    let mut _0: KeyEvent;
    let mut _2: KeyCode;
    let _3: &KeyCode;
    let mut _4: KeyState;
    let _5: &KeyState;

    bb0: {
        _3 = &((*_1).0: KeyCode);
        _2 = <KeyCode as Clone>::clone(_3) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _5 = &((*_1).1: KeyState);
        _4 = <KeyState as Clone>::clone(_5) -> [return: bb2, unwind unreachable];
    }

    bb2: {
        _0 = KeyEvent { code: move _2, state: move _4 };
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15>::fmt(_1: &Modifiers, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: core::result::Result<(), core::fmt::Error>;
    let _4: &[&dyn core::fmt::Debug; 8];
    let _5: [&dyn core::fmt::Debug; 8];
    let mut _6: &dyn core::fmt::Debug;
    let _7: &bool;
    let mut _8: &dyn core::fmt::Debug;
    let _9: &bool;
    let mut _10: &dyn core::fmt::Debug;
    let _11: &bool;
    let mut _12: &dyn core::fmt::Debug;
    let _13: &bool;
    let mut _14: &dyn core::fmt::Debug;
    let _15: &bool;
    let mut _16: &dyn core::fmt::Debug;
    let _17: &bool;
    let mut _18: &dyn core::fmt::Debug;
    let _19: &bool;
    let mut _20: &dyn core::fmt::Debug;
    let _21: &&bool;
    let _22: &bool;
    let _23: &str;
    let mut _24: &[&str];
    let mut _25: &[&str; 8];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn core::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _25 = const _;
        _7 = &((*_1).0: bool);
        _6 = _7 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: bool);
        _8 = _9 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: bool);
        _10 = _11 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: bool);
        _12 = _13 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: bool);
        _14 = _15 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _17 = &((*_1).5: bool);
        _16 = _17 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _19 = &((*_1).6: bool);
        _18 = _19 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _22 = &((*_1).7: bool);
        _21 = &_22;
        _20 = _21 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20];
        _4 = &_5;
        _3 = _4 as &[&dyn core::fmt::Debug] (PointerCoercion(Unsize));
        _23 = const "Modifiers";
        _24 = _25 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _23, move _24, _3) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

promoted[0] in <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15>::fmt: &[&str; 8] = {
    let mut _0: &[&str; 8];
    let mut _1: [&str; 8];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;

    bb0: {
        _3 = const "rshift";
        _2 = &(*_3);
        _5 = const "lctrl";
        _4 = &(*_5);
        _7 = const "rctrl";
        _6 = &(*_7);
        _9 = const "numlock";
        _8 = &(*_9);
        _11 = const "capslock";
        _10 = &(*_11);
        _13 = const "alt_gr";
        _12 = &(*_13);
        _15 = const "rctrl2";
        _14 = &(*_15);
        _1 = [const "lshift", move _2, move _4, move _6, move _8, move _10, move _12, move _14];
        _0 = &_1;
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:17: 423:24>::default() -> Modifiers {
    let mut _0: Modifiers;
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;

    bb0: {
        _1 = <bool as Default>::default() -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _2 = <bool as Default>::default() -> [return: bb2, unwind unreachable];
    }

    bb2: {
        _3 = <bool as Default>::default() -> [return: bb3, unwind unreachable];
    }

    bb3: {
        _4 = <bool as Default>::default() -> [return: bb4, unwind unreachable];
    }

    bb4: {
        _5 = <bool as Default>::default() -> [return: bb5, unwind unreachable];
    }

    bb5: {
        _6 = <bool as Default>::default() -> [return: bb6, unwind unreachable];
    }

    bb6: {
        _7 = <bool as Default>::default() -> [return: bb7, unwind unreachable];
    }

    bb7: {
        _8 = <bool as Default>::default() -> [return: bb8, unwind unreachable];
    }

    bb8: {
        _0 = Modifiers { lshift: move _1, rshift: move _2, lctrl: move _3, rctrl: move _4, numlock: move _5, capslock: move _6, alt_gr: move _7, rctrl2: move _8 };
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15>::fmt(_1: &DecodedKey, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: core::result::Result<(), core::fmt::Error>;
    let mut _3: isize;
    let _4: &KeyCode;
    let _5: &str;
    let mut _6: &dyn core::fmt::Debug;
    let _7: &&KeyCode;
    let _8: &char;
    let _9: &str;
    let mut _10: &dyn core::fmt::Debug;
    let _11: &&char;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &(((*_1) as Unicode).0: char);
        _9 = const "Unicode";
        _11 = &_8;
        _10 = _11 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb4, unwind unreachable];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as RawKey).0: KeyCode);
        _5 = const "RawKey";
        _7 = &_4;
        _6 = _7 as &dyn core::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26>::eq(_1: &DecodedKey, _2: &DecodedKey) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&DecodedKey, &DecodedKey);
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _14: char;
    let mut _15: char;
    let mut _16: &DecodedKey;
    let mut _17: &DecodedKey;
    let mut _18: &DecodedKey;
    let mut _19: &DecodedKey;
    let mut _20: &DecodedKey;
    let mut _21: &DecodedKey;
    let mut _22: &DecodedKey;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &KeyCode;
            let _11: &KeyCode;
            let _12: &char;
            let _13: &char;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
            scope 4 {
                debug __self_0 => _12;
                debug __arg1_0 => _13;
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _16 = deref_copy (_6.0: &DecodedKey);
        _9 = discriminant((*_16));
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb2: {
        _0 = const false;
        goto -> bb8;
    }

    bb3: {
        _17 = deref_copy (_6.1: &DecodedKey);
        _7 = discriminant((*_17));
        switchInt(move _7) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _18 = deref_copy (_6.1: &DecodedKey);
        _8 = discriminant((*_18));
        switchInt(move _8) -> [1: bb7, otherwise: bb4];
    }

    bb6: {
        _19 = deref_copy (_6.0: &DecodedKey);
        _10 = &(((*_19) as RawKey).0: KeyCode);
        _20 = deref_copy (_6.1: &DecodedKey);
        _11 = &(((*_20) as RawKey).0: KeyCode);
        _0 = <KeyCode as PartialEq>::eq(_10, _11) -> [return: bb8, unwind unreachable];
    }

    bb7: {
        _21 = deref_copy (_6.0: &DecodedKey);
        _12 = &(((*_21) as Unicode).0: char);
        _22 = deref_copy (_6.1: &DecodedKey);
        _13 = &(((*_22) as Unicode).0: char);
        _14 = (*_12);
        _15 = (*_13);
        _0 = Eq(move _14, move _15);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:28: 444:30>::assert_receiver_is_total_eq(_1: &DecodedKey) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:38: 444:43>::clone(_1: &DecodedKey) -> DecodedKey {
    debug self => _1;
    let mut _0: DecodedKey;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15>::fmt(_1: &DecodeState, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: core::result::Result<(), core::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let _9: &str;
    let _10: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb1, otherwise: bb2];
    }

    bb1: {
        _10 = const "Extended2Release";
        _3 = _10;
        goto -> bb8;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Start";
        _3 = _5;
        goto -> bb8;
    }

    bb4: {
        _6 = const "Extended";
        _3 = _6;
        goto -> bb8;
    }

    bb5: {
        _7 = const "Release";
        _3 = _7;
        goto -> bb8;
    }

    bb6: {
        _8 = const "ExtendedRelease";
        _3 = _8;
        goto -> bb8;
    }

    bb7: {
        _9 = const "Extended2";
        _3 = _9;
        goto -> bb8;
    }

    bb8: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb9, unwind unreachable];
    }

    bb9: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:23: 465:28>::clone(_1: &DecodeState) -> DecodeState {
    debug self => _1;
    let mut _0: DecodeState;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:30: 465:32>::assert_receiver_is_total_eq(_1: &DecodeState) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:34: 465:43>::eq(_1: &DecodeState, _2: &DecodeState) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

const KEYCODE_BITS: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 11_u8;
        return;
    }
}

const EXTENDED_KEY_CODE: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 224_u8;
        return;
    }
}

const EXTENDED2_KEY_CODE: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 225_u8;
        return;
    }
}

const KEY_RELEASE_CODE: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 240_u8;
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 495:20>::new(_1: S, _2: L, _3: HandleControl) -> Keyboard<L, S> {
    debug scancode_set => _1;
    debug layout => _2;
    debug handle_ctrl => _3;
    let mut _0: Keyboard<L, S>;
    let mut _4: Ps2Decoder;
    let mut _5: EventDecoder<L>;

    bb0: {
        _4 = Ps2Decoder::new() -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _5 = EventDecoder::<L>::new(move _2, _3) -> [return: bb2, unwind unreachable];
    }

    bb2: {
        _0 = Keyboard::<L, S> { ps2_decoder: move _4, scancode_set: move _1, event_decoder: move _5 };
        return;
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 495:20>::new(_1: S, _2: L, _3: HandleControl) -> Keyboard<L, S> {
    debug scancode_set => _1;
    debug layout => _2;
    debug handle_ctrl => _3;
    let mut _0: Keyboard<L, S>;
    let mut _4: Ps2Decoder;
    let mut _5: S;
    let mut _6: EventDecoder<L>;
    let mut _7: L;
    let mut _8: HandleControl;
    let mut _9: bool;
    let mut _10: bool;

    bb0: {
        _10 = const false;
        _9 = const false;
        _10 = const true;
        _9 = const true;
        StorageLive(_4);
        ConstEvalCounter;
        _4 = Ps2Decoder::new() -> [return: bb1, unwind unreachable];
    }

    bb1: {
        StorageLive(_5);
        _10 = const false;
        _5 = move _1;
        StorageLive(_6);
        StorageLive(_7);
        _9 = const false;
        _7 = move _2;
        StorageLive(_8);
        _8 = _3;
        ConstEvalCounter;
        _6 = EventDecoder::<L>::new(move _7, move _8) -> [return: bb2, unwind unreachable];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        _0 = Keyboard::<L, S> { ps2_decoder: move _4, scancode_set: move _5, event_decoder: move _6 };
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 495:20>::set_ctrl_handling(_1: &mut Keyboard<L, S>, _2: HandleControl) -> () {
    debug self => _1;
    debug new_value => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: &mut EventDecoder<L>;

    bb0: {
        _4 = &mut ((*_1).2: EventDecoder<L>);
        _3 = EventDecoder::<L>::set_ctrl_handling(move _4, _2) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 495:20>::get_ctrl_handling(_1: &Keyboard<L, S>) -> HandleControl {
    debug self => _1;
    let mut _0: HandleControl;
    let mut _2: &EventDecoder<L>;

    bb0: {
        _2 = &((*_1).2: EventDecoder<L>);
        _0 = EventDecoder::<L>::get_ctrl_handling(move _2) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 495:20>::get_ctrl_handling(_1: &Keyboard<L, S>) -> HandleControl {
    debug self => _1;
    let mut _0: HandleControl;
    let mut _2: &EventDecoder<L>;

    bb0: {
        StorageLive(_2);
        _2 = &((*_1).2: EventDecoder<L>);
        ConstEvalCounter;
        _0 = EventDecoder::<L>::get_ctrl_handling(move _2) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        StorageDead(_2);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 495:20>::clear(_1: &mut Keyboard<L, S>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &mut Ps2Decoder;

    bb0: {
        _3 = &mut ((*_1).0: Ps2Decoder);
        _2 = Ps2Decoder::clear(move _3) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 495:20>::add_word(_1: &mut Keyboard<L, S>, _2: u16) -> Result<Option<KeyEvent>, Error> {
    debug self => _1;
    debug word => _2;
    let mut _0: core::result::Result<core::option::Option<KeyEvent>, Error>;
    let mut _3: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, u8>;
    let mut _4: core::result::Result<u8, Error>;
    let mut _5: &Ps2Decoder;
    let mut _6: isize;
    let _7: core::result::Result<core::convert::Infallible, Error>;
    let _8: u8;
    scope 1 {
        debug byte => _8;
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _5 = &((*_1).0: Ps2Decoder);
        _4 = Ps2Decoder::add_word(move _5, _2) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _3 = <Result<u8, Error> as Try>::branch(move _4) -> [return: bb2, unwind unreachable];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = ((_3 as Continue).0: u8);
        _0 = Keyboard::<L, S>::add_byte(_1, _8) -> [return: bb6, unwind unreachable];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = ((_3 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_7) -> [return: bb6, unwind unreachable];
    }

    bb6: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 495:20>::add_byte(_1: &mut Keyboard<L, S>, _2: u8) -> Result<Option<KeyEvent>, Error> {
    debug self => _1;
    debug byte => _2;
    let mut _0: core::result::Result<core::option::Option<KeyEvent>, Error>;
    let mut _3: &mut S;

    bb0: {
        _3 = &mut ((*_1).1: S);
        _0 = <S as ScancodeSet>::advance_state(move _3, _2) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 495:20>::add_bit(_1: &mut Keyboard<L, S>, _2: bool) -> Result<Option<KeyEvent>, Error> {
    debug self => _1;
    debug bit => _2;
    let mut _0: core::result::Result<core::option::Option<KeyEvent>, Error>;
    let mut _3: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, core::option::Option<u8>>;
    let mut _4: core::result::Result<core::option::Option<u8>, Error>;
    let mut _5: &mut Ps2Decoder;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: &mut S;
    let mut _12: core::option::Option<KeyEvent>;
    scope 1 {
        debug byte => _10;
        let _7: core::result::Result<core::convert::Infallible, Error>;
        let _8: core::option::Option<u8>;
        let _10: u8;
        scope 2 {
            debug residual => _7;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _8;
            scope 5 {
            }
        }
    }

    bb0: {
        _5 = &mut ((*_1).0: Ps2Decoder);
        _4 = Ps2Decoder::add_bit(move _5, _2) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _3 = <Result<Option<u8>, Error> as Try>::branch(move _4) -> [return: bb2, unwind unreachable];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = ((_3 as Continue).0: core::option::Option<u8>);
        _9 = discriminant(_8);
        switchInt(move _9) -> [1: bb7, otherwise: bb6];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = ((_3 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_7) -> [return: bb8, unwind unreachable];
    }

    bb6: {
        _12 = Option::<KeyEvent>::None;
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _12);
        goto -> bb8;
    }

    bb7: {
        _10 = ((_8 as Some).0: u8);
        _11 = &mut ((*_1).1: S);
        _0 = <S as ScancodeSet>::advance_state(move _11, _10) -> [return: bb8, unwind unreachable];
    }

    bb8: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 495:20>::process_keyevent(_1: &mut Keyboard<L, S>, _2: KeyEvent) -> Option<DecodedKey> {
    debug self => _1;
    debug ev => _2;
    let mut _0: core::option::Option<DecodedKey>;
    let mut _3: &mut EventDecoder<L>;

    bb0: {
        _3 = &mut ((*_1).2: EventDecoder<L>);
        _0 = EventDecoder::<L>::process_keyevent(move _3, move _2) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::new() -> Ps2Decoder {
    let mut _0: Ps2Decoder;

    bb0: {
        _0 = Ps2Decoder { register: const 0_u16, num_bits: const 0_u8 };
        return;
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::new() -> Ps2Decoder {
    let mut _0: Ps2Decoder;

    bb0: {
        _0 = Ps2Decoder { register: const 0_u16, num_bits: const 0_u8 };
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::clear(_1: &mut Ps2Decoder) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        ((*_1).0: u16) = const 0_u16;
        ((*_1).1: u8) = const 0_u8;
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::add_bit(_1: &mut Ps2Decoder, _2: bool) -> Result<Option<u8>, Error> {
    debug self => _1;
    debug bit => _2;
    let mut _0: core::result::Result<core::option::Option<u8>, Error>;
    let mut _3: u16;
    let mut _4: u16;
    let mut _5: u8;
    let mut _6: bool;
    let mut _7: (u8, bool);
    let mut _8: bool;
    let mut _9: u8;
    let _10: u16;
    let mut _11: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, u8>;
    let mut _12: core::result::Result<u8, Error>;
    let mut _13: isize;
    let mut _16: core::option::Option<u8>;
    let mut _17: core::option::Option<u8>;
    scope 1 {
        debug word => _10;
        let _14: core::result::Result<core::convert::Infallible, Error>;
        let _15: u8;
        scope 2 {
            debug byte => _15;
        }
        scope 3 {
            debug residual => _14;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _15;
            scope 6 {
            }
        }
    }

    bb0: {
        _4 = _2 as u16 (IntToInt);
        _5 = ((*_1).1: u8);
        _6 = Lt(_5, const 16_u8);
        assert(move _6, "attempt to shift left by `{}`, which would overflow", _5) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        _3 = Shl(move _4, move _5);
        ((*_1).0: u16) = BitOr(((*_1).0: u16), move _3);
        _7 = CheckedAdd(((*_1).1: u8), const 1_u8);
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: u8), const 1_u8) -> [success: bb2, unwind unreachable];
    }

    bb2: {
        ((*_1).1: u8) = move (_7.0: u8);
        _9 = ((*_1).1: u8);
        _8 = Eq(move _9, const _);
        switchInt(move _8) -> [0: bb9, otherwise: bb3];
    }

    bb3: {
        _10 = ((*_1).0: u16);
        ((*_1).0: u16) = const 0_u16;
        ((*_1).1: u8) = const 0_u8;
        _12 = Ps2Decoder::check_word(_10) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        _11 = <Result<u8, Error> as Try>::branch(move _12) -> [return: bb5, unwind unreachable];
    }

    bb5: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        _15 = ((_11 as Continue).0: u8);
        _16 = Option::<u8>::Some(_15);
        _0 = Result::<Option<u8>, Error>::Ok(move _16);
        goto -> bb10;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _14 = ((_11 as Break).0: core::result::Result<core::convert::Infallible, Error>);
        _0 = <Result<Option<u8>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_14) -> [return: bb10, unwind unreachable];
    }

    bb9: {
        _17 = Option::<u8>::None;
        _0 = Result::<Option<u8>, Error>::Ok(move _17);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::add_word(_1: &Ps2Decoder, _2: u16) -> Result<u8, Error> {
    debug self => _1;
    debug word => _2;
    let mut _0: core::result::Result<u8, Error>;

    bb0: {
        _0 = Ps2Decoder::check_word(_2) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::check_word(_1: u16) -> Result<u8, Error> {
    debug word => _1;
    let mut _0: core::result::Result<u8, Error>;
    let _2: bool;
    let mut _6: u16;
    let mut _7: u16;
    let mut _8: u32;
    let mut _9: bool;
    let mut _10: Error;
    let mut _11: Error;
    let mut _13: bool;
    let mut _14: Error;
    scope 1 {
        debug start_bit => _2;
        let _3: bool;
        scope 2 {
            debug parity_bit => _3;
            let _4: bool;
            scope 3 {
                debug stop_bit => _4;
                let _5: u8;
                scope 4 {
                    debug data => _5;
                    let _12: bool;
                    scope 5 {
                        debug need_parity => _12;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Ps2Decoder::get_bit(_1, const 0_usize) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _3 = Ps2Decoder::get_bit(_1, const 9_usize) -> [return: bb2, unwind unreachable];
    }

    bb2: {
        _4 = Ps2Decoder::get_bit(_1, const 10_usize) -> [return: bb3, unwind unreachable];
    }

    bb3: {
        _8 = const 1_i32 as u32 (IntToInt);
        _9 = Lt(move _8, const 16_u32);
        assert(move _9, "attempt to shift right by `{}`, which would overflow", const 1_i32) -> [success: bb4, unwind unreachable];
    }

    bb4: {
        _7 = Shr(_1, const 1_i32);
        _6 = BitAnd(move _7, const 255_u16);
        _5 = move _6 as u8 (IntToInt);
        switchInt(_2) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _10 = Error::BadStartBit;
        _0 = Result::<u8, Error>::Err(move _10);
        goto -> bb12;
    }

    bb6: {
        switchInt(_4) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _12 = Ps2Decoder::has_even_number_bits(_5) -> [return: bb9, unwind unreachable];
    }

    bb8: {
        _11 = Error::BadStopBit;
        _0 = Result::<u8, Error>::Err(move _11);
        goto -> bb12;
    }

    bb9: {
        _13 = Ne(_12, _3);
        switchInt(move _13) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _14 = Error::ParityError;
        _0 = Result::<u8, Error>::Err(move _14);
        goto -> bb12;
    }

    bb11: {
        _0 = Result::<u8, Error>::Ok(_5);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::check_word(_1: u16) -> Result<u8, Error> {
    debug word => _1;
    let mut _0: core::result::Result<u8, Error>;
    let _2: bool;
    let mut _3: u16;
    let mut _5: u16;
    let mut _7: u16;
    let mut _9: u16;
    let mut _10: u16;
    let mut _11: u16;
    let mut _12: u32;
    let mut _13: bool;
    let _14: ();
    let mut _15: bool;
    let mut _16: !;
    let mut _17: Error;
    let _18: ();
    let mut _19: bool;
    let mut _20: !;
    let mut _21: Error;
    let mut _23: u8;
    let _24: ();
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: !;
    let mut _29: Error;
    let mut _30: u8;
    scope 1 {
        debug start_bit => _2;
        let _4: bool;
        scope 2 {
            debug parity_bit => _4;
            let _6: bool;
            scope 3 {
                debug stop_bit => _6;
                let _8: u8;
                scope 4 {
                    debug data => _8;
                    let _22: bool;
                    scope 5 {
                        debug need_parity => _22;
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = _1;
        ConstEvalCounter;
        _2 = Ps2Decoder::get_bit(move _3, const 0_usize) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        ConstEvalCounter;
        _4 = Ps2Decoder::get_bit(move _5, const 9_usize) -> [return: bb2, unwind unreachable];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _1;
        ConstEvalCounter;
        _6 = Ps2Decoder::get_bit(move _7, const 10_usize) -> [return: bb3, unwind unreachable];
    }

    bb3: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _1;
        _12 = const 1_i32 as u32 (IntToInt);
        _13 = Lt(move _12, const 16_u32);
        assert(move _13, "attempt to shift right by `{}`, which would overflow", const 1_i32) -> [success: bb4, unwind unreachable];
    }

    bb4: {
        _10 = Shr(move _11, const 1_i32);
        StorageDead(_11);
        _9 = BitAnd(move _10, const 255_u16);
        StorageDead(_10);
        _8 = move _9 as u8 (IntToInt);
        StorageDead(_9);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _2;
        switchInt(move _15) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageLive(_17);
        _17 = Error::BadStartBit;
        _0 = Result::<u8, Error>::Err(move _17);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb12;
    }

    bb6: {
        _14 = const ();
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _6;
        switchInt(move _19) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _18 = const ();
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _8;
        ConstEvalCounter;
        _22 = Ps2Decoder::has_even_number_bits(move _23) -> [return: bb9, unwind unreachable];
    }

    bb8: {
        StorageLive(_21);
        _21 = Error::BadStopBit;
        _0 = Result::<u8, Error>::Err(move _21);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb12;
    }

    bb9: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _22;
        StorageLive(_27);
        _27 = _4;
        _25 = Ne(move _26, move _27);
        switchInt(move _25) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_29);
        _29 = Error::ParityError;
        _0 = Result::<u8, Error>::Err(move _29);
        StorageDead(_29);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_22);
        goto -> bb12;
    }

    bb11: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = const ();
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_30);
        _30 = _8;
        _0 = Result::<u8, Error>::Ok(move _30);
        StorageDead(_30);
        StorageDead(_22);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_2);
        goto -> bb13;
    }

    bb12: {
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_2);
        goto -> bb13;
    }

    bb13: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::get_bit(_1: u16, _2: usize) -> bool {
    debug word => _1;
    debug offset => _2;
    let mut _0: bool;
    let mut _3: u16;
    let mut _4: u16;
    let mut _5: bool;

    bb0: {
        _5 = Lt(_2, const 16_usize);
        assert(move _5, "attempt to shift right by `{}`, which would overflow", _2) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        _4 = Shr(_1, _2);
        _3 = BitAnd(move _4, const 1_u16);
        _0 = Ne(move _3, const 0_u16);
        return;
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::get_bit(_1: u16, _2: usize) -> bool {
    debug word => _1;
    debug offset => _2;
    let mut _0: bool;
    let mut _3: u16;
    let mut _4: u16;
    let mut _5: u16;
    let mut _6: usize;
    let mut _7: bool;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        StorageLive(_6);
        _6 = _2;
        _7 = Lt(_6, const 16_usize);
        assert(move _7, "attempt to shift right by `{}`, which would overflow", _6) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        _4 = Shr(move _5, move _6);
        StorageDead(_6);
        StorageDead(_5);
        _3 = BitAnd(move _4, const 1_u16);
        StorageDead(_4);
        _0 = Ne(move _3, const 0_u16);
        StorageDead(_3);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::has_even_number_bits(_1: u8) -> bool {
    debug data => _1;
    let mut _0: bool;
    let mut _2: u32;
    let mut _3: u32;
    let mut _4: bool;

    bb0: {
        _3 = num::<impl u8>::count_ones(_1) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _4 = Eq(const 2_u32, const 0_u32);
        assert(!move _4, "attempt to calculate the remainder of `{}` with a divisor of zero", _3) -> [success: bb2, unwind unreachable];
    }

    bb2: {
        _2 = Rem(move _3, const 2_u32);
        _0 = Eq(move _2, const 0_u32);
        return;
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::has_even_number_bits(_1: u8) -> bool {
    debug data => _1;
    let mut _0: bool;
    let mut _2: u32;
    let mut _3: u32;
    let mut _4: u8;
    let mut _5: bool;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = _1;
        ConstEvalCounter;
        _3 = num::<impl u8>::count_ones(move _4) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        StorageDead(_4);
        _5 = Eq(const 2_u32, const 0_u32);
        assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", _3) -> [success: bb2, unwind unreachable];
    }

    bb2: {
        _2 = Rem(move _3, const 2_u32);
        StorageDead(_3);
        _0 = Eq(move _2, const 0_u32);
        StorageDead(_2);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 644:23>::new(_1: L, _2: HandleControl) -> EventDecoder<L> {
    debug layout => _1;
    debug handle_ctrl => _2;
    let mut _0: EventDecoder<L>;
    let mut _3: Modifiers;

    bb0: {
        _3 = Modifiers { lshift: const false, rshift: const false, lctrl: const false, rctrl: const false, numlock: const true, capslock: const false, alt_gr: const false, rctrl2: const false };
        _0 = EventDecoder::<L> { handle_ctrl: _2, modifiers: move _3, layout: move _1 };
        return;
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 644:23>::new(_1: L, _2: HandleControl) -> EventDecoder<L> {
    debug layout => _1;
    debug handle_ctrl => _2;
    let mut _0: EventDecoder<L>;
    let mut _3: HandleControl;
    let mut _4: Modifiers;
    let mut _5: L;

    bb0: {
        StorageLive(_3);
        _3 = _2;
        StorageLive(_4);
        _4 = Modifiers { lshift: const false, rshift: const false, lctrl: const false, rctrl: const false, numlock: const true, capslock: const false, alt_gr: const false, rctrl2: const false };
        StorageLive(_5);
        _5 = move _1;
        _0 = EventDecoder::<L> { handle_ctrl: move _3, modifiers: move _4, layout: move _5 };
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 644:23>::set_ctrl_handling(_1: &mut EventDecoder<L>, _2: HandleControl) -> () {
    debug self => _1;
    debug new_value => _2;
    let mut _0: ();

    bb0: {
        ((*_1).0: HandleControl) = _2;
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 644:23>::get_ctrl_handling(_1: &EventDecoder<L>) -> HandleControl {
    debug self => _1;
    let mut _0: HandleControl;

    bb0: {
        _0 = ((*_1).0: HandleControl);
        return;
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 644:23>::get_ctrl_handling(_1: &EventDecoder<L>) -> HandleControl {
    debug self => _1;
    let mut _0: HandleControl;

    bb0: {
        _0 = ((*_1).0: HandleControl);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 644:23>::process_keyevent(_1: &mut EventDecoder<L>, _2: KeyEvent) -> Option<DecodedKey> {
    debug self => _1;
    debug ev => _2;
    let mut _0: core::option::Option<DecodedKey>;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _11: isize;
    let mut _12: u8;
    let mut _13: DecodedKey;
    let mut _14: KeyCode;
    let mut _15: DecodedKey;
    let mut _16: KeyCode;
    let mut _17: bool;
    let mut _18: DecodedKey;
    let mut _19: KeyCode;
    let mut _20: bool;
    let mut _21: DecodedKey;
    let mut _22: KeyCode;
    let mut _23: bool;
    let mut _24: DecodedKey;
    let mut _25: KeyCode;
    let mut _26: DecodedKey;
    let mut _27: KeyCode;
    let mut _28: DecodedKey;
    let mut _29: KeyCode;
    let mut _30: DecodedKey;
    let mut _31: KeyCode;
    let mut _32: DecodedKey;
    let mut _33: KeyCode;
    let _34: KeyCode;
    let mut _35: DecodedKey;
    let mut _36: &L;
    let _37: &Modifiers;
    let mut _38: HandleControl;
    scope 1 {
        debug c => _34;
    }

    bb0: {
        _12 = discriminant((_2.0: KeyCode));
        switchInt(move _12) -> [34: bb2, 60: bb3, 76: bb4, 87: bb5, 93: bb6, 97: bb7, 100: bb8, 122: bb9, otherwise: bb1];
    }

    bb1: {
        _11 = discriminant((_2.1: KeyState));
        switchInt(move _11) -> [1: bb27, otherwise: bb10];
    }

    bb2: {
        _3 = discriminant((_2.1: KeyState));
        switchInt(move _3) -> [1: bb16, otherwise: bb1];
    }

    bb3: {
        _4 = discriminant((_2.1: KeyState));
        switchInt(move _4) -> [1: bb15, otherwise: bb1];
    }

    bb4: {
        _5 = discriminant((_2.1: KeyState));
        switchInt(move _5) -> [0: bb13, 1: bb11, otherwise: bb1];
    }

    bb5: {
        _6 = discriminant((_2.1: KeyState));
        switchInt(move _6) -> [0: bb14, 1: bb12, otherwise: bb1];
    }

    bb6: {
        _7 = discriminant((_2.1: KeyState));
        switchInt(move _7) -> [0: bb20, 1: bb19, otherwise: bb1];
    }

    bb7: {
        _8 = discriminant((_2.1: KeyState));
        switchInt(move _8) -> [0: bb24, 1: bb23, otherwise: bb1];
    }

    bb8: {
        _9 = discriminant((_2.1: KeyState));
        switchInt(move _9) -> [0: bb22, 1: bb21, otherwise: bb1];
    }

    bb9: {
        _10 = discriminant((_2.1: KeyState));
        switchInt(move _10) -> [0: bb26, 1: bb25, otherwise: bb1];
    }

    bb10: {
        _0 = Option::<DecodedKey>::None;
        goto -> bb29;
    }

    bb11: {
        (((*_1).1: Modifiers).0: bool) = const true;
        _14 = KeyCode::LShift;
        _13 = DecodedKey::RawKey(move _14);
        _0 = Option::<DecodedKey>::Some(move _13);
        goto -> bb29;
    }

    bb12: {
        (((*_1).1: Modifiers).1: bool) = const true;
        _16 = KeyCode::RShift;
        _15 = DecodedKey::RawKey(move _16);
        _0 = Option::<DecodedKey>::Some(move _15);
        goto -> bb29;
    }

    bb13: {
        (((*_1).1: Modifiers).0: bool) = const false;
        _0 = Option::<DecodedKey>::None;
        goto -> bb29;
    }

    bb14: {
        (((*_1).1: Modifiers).1: bool) = const false;
        _0 = Option::<DecodedKey>::None;
        goto -> bb29;
    }

    bb15: {
        _17 = (((*_1).1: Modifiers).5: bool);
        (((*_1).1: Modifiers).5: bool) = Not(move _17);
        _19 = KeyCode::CapsLock;
        _18 = DecodedKey::RawKey(move _19);
        _0 = Option::<DecodedKey>::Some(move _18);
        goto -> bb29;
    }

    bb16: {
        _20 = (((*_1).1: Modifiers).7: bool);
        switchInt(move _20) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _22 = KeyCode::PauseBreak;
        _21 = DecodedKey::RawKey(move _22);
        _0 = Option::<DecodedKey>::Some(move _21);
        goto -> bb29;
    }

    bb18: {
        _23 = (((*_1).1: Modifiers).4: bool);
        (((*_1).1: Modifiers).4: bool) = Not(move _23);
        _25 = KeyCode::NumpadLock;
        _24 = DecodedKey::RawKey(move _25);
        _0 = Option::<DecodedKey>::Some(move _24);
        goto -> bb29;
    }

    bb19: {
        (((*_1).1: Modifiers).2: bool) = const true;
        _27 = KeyCode::LControl;
        _26 = DecodedKey::RawKey(move _27);
        _0 = Option::<DecodedKey>::Some(move _26);
        goto -> bb29;
    }

    bb20: {
        (((*_1).1: Modifiers).2: bool) = const false;
        _0 = Option::<DecodedKey>::None;
        goto -> bb29;
    }

    bb21: {
        (((*_1).1: Modifiers).3: bool) = const true;
        _29 = KeyCode::RControl;
        _28 = DecodedKey::RawKey(move _29);
        _0 = Option::<DecodedKey>::Some(move _28);
        goto -> bb29;
    }

    bb22: {
        (((*_1).1: Modifiers).3: bool) = const false;
        _0 = Option::<DecodedKey>::None;
        goto -> bb29;
    }

    bb23: {
        (((*_1).1: Modifiers).6: bool) = const true;
        _31 = KeyCode::RAltGr;
        _30 = DecodedKey::RawKey(move _31);
        _0 = Option::<DecodedKey>::Some(move _30);
        goto -> bb29;
    }

    bb24: {
        (((*_1).1: Modifiers).6: bool) = const false;
        _0 = Option::<DecodedKey>::None;
        goto -> bb29;
    }

    bb25: {
        (((*_1).1: Modifiers).7: bool) = const true;
        _33 = KeyCode::RControl2;
        _32 = DecodedKey::RawKey(move _33);
        _0 = Option::<DecodedKey>::Some(move _32);
        goto -> bb29;
    }

    bb26: {
        (((*_1).1: Modifiers).7: bool) = const false;
        _0 = Option::<DecodedKey>::None;
        goto -> bb29;
    }

    bb27: {
        _34 = (_2.0: KeyCode);
        _36 = &((*_1).2: L);
        _37 = &((*_1).1: Modifiers);
        _38 = ((*_1).0: HandleControl);
        _35 = <L as KeyboardLayout>::map_keycode(move _36, _34, _37, move _38) -> [return: bb28, unwind unreachable];
    }

    bb28: {
        _0 = Option::<DecodedKey>::Some(move _35);
        goto -> bb29;
    }

    bb29: {
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 644:23>::change_layout(_1: &mut EventDecoder<L>, _2: L) -> () {
    debug self => _1;
    debug new_layout => _2;
    let mut _0: ();

    bb0: {
        drop(((*_1).2: L)) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        ((*_1).2: L) = move _2;
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:807:1: 807:14>::new(_1: KeyCode, _2: KeyState) -> KeyEvent {
    debug code => _1;
    debug state => _2;
    let mut _0: KeyEvent;

    bb0: {
        _0 = KeyEvent { code: _1, state: _2 };
        return;
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:807:1: 807:14>::new(_1: KeyCode, _2: KeyState) -> KeyEvent {
    debug code => _1;
    debug state => _2;
    let mut _0: KeyEvent;
    let mut _3: KeyCode;
    let mut _4: KeyState;

    bb0: {
        StorageLive(_3);
        _3 = _1;
        StorageLive(_4);
        _4 = _2;
        _0 = KeyEvent { code: move _3, state: move _4 };
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:819:1: 819:15>::is_shifted(_1: &Modifiers) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: bool;

    bb0: {
        _2 = ((*_1).0: bool);
        _3 = ((*_1).1: bool);
        _0 = BitOr(move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:819:1: 819:15>::is_shifted(_1: &Modifiers) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: bool;

    bb0: {
        StorageLive(_2);
        _2 = ((*_1).0: bool);
        StorageLive(_3);
        _3 = ((*_1).1: bool);
        _0 = BitOr(move _2, move _3);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:819:1: 819:15>::is_ctrl(_1: &Modifiers) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: bool;

    bb0: {
        _2 = ((*_1).2: bool);
        _3 = ((*_1).3: bool);
        _0 = BitOr(move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:819:1: 819:15>::is_ctrl(_1: &Modifiers) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: bool;

    bb0: {
        StorageLive(_2);
        _2 = ((*_1).2: bool);
        StorageLive(_3);
        _3 = ((*_1).3: bool);
        _0 = BitOr(move _2, move _3);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:819:1: 819:15>::is_caps(_1: &Modifiers) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;

    bb0: {
        _3 = ((*_1).0: bool);
        _4 = ((*_1).1: bool);
        _2 = BitOr(move _3, move _4);
        _5 = ((*_1).5: bool);
        _0 = BitXor(move _2, move _5);
        return;
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:819:1: 819:15>::is_caps(_1: &Modifiers) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = ((*_1).0: bool);
        StorageLive(_4);
        _4 = ((*_1).1: bool);
        _2 = BitOr(move _3, move _4);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_5);
        _5 = ((*_1).5: bool);
        _0 = BitXor(move _2, move _5);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}

fn AnyLayout::DVP104Key(_1: DVP104Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::DVP104Key(move _1);
        return;
    }
}

// MIR FOR CTFE
fn AnyLayout::DVP104Key(_1: DVP104Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::DVP104Key(move _1);
        return;
    }
}

fn AnyLayout::Dvorak104Key(_1: Dvorak104Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::Dvorak104Key(move _1);
        return;
    }
}

// MIR FOR CTFE
fn AnyLayout::Dvorak104Key(_1: Dvorak104Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::Dvorak104Key(move _1);
        return;
    }
}

fn AnyLayout::Us104Key(_1: Us104Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::Us104Key(move _1);
        return;
    }
}

// MIR FOR CTFE
fn AnyLayout::Us104Key(_1: Us104Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::Us104Key(move _1);
        return;
    }
}

fn AnyLayout::Uk105Key(_1: Uk105Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::Uk105Key(move _1);
        return;
    }
}

// MIR FOR CTFE
fn AnyLayout::Uk105Key(_1: Uk105Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::Uk105Key(move _1);
        return;
    }
}

fn AnyLayout::Jis109Key(_1: Jis109Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::Jis109Key(move _1);
        return;
    }
}

// MIR FOR CTFE
fn AnyLayout::Jis109Key(_1: Jis109Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::Jis109Key(move _1);
        return;
    }
}

fn AnyLayout::Azerty(_1: Azerty) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::Azerty(move _1);
        return;
    }
}

// MIR FOR CTFE
fn AnyLayout::Azerty(_1: Azerty) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::Azerty(move _1);
        return;
    }
}

fn AnyLayout::Colemak(_1: Colemak) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::Colemak(move _1);
        return;
    }
}

// MIR FOR CTFE
fn AnyLayout::Colemak(_1: Colemak) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::Colemak(move _1);
        return;
    }
}

fn AnyLayout::De105Key(_1: De105Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::De105Key(move _1);
        return;
    }
}

// MIR FOR CTFE
fn AnyLayout::De105Key(_1: De105Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;

    bb0: {
        _0 = AnyLayout::De105Key(move _1);
        return;
    }
}

fn DecodedKey::RawKey(_1: KeyCode) -> DecodedKey {
    let mut _0: DecodedKey;

    bb0: {
        _0 = DecodedKey::RawKey(move _1);
        return;
    }
}

// MIR FOR CTFE
fn DecodedKey::RawKey(_1: KeyCode) -> DecodedKey {
    let mut _0: DecodedKey;

    bb0: {
        _0 = DecodedKey::RawKey(move _1);
        return;
    }
}

fn DecodedKey::Unicode(_1: char) -> DecodedKey {
    let mut _0: DecodedKey;

    bb0: {
        _0 = DecodedKey::Unicode(move _1);
        return;
    }
}

// MIR FOR CTFE
fn DecodedKey::Unicode(_1: char) -> DecodedKey {
    let mut _0: DecodedKey;

    bb0: {
        _0 = DecodedKey::Unicode(move _1);
        return;
    }
}
