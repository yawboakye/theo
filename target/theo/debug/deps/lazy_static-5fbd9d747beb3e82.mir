// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const lazy::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.4.0/src/core_lazy.rs:14:1: 14:22>::INIT: Lazy<T> = {
    let mut _0: lazy::Lazy<T>;
    let mut _1: lazy::spin::Once<T>;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = Lazy::<T>(move _1);
        StorageDead(_1);
        return;
    }
}

fn lazy::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.4.0/src/core_lazy.rs:14:1: 14:22>::get(_1: &Lazy<T>, _2: F) -> &T {
    debug self => _1;
    debug builder => _2;
    let mut _0: &T;
    let mut _3: &lazy::spin::Once<T>;

    bb0: {
        _3 = &((*_1).0: lazy::spin::Once<T>);
        _0 = spin::Once::<T>::call_once::<F>(move _3, move _2) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

fn initialize(_1: &T) -> () {
    debug lazy => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = <T as LazyStatic>::initialize(_1) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        return;
    }
}

fn Lazy(_1: spin::Once<T>) -> Lazy<T> {
    let mut _0: lazy::Lazy<T>;

    bb0: {
        _0 = Lazy::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Lazy(_1: spin::Once<T>) -> Lazy<T> {
    let mut _0: lazy::Lazy<T>;

    bb0: {
        _0 = Lazy::<T>(move _1);
        return;
    }
}
