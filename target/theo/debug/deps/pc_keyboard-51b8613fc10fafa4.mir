// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn dvorak_programmer104::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:10:1: 10:34>::map_keycode(_1: &DVP104Key, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:12:9: 12:14
    debug keycode => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:13:9: 13:16
    debug modifiers => _3;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:14:9: 14:18
    debug handle_ctrl => _4;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:15:9: 15:20
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:16:10: 16:20
    let _5: bool;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:13: 17:27
    let mut _6: &HandleControl;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:30: 17:41
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:19:13: 19:26
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:20:20: 20:42
    let mut _9: char;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:26:52: 26:63
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:28:20: 28:42
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:35:20: 35:42
    let mut _12: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:42:20: 42:42
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:49:20: 49:42
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:56:20: 56:42
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:63:20: 63:42
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:70:20: 70:42
    let mut _17: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:77:20: 77:42
    let mut _18: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:84:20: 84:42
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:91:20: 91:42
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:98:20: 98:42
    let mut _21: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:105:20: 105:42
    let mut _22: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:111:55: 111:66
    let mut _23: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:112:49: 112:60
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:114:20: 114:42
    let mut _25: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:121:20: 121:42
    let mut _26: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:128:20: 128:42
    let mut _27: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:135:20: 135:57
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:135:20: 135:34
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:135:38: 135:57
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:137:27: 137:46
    let mut _31: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:144:20: 144:57
    let mut _32: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:144:20: 144:34
    let mut _33: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:144:38: 144:57
    let mut _34: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:146:27: 146:46
    let mut _35: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:153:20: 153:57
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:153:20: 153:34
    let mut _37: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:153:38: 153:57
    let mut _38: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:155:27: 155:46
    let mut _39: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:162:20: 162:57
    let mut _40: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:162:20: 162:34
    let mut _41: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:162:38: 162:57
    let mut _42: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:164:27: 164:46
    let mut _43: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:171:20: 171:57
    let mut _44: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:171:20: 171:34
    let mut _45: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:171:38: 171:57
    let mut _46: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:173:27: 173:46
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:180:20: 180:57
    let mut _48: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:180:20: 180:34
    let mut _49: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:180:38: 180:57
    let mut _50: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:182:27: 182:46
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:189:20: 189:57
    let mut _52: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:189:20: 189:34
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:189:38: 189:57
    let mut _54: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:191:27: 191:46
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:198:20: 198:42
    let mut _56: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:205:20: 205:42
    let mut _57: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:212:20: 212:42
    let mut _58: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:219:20: 219:57
    let mut _59: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:219:20: 219:34
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:219:38: 219:57
    let mut _61: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:221:27: 221:46
    let mut _62: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:228:20: 228:57
    let mut _63: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:228:20: 228:34
    let mut _64: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:228:38: 228:57
    let mut _65: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:230:27: 230:46
    let mut _66: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:237:20: 237:57
    let mut _67: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:237:20: 237:34
    let mut _68: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:237:38: 237:57
    let mut _69: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:239:27: 239:46
    let mut _70: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:246:20: 246:57
    let mut _71: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:246:20: 246:34
    let mut _72: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:246:38: 246:57
    let mut _73: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:248:27: 248:46
    let mut _74: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:255:20: 255:57
    let mut _75: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:255:20: 255:34
    let mut _76: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:255:38: 255:57
    let mut _77: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:257:27: 257:46
    let mut _78: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:264:20: 264:57
    let mut _79: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:264:20: 264:34
    let mut _80: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:264:38: 264:57
    let mut _81: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:266:27: 266:46
    let mut _82: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:273:20: 273:57
    let mut _83: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:273:20: 273:34
    let mut _84: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:273:38: 273:57
    let mut _85: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:275:27: 275:46
    let mut _86: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:282:20: 282:57
    let mut _87: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:282:20: 282:34
    let mut _88: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:282:38: 282:57
    let mut _89: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:284:27: 284:46
    let mut _90: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:291:20: 291:57
    let mut _91: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:291:20: 291:34
    let mut _92: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:291:38: 291:57
    let mut _93: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:293:27: 293:46
    let mut _94: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:300:20: 300:57
    let mut _95: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:300:20: 300:34
    let mut _96: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:300:38: 300:57
    let mut _97: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:302:27: 302:46
    let mut _98: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:309:20: 309:42
    let mut _99: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:315:52: 315:61
    let mut _100: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:317:20: 317:42
    let mut _101: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:324:20: 324:57
    let mut _102: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:324:20: 324:34
    let mut _103: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:324:38: 324:57
    let mut _104: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:326:27: 326:46
    let mut _105: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:333:20: 333:57
    let mut _106: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:333:20: 333:34
    let mut _107: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:333:38: 333:57
    let mut _108: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:335:27: 335:46
    let mut _109: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:342:20: 342:57
    let mut _110: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:342:20: 342:34
    let mut _111: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:342:38: 342:57
    let mut _112: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:344:27: 344:46
    let mut _113: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:351:20: 351:57
    let mut _114: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:351:20: 351:34
    let mut _115: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:351:38: 351:57
    let mut _116: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:353:27: 353:46
    let mut _117: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:360:20: 360:57
    let mut _118: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:360:20: 360:34
    let mut _119: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:360:38: 360:57
    let mut _120: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:362:27: 362:46
    let mut _121: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:369:20: 369:57
    let mut _122: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:369:20: 369:34
    let mut _123: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:369:38: 369:57
    let mut _124: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:371:27: 371:46
    let mut _125: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:378:20: 378:57
    let mut _126: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:378:20: 378:34
    let mut _127: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:378:38: 378:57
    let mut _128: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:380:27: 380:46
    let mut _129: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:387:20: 387:57
    let mut _130: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:387:20: 387:34
    let mut _131: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:387:38: 387:57
    let mut _132: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:389:27: 389:46
    let mut _133: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:396:20: 396:57
    let mut _134: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:396:20: 396:34
    let mut _135: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:396:38: 396:57
    let mut _136: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:398:27: 398:46
    let mut _137: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:405:52: 405:62
    let mut _138: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:410:20: 410:37
    let mut _139: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:413:40: 413:53
    let mut _140: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:417:20: 417:37
    let mut _141: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:420:40: 420:56
    let mut _142: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:424:20: 424:37
    let mut _143: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:427:40: 427:55
    let mut _144: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:432:20: 432:37
    let mut _145: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:435:40: 435:58
    let mut _146: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:440:20: 440:37
    let mut _147: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:443:40: 443:59
    let mut _148: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:447:20: 447:37
    let mut _149: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:450:40: 450:52
    let mut _150: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:454:20: 454:37
    let mut _151: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:457:40: 457:58
    let mut _152: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:461:20: 461:37
    let mut _153: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:464:40: 464:57
    let mut _154: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:468:20: 468:37
    let mut _155: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:471:40: 471:55
    let mut _156: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:475:20: 475:37
    let mut _157: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:478:41: 478:51
    let mut _158: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:481:57: 481:66
    let mut _159: &HandleControl;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:45: 17:79
    scope 1 {
        debug map_to_unicode => _5;      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:13: 17:27
        scope 2 {
            debug k => _2;               // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:482:13: 482:14
        }
    }

    bb0: {
        _6 = &_4;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:30: 17:41
        _159 = const _;                  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:45: 17:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:45: 17:79
                                         // + literal: Const { ty: &HandleControl, val: Unevaluated(<DVP104Key as KeyboardLayout>::map_keycode, [], Some(promoted[0])) }
        _5 = <HandleControl as PartialEq>::eq(move _6, _159) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:30: 17:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:30: 17:79
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HandleControl, &'b HandleControl) -> bool {<HandleControl as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_2);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:18:15: 18:22
        switchInt(move _7) -> [0: bb7, 17: bb3, 18: bb9, 19: bb13, 20: bb17, 21: bb21, 22: bb25, 23: bb29, 24: bb33, 25: bb37, 26: bb41, 27: bb45, 28: bb49, 29: bb53, 30: bb57, 35: bb358, 36: bb359, 37: bb360, 38: bb59, 39: bb61, 40: bb65, 41: bb69, 42: bb73, 43: bb83, 44: bb93, 45: bb103, 46: bb113, 47: bb123, 48: bb133, 49: bb143, 50: bb147, 52: bb151, 53: bb356, 56: bb361, 57: bb364, 58: bb367, 59: bb370, 61: bb155, 62: bb165, 63: bb175, 64: bb185, 65: bb195, 66: bb205, 67: bb215, 68: bb225, 69: bb235, 70: bb245, 71: bb255, 72: bb259, 73: bb371, 74: bb374, 75: bb375, 77: bb261, 78: bb265, 79: bb275, 80: bb285, 81: bb295, 82: bb305, 83: bb315, 84: bb325, 85: bb335, 86: bb345, 89: bb378, 90: bb381, 91: bb384, 92: bb394, 96: bb355, 104: bb387, 105: bb390, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:18:9: 18:22
    }

    bb2: {
        _0 = DecodedKey::RawKey(_2);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:482:18: 482:39
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:482:38: 482:39
    }

    bb3: {
        _8 = Modifiers::is_shifted(_3) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:20:20: 20:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:20:30: 20:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt(move _8) -> [0: bb6, otherwise: bb5]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:20:20: 20:42
    }

    bb5: {
        _0 = DecodedKey::Unicode(const '~'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:21:21: 21:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:20:17: 24:18
    }

    bb6: {
        _0 = DecodedKey::Unicode(const '$'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:23:21: 23:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:20:17: 24:18
    }

    bb7: {
        _9 = <u8 as Into<char>>::into(const 27_u8) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:26:52: 26:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:26:57: 26:61
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = DecodedKey::Unicode(move _9); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:26:32: 26:64
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:26:63: 26:64
    }

    bb9: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:28:20: 28:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:28:30: 28:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _10) -> [0: bb12, otherwise: bb11]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:28:20: 28:42
    }

    bb11: {
        _0 = DecodedKey::Unicode(const '%'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:29:21: 29:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:28:17: 32:18
    }

    bb12: {
        _0 = DecodedKey::Unicode(const '&'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:31:21: 31:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:28:17: 32:18
    }

    bb13: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb14, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:35:20: 35:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:35:30: 35:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb14: {
        switchInt(move _11) -> [0: bb16, otherwise: bb15]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:35:20: 35:42
    }

    bb15: {
        _0 = DecodedKey::Unicode(const '7'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:36:21: 36:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:35:17: 39:18
    }

    bb16: {
        _0 = DecodedKey::Unicode(const '['); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:38:21: 38:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:35:17: 39:18
    }

    bb17: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:42:20: 42:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:42:30: 42:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(move _12) -> [0: bb20, otherwise: bb19]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:42:20: 42:42
    }

    bb19: {
        _0 = DecodedKey::Unicode(const '5'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:43:21: 43:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:42:17: 46:18
    }

    bb20: {
        _0 = DecodedKey::Unicode(const '{'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:45:21: 45:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:42:17: 46:18
    }

    bb21: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb22, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:49:20: 49:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:49:30: 49:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb22: {
        switchInt(move _13) -> [0: bb24, otherwise: bb23]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:49:20: 49:42
    }

    bb23: {
        _0 = DecodedKey::Unicode(const '3'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:50:21: 50:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:49:17: 53:18
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:52:21: 52:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:49:17: 53:18
    }

    bb25: {
        _14 = Modifiers::is_shifted(_3) -> [return: bb26, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:56:20: 56:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:56:30: 56:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb26: {
        switchInt(move _14) -> [0: bb28, otherwise: bb27]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:56:20: 56:42
    }

    bb27: {
        _0 = DecodedKey::Unicode(const '1'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:57:21: 57:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:56:17: 60:18
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '('); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:59:21: 59:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:56:17: 60:18
    }

    bb29: {
        _15 = Modifiers::is_shifted(_3) -> [return: bb30, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:63:20: 63:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:63:30: 63:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb30: {
        switchInt(move _15) -> [0: bb32, otherwise: bb31]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:63:20: 63:42
    }

    bb31: {
        _0 = DecodedKey::Unicode(const '9'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:64:21: 64:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:63:17: 67:18
    }

    bb32: {
        _0 = DecodedKey::Unicode(const '='); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:66:21: 66:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:63:17: 67:18
    }

    bb33: {
        _16 = Modifiers::is_shifted(_3) -> [return: bb34, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:70:20: 70:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:70:30: 70:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb34: {
        switchInt(move _16) -> [0: bb36, otherwise: bb35]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:70:20: 70:42
    }

    bb35: {
        _0 = DecodedKey::Unicode(const '0'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:71:21: 71:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:70:17: 74:18
    }

    bb36: {
        _0 = DecodedKey::Unicode(const '*'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:73:21: 73:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:70:17: 74:18
    }

    bb37: {
        _17 = Modifiers::is_shifted(_3) -> [return: bb38, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:77:20: 77:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:77:30: 77:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb38: {
        switchInt(move _17) -> [0: bb40, otherwise: bb39]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:77:20: 77:42
    }

    bb39: {
        _0 = DecodedKey::Unicode(const '2'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:78:21: 78:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:77:17: 81:18
    }

    bb40: {
        _0 = DecodedKey::Unicode(const ')'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:80:21: 80:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:77:17: 81:18
    }

    bb41: {
        _18 = Modifiers::is_shifted(_3) -> [return: bb42, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:84:20: 84:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:84:30: 84:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb42: {
        switchInt(move _18) -> [0: bb44, otherwise: bb43]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:84:20: 84:42
    }

    bb43: {
        _0 = DecodedKey::Unicode(const '4'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:85:21: 85:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:84:17: 88:18
    }

    bb44: {
        _0 = DecodedKey::Unicode(const '+'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:87:21: 87:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:84:17: 88:18
    }

    bb45: {
        _19 = Modifiers::is_shifted(_3) -> [return: bb46, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:91:20: 91:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:91:30: 91:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb46: {
        switchInt(move _19) -> [0: bb48, otherwise: bb47]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:91:20: 91:42
    }

    bb47: {
        _0 = DecodedKey::Unicode(const '6'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:92:21: 92:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:91:17: 95:18
    }

    bb48: {
        _0 = DecodedKey::Unicode(const ']'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:94:21: 94:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:91:17: 95:18
    }

    bb49: {
        _20 = Modifiers::is_shifted(_3) -> [return: bb50, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:98:20: 98:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:98:30: 98:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb50: {
        switchInt(move _20) -> [0: bb52, otherwise: bb51]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:98:20: 98:42
    }

    bb51: {
        _0 = DecodedKey::Unicode(const '8'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:99:21: 99:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:98:17: 102:18
    }

    bb52: {
        _0 = DecodedKey::Unicode(const '!'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:101:21: 101:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:98:17: 102:18
    }

    bb53: {
        _21 = Modifiers::is_shifted(_3) -> [return: bb54, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:105:20: 105:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:105:30: 105:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb54: {
        switchInt(move _21) -> [0: bb56, otherwise: bb55]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:105:20: 105:42
    }

    bb55: {
        _0 = DecodedKey::Unicode(const '`'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:106:21: 106:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:105:17: 109:18
    }

    bb56: {
        _0 = DecodedKey::Unicode(const '='); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:108:21: 108:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:105:17: 109:18
    }

    bb57: {
        _22 = <u8 as Into<char>>::into(const 8_u8) -> [return: bb58, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:111:55: 111:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:111:60: 111:64
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb58: {
        _0 = DecodedKey::Unicode(move _22); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:111:35: 111:67
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:111:66: 111:67
    }

    bb59: {
        _23 = <u8 as Into<char>>::into(const 9_u8) -> [return: bb60, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:112:49: 112:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:112:54: 112:58
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb60: {
        _0 = DecodedKey::Unicode(move _23); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:112:29: 112:61
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:112:60: 112:61
    }

    bb61: {
        _24 = Modifiers::is_shifted(_3) -> [return: bb62, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:114:20: 114:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:114:30: 114:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb62: {
        switchInt(move _24) -> [0: bb64, otherwise: bb63]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:114:20: 114:42
    }

    bb63: {
        _0 = DecodedKey::Unicode(const ':'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:115:21: 115:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:114:17: 118:18
    }

    bb64: {
        _0 = DecodedKey::Unicode(const ';'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:117:21: 117:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:114:17: 118:18
    }

    bb65: {
        _25 = Modifiers::is_shifted(_3) -> [return: bb66, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:121:20: 121:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:121:30: 121:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb66: {
        switchInt(move _25) -> [0: bb68, otherwise: bb67]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:121:20: 121:42
    }

    bb67: {
        _0 = DecodedKey::Unicode(const '<'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:122:21: 122:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:121:17: 125:18
    }

    bb68: {
        _0 = DecodedKey::Unicode(const ','); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:124:21: 124:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:121:17: 125:18
    }

    bb69: {
        _26 = Modifiers::is_shifted(_3) -> [return: bb70, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:128:20: 128:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:128:30: 128:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb70: {
        switchInt(move _26) -> [0: bb72, otherwise: bb71]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:128:20: 128:42
    }

    bb71: {
        _0 = DecodedKey::Unicode(const '>'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:129:21: 129:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:128:17: 132:18
    }

    bb72: {
        _0 = DecodedKey::Unicode(const '.'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:131:21: 131:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:128:17: 132:18
    }

    bb73: {
        _28 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:135:20: 135:34
        switchInt(move _28) -> [0: bb74, otherwise: bb75]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:135:20: 135:57
    }

    bb74: {
        _27 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:135:20: 135:57
        goto -> bb76;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:135:20: 135:57
    }

    bb75: {
        _29 = Modifiers::is_ctrl(_3) -> [return: bb77, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:135:38: 135:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:135:48: 135:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb76: {
        switchInt(move _27) -> [0: bb79, otherwise: bb78]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:135:20: 135:57
    }

    bb77: {
        _27 = move _29;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:135:20: 135:57
        goto -> bb76;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:135:20: 135:57
    }

    bb78: {
        _0 = DecodedKey::Unicode(const '\u{10}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:136:21: 136:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:135:17: 141:18
    }

    bb79: {
        _30 = Modifiers::is_caps(_3) -> [return: bb80, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:137:27: 137:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:137:37: 137:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb80: {
        switchInt(move _30) -> [0: bb82, otherwise: bb81]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:137:27: 137:46
    }

    bb81: {
        _0 = DecodedKey::Unicode(const 'P'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:138:21: 138:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:137:24: 141:18
    }

    bb82: {
        _0 = DecodedKey::Unicode(const 'p'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:140:21: 140:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:137:24: 141:18
    }

    bb83: {
        _32 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:144:20: 144:34
        switchInt(move _32) -> [0: bb84, otherwise: bb85]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:144:20: 144:57
    }

    bb84: {
        _31 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:144:20: 144:57
        goto -> bb86;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:144:20: 144:57
    }

    bb85: {
        _33 = Modifiers::is_ctrl(_3) -> [return: bb87, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:144:38: 144:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:144:48: 144:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb86: {
        switchInt(move _31) -> [0: bb89, otherwise: bb88]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:144:20: 144:57
    }

    bb87: {
        _31 = move _33;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:144:20: 144:57
        goto -> bb86;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:144:20: 144:57
    }

    bb88: {
        _0 = DecodedKey::Unicode(const '\u{19}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:145:21: 145:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:144:17: 150:18
    }

    bb89: {
        _34 = Modifiers::is_caps(_3) -> [return: bb90, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:146:27: 146:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:146:37: 146:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb90: {
        switchInt(move _34) -> [0: bb92, otherwise: bb91]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:146:27: 146:46
    }

    bb91: {
        _0 = DecodedKey::Unicode(const 'Y'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:147:21: 147:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:146:24: 150:18
    }

    bb92: {
        _0 = DecodedKey::Unicode(const 'y'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:149:21: 149:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:146:24: 150:18
    }

    bb93: {
        _36 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:153:20: 153:34
        switchInt(move _36) -> [0: bb94, otherwise: bb95]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:153:20: 153:57
    }

    bb94: {
        _35 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:153:20: 153:57
        goto -> bb96;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:153:20: 153:57
    }

    bb95: {
        _37 = Modifiers::is_ctrl(_3) -> [return: bb97, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:153:38: 153:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:153:48: 153:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb96: {
        switchInt(move _35) -> [0: bb99, otherwise: bb98]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:153:20: 153:57
    }

    bb97: {
        _35 = move _37;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:153:20: 153:57
        goto -> bb96;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:153:20: 153:57
    }

    bb98: {
        _0 = DecodedKey::Unicode(const '\u{6}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:154:21: 154:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:153:17: 159:18
    }

    bb99: {
        _38 = Modifiers::is_caps(_3) -> [return: bb100, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:155:27: 155:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:155:37: 155:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb100: {
        switchInt(move _38) -> [0: bb102, otherwise: bb101]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:155:27: 155:46
    }

    bb101: {
        _0 = DecodedKey::Unicode(const 'F'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:156:21: 156:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:155:24: 159:18
    }

    bb102: {
        _0 = DecodedKey::Unicode(const 'f'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:158:21: 158:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:155:24: 159:18
    }

    bb103: {
        _40 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:162:20: 162:34
        switchInt(move _40) -> [0: bb104, otherwise: bb105]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:162:20: 162:57
    }

    bb104: {
        _39 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:162:20: 162:57
        goto -> bb106;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:162:20: 162:57
    }

    bb105: {
        _41 = Modifiers::is_ctrl(_3) -> [return: bb107, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:162:38: 162:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:162:48: 162:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb106: {
        switchInt(move _39) -> [0: bb109, otherwise: bb108]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:162:20: 162:57
    }

    bb107: {
        _39 = move _41;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:162:20: 162:57
        goto -> bb106;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:162:20: 162:57
    }

    bb108: {
        _0 = DecodedKey::Unicode(const '\u{7}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:163:21: 163:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:162:17: 168:18
    }

    bb109: {
        _42 = Modifiers::is_caps(_3) -> [return: bb110, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:164:27: 164:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:164:37: 164:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb110: {
        switchInt(move _42) -> [0: bb112, otherwise: bb111]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:164:27: 164:46
    }

    bb111: {
        _0 = DecodedKey::Unicode(const 'G'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:165:21: 165:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:164:24: 168:18
    }

    bb112: {
        _0 = DecodedKey::Unicode(const 'g'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:167:21: 167:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:164:24: 168:18
    }

    bb113: {
        _44 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:171:20: 171:34
        switchInt(move _44) -> [0: bb114, otherwise: bb115]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:171:20: 171:57
    }

    bb114: {
        _43 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:171:20: 171:57
        goto -> bb116;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:171:20: 171:57
    }

    bb115: {
        _45 = Modifiers::is_ctrl(_3) -> [return: bb117, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:171:38: 171:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:171:48: 171:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb116: {
        switchInt(move _43) -> [0: bb119, otherwise: bb118]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:171:20: 171:57
    }

    bb117: {
        _43 = move _45;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:171:20: 171:57
        goto -> bb116;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:171:20: 171:57
    }

    bb118: {
        _0 = DecodedKey::Unicode(const '\u{3}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:172:21: 172:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:171:17: 177:18
    }

    bb119: {
        _46 = Modifiers::is_caps(_3) -> [return: bb120, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:173:27: 173:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:173:37: 173:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb120: {
        switchInt(move _46) -> [0: bb122, otherwise: bb121]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:173:27: 173:46
    }

    bb121: {
        _0 = DecodedKey::Unicode(const 'C'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:174:21: 174:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:173:24: 177:18
    }

    bb122: {
        _0 = DecodedKey::Unicode(const 'c'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:176:21: 176:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:173:24: 177:18
    }

    bb123: {
        _48 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:180:20: 180:34
        switchInt(move _48) -> [0: bb124, otherwise: bb125]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:180:20: 180:57
    }

    bb124: {
        _47 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:180:20: 180:57
        goto -> bb126;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:180:20: 180:57
    }

    bb125: {
        _49 = Modifiers::is_ctrl(_3) -> [return: bb127, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:180:38: 180:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:180:48: 180:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb126: {
        switchInt(move _47) -> [0: bb129, otherwise: bb128]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:180:20: 180:57
    }

    bb127: {
        _47 = move _49;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:180:20: 180:57
        goto -> bb126;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:180:20: 180:57
    }

    bb128: {
        _0 = DecodedKey::Unicode(const '\u{12}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:181:21: 181:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:180:17: 186:18
    }

    bb129: {
        _50 = Modifiers::is_caps(_3) -> [return: bb130, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:182:27: 182:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:182:37: 182:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb130: {
        switchInt(move _50) -> [0: bb132, otherwise: bb131]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:182:27: 182:46
    }

    bb131: {
        _0 = DecodedKey::Unicode(const 'R'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:183:21: 183:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:182:24: 186:18
    }

    bb132: {
        _0 = DecodedKey::Unicode(const 'r'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:185:21: 185:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:182:24: 186:18
    }

    bb133: {
        _52 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:189:20: 189:34
        switchInt(move _52) -> [0: bb134, otherwise: bb135]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:189:20: 189:57
    }

    bb134: {
        _51 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:189:20: 189:57
        goto -> bb136;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:189:20: 189:57
    }

    bb135: {
        _53 = Modifiers::is_ctrl(_3) -> [return: bb137, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:189:38: 189:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:189:48: 189:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb136: {
        switchInt(move _51) -> [0: bb139, otherwise: bb138]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:189:20: 189:57
    }

    bb137: {
        _51 = move _53;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:189:20: 189:57
        goto -> bb136;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:189:20: 189:57
    }

    bb138: {
        _0 = DecodedKey::Unicode(const '\u{c}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:190:21: 190:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:189:17: 195:18
    }

    bb139: {
        _54 = Modifiers::is_caps(_3) -> [return: bb140, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:191:27: 191:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:191:37: 191:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb140: {
        switchInt(move _54) -> [0: bb142, otherwise: bb141]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:191:27: 191:46
    }

    bb141: {
        _0 = DecodedKey::Unicode(const 'L'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:192:21: 192:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:191:24: 195:18
    }

    bb142: {
        _0 = DecodedKey::Unicode(const 'l'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:194:21: 194:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:191:24: 195:18
    }

    bb143: {
        _55 = Modifiers::is_shifted(_3) -> [return: bb144, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:198:20: 198:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:198:30: 198:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb144: {
        switchInt(move _55) -> [0: bb146, otherwise: bb145]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:198:20: 198:42
    }

    bb145: {
        _0 = DecodedKey::Unicode(const '?'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:199:21: 199:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:198:17: 202:18
    }

    bb146: {
        _0 = DecodedKey::Unicode(const '/'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:201:21: 201:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:198:17: 202:18
    }

    bb147: {
        _56 = Modifiers::is_shifted(_3) -> [return: bb148, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:205:20: 205:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:205:30: 205:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb148: {
        switchInt(move _56) -> [0: bb150, otherwise: bb149]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:205:20: 205:42
    }

    bb149: {
        _0 = DecodedKey::Unicode(const '^'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:206:21: 206:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:205:17: 209:18
    }

    bb150: {
        _0 = DecodedKey::Unicode(const '@'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:208:21: 208:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:205:17: 209:18
    }

    bb151: {
        _57 = Modifiers::is_shifted(_3) -> [return: bb152, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:212:20: 212:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:212:30: 212:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb152: {
        switchInt(move _57) -> [0: bb154, otherwise: bb153]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:212:20: 212:42
    }

    bb153: {
        _0 = DecodedKey::Unicode(const '|'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:213:21: 213:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:212:17: 216:18
    }

    bb154: {
        _0 = DecodedKey::Unicode(const '\\'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:215:21: 215:46
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:212:17: 216:18
    }

    bb155: {
        _59 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:219:20: 219:34
        switchInt(move _59) -> [0: bb156, otherwise: bb157]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:219:20: 219:57
    }

    bb156: {
        _58 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:219:20: 219:57
        goto -> bb158;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:219:20: 219:57
    }

    bb157: {
        _60 = Modifiers::is_ctrl(_3) -> [return: bb159, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:219:38: 219:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:219:48: 219:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb158: {
        switchInt(move _58) -> [0: bb161, otherwise: bb160]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:219:20: 219:57
    }

    bb159: {
        _58 = move _60;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:219:20: 219:57
        goto -> bb158;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:219:20: 219:57
    }

    bb160: {
        _0 = DecodedKey::Unicode(const '\u{1}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:220:21: 220:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:219:17: 225:18
    }

    bb161: {
        _61 = Modifiers::is_caps(_3) -> [return: bb162, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:221:27: 221:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:221:37: 221:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb162: {
        switchInt(move _61) -> [0: bb164, otherwise: bb163]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:221:27: 221:46
    }

    bb163: {
        _0 = DecodedKey::Unicode(const 'A'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:222:21: 222:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:221:24: 225:18
    }

    bb164: {
        _0 = DecodedKey::Unicode(const 'a'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:224:21: 224:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:221:24: 225:18
    }

    bb165: {
        _63 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:228:20: 228:34
        switchInt(move _63) -> [0: bb166, otherwise: bb167]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:228:20: 228:57
    }

    bb166: {
        _62 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:228:20: 228:57
        goto -> bb168;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:228:20: 228:57
    }

    bb167: {
        _64 = Modifiers::is_ctrl(_3) -> [return: bb169, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:228:38: 228:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:228:48: 228:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb168: {
        switchInt(move _62) -> [0: bb171, otherwise: bb170]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:228:20: 228:57
    }

    bb169: {
        _62 = move _64;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:228:20: 228:57
        goto -> bb168;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:228:20: 228:57
    }

    bb170: {
        _0 = DecodedKey::Unicode(const '\u{f}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:229:21: 229:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:228:17: 234:18
    }

    bb171: {
        _65 = Modifiers::is_caps(_3) -> [return: bb172, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:230:27: 230:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:230:37: 230:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb172: {
        switchInt(move _65) -> [0: bb174, otherwise: bb173]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:230:27: 230:46
    }

    bb173: {
        _0 = DecodedKey::Unicode(const 'O'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:231:21: 231:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:230:24: 234:18
    }

    bb174: {
        _0 = DecodedKey::Unicode(const 'o'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:233:21: 233:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:230:24: 234:18
    }

    bb175: {
        _67 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:237:20: 237:34
        switchInt(move _67) -> [0: bb176, otherwise: bb177]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:237:20: 237:57
    }

    bb176: {
        _66 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:237:20: 237:57
        goto -> bb178;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:237:20: 237:57
    }

    bb177: {
        _68 = Modifiers::is_ctrl(_3) -> [return: bb179, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:237:38: 237:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:237:48: 237:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb178: {
        switchInt(move _66) -> [0: bb181, otherwise: bb180]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:237:20: 237:57
    }

    bb179: {
        _66 = move _68;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:237:20: 237:57
        goto -> bb178;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:237:20: 237:57
    }

    bb180: {
        _0 = DecodedKey::Unicode(const '\u{5}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:238:21: 238:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:237:17: 243:18
    }

    bb181: {
        _69 = Modifiers::is_caps(_3) -> [return: bb182, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:239:27: 239:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:239:37: 239:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb182: {
        switchInt(move _69) -> [0: bb184, otherwise: bb183]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:239:27: 239:46
    }

    bb183: {
        _0 = DecodedKey::Unicode(const 'E'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:240:21: 240:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:239:24: 243:18
    }

    bb184: {
        _0 = DecodedKey::Unicode(const 'e'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:242:21: 242:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:239:24: 243:18
    }

    bb185: {
        _71 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:246:20: 246:34
        switchInt(move _71) -> [0: bb186, otherwise: bb187]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:246:20: 246:57
    }

    bb186: {
        _70 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:246:20: 246:57
        goto -> bb188;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:246:20: 246:57
    }

    bb187: {
        _72 = Modifiers::is_ctrl(_3) -> [return: bb189, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:246:38: 246:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:246:48: 246:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb188: {
        switchInt(move _70) -> [0: bb191, otherwise: bb190]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:246:20: 246:57
    }

    bb189: {
        _70 = move _72;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:246:20: 246:57
        goto -> bb188;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:246:20: 246:57
    }

    bb190: {
        _0 = DecodedKey::Unicode(const '\u{15}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:247:21: 247:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:246:17: 252:18
    }

    bb191: {
        _73 = Modifiers::is_caps(_3) -> [return: bb192, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:248:27: 248:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:248:37: 248:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb192: {
        switchInt(move _73) -> [0: bb194, otherwise: bb193]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:248:27: 248:46
    }

    bb193: {
        _0 = DecodedKey::Unicode(const 'U'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:249:21: 249:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:248:24: 252:18
    }

    bb194: {
        _0 = DecodedKey::Unicode(const 'u'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:251:21: 251:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:248:24: 252:18
    }

    bb195: {
        _75 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:255:20: 255:34
        switchInt(move _75) -> [0: bb196, otherwise: bb197]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:255:20: 255:57
    }

    bb196: {
        _74 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:255:20: 255:57
        goto -> bb198;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:255:20: 255:57
    }

    bb197: {
        _76 = Modifiers::is_ctrl(_3) -> [return: bb199, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:255:38: 255:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:255:48: 255:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb198: {
        switchInt(move _74) -> [0: bb201, otherwise: bb200]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:255:20: 255:57
    }

    bb199: {
        _74 = move _76;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:255:20: 255:57
        goto -> bb198;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:255:20: 255:57
    }

    bb200: {
        _0 = DecodedKey::Unicode(const '\t'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:256:21: 256:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:255:17: 261:18
    }

    bb201: {
        _77 = Modifiers::is_caps(_3) -> [return: bb202, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:257:27: 257:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:257:37: 257:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb202: {
        switchInt(move _77) -> [0: bb204, otherwise: bb203]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:257:27: 257:46
    }

    bb203: {
        _0 = DecodedKey::Unicode(const 'I'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:258:21: 258:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:257:24: 261:18
    }

    bb204: {
        _0 = DecodedKey::Unicode(const 'i'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:260:21: 260:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:257:24: 261:18
    }

    bb205: {
        _79 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:264:20: 264:34
        switchInt(move _79) -> [0: bb206, otherwise: bb207]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:264:20: 264:57
    }

    bb206: {
        _78 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:264:20: 264:57
        goto -> bb208;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:264:20: 264:57
    }

    bb207: {
        _80 = Modifiers::is_ctrl(_3) -> [return: bb209, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:264:38: 264:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:264:48: 264:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb208: {
        switchInt(move _78) -> [0: bb211, otherwise: bb210]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:264:20: 264:57
    }

    bb209: {
        _78 = move _80;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:264:20: 264:57
        goto -> bb208;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:264:20: 264:57
    }

    bb210: {
        _0 = DecodedKey::Unicode(const '\u{4}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:265:21: 265:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:264:17: 270:18
    }

    bb211: {
        _81 = Modifiers::is_caps(_3) -> [return: bb212, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:266:27: 266:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:266:37: 266:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb212: {
        switchInt(move _81) -> [0: bb214, otherwise: bb213]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:266:27: 266:46
    }

    bb213: {
        _0 = DecodedKey::Unicode(const 'D'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:267:21: 267:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:266:24: 270:18
    }

    bb214: {
        _0 = DecodedKey::Unicode(const 'd'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:269:21: 269:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:266:24: 270:18
    }

    bb215: {
        _83 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:273:20: 273:34
        switchInt(move _83) -> [0: bb216, otherwise: bb217]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:273:20: 273:57
    }

    bb216: {
        _82 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:273:20: 273:57
        goto -> bb218;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:273:20: 273:57
    }

    bb217: {
        _84 = Modifiers::is_ctrl(_3) -> [return: bb219, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:273:38: 273:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:273:48: 273:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb218: {
        switchInt(move _82) -> [0: bb221, otherwise: bb220]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:273:20: 273:57
    }

    bb219: {
        _82 = move _84;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:273:20: 273:57
        goto -> bb218;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:273:20: 273:57
    }

    bb220: {
        _0 = DecodedKey::Unicode(const '\u{8}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:274:21: 274:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:273:17: 279:18
    }

    bb221: {
        _85 = Modifiers::is_caps(_3) -> [return: bb222, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:275:27: 275:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:275:37: 275:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb222: {
        switchInt(move _85) -> [0: bb224, otherwise: bb223]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:275:27: 275:46
    }

    bb223: {
        _0 = DecodedKey::Unicode(const 'H'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:276:21: 276:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:275:24: 279:18
    }

    bb224: {
        _0 = DecodedKey::Unicode(const 'h'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:278:21: 278:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:275:24: 279:18
    }

    bb225: {
        _87 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:282:20: 282:34
        switchInt(move _87) -> [0: bb226, otherwise: bb227]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:282:20: 282:57
    }

    bb226: {
        _86 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:282:20: 282:57
        goto -> bb228;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:282:20: 282:57
    }

    bb227: {
        _88 = Modifiers::is_ctrl(_3) -> [return: bb229, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:282:38: 282:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:282:48: 282:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb228: {
        switchInt(move _86) -> [0: bb231, otherwise: bb230]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:282:20: 282:57
    }

    bb229: {
        _86 = move _88;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:282:20: 282:57
        goto -> bb228;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:282:20: 282:57
    }

    bb230: {
        _0 = DecodedKey::Unicode(const '\u{14}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:283:21: 283:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:282:17: 288:18
    }

    bb231: {
        _89 = Modifiers::is_caps(_3) -> [return: bb232, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:284:27: 284:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:284:37: 284:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb232: {
        switchInt(move _89) -> [0: bb234, otherwise: bb233]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:284:27: 284:46
    }

    bb233: {
        _0 = DecodedKey::Unicode(const 'T'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:285:21: 285:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:284:24: 288:18
    }

    bb234: {
        _0 = DecodedKey::Unicode(const 't'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:287:21: 287:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:284:24: 288:18
    }

    bb235: {
        _91 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:291:20: 291:34
        switchInt(move _91) -> [0: bb236, otherwise: bb237]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:291:20: 291:57
    }

    bb236: {
        _90 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:291:20: 291:57
        goto -> bb238;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:291:20: 291:57
    }

    bb237: {
        _92 = Modifiers::is_ctrl(_3) -> [return: bb239, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:291:38: 291:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:291:48: 291:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb238: {
        switchInt(move _90) -> [0: bb241, otherwise: bb240]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:291:20: 291:57
    }

    bb239: {
        _90 = move _92;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:291:20: 291:57
        goto -> bb238;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:291:20: 291:57
    }

    bb240: {
        _0 = DecodedKey::Unicode(const '\u{e}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:292:21: 292:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:291:17: 297:18
    }

    bb241: {
        _93 = Modifiers::is_caps(_3) -> [return: bb242, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:293:27: 293:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:293:37: 293:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb242: {
        switchInt(move _93) -> [0: bb244, otherwise: bb243]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:293:27: 293:46
    }

    bb243: {
        _0 = DecodedKey::Unicode(const 'N'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:294:21: 294:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:293:24: 297:18
    }

    bb244: {
        _0 = DecodedKey::Unicode(const 'n'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:296:21: 296:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:293:24: 297:18
    }

    bb245: {
        _95 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:300:20: 300:34
        switchInt(move _95) -> [0: bb246, otherwise: bb247]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:300:20: 300:57
    }

    bb246: {
        _94 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:300:20: 300:57
        goto -> bb248;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:300:20: 300:57
    }

    bb247: {
        _96 = Modifiers::is_ctrl(_3) -> [return: bb249, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:300:38: 300:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:300:48: 300:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb248: {
        switchInt(move _94) -> [0: bb251, otherwise: bb250]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:300:20: 300:57
    }

    bb249: {
        _94 = move _96;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:300:20: 300:57
        goto -> bb248;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:300:20: 300:57
    }

    bb250: {
        _0 = DecodedKey::Unicode(const '\u{13}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:301:21: 301:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:300:17: 306:18
    }

    bb251: {
        _97 = Modifiers::is_caps(_3) -> [return: bb252, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:302:27: 302:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:302:37: 302:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb252: {
        switchInt(move _97) -> [0: bb254, otherwise: bb253]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:302:27: 302:46
    }

    bb253: {
        _0 = DecodedKey::Unicode(const 'S'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:303:21: 303:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:302:24: 306:18
    }

    bb254: {
        _0 = DecodedKey::Unicode(const 's'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:305:21: 305:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:302:24: 306:18
    }

    bb255: {
        _98 = Modifiers::is_shifted(_3) -> [return: bb256, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:309:20: 309:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:309:30: 309:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb256: {
        switchInt(move _98) -> [0: bb258, otherwise: bb257]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:309:20: 309:42
    }

    bb257: {
        _0 = DecodedKey::Unicode(const '_'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:310:21: 310:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:309:17: 313:18
    }

    bb258: {
        _0 = DecodedKey::Unicode(const '-'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:312:21: 312:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:309:17: 313:18
    }

    bb259: {
        _99 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb260, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:315:52: 315:61
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:315:55: 315:59
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb260: {
        _0 = DecodedKey::Unicode(move _99); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:315:32: 315:62
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:315:61: 315:62
    }

    bb261: {
        _100 = Modifiers::is_shifted(_3) -> [return: bb262, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:317:20: 317:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:317:30: 317:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb262: {
        switchInt(move _100) -> [0: bb264, otherwise: bb263]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:317:20: 317:42
    }

    bb263: {
        _0 = DecodedKey::Unicode(const '"'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:318:21: 318:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:317:17: 321:18
    }

    bb264: {
        _0 = DecodedKey::Unicode(const '\''); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:320:21: 320:46
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:317:17: 321:18
    }

    bb265: {
        _102 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:324:20: 324:34
        switchInt(move _102) -> [0: bb266, otherwise: bb267]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:324:20: 324:57
    }

    bb266: {
        _101 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:324:20: 324:57
        goto -> bb268;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:324:20: 324:57
    }

    bb267: {
        _103 = Modifiers::is_ctrl(_3) -> [return: bb269, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:324:38: 324:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:324:48: 324:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb268: {
        switchInt(move _101) -> [0: bb271, otherwise: bb270]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:324:20: 324:57
    }

    bb269: {
        _101 = move _103;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:324:20: 324:57
        goto -> bb268;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:324:20: 324:57
    }

    bb270: {
        _0 = DecodedKey::Unicode(const '\u{11}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:325:21: 325:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:324:17: 330:18
    }

    bb271: {
        _104 = Modifiers::is_caps(_3) -> [return: bb272, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:326:27: 326:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:326:37: 326:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb272: {
        switchInt(move _104) -> [0: bb274, otherwise: bb273]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:326:27: 326:46
    }

    bb273: {
        _0 = DecodedKey::Unicode(const 'Q'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:327:21: 327:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:326:24: 330:18
    }

    bb274: {
        _0 = DecodedKey::Unicode(const 'q'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:329:21: 329:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:326:24: 330:18
    }

    bb275: {
        _106 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:333:20: 333:34
        switchInt(move _106) -> [0: bb276, otherwise: bb277]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:333:20: 333:57
    }

    bb276: {
        _105 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:333:20: 333:57
        goto -> bb278;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:333:20: 333:57
    }

    bb277: {
        _107 = Modifiers::is_ctrl(_3) -> [return: bb279, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:333:38: 333:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:333:48: 333:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb278: {
        switchInt(move _105) -> [0: bb281, otherwise: bb280]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:333:20: 333:57
    }

    bb279: {
        _105 = move _107;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:333:20: 333:57
        goto -> bb278;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:333:20: 333:57
    }

    bb280: {
        _0 = DecodedKey::Unicode(const '\n'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:334:21: 334:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:333:17: 339:18
    }

    bb281: {
        _108 = Modifiers::is_caps(_3) -> [return: bb282, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:335:27: 335:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:335:37: 335:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb282: {
        switchInt(move _108) -> [0: bb284, otherwise: bb283]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:335:27: 335:46
    }

    bb283: {
        _0 = DecodedKey::Unicode(const 'J'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:336:21: 336:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:335:24: 339:18
    }

    bb284: {
        _0 = DecodedKey::Unicode(const 'j'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:338:21: 338:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:335:24: 339:18
    }

    bb285: {
        _110 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:342:20: 342:34
        switchInt(move _110) -> [0: bb286, otherwise: bb287]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:342:20: 342:57
    }

    bb286: {
        _109 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:342:20: 342:57
        goto -> bb288;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:342:20: 342:57
    }

    bb287: {
        _111 = Modifiers::is_ctrl(_3) -> [return: bb289, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:342:38: 342:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:342:48: 342:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb288: {
        switchInt(move _109) -> [0: bb291, otherwise: bb290]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:342:20: 342:57
    }

    bb289: {
        _109 = move _111;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:342:20: 342:57
        goto -> bb288;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:342:20: 342:57
    }

    bb290: {
        _0 = DecodedKey::Unicode(const '\u{b}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:343:21: 343:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:342:17: 348:18
    }

    bb291: {
        _112 = Modifiers::is_caps(_3) -> [return: bb292, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:344:27: 344:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:344:37: 344:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb292: {
        switchInt(move _112) -> [0: bb294, otherwise: bb293]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:344:27: 344:46
    }

    bb293: {
        _0 = DecodedKey::Unicode(const 'K'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:345:21: 345:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:344:24: 348:18
    }

    bb294: {
        _0 = DecodedKey::Unicode(const 'k'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:347:21: 347:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:344:24: 348:18
    }

    bb295: {
        _114 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:351:20: 351:34
        switchInt(move _114) -> [0: bb296, otherwise: bb297]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:351:20: 351:57
    }

    bb296: {
        _113 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:351:20: 351:57
        goto -> bb298;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:351:20: 351:57
    }

    bb297: {
        _115 = Modifiers::is_ctrl(_3) -> [return: bb299, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:351:38: 351:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:351:48: 351:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb298: {
        switchInt(move _113) -> [0: bb301, otherwise: bb300]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:351:20: 351:57
    }

    bb299: {
        _113 = move _115;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:351:20: 351:57
        goto -> bb298;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:351:20: 351:57
    }

    bb300: {
        _0 = DecodedKey::Unicode(const '\u{18}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:352:21: 352:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:351:17: 357:18
    }

    bb301: {
        _116 = Modifiers::is_caps(_3) -> [return: bb302, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:353:27: 353:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:353:37: 353:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb302: {
        switchInt(move _116) -> [0: bb304, otherwise: bb303]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:353:27: 353:46
    }

    bb303: {
        _0 = DecodedKey::Unicode(const 'X'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:354:21: 354:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:353:24: 357:18
    }

    bb304: {
        _0 = DecodedKey::Unicode(const 'x'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:356:21: 356:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:353:24: 357:18
    }

    bb305: {
        _118 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:360:20: 360:34
        switchInt(move _118) -> [0: bb306, otherwise: bb307]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:360:20: 360:57
    }

    bb306: {
        _117 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:360:20: 360:57
        goto -> bb308;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:360:20: 360:57
    }

    bb307: {
        _119 = Modifiers::is_ctrl(_3) -> [return: bb309, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:360:38: 360:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:360:48: 360:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb308: {
        switchInt(move _117) -> [0: bb311, otherwise: bb310]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:360:20: 360:57
    }

    bb309: {
        _117 = move _119;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:360:20: 360:57
        goto -> bb308;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:360:20: 360:57
    }

    bb310: {
        _0 = DecodedKey::Unicode(const '\u{2}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:361:21: 361:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:360:17: 366:18
    }

    bb311: {
        _120 = Modifiers::is_caps(_3) -> [return: bb312, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:362:27: 362:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:362:37: 362:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb312: {
        switchInt(move _120) -> [0: bb314, otherwise: bb313]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:362:27: 362:46
    }

    bb313: {
        _0 = DecodedKey::Unicode(const 'B'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:363:21: 363:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:362:24: 366:18
    }

    bb314: {
        _0 = DecodedKey::Unicode(const 'b'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:365:21: 365:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:362:24: 366:18
    }

    bb315: {
        _122 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:369:20: 369:34
        switchInt(move _122) -> [0: bb316, otherwise: bb317]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:369:20: 369:57
    }

    bb316: {
        _121 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:369:20: 369:57
        goto -> bb318;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:369:20: 369:57
    }

    bb317: {
        _123 = Modifiers::is_ctrl(_3) -> [return: bb319, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:369:38: 369:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:369:48: 369:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb318: {
        switchInt(move _121) -> [0: bb321, otherwise: bb320]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:369:20: 369:57
    }

    bb319: {
        _121 = move _123;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:369:20: 369:57
        goto -> bb318;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:369:20: 369:57
    }

    bb320: {
        _0 = DecodedKey::Unicode(const '\r'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:370:21: 370:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:369:17: 375:18
    }

    bb321: {
        _124 = Modifiers::is_caps(_3) -> [return: bb322, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:371:27: 371:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:371:37: 371:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb322: {
        switchInt(move _124) -> [0: bb324, otherwise: bb323]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:371:27: 371:46
    }

    bb323: {
        _0 = DecodedKey::Unicode(const 'M'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:372:21: 372:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:371:24: 375:18
    }

    bb324: {
        _0 = DecodedKey::Unicode(const 'm'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:374:21: 374:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:371:24: 375:18
    }

    bb325: {
        _126 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:378:20: 378:34
        switchInt(move _126) -> [0: bb326, otherwise: bb327]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:378:20: 378:57
    }

    bb326: {
        _125 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:378:20: 378:57
        goto -> bb328;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:378:20: 378:57
    }

    bb327: {
        _127 = Modifiers::is_ctrl(_3) -> [return: bb329, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:378:38: 378:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:378:48: 378:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb328: {
        switchInt(move _125) -> [0: bb331, otherwise: bb330]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:378:20: 378:57
    }

    bb329: {
        _125 = move _127;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:378:20: 378:57
        goto -> bb328;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:378:20: 378:57
    }

    bb330: {
        _0 = DecodedKey::Unicode(const '\u{17}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:379:21: 379:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:378:17: 384:18
    }

    bb331: {
        _128 = Modifiers::is_caps(_3) -> [return: bb332, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:380:27: 380:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:380:37: 380:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb332: {
        switchInt(move _128) -> [0: bb334, otherwise: bb333]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:380:27: 380:46
    }

    bb333: {
        _0 = DecodedKey::Unicode(const 'W'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:381:21: 381:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:380:24: 384:18
    }

    bb334: {
        _0 = DecodedKey::Unicode(const 'w'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:383:21: 383:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:380:24: 384:18
    }

    bb335: {
        _130 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:387:20: 387:34
        switchInt(move _130) -> [0: bb336, otherwise: bb337]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:387:20: 387:57
    }

    bb336: {
        _129 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:387:20: 387:57
        goto -> bb338;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:387:20: 387:57
    }

    bb337: {
        _131 = Modifiers::is_ctrl(_3) -> [return: bb339, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:387:38: 387:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:387:48: 387:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb338: {
        switchInt(move _129) -> [0: bb341, otherwise: bb340]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:387:20: 387:57
    }

    bb339: {
        _129 = move _131;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:387:20: 387:57
        goto -> bb338;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:387:20: 387:57
    }

    bb340: {
        _0 = DecodedKey::Unicode(const '\u{16}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:388:21: 388:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:387:17: 393:18
    }

    bb341: {
        _132 = Modifiers::is_caps(_3) -> [return: bb342, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:389:27: 389:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:389:37: 389:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb342: {
        switchInt(move _132) -> [0: bb344, otherwise: bb343]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:389:27: 389:46
    }

    bb343: {
        _0 = DecodedKey::Unicode(const 'V'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:390:21: 390:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:389:24: 393:18
    }

    bb344: {
        _0 = DecodedKey::Unicode(const 'v'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:392:21: 392:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:389:24: 393:18
    }

    bb345: {
        _134 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:396:20: 396:34
        switchInt(move _134) -> [0: bb346, otherwise: bb347]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:396:20: 396:57
    }

    bb346: {
        _133 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:396:20: 396:57
        goto -> bb348;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:396:20: 396:57
    }

    bb347: {
        _135 = Modifiers::is_ctrl(_3) -> [return: bb349, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:396:38: 396:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:396:48: 396:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb348: {
        switchInt(move _133) -> [0: bb351, otherwise: bb350]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:396:20: 396:57
    }

    bb349: {
        _133 = move _135;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:396:20: 396:57
        goto -> bb348;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:396:20: 396:57
    }

    bb350: {
        _0 = DecodedKey::Unicode(const '\u{1a}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:397:21: 397:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:396:17: 402:18
    }

    bb351: {
        _136 = Modifiers::is_caps(_3) -> [return: bb352, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:398:27: 398:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:398:37: 398:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb352: {
        switchInt(move _136) -> [0: bb354, otherwise: bb353]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:398:27: 398:46
    }

    bb353: {
        _0 = DecodedKey::Unicode(const 'Z'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:399:21: 399:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:398:24: 402:18
    }

    bb354: {
        _0 = DecodedKey::Unicode(const 'z'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:401:21: 401:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:398:24: 402:18
    }

    bb355: {
        _0 = DecodedKey::Unicode(const ' '); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:404:34: 404:58
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:404:34: 404:58
    }

    bb356: {
        _137 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb357, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:405:52: 405:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:405:56: 405:60
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb357: {
        _0 = DecodedKey::Unicode(move _137); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:405:32: 405:63
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:405:62: 405:63
    }

    bb358: {
        _0 = DecodedKey::Unicode(const '/'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:406:38: 406:62
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:406:38: 406:62
    }

    bb359: {
        _0 = DecodedKey::Unicode(const '*'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:407:40: 407:64
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:407:40: 407:64
    }

    bb360: {
        _0 = DecodedKey::Unicode(const '-'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:408:40: 408:64
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:408:40: 408:64
    }

    bb361: {
        _138 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:410:20: 410:37
        switchInt(move _138) -> [0: bb363, otherwise: bb362]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:410:20: 410:37
    }

    bb362: {
        _0 = DecodedKey::Unicode(const '7'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:411:21: 411:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:410:17: 414:18
    }

    bb363: {
        _139 = KeyCode::Home;            // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:413:40: 413:53
        _0 = DecodedKey::RawKey(move _139); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:413:21: 413:54
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:410:17: 414:18
    }

    bb364: {
        _140 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:417:20: 417:37
        switchInt(move _140) -> [0: bb366, otherwise: bb365]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:417:20: 417:37
    }

    bb365: {
        _0 = DecodedKey::Unicode(const '8'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:418:21: 418:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:417:17: 421:18
    }

    bb366: {
        _141 = KeyCode::ArrowUp;         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:420:40: 420:56
        _0 = DecodedKey::RawKey(move _141); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:420:21: 420:57
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:417:17: 421:18
    }

    bb367: {
        _142 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:424:20: 424:37
        switchInt(move _142) -> [0: bb369, otherwise: bb368]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:424:20: 424:37
    }

    bb368: {
        _0 = DecodedKey::Unicode(const '9'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:425:21: 425:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:424:17: 428:18
    }

    bb369: {
        _143 = KeyCode::PageUp;          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:427:40: 427:55
        _0 = DecodedKey::RawKey(move _143); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:427:21: 427:56
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:424:17: 428:18
    }

    bb370: {
        _0 = DecodedKey::Unicode(const '+'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:430:35: 430:59
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:430:35: 430:59
    }

    bb371: {
        _144 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:432:20: 432:37
        switchInt(move _144) -> [0: bb373, otherwise: bb372]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:432:20: 432:37
    }

    bb372: {
        _0 = DecodedKey::Unicode(const '4'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:433:21: 433:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:432:17: 436:18
    }

    bb373: {
        _145 = KeyCode::ArrowLeft;       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:435:40: 435:58
        _0 = DecodedKey::RawKey(move _145); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:435:21: 435:59
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:432:17: 436:18
    }

    bb374: {
        _0 = DecodedKey::Unicode(const '5'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:438:33: 438:57
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:438:33: 438:57
    }

    bb375: {
        _146 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:440:20: 440:37
        switchInt(move _146) -> [0: bb377, otherwise: bb376]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:440:20: 440:37
    }

    bb376: {
        _0 = DecodedKey::Unicode(const '6'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:441:21: 441:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:440:17: 444:18
    }

    bb377: {
        _147 = KeyCode::ArrowRight;      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:443:40: 443:59
        _0 = DecodedKey::RawKey(move _147); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:443:21: 443:60
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:440:17: 444:18
    }

    bb378: {
        _148 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:447:20: 447:37
        switchInt(move _148) -> [0: bb380, otherwise: bb379]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:447:20: 447:37
    }

    bb379: {
        _0 = DecodedKey::Unicode(const '1'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:448:21: 448:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:447:17: 451:18
    }

    bb380: {
        _149 = KeyCode::End;             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:450:40: 450:52
        _0 = DecodedKey::RawKey(move _149); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:450:21: 450:53
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:447:17: 451:18
    }

    bb381: {
        _150 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:454:20: 454:37
        switchInt(move _150) -> [0: bb383, otherwise: bb382]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:454:20: 454:37
    }

    bb382: {
        _0 = DecodedKey::Unicode(const '2'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:455:21: 455:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:454:17: 458:18
    }

    bb383: {
        _151 = KeyCode::ArrowDown;       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:457:40: 457:58
        _0 = DecodedKey::RawKey(move _151); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:457:21: 457:59
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:454:17: 458:18
    }

    bb384: {
        _152 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:461:20: 461:37
        switchInt(move _152) -> [0: bb386, otherwise: bb385]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:461:20: 461:37
    }

    bb385: {
        _0 = DecodedKey::Unicode(const '3'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:462:21: 462:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:461:17: 465:18
    }

    bb386: {
        _153 = KeyCode::PageDown;        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:464:40: 464:57
        _0 = DecodedKey::RawKey(move _153); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:464:21: 464:58
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:461:17: 465:18
    }

    bb387: {
        _154 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:468:20: 468:37
        switchInt(move _154) -> [0: bb389, otherwise: bb388]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:468:20: 468:37
    }

    bb388: {
        _0 = DecodedKey::Unicode(const '0'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:469:21: 469:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:468:17: 472:18
    }

    bb389: {
        _155 = KeyCode::Insert;          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:471:40: 471:55
        _0 = DecodedKey::RawKey(move _155); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:471:21: 471:56
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:468:17: 472:18
    }

    bb390: {
        _156 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:475:20: 475:37
        switchInt(move _156) -> [0: bb392, otherwise: bb391]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:475:20: 475:37
    }

    bb391: {
        _0 = DecodedKey::Unicode(const '.'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:476:21: 476:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:475:17: 479:18
    }

    bb392: {
        _157 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb393, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:478:41: 478:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:478:45: 478:49
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb393: {
        _0 = DecodedKey::Unicode(move _157); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:478:21: 478:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:475:17: 479:18
    }

    bb394: {
        _158 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb395, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:481:57: 481:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:481:60: 481:64
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb395: {
        _0 = DecodedKey::Unicode(move _158); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:481:37: 481:67
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:481:66: 481:67
    }

    bb396: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:484:6: 484:6
    }
}

promoted[0] in dvorak_programmer104::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:10:1: 10:34>::map_keycode: &HandleControl = {
    let mut _0: &HandleControl;          // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:45: 17:79
    let mut _1: HandleControl;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:45: 17:79

    bb0: {
        _1 = HandleControl::MapLettersToUnicode; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:45: 17:79
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:45: 17:79
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak_programmer104.rs:17:45: 17:79
    }
}

fn dvorak104::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:10:1: 10:37>::map_keycode(_1: &Dvorak104Key, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:12:9: 12:14
    debug keycode => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:13:9: 13:16
    debug modifiers => _3;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:14:9: 14:18
    debug handle_ctrl => _4;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:15:9: 15:20
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:16:10: 16:20
    let _5: bool;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:13: 17:27
    let mut _6: &HandleControl;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:30: 17:41
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:19:13: 19:30
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:20:20: 20:42
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:27:20: 27:42
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:34:20: 34:42
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:41:20: 41:42
    let mut _12: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:48:20: 48:42
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:55:20: 55:57
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:55:20: 55:34
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:55:38: 55:57
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:57:27: 57:46
    let mut _17: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:64:20: 64:57
    let mut _18: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:64:20: 64:34
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:64:38: 64:57
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:66:27: 66:46
    let mut _21: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:73:20: 73:57
    let mut _22: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:73:20: 73:34
    let mut _23: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:73:38: 73:57
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:75:27: 75:46
    let mut _25: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:82:20: 82:57
    let mut _26: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:82:20: 82:34
    let mut _27: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:82:38: 82:57
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:84:27: 84:46
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:91:20: 91:57
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:91:20: 91:34
    let mut _31: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:91:38: 91:57
    let mut _32: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:93:27: 93:46
    let mut _33: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:100:20: 100:57
    let mut _34: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:100:20: 100:34
    let mut _35: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:100:38: 100:57
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:102:27: 102:46
    let mut _37: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:109:20: 109:57
    let mut _38: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:109:20: 109:34
    let mut _39: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:109:38: 109:57
    let mut _40: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:111:27: 111:46
    let mut _41: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:118:20: 118:42
    let mut _42: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:125:20: 125:42
    let mut _43: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:132:20: 132:57
    let mut _44: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:132:20: 132:34
    let mut _45: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:132:38: 132:57
    let mut _46: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:134:27: 134:46
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:141:20: 141:57
    let mut _48: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:141:20: 141:34
    let mut _49: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:141:38: 141:57
    let mut _50: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:143:27: 143:46
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:150:20: 150:57
    let mut _52: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:150:20: 150:34
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:150:38: 150:57
    let mut _54: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:152:27: 152:46
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:159:20: 159:57
    let mut _56: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:159:20: 159:34
    let mut _57: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:159:38: 159:57
    let mut _58: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:161:27: 161:46
    let mut _59: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:168:20: 168:57
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:168:20: 168:34
    let mut _61: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:168:38: 168:57
    let mut _62: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:170:27: 170:46
    let mut _63: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:177:20: 177:57
    let mut _64: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:177:20: 177:34
    let mut _65: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:177:38: 177:57
    let mut _66: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:179:27: 179:46
    let mut _67: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:186:20: 186:57
    let mut _68: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:186:20: 186:34
    let mut _69: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:186:38: 186:57
    let mut _70: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:188:27: 188:46
    let mut _71: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:195:20: 195:57
    let mut _72: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:195:20: 195:34
    let mut _73: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:195:38: 195:57
    let mut _74: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:197:27: 197:46
    let mut _75: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:204:20: 204:57
    let mut _76: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:204:20: 204:34
    let mut _77: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:204:38: 204:57
    let mut _78: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:206:27: 206:46
    let mut _79: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:213:20: 213:42
    let mut _80: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:220:20: 220:42
    let mut _81: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:227:20: 227:57
    let mut _82: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:227:20: 227:34
    let mut _83: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:227:38: 227:57
    let mut _84: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:229:27: 229:46
    let mut _85: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:236:20: 236:57
    let mut _86: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:236:20: 236:34
    let mut _87: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:236:38: 236:57
    let mut _88: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:238:27: 238:46
    let mut _89: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:245:20: 245:57
    let mut _90: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:245:20: 245:34
    let mut _91: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:245:38: 245:57
    let mut _92: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:247:27: 247:46
    let mut _93: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:254:20: 254:57
    let mut _94: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:254:20: 254:34
    let mut _95: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:254:38: 254:57
    let mut _96: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:256:27: 256:46
    let mut _97: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:263:20: 263:57
    let mut _98: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:263:20: 263:34
    let mut _99: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:263:38: 263:57
    let mut _100: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:265:27: 265:46
    let mut _101: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:272:20: 272:57
    let mut _102: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:272:20: 272:34
    let mut _103: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:272:38: 272:57
    let mut _104: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:274:27: 274:46
    let mut _105: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:281:20: 281:57
    let mut _106: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:281:20: 281:34
    let mut _107: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:281:38: 281:57
    let mut _108: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:283:27: 283:46
    let mut _109: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:290:20: 290:57
    let mut _110: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:290:20: 290:34
    let mut _111: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:290:38: 290:57
    let mut _112: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:292:27: 292:46
    let mut _114: &layouts::us104::Us104Key; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:300:17: 300:58
    let mut _115: HandleControl;         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:300:46: 300:57
    let mut _116: &HandleControl;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:45: 17:79
    scope 1 {
        debug map_to_unicode => _5;      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:13: 17:27
        scope 2 {
            debug e => _2;               // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:298:13: 298:14
            let _113: layouts::us104::Us104Key; // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:299:21: 299:23
            scope 3 {
                debug us => const Us104Key; // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:299:21: 299:23
            }
        }
    }

    bb0: {
        _6 = &_4;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:30: 17:41
        _116 = const _;                  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:45: 17:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:45: 17:79
                                         // + literal: Const { ty: &HandleControl, val: Unevaluated(<Dvorak104Key as KeyboardLayout>::map_keycode, [], Some(promoted[0])) }
        _5 = <HandleControl as PartialEq>::eq(move _6, _116) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:30: 17:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:30: 17:79
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HandleControl, &'b HandleControl) -> bool {<HandleControl as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_2);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:18:15: 18:22
        switchInt(move _7) -> [28: bb3, 29: bb7, 39: bb11, 40: bb15, 41: bb19, 42: bb23, 43: bb33, 44: bb43, 45: bb53, 46: bb63, 47: bb73, 48: bb83, 49: bb93, 50: bb97, 62: bb101, 63: bb111, 64: bb121, 65: bb131, 66: bb141, 67: bb151, 68: bb161, 69: bb171, 70: bb181, 71: bb191, 77: bb195, 78: bb199, 79: bb209, 80: bb219, 81: bb229, 82: bb239, 84: bb249, 85: bb259, 86: bb269, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:18:9: 18:22
    }

    bb2: {
        _114 = &_113;                    // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:300:17: 300:58
        _115 = _4;                       // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:300:46: 300:57
        _0 = <Us104Key as KeyboardLayout>::map_keycode(move _114, _2, _3, move _115) -> [return: bb279, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:300:17: 300:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:300:20: 300:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Us104Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Us104Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = Modifiers::is_shifted(_3) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:20:20: 20:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:20:30: 20:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt(move _8) -> [0: bb6, otherwise: bb5]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:20:20: 20:42
    }

    bb5: {
        _0 = DecodedKey::Unicode(const '{'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:21:21: 21:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:20:17: 24:18
    }

    bb6: {
        _0 = DecodedKey::Unicode(const '['); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:23:21: 23:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:20:17: 24:18
    }

    bb7: {
        _9 = Modifiers::is_shifted(_3) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:27:20: 27:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:27:30: 27:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb8: {
        switchInt(move _9) -> [0: bb10, otherwise: bb9]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:27:20: 27:42
    }

    bb9: {
        _0 = DecodedKey::Unicode(const '}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:28:21: 28:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:27:17: 31:18
    }

    bb10: {
        _0 = DecodedKey::Unicode(const ']'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:30:21: 30:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:27:17: 31:18
    }

    bb11: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:34:20: 34:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:34:30: 34:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _10) -> [0: bb14, otherwise: bb13]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:34:20: 34:42
    }

    bb13: {
        _0 = DecodedKey::Unicode(const '"'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:35:21: 35:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:34:17: 38:18
    }

    bb14: {
        _0 = DecodedKey::Unicode(const '\''); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:37:21: 37:46
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:34:17: 38:18
    }

    bb15: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:41:20: 41:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:41:30: 41:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb16: {
        switchInt(move _11) -> [0: bb18, otherwise: bb17]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:41:20: 41:42
    }

    bb17: {
        _0 = DecodedKey::Unicode(const '<'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:42:21: 42:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:41:17: 45:18
    }

    bb18: {
        _0 = DecodedKey::Unicode(const ','); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:44:21: 44:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:41:17: 45:18
    }

    bb19: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:48:20: 48:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:48:30: 48:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb20: {
        switchInt(move _12) -> [0: bb22, otherwise: bb21]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:48:20: 48:42
    }

    bb21: {
        _0 = DecodedKey::Unicode(const '>'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:49:21: 49:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:48:17: 52:18
    }

    bb22: {
        _0 = DecodedKey::Unicode(const '.'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:51:21: 51:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:48:17: 52:18
    }

    bb23: {
        _14 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:55:20: 55:34
        switchInt(move _14) -> [0: bb24, otherwise: bb25]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:55:20: 55:57
    }

    bb24: {
        _13 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:55:20: 55:57
        goto -> bb26;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:55:20: 55:57
    }

    bb25: {
        _15 = Modifiers::is_ctrl(_3) -> [return: bb27, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:55:38: 55:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:55:48: 55:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb26: {
        switchInt(move _13) -> [0: bb29, otherwise: bb28]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:55:20: 55:57
    }

    bb27: {
        _13 = move _15;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:55:20: 55:57
        goto -> bb26;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:55:20: 55:57
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '\u{10}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:56:21: 56:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:55:17: 61:18
    }

    bb29: {
        _16 = Modifiers::is_caps(_3) -> [return: bb30, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:57:27: 57:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:57:37: 57:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb30: {
        switchInt(move _16) -> [0: bb32, otherwise: bb31]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:57:27: 57:46
    }

    bb31: {
        _0 = DecodedKey::Unicode(const 'P'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:58:21: 58:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:57:24: 61:18
    }

    bb32: {
        _0 = DecodedKey::Unicode(const 'p'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:60:21: 60:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:57:24: 61:18
    }

    bb33: {
        _18 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:64:20: 64:34
        switchInt(move _18) -> [0: bb34, otherwise: bb35]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:64:20: 64:57
    }

    bb34: {
        _17 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:64:20: 64:57
        goto -> bb36;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:64:20: 64:57
    }

    bb35: {
        _19 = Modifiers::is_ctrl(_3) -> [return: bb37, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:64:38: 64:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:64:48: 64:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb36: {
        switchInt(move _17) -> [0: bb39, otherwise: bb38]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:64:20: 64:57
    }

    bb37: {
        _17 = move _19;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:64:20: 64:57
        goto -> bb36;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:64:20: 64:57
    }

    bb38: {
        _0 = DecodedKey::Unicode(const '\u{19}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:65:21: 65:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:64:17: 70:18
    }

    bb39: {
        _20 = Modifiers::is_caps(_3) -> [return: bb40, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:66:27: 66:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:66:37: 66:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb40: {
        switchInt(move _20) -> [0: bb42, otherwise: bb41]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:66:27: 66:46
    }

    bb41: {
        _0 = DecodedKey::Unicode(const 'Y'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:67:21: 67:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:66:24: 70:18
    }

    bb42: {
        _0 = DecodedKey::Unicode(const 'y'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:69:21: 69:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:66:24: 70:18
    }

    bb43: {
        _22 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:73:20: 73:34
        switchInt(move _22) -> [0: bb44, otherwise: bb45]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:73:20: 73:57
    }

    bb44: {
        _21 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:73:20: 73:57
        goto -> bb46;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:73:20: 73:57
    }

    bb45: {
        _23 = Modifiers::is_ctrl(_3) -> [return: bb47, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:73:38: 73:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:73:48: 73:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb46: {
        switchInt(move _21) -> [0: bb49, otherwise: bb48]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:73:20: 73:57
    }

    bb47: {
        _21 = move _23;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:73:20: 73:57
        goto -> bb46;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:73:20: 73:57
    }

    bb48: {
        _0 = DecodedKey::Unicode(const '\u{6}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:74:21: 74:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:73:17: 79:18
    }

    bb49: {
        _24 = Modifiers::is_caps(_3) -> [return: bb50, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:75:27: 75:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:75:37: 75:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb50: {
        switchInt(move _24) -> [0: bb52, otherwise: bb51]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:75:27: 75:46
    }

    bb51: {
        _0 = DecodedKey::Unicode(const 'F'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:76:21: 76:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:75:24: 79:18
    }

    bb52: {
        _0 = DecodedKey::Unicode(const 'f'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:78:21: 78:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:75:24: 79:18
    }

    bb53: {
        _26 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:82:20: 82:34
        switchInt(move _26) -> [0: bb54, otherwise: bb55]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:82:20: 82:57
    }

    bb54: {
        _25 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:82:20: 82:57
        goto -> bb56;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:82:20: 82:57
    }

    bb55: {
        _27 = Modifiers::is_ctrl(_3) -> [return: bb57, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:82:38: 82:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:82:48: 82:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb56: {
        switchInt(move _25) -> [0: bb59, otherwise: bb58]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:82:20: 82:57
    }

    bb57: {
        _25 = move _27;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:82:20: 82:57
        goto -> bb56;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:82:20: 82:57
    }

    bb58: {
        _0 = DecodedKey::Unicode(const '\u{7}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:83:21: 83:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:82:17: 88:18
    }

    bb59: {
        _28 = Modifiers::is_caps(_3) -> [return: bb60, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:84:27: 84:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:84:37: 84:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb60: {
        switchInt(move _28) -> [0: bb62, otherwise: bb61]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:84:27: 84:46
    }

    bb61: {
        _0 = DecodedKey::Unicode(const 'G'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:85:21: 85:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:84:24: 88:18
    }

    bb62: {
        _0 = DecodedKey::Unicode(const 'g'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:87:21: 87:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:84:24: 88:18
    }

    bb63: {
        _30 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:91:20: 91:34
        switchInt(move _30) -> [0: bb64, otherwise: bb65]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:91:20: 91:57
    }

    bb64: {
        _29 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:91:20: 91:57
        goto -> bb66;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:91:20: 91:57
    }

    bb65: {
        _31 = Modifiers::is_ctrl(_3) -> [return: bb67, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:91:38: 91:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:91:48: 91:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb66: {
        switchInt(move _29) -> [0: bb69, otherwise: bb68]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:91:20: 91:57
    }

    bb67: {
        _29 = move _31;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:91:20: 91:57
        goto -> bb66;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:91:20: 91:57
    }

    bb68: {
        _0 = DecodedKey::Unicode(const '\u{3}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:92:21: 92:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:91:17: 97:18
    }

    bb69: {
        _32 = Modifiers::is_caps(_3) -> [return: bb70, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:93:27: 93:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:93:37: 93:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb70: {
        switchInt(move _32) -> [0: bb72, otherwise: bb71]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:93:27: 93:46
    }

    bb71: {
        _0 = DecodedKey::Unicode(const 'C'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:94:21: 94:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:93:24: 97:18
    }

    bb72: {
        _0 = DecodedKey::Unicode(const 'c'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:96:21: 96:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:93:24: 97:18
    }

    bb73: {
        _34 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:100:20: 100:34
        switchInt(move _34) -> [0: bb74, otherwise: bb75]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:100:20: 100:57
    }

    bb74: {
        _33 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:100:20: 100:57
        goto -> bb76;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:100:20: 100:57
    }

    bb75: {
        _35 = Modifiers::is_ctrl(_3) -> [return: bb77, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:100:38: 100:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:100:48: 100:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb76: {
        switchInt(move _33) -> [0: bb79, otherwise: bb78]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:100:20: 100:57
    }

    bb77: {
        _33 = move _35;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:100:20: 100:57
        goto -> bb76;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:100:20: 100:57
    }

    bb78: {
        _0 = DecodedKey::Unicode(const '\u{12}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:101:21: 101:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:100:17: 106:18
    }

    bb79: {
        _36 = Modifiers::is_caps(_3) -> [return: bb80, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:102:27: 102:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:102:37: 102:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb80: {
        switchInt(move _36) -> [0: bb82, otherwise: bb81]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:102:27: 102:46
    }

    bb81: {
        _0 = DecodedKey::Unicode(const 'R'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:103:21: 103:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:102:24: 106:18
    }

    bb82: {
        _0 = DecodedKey::Unicode(const 'r'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:105:21: 105:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:102:24: 106:18
    }

    bb83: {
        _38 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:109:20: 109:34
        switchInt(move _38) -> [0: bb84, otherwise: bb85]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:109:20: 109:57
    }

    bb84: {
        _37 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:109:20: 109:57
        goto -> bb86;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:109:20: 109:57
    }

    bb85: {
        _39 = Modifiers::is_ctrl(_3) -> [return: bb87, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:109:38: 109:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:109:48: 109:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb86: {
        switchInt(move _37) -> [0: bb89, otherwise: bb88]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:109:20: 109:57
    }

    bb87: {
        _37 = move _39;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:109:20: 109:57
        goto -> bb86;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:109:20: 109:57
    }

    bb88: {
        _0 = DecodedKey::Unicode(const '\u{c}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:110:21: 110:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:109:17: 115:18
    }

    bb89: {
        _40 = Modifiers::is_caps(_3) -> [return: bb90, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:111:27: 111:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:111:37: 111:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb90: {
        switchInt(move _40) -> [0: bb92, otherwise: bb91]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:111:27: 111:46
    }

    bb91: {
        _0 = DecodedKey::Unicode(const 'L'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:112:21: 112:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:111:24: 115:18
    }

    bb92: {
        _0 = DecodedKey::Unicode(const 'l'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:114:21: 114:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:111:24: 115:18
    }

    bb93: {
        _41 = Modifiers::is_shifted(_3) -> [return: bb94, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:118:20: 118:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:118:30: 118:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb94: {
        switchInt(move _41) -> [0: bb96, otherwise: bb95]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:118:20: 118:42
    }

    bb95: {
        _0 = DecodedKey::Unicode(const '?'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:119:21: 119:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:118:17: 122:18
    }

    bb96: {
        _0 = DecodedKey::Unicode(const '/'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:121:21: 121:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:118:17: 122:18
    }

    bb97: {
        _42 = Modifiers::is_shifted(_3) -> [return: bb98, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:125:20: 125:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:125:30: 125:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb98: {
        switchInt(move _42) -> [0: bb100, otherwise: bb99]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:125:20: 125:42
    }

    bb99: {
        _0 = DecodedKey::Unicode(const '+'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:126:21: 126:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:125:17: 129:18
    }

    bb100: {
        _0 = DecodedKey::Unicode(const '='); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:128:21: 128:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:125:17: 129:18
    }

    bb101: {
        _44 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:132:20: 132:34
        switchInt(move _44) -> [0: bb102, otherwise: bb103]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:132:20: 132:57
    }

    bb102: {
        _43 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:132:20: 132:57
        goto -> bb104;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:132:20: 132:57
    }

    bb103: {
        _45 = Modifiers::is_ctrl(_3) -> [return: bb105, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:132:38: 132:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:132:48: 132:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb104: {
        switchInt(move _43) -> [0: bb107, otherwise: bb106]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:132:20: 132:57
    }

    bb105: {
        _43 = move _45;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:132:20: 132:57
        goto -> bb104;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:132:20: 132:57
    }

    bb106: {
        _0 = DecodedKey::Unicode(const '\u{f}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:133:21: 133:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:132:17: 138:18
    }

    bb107: {
        _46 = Modifiers::is_caps(_3) -> [return: bb108, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:134:27: 134:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:134:37: 134:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb108: {
        switchInt(move _46) -> [0: bb110, otherwise: bb109]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:134:27: 134:46
    }

    bb109: {
        _0 = DecodedKey::Unicode(const 'O'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:135:21: 135:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:134:24: 138:18
    }

    bb110: {
        _0 = DecodedKey::Unicode(const 'o'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:137:21: 137:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:134:24: 138:18
    }

    bb111: {
        _48 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:141:20: 141:34
        switchInt(move _48) -> [0: bb112, otherwise: bb113]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:141:20: 141:57
    }

    bb112: {
        _47 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:141:20: 141:57
        goto -> bb114;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:141:20: 141:57
    }

    bb113: {
        _49 = Modifiers::is_ctrl(_3) -> [return: bb115, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:141:38: 141:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:141:48: 141:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb114: {
        switchInt(move _47) -> [0: bb117, otherwise: bb116]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:141:20: 141:57
    }

    bb115: {
        _47 = move _49;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:141:20: 141:57
        goto -> bb114;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:141:20: 141:57
    }

    bb116: {
        _0 = DecodedKey::Unicode(const '\u{5}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:142:21: 142:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:141:17: 147:18
    }

    bb117: {
        _50 = Modifiers::is_caps(_3) -> [return: bb118, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:143:27: 143:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:143:37: 143:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb118: {
        switchInt(move _50) -> [0: bb120, otherwise: bb119]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:143:27: 143:46
    }

    bb119: {
        _0 = DecodedKey::Unicode(const 'E'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:144:21: 144:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:143:24: 147:18
    }

    bb120: {
        _0 = DecodedKey::Unicode(const 'e'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:146:21: 146:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:143:24: 147:18
    }

    bb121: {
        _52 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:150:20: 150:34
        switchInt(move _52) -> [0: bb122, otherwise: bb123]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:150:20: 150:57
    }

    bb122: {
        _51 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:150:20: 150:57
        goto -> bb124;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:150:20: 150:57
    }

    bb123: {
        _53 = Modifiers::is_ctrl(_3) -> [return: bb125, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:150:38: 150:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:150:48: 150:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb124: {
        switchInt(move _51) -> [0: bb127, otherwise: bb126]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:150:20: 150:57
    }

    bb125: {
        _51 = move _53;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:150:20: 150:57
        goto -> bb124;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:150:20: 150:57
    }

    bb126: {
        _0 = DecodedKey::Unicode(const '\u{15}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:151:21: 151:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:150:17: 156:18
    }

    bb127: {
        _54 = Modifiers::is_caps(_3) -> [return: bb128, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:152:27: 152:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:152:37: 152:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb128: {
        switchInt(move _54) -> [0: bb130, otherwise: bb129]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:152:27: 152:46
    }

    bb129: {
        _0 = DecodedKey::Unicode(const 'U'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:153:21: 153:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:152:24: 156:18
    }

    bb130: {
        _0 = DecodedKey::Unicode(const 'u'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:155:21: 155:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:152:24: 156:18
    }

    bb131: {
        _56 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:159:20: 159:34
        switchInt(move _56) -> [0: bb132, otherwise: bb133]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:159:20: 159:57
    }

    bb132: {
        _55 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:159:20: 159:57
        goto -> bb134;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:159:20: 159:57
    }

    bb133: {
        _57 = Modifiers::is_ctrl(_3) -> [return: bb135, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:159:38: 159:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:159:48: 159:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb134: {
        switchInt(move _55) -> [0: bb137, otherwise: bb136]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:159:20: 159:57
    }

    bb135: {
        _55 = move _57;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:159:20: 159:57
        goto -> bb134;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:159:20: 159:57
    }

    bb136: {
        _0 = DecodedKey::Unicode(const '\t'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:160:21: 160:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:159:17: 165:18
    }

    bb137: {
        _58 = Modifiers::is_caps(_3) -> [return: bb138, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:161:27: 161:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:161:37: 161:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb138: {
        switchInt(move _58) -> [0: bb140, otherwise: bb139]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:161:27: 161:46
    }

    bb139: {
        _0 = DecodedKey::Unicode(const 'I'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:162:21: 162:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:161:24: 165:18
    }

    bb140: {
        _0 = DecodedKey::Unicode(const 'i'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:164:21: 164:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:161:24: 165:18
    }

    bb141: {
        _60 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:168:20: 168:34
        switchInt(move _60) -> [0: bb142, otherwise: bb143]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:168:20: 168:57
    }

    bb142: {
        _59 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:168:20: 168:57
        goto -> bb144;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:168:20: 168:57
    }

    bb143: {
        _61 = Modifiers::is_ctrl(_3) -> [return: bb145, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:168:38: 168:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:168:48: 168:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb144: {
        switchInt(move _59) -> [0: bb147, otherwise: bb146]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:168:20: 168:57
    }

    bb145: {
        _59 = move _61;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:168:20: 168:57
        goto -> bb144;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:168:20: 168:57
    }

    bb146: {
        _0 = DecodedKey::Unicode(const '\u{4}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:169:21: 169:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:168:17: 174:18
    }

    bb147: {
        _62 = Modifiers::is_caps(_3) -> [return: bb148, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:170:27: 170:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:170:37: 170:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb148: {
        switchInt(move _62) -> [0: bb150, otherwise: bb149]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:170:27: 170:46
    }

    bb149: {
        _0 = DecodedKey::Unicode(const 'D'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:171:21: 171:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:170:24: 174:18
    }

    bb150: {
        _0 = DecodedKey::Unicode(const 'd'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:173:21: 173:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:170:24: 174:18
    }

    bb151: {
        _64 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:177:20: 177:34
        switchInt(move _64) -> [0: bb152, otherwise: bb153]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:177:20: 177:57
    }

    bb152: {
        _63 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:177:20: 177:57
        goto -> bb154;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:177:20: 177:57
    }

    bb153: {
        _65 = Modifiers::is_ctrl(_3) -> [return: bb155, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:177:38: 177:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:177:48: 177:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb154: {
        switchInt(move _63) -> [0: bb157, otherwise: bb156]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:177:20: 177:57
    }

    bb155: {
        _63 = move _65;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:177:20: 177:57
        goto -> bb154;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:177:20: 177:57
    }

    bb156: {
        _0 = DecodedKey::Unicode(const '\u{8}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:178:21: 178:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:177:17: 183:18
    }

    bb157: {
        _66 = Modifiers::is_caps(_3) -> [return: bb158, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:179:27: 179:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:179:37: 179:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb158: {
        switchInt(move _66) -> [0: bb160, otherwise: bb159]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:179:27: 179:46
    }

    bb159: {
        _0 = DecodedKey::Unicode(const 'H'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:180:21: 180:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:179:24: 183:18
    }

    bb160: {
        _0 = DecodedKey::Unicode(const 'h'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:182:21: 182:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:179:24: 183:18
    }

    bb161: {
        _68 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:186:20: 186:34
        switchInt(move _68) -> [0: bb162, otherwise: bb163]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:186:20: 186:57
    }

    bb162: {
        _67 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:186:20: 186:57
        goto -> bb164;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:186:20: 186:57
    }

    bb163: {
        _69 = Modifiers::is_ctrl(_3) -> [return: bb165, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:186:38: 186:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:186:48: 186:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb164: {
        switchInt(move _67) -> [0: bb167, otherwise: bb166]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:186:20: 186:57
    }

    bb165: {
        _67 = move _69;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:186:20: 186:57
        goto -> bb164;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:186:20: 186:57
    }

    bb166: {
        _0 = DecodedKey::Unicode(const '\u{14}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:187:21: 187:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:186:17: 192:18
    }

    bb167: {
        _70 = Modifiers::is_caps(_3) -> [return: bb168, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:188:27: 188:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:188:37: 188:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb168: {
        switchInt(move _70) -> [0: bb170, otherwise: bb169]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:188:27: 188:46
    }

    bb169: {
        _0 = DecodedKey::Unicode(const 'T'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:189:21: 189:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:188:24: 192:18
    }

    bb170: {
        _0 = DecodedKey::Unicode(const 't'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:191:21: 191:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:188:24: 192:18
    }

    bb171: {
        _72 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:195:20: 195:34
        switchInt(move _72) -> [0: bb172, otherwise: bb173]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:195:20: 195:57
    }

    bb172: {
        _71 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:195:20: 195:57
        goto -> bb174;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:195:20: 195:57
    }

    bb173: {
        _73 = Modifiers::is_ctrl(_3) -> [return: bb175, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:195:38: 195:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:195:48: 195:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb174: {
        switchInt(move _71) -> [0: bb177, otherwise: bb176]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:195:20: 195:57
    }

    bb175: {
        _71 = move _73;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:195:20: 195:57
        goto -> bb174;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:195:20: 195:57
    }

    bb176: {
        _0 = DecodedKey::Unicode(const '\u{e}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:196:21: 196:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:195:17: 201:18
    }

    bb177: {
        _74 = Modifiers::is_caps(_3) -> [return: bb178, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:197:27: 197:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:197:37: 197:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb178: {
        switchInt(move _74) -> [0: bb180, otherwise: bb179]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:197:27: 197:46
    }

    bb179: {
        _0 = DecodedKey::Unicode(const 'N'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:198:21: 198:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:197:24: 201:18
    }

    bb180: {
        _0 = DecodedKey::Unicode(const 'n'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:200:21: 200:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:197:24: 201:18
    }

    bb181: {
        _76 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:204:20: 204:34
        switchInt(move _76) -> [0: bb182, otherwise: bb183]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:204:20: 204:57
    }

    bb182: {
        _75 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:204:20: 204:57
        goto -> bb184;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:204:20: 204:57
    }

    bb183: {
        _77 = Modifiers::is_ctrl(_3) -> [return: bb185, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:204:38: 204:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:204:48: 204:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb184: {
        switchInt(move _75) -> [0: bb187, otherwise: bb186]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:204:20: 204:57
    }

    bb185: {
        _75 = move _77;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:204:20: 204:57
        goto -> bb184;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:204:20: 204:57
    }

    bb186: {
        _0 = DecodedKey::Unicode(const '\u{13}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:205:21: 205:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:204:17: 210:18
    }

    bb187: {
        _78 = Modifiers::is_caps(_3) -> [return: bb188, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:206:27: 206:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:206:37: 206:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb188: {
        switchInt(move _78) -> [0: bb190, otherwise: bb189]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:206:27: 206:46
    }

    bb189: {
        _0 = DecodedKey::Unicode(const 'S'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:207:21: 207:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:206:24: 210:18
    }

    bb190: {
        _0 = DecodedKey::Unicode(const 's'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:209:21: 209:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:206:24: 210:18
    }

    bb191: {
        _79 = Modifiers::is_shifted(_3) -> [return: bb192, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:213:20: 213:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:213:30: 213:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb192: {
        switchInt(move _79) -> [0: bb194, otherwise: bb193]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:213:20: 213:42
    }

    bb193: {
        _0 = DecodedKey::Unicode(const '_'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:214:21: 214:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:213:17: 217:18
    }

    bb194: {
        _0 = DecodedKey::Unicode(const '-'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:216:21: 216:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:213:17: 217:18
    }

    bb195: {
        _80 = Modifiers::is_shifted(_3) -> [return: bb196, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:220:20: 220:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:220:30: 220:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb196: {
        switchInt(move _80) -> [0: bb198, otherwise: bb197]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:220:20: 220:42
    }

    bb197: {
        _0 = DecodedKey::Unicode(const ':'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:221:21: 221:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:220:17: 224:18
    }

    bb198: {
        _0 = DecodedKey::Unicode(const ';'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:223:21: 223:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:220:17: 224:18
    }

    bb199: {
        _82 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:227:20: 227:34
        switchInt(move _82) -> [0: bb200, otherwise: bb201]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:227:20: 227:57
    }

    bb200: {
        _81 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:227:20: 227:57
        goto -> bb202;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:227:20: 227:57
    }

    bb201: {
        _83 = Modifiers::is_ctrl(_3) -> [return: bb203, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:227:38: 227:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:227:48: 227:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb202: {
        switchInt(move _81) -> [0: bb205, otherwise: bb204]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:227:20: 227:57
    }

    bb203: {
        _81 = move _83;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:227:20: 227:57
        goto -> bb202;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:227:20: 227:57
    }

    bb204: {
        _0 = DecodedKey::Unicode(const '\u{11}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:228:21: 228:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:227:17: 233:18
    }

    bb205: {
        _84 = Modifiers::is_caps(_3) -> [return: bb206, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:229:27: 229:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:229:37: 229:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb206: {
        switchInt(move _84) -> [0: bb208, otherwise: bb207]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:229:27: 229:46
    }

    bb207: {
        _0 = DecodedKey::Unicode(const 'Q'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:230:21: 230:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:229:24: 233:18
    }

    bb208: {
        _0 = DecodedKey::Unicode(const 'q'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:232:21: 232:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:229:24: 233:18
    }

    bb209: {
        _86 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:236:20: 236:34
        switchInt(move _86) -> [0: bb210, otherwise: bb211]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:236:20: 236:57
    }

    bb210: {
        _85 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:236:20: 236:57
        goto -> bb212;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:236:20: 236:57
    }

    bb211: {
        _87 = Modifiers::is_ctrl(_3) -> [return: bb213, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:236:38: 236:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:236:48: 236:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb212: {
        switchInt(move _85) -> [0: bb215, otherwise: bb214]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:236:20: 236:57
    }

    bb213: {
        _85 = move _87;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:236:20: 236:57
        goto -> bb212;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:236:20: 236:57
    }

    bb214: {
        _0 = DecodedKey::Unicode(const '\n'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:237:21: 237:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:236:17: 242:18
    }

    bb215: {
        _88 = Modifiers::is_caps(_3) -> [return: bb216, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:238:27: 238:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:238:37: 238:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb216: {
        switchInt(move _88) -> [0: bb218, otherwise: bb217]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:238:27: 238:46
    }

    bb217: {
        _0 = DecodedKey::Unicode(const 'J'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:239:21: 239:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:238:24: 242:18
    }

    bb218: {
        _0 = DecodedKey::Unicode(const 'j'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:241:21: 241:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:238:24: 242:18
    }

    bb219: {
        _90 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:245:20: 245:34
        switchInt(move _90) -> [0: bb220, otherwise: bb221]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:245:20: 245:57
    }

    bb220: {
        _89 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:245:20: 245:57
        goto -> bb222;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:245:20: 245:57
    }

    bb221: {
        _91 = Modifiers::is_ctrl(_3) -> [return: bb223, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:245:38: 245:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:245:48: 245:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb222: {
        switchInt(move _89) -> [0: bb225, otherwise: bb224]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:245:20: 245:57
    }

    bb223: {
        _89 = move _91;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:245:20: 245:57
        goto -> bb222;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:245:20: 245:57
    }

    bb224: {
        _0 = DecodedKey::Unicode(const '\u{b}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:246:21: 246:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:245:17: 251:18
    }

    bb225: {
        _92 = Modifiers::is_caps(_3) -> [return: bb226, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:247:27: 247:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:247:37: 247:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb226: {
        switchInt(move _92) -> [0: bb228, otherwise: bb227]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:247:27: 247:46
    }

    bb227: {
        _0 = DecodedKey::Unicode(const 'K'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:248:21: 248:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:247:24: 251:18
    }

    bb228: {
        _0 = DecodedKey::Unicode(const 'k'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:250:21: 250:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:247:24: 251:18
    }

    bb229: {
        _94 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:254:20: 254:34
        switchInt(move _94) -> [0: bb230, otherwise: bb231]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:254:20: 254:57
    }

    bb230: {
        _93 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:254:20: 254:57
        goto -> bb232;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:254:20: 254:57
    }

    bb231: {
        _95 = Modifiers::is_ctrl(_3) -> [return: bb233, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:254:38: 254:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:254:48: 254:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb232: {
        switchInt(move _93) -> [0: bb235, otherwise: bb234]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:254:20: 254:57
    }

    bb233: {
        _93 = move _95;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:254:20: 254:57
        goto -> bb232;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:254:20: 254:57
    }

    bb234: {
        _0 = DecodedKey::Unicode(const '\u{18}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:255:21: 255:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:254:17: 260:18
    }

    bb235: {
        _96 = Modifiers::is_caps(_3) -> [return: bb236, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:256:27: 256:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:256:37: 256:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb236: {
        switchInt(move _96) -> [0: bb238, otherwise: bb237]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:256:27: 256:46
    }

    bb237: {
        _0 = DecodedKey::Unicode(const 'X'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:257:21: 257:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:256:24: 260:18
    }

    bb238: {
        _0 = DecodedKey::Unicode(const 'x'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:259:21: 259:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:256:24: 260:18
    }

    bb239: {
        _98 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:263:20: 263:34
        switchInt(move _98) -> [0: bb240, otherwise: bb241]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:263:20: 263:57
    }

    bb240: {
        _97 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:263:20: 263:57
        goto -> bb242;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:263:20: 263:57
    }

    bb241: {
        _99 = Modifiers::is_ctrl(_3) -> [return: bb243, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:263:38: 263:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:263:48: 263:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb242: {
        switchInt(move _97) -> [0: bb245, otherwise: bb244]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:263:20: 263:57
    }

    bb243: {
        _97 = move _99;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:263:20: 263:57
        goto -> bb242;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:263:20: 263:57
    }

    bb244: {
        _0 = DecodedKey::Unicode(const '\u{2}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:264:21: 264:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:263:17: 269:18
    }

    bb245: {
        _100 = Modifiers::is_caps(_3) -> [return: bb246, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:265:27: 265:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:265:37: 265:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb246: {
        switchInt(move _100) -> [0: bb248, otherwise: bb247]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:265:27: 265:46
    }

    bb247: {
        _0 = DecodedKey::Unicode(const 'B'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:266:21: 266:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:265:24: 269:18
    }

    bb248: {
        _0 = DecodedKey::Unicode(const 'b'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:268:21: 268:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:265:24: 269:18
    }

    bb249: {
        _102 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:272:20: 272:34
        switchInt(move _102) -> [0: bb250, otherwise: bb251]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:272:20: 272:57
    }

    bb250: {
        _101 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:272:20: 272:57
        goto -> bb252;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:272:20: 272:57
    }

    bb251: {
        _103 = Modifiers::is_ctrl(_3) -> [return: bb253, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:272:38: 272:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:272:48: 272:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb252: {
        switchInt(move _101) -> [0: bb255, otherwise: bb254]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:272:20: 272:57
    }

    bb253: {
        _101 = move _103;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:272:20: 272:57
        goto -> bb252;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:272:20: 272:57
    }

    bb254: {
        _0 = DecodedKey::Unicode(const '\u{17}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:273:21: 273:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:272:17: 278:18
    }

    bb255: {
        _104 = Modifiers::is_caps(_3) -> [return: bb256, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:274:27: 274:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:274:37: 274:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb256: {
        switchInt(move _104) -> [0: bb258, otherwise: bb257]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:274:27: 274:46
    }

    bb257: {
        _0 = DecodedKey::Unicode(const 'W'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:275:21: 275:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:274:24: 278:18
    }

    bb258: {
        _0 = DecodedKey::Unicode(const 'w'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:277:21: 277:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:274:24: 278:18
    }

    bb259: {
        _106 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:281:20: 281:34
        switchInt(move _106) -> [0: bb260, otherwise: bb261]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:281:20: 281:57
    }

    bb260: {
        _105 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:281:20: 281:57
        goto -> bb262;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:281:20: 281:57
    }

    bb261: {
        _107 = Modifiers::is_ctrl(_3) -> [return: bb263, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:281:38: 281:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:281:48: 281:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb262: {
        switchInt(move _105) -> [0: bb265, otherwise: bb264]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:281:20: 281:57
    }

    bb263: {
        _105 = move _107;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:281:20: 281:57
        goto -> bb262;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:281:20: 281:57
    }

    bb264: {
        _0 = DecodedKey::Unicode(const '\u{16}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:282:21: 282:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:281:17: 287:18
    }

    bb265: {
        _108 = Modifiers::is_caps(_3) -> [return: bb266, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:283:27: 283:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:283:37: 283:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb266: {
        switchInt(move _108) -> [0: bb268, otherwise: bb267]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:283:27: 283:46
    }

    bb267: {
        _0 = DecodedKey::Unicode(const 'V'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:284:21: 284:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:283:24: 287:18
    }

    bb268: {
        _0 = DecodedKey::Unicode(const 'v'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:286:21: 286:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:283:24: 287:18
    }

    bb269: {
        _110 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:290:20: 290:34
        switchInt(move _110) -> [0: bb270, otherwise: bb271]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:290:20: 290:57
    }

    bb270: {
        _109 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:290:20: 290:57
        goto -> bb272;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:290:20: 290:57
    }

    bb271: {
        _111 = Modifiers::is_ctrl(_3) -> [return: bb273, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:290:38: 290:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:290:48: 290:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb272: {
        switchInt(move _109) -> [0: bb275, otherwise: bb274]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:290:20: 290:57
    }

    bb273: {
        _109 = move _111;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:290:20: 290:57
        goto -> bb272;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:290:20: 290:57
    }

    bb274: {
        _0 = DecodedKey::Unicode(const '\u{1a}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:291:21: 291:52
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:290:17: 296:18
    }

    bb275: {
        _112 = Modifiers::is_caps(_3) -> [return: bb276, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:292:27: 292:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:292:37: 292:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb276: {
        switchInt(move _112) -> [0: bb278, otherwise: bb277]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:292:27: 292:46
    }

    bb277: {
        _0 = DecodedKey::Unicode(const 'Z'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:293:21: 293:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:292:24: 296:18
    }

    bb278: {
        _0 = DecodedKey::Unicode(const 'z'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:295:21: 295:45
        goto -> bb279;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:292:24: 296:18
    }

    bb279: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:303:6: 303:6
    }
}

promoted[0] in dvorak104::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:10:1: 10:37>::map_keycode: &HandleControl = {
    let mut _0: &HandleControl;          // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:45: 17:79
    let mut _1: HandleControl;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:45: 17:79

    bb0: {
        _1 = HandleControl::MapLettersToUnicode; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:45: 17:79
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:45: 17:79
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/dvorak104.rs:17:45: 17:79
    }
}

fn us104::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:10:1: 10:33>::map_keycode(_1: &Us104Key, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:12:9: 12:14
    debug keycode => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:13:9: 13:16
    debug modifiers => _3;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:14:9: 14:18
    debug handle_ctrl => _4;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:15:9: 15:20
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:16:10: 16:20
    let _5: bool;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:13: 17:27
    let mut _6: &HandleControl;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:30: 17:41
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:19:13: 19:26
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:20:20: 20:42
    let mut _9: char;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:26:52: 26:63
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:28:20: 28:42
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:35:20: 35:42
    let mut _12: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:42:20: 42:42
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:49:20: 49:42
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:56:20: 56:42
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:63:20: 63:42
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:70:20: 70:42
    let mut _17: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:77:20: 77:42
    let mut _18: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:84:20: 84:42
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:91:20: 91:42
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:98:20: 98:42
    let mut _21: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:105:20: 105:42
    let mut _22: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:111:55: 111:66
    let mut _23: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:112:49: 112:60
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:114:20: 114:57
    let mut _25: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:114:20: 114:34
    let mut _26: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:114:38: 114:57
    let mut _27: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:116:27: 116:46
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:123:20: 123:57
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:123:20: 123:34
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:123:38: 123:57
    let mut _31: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:125:27: 125:46
    let mut _32: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:132:20: 132:57
    let mut _33: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:132:20: 132:34
    let mut _34: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:132:38: 132:57
    let mut _35: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:134:27: 134:46
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:141:20: 141:57
    let mut _37: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:141:20: 141:34
    let mut _38: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:141:38: 141:57
    let mut _39: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:143:27: 143:46
    let mut _40: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:150:20: 150:57
    let mut _41: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:150:20: 150:34
    let mut _42: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:150:38: 150:57
    let mut _43: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:152:27: 152:46
    let mut _44: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:159:20: 159:57
    let mut _45: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:159:20: 159:34
    let mut _46: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:159:38: 159:57
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:161:27: 161:46
    let mut _48: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:168:20: 168:57
    let mut _49: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:168:20: 168:34
    let mut _50: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:168:38: 168:57
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:170:27: 170:46
    let mut _52: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:177:20: 177:57
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:177:20: 177:34
    let mut _54: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:177:38: 177:57
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:179:27: 179:46
    let mut _56: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:186:20: 186:57
    let mut _57: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:186:20: 186:34
    let mut _58: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:186:38: 186:57
    let mut _59: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:188:27: 188:46
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:195:20: 195:57
    let mut _61: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:195:20: 195:34
    let mut _62: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:195:38: 195:57
    let mut _63: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:197:27: 197:46
    let mut _64: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:204:20: 204:42
    let mut _65: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:211:20: 211:42
    let mut _66: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:218:20: 218:42
    let mut _67: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:225:20: 225:57
    let mut _68: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:225:20: 225:34
    let mut _69: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:225:38: 225:57
    let mut _70: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:227:27: 227:46
    let mut _71: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:234:20: 234:57
    let mut _72: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:234:20: 234:34
    let mut _73: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:234:38: 234:57
    let mut _74: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:236:27: 236:46
    let mut _75: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:243:20: 243:57
    let mut _76: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:243:20: 243:34
    let mut _77: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:243:38: 243:57
    let mut _78: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:245:27: 245:46
    let mut _79: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:252:20: 252:57
    let mut _80: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:252:20: 252:34
    let mut _81: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:252:38: 252:57
    let mut _82: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:254:27: 254:46
    let mut _83: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:261:20: 261:57
    let mut _84: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:261:20: 261:34
    let mut _85: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:261:38: 261:57
    let mut _86: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:263:27: 263:46
    let mut _87: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:270:20: 270:57
    let mut _88: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:270:20: 270:34
    let mut _89: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:270:38: 270:57
    let mut _90: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:272:27: 272:46
    let mut _91: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:279:20: 279:57
    let mut _92: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:279:20: 279:34
    let mut _93: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:279:38: 279:57
    let mut _94: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:281:27: 281:46
    let mut _95: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:288:20: 288:57
    let mut _96: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:288:20: 288:34
    let mut _97: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:288:38: 288:57
    let mut _98: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:290:27: 290:46
    let mut _99: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:297:20: 297:57
    let mut _100: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:297:20: 297:34
    let mut _101: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:297:38: 297:57
    let mut _102: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:299:27: 299:46
    let mut _103: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:306:20: 306:42
    let mut _104: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:313:20: 313:42
    let mut _105: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:320:52: 320:61
    let mut _106: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:322:20: 322:57
    let mut _107: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:322:20: 322:34
    let mut _108: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:322:38: 322:57
    let mut _109: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:324:27: 324:46
    let mut _110: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:331:20: 331:57
    let mut _111: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:331:20: 331:34
    let mut _112: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:331:38: 331:57
    let mut _113: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:333:27: 333:46
    let mut _114: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:340:20: 340:57
    let mut _115: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:340:20: 340:34
    let mut _116: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:340:38: 340:57
    let mut _117: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:342:27: 342:46
    let mut _118: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:349:20: 349:57
    let mut _119: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:349:20: 349:34
    let mut _120: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:349:38: 349:57
    let mut _121: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:351:27: 351:46
    let mut _122: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:358:20: 358:57
    let mut _123: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:358:20: 358:34
    let mut _124: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:358:38: 358:57
    let mut _125: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:360:27: 360:46
    let mut _126: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:367:20: 367:57
    let mut _127: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:367:20: 367:34
    let mut _128: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:367:38: 367:57
    let mut _129: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:369:27: 369:46
    let mut _130: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:376:20: 376:57
    let mut _131: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:376:20: 376:34
    let mut _132: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:376:38: 376:57
    let mut _133: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:378:27: 378:46
    let mut _134: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:385:20: 385:42
    let mut _135: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:392:20: 392:42
    let mut _136: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:399:20: 399:42
    let mut _137: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:406:52: 406:62
    let mut _138: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:411:20: 411:37
    let mut _139: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:414:40: 414:53
    let mut _140: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:418:20: 418:37
    let mut _141: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:421:40: 421:56
    let mut _142: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:425:20: 425:37
    let mut _143: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:428:40: 428:55
    let mut _144: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:433:20: 433:37
    let mut _145: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:436:40: 436:58
    let mut _146: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:441:20: 441:37
    let mut _147: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:444:40: 444:59
    let mut _148: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:448:20: 448:37
    let mut _149: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:451:40: 451:52
    let mut _150: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:455:20: 455:37
    let mut _151: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:458:40: 458:58
    let mut _152: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:462:20: 462:37
    let mut _153: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:465:40: 465:57
    let mut _154: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:469:20: 469:37
    let mut _155: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:472:40: 472:55
    let mut _156: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:476:20: 476:37
    let mut _157: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:479:41: 479:51
    let mut _158: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:482:57: 482:66
    let mut _159: &HandleControl;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:45: 17:79
    scope 1 {
        debug map_to_unicode => _5;      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:13: 17:27
        scope 2 {
            debug k => _2;               // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:483:13: 483:14
        }
    }

    bb0: {
        _6 = &_4;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:30: 17:41
        _159 = const _;                  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:45: 17:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:45: 17:79
                                         // + literal: Const { ty: &HandleControl, val: Unevaluated(<Us104Key as KeyboardLayout>::map_keycode, [], Some(promoted[0])) }
        _5 = <HandleControl as PartialEq>::eq(move _6, _159) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:30: 17:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:30: 17:79
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HandleControl, &'b HandleControl) -> bool {<HandleControl as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_2);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:18:15: 18:22
        switchInt(move _7) -> [0: bb7, 17: bb3, 18: bb9, 19: bb13, 20: bb17, 21: bb21, 22: bb25, 23: bb29, 24: bb33, 25: bb37, 26: bb41, 27: bb45, 28: bb49, 29: bb53, 30: bb57, 35: bb358, 36: bb359, 37: bb360, 38: bb59, 39: bb61, 40: bb71, 41: bb81, 42: bb91, 43: bb101, 44: bb111, 45: bb121, 46: bb131, 47: bb141, 48: bb151, 49: bb161, 50: bb165, 51: bb169, 53: bb356, 56: bb361, 57: bb364, 58: bb367, 59: bb370, 61: bb173, 62: bb183, 63: bb193, 64: bb203, 65: bb213, 66: bb223, 67: bb233, 68: bb243, 69: bb253, 70: bb263, 71: bb267, 72: bb271, 73: bb371, 74: bb374, 75: bb375, 77: bb273, 78: bb283, 79: bb293, 80: bb303, 81: bb313, 82: bb323, 83: bb333, 84: bb343, 85: bb347, 86: bb351, 89: bb378, 90: bb381, 91: bb384, 92: bb394, 96: bb355, 104: bb387, 105: bb390, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:18:9: 18:22
    }

    bb2: {
        _0 = DecodedKey::RawKey(_2);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:483:18: 483:39
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:483:38: 483:39
    }

    bb3: {
        _8 = Modifiers::is_shifted(_3) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:20:20: 20:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:20:30: 20:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt(move _8) -> [0: bb6, otherwise: bb5]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:20:20: 20:42
    }

    bb5: {
        _0 = DecodedKey::Unicode(const '~'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:21:21: 21:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:20:17: 24:18
    }

    bb6: {
        _0 = DecodedKey::Unicode(const '`'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:23:21: 23:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:20:17: 24:18
    }

    bb7: {
        _9 = <u8 as Into<char>>::into(const 27_u8) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:26:52: 26:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:26:57: 26:61
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = DecodedKey::Unicode(move _9); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:26:32: 26:64
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:26:63: 26:64
    }

    bb9: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:28:20: 28:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:28:30: 28:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _10) -> [0: bb12, otherwise: bb11]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:28:20: 28:42
    }

    bb11: {
        _0 = DecodedKey::Unicode(const '!'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:29:21: 29:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:28:17: 32:18
    }

    bb12: {
        _0 = DecodedKey::Unicode(const '1'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:31:21: 31:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:28:17: 32:18
    }

    bb13: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb14, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:35:20: 35:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:35:30: 35:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb14: {
        switchInt(move _11) -> [0: bb16, otherwise: bb15]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:35:20: 35:42
    }

    bb15: {
        _0 = DecodedKey::Unicode(const '@'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:36:21: 36:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:35:17: 39:18
    }

    bb16: {
        _0 = DecodedKey::Unicode(const '2'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:38:21: 38:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:35:17: 39:18
    }

    bb17: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:42:20: 42:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:42:30: 42:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(move _12) -> [0: bb20, otherwise: bb19]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:42:20: 42:42
    }

    bb19: {
        _0 = DecodedKey::Unicode(const '#'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:43:21: 43:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:42:17: 46:18
    }

    bb20: {
        _0 = DecodedKey::Unicode(const '3'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:45:21: 45:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:42:17: 46:18
    }

    bb21: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb22, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:49:20: 49:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:49:30: 49:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb22: {
        switchInt(move _13) -> [0: bb24, otherwise: bb23]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:49:20: 49:42
    }

    bb23: {
        _0 = DecodedKey::Unicode(const '$'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:50:21: 50:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:49:17: 53:18
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '4'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:52:21: 52:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:49:17: 53:18
    }

    bb25: {
        _14 = Modifiers::is_shifted(_3) -> [return: bb26, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:56:20: 56:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:56:30: 56:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb26: {
        switchInt(move _14) -> [0: bb28, otherwise: bb27]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:56:20: 56:42
    }

    bb27: {
        _0 = DecodedKey::Unicode(const '%'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:57:21: 57:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:56:17: 60:18
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '5'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:59:21: 59:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:56:17: 60:18
    }

    bb29: {
        _15 = Modifiers::is_shifted(_3) -> [return: bb30, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:63:20: 63:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:63:30: 63:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb30: {
        switchInt(move _15) -> [0: bb32, otherwise: bb31]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:63:20: 63:42
    }

    bb31: {
        _0 = DecodedKey::Unicode(const '^'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:64:21: 64:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:63:17: 67:18
    }

    bb32: {
        _0 = DecodedKey::Unicode(const '6'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:66:21: 66:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:63:17: 67:18
    }

    bb33: {
        _16 = Modifiers::is_shifted(_3) -> [return: bb34, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:70:20: 70:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:70:30: 70:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb34: {
        switchInt(move _16) -> [0: bb36, otherwise: bb35]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:70:20: 70:42
    }

    bb35: {
        _0 = DecodedKey::Unicode(const '&'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:71:21: 71:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:70:17: 74:18
    }

    bb36: {
        _0 = DecodedKey::Unicode(const '7'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:73:21: 73:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:70:17: 74:18
    }

    bb37: {
        _17 = Modifiers::is_shifted(_3) -> [return: bb38, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:77:20: 77:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:77:30: 77:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb38: {
        switchInt(move _17) -> [0: bb40, otherwise: bb39]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:77:20: 77:42
    }

    bb39: {
        _0 = DecodedKey::Unicode(const '*'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:78:21: 78:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:77:17: 81:18
    }

    bb40: {
        _0 = DecodedKey::Unicode(const '8'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:80:21: 80:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:77:17: 81:18
    }

    bb41: {
        _18 = Modifiers::is_shifted(_3) -> [return: bb42, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:84:20: 84:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:84:30: 84:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb42: {
        switchInt(move _18) -> [0: bb44, otherwise: bb43]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:84:20: 84:42
    }

    bb43: {
        _0 = DecodedKey::Unicode(const '('); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:85:21: 85:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:84:17: 88:18
    }

    bb44: {
        _0 = DecodedKey::Unicode(const '9'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:87:21: 87:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:84:17: 88:18
    }

    bb45: {
        _19 = Modifiers::is_shifted(_3) -> [return: bb46, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:91:20: 91:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:91:30: 91:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb46: {
        switchInt(move _19) -> [0: bb48, otherwise: bb47]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:91:20: 91:42
    }

    bb47: {
        _0 = DecodedKey::Unicode(const ')'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:92:21: 92:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:91:17: 95:18
    }

    bb48: {
        _0 = DecodedKey::Unicode(const '0'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:94:21: 94:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:91:17: 95:18
    }

    bb49: {
        _20 = Modifiers::is_shifted(_3) -> [return: bb50, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:98:20: 98:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:98:30: 98:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb50: {
        switchInt(move _20) -> [0: bb52, otherwise: bb51]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:98:20: 98:42
    }

    bb51: {
        _0 = DecodedKey::Unicode(const '_'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:99:21: 99:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:98:17: 102:18
    }

    bb52: {
        _0 = DecodedKey::Unicode(const '-'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:101:21: 101:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:98:17: 102:18
    }

    bb53: {
        _21 = Modifiers::is_shifted(_3) -> [return: bb54, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:105:20: 105:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:105:30: 105:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb54: {
        switchInt(move _21) -> [0: bb56, otherwise: bb55]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:105:20: 105:42
    }

    bb55: {
        _0 = DecodedKey::Unicode(const '+'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:106:21: 106:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:105:17: 109:18
    }

    bb56: {
        _0 = DecodedKey::Unicode(const '='); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:108:21: 108:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:105:17: 109:18
    }

    bb57: {
        _22 = <u8 as Into<char>>::into(const 8_u8) -> [return: bb58, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:111:55: 111:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:111:60: 111:64
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb58: {
        _0 = DecodedKey::Unicode(move _22); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:111:35: 111:67
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:111:66: 111:67
    }

    bb59: {
        _23 = <u8 as Into<char>>::into(const 9_u8) -> [return: bb60, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:112:49: 112:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:112:54: 112:58
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb60: {
        _0 = DecodedKey::Unicode(move _23); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:112:29: 112:61
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:112:60: 112:61
    }

    bb61: {
        _25 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:114:20: 114:34
        switchInt(move _25) -> [0: bb62, otherwise: bb63]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:114:20: 114:57
    }

    bb62: {
        _24 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:114:20: 114:57
        goto -> bb64;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:114:20: 114:57
    }

    bb63: {
        _26 = Modifiers::is_ctrl(_3) -> [return: bb65, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:114:38: 114:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:114:48: 114:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb64: {
        switchInt(move _24) -> [0: bb67, otherwise: bb66]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:114:20: 114:57
    }

    bb65: {
        _24 = move _26;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:114:20: 114:57
        goto -> bb64;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:114:20: 114:57
    }

    bb66: {
        _0 = DecodedKey::Unicode(const '\u{11}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:115:21: 115:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:114:17: 120:18
    }

    bb67: {
        _27 = Modifiers::is_caps(_3) -> [return: bb68, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:116:27: 116:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:116:37: 116:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb68: {
        switchInt(move _27) -> [0: bb70, otherwise: bb69]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:116:27: 116:46
    }

    bb69: {
        _0 = DecodedKey::Unicode(const 'Q'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:117:21: 117:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:116:24: 120:18
    }

    bb70: {
        _0 = DecodedKey::Unicode(const 'q'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:119:21: 119:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:116:24: 120:18
    }

    bb71: {
        _29 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:123:20: 123:34
        switchInt(move _29) -> [0: bb72, otherwise: bb73]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:123:20: 123:57
    }

    bb72: {
        _28 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:123:20: 123:57
        goto -> bb74;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:123:20: 123:57
    }

    bb73: {
        _30 = Modifiers::is_ctrl(_3) -> [return: bb75, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:123:38: 123:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:123:48: 123:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb74: {
        switchInt(move _28) -> [0: bb77, otherwise: bb76]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:123:20: 123:57
    }

    bb75: {
        _28 = move _30;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:123:20: 123:57
        goto -> bb74;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:123:20: 123:57
    }

    bb76: {
        _0 = DecodedKey::Unicode(const '\u{17}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:124:21: 124:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:123:17: 129:18
    }

    bb77: {
        _31 = Modifiers::is_caps(_3) -> [return: bb78, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:125:27: 125:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:125:37: 125:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb78: {
        switchInt(move _31) -> [0: bb80, otherwise: bb79]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:125:27: 125:46
    }

    bb79: {
        _0 = DecodedKey::Unicode(const 'W'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:126:21: 126:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:125:24: 129:18
    }

    bb80: {
        _0 = DecodedKey::Unicode(const 'w'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:128:21: 128:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:125:24: 129:18
    }

    bb81: {
        _33 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:132:20: 132:34
        switchInt(move _33) -> [0: bb82, otherwise: bb83]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:132:20: 132:57
    }

    bb82: {
        _32 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:132:20: 132:57
        goto -> bb84;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:132:20: 132:57
    }

    bb83: {
        _34 = Modifiers::is_ctrl(_3) -> [return: bb85, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:132:38: 132:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:132:48: 132:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb84: {
        switchInt(move _32) -> [0: bb87, otherwise: bb86]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:132:20: 132:57
    }

    bb85: {
        _32 = move _34;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:132:20: 132:57
        goto -> bb84;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:132:20: 132:57
    }

    bb86: {
        _0 = DecodedKey::Unicode(const '\u{5}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:133:21: 133:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:132:17: 138:18
    }

    bb87: {
        _35 = Modifiers::is_caps(_3) -> [return: bb88, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:134:27: 134:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:134:37: 134:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb88: {
        switchInt(move _35) -> [0: bb90, otherwise: bb89]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:134:27: 134:46
    }

    bb89: {
        _0 = DecodedKey::Unicode(const 'E'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:135:21: 135:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:134:24: 138:18
    }

    bb90: {
        _0 = DecodedKey::Unicode(const 'e'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:137:21: 137:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:134:24: 138:18
    }

    bb91: {
        _37 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:141:20: 141:34
        switchInt(move _37) -> [0: bb92, otherwise: bb93]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:141:20: 141:57
    }

    bb92: {
        _36 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:141:20: 141:57
        goto -> bb94;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:141:20: 141:57
    }

    bb93: {
        _38 = Modifiers::is_ctrl(_3) -> [return: bb95, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:141:38: 141:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:141:48: 141:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb94: {
        switchInt(move _36) -> [0: bb97, otherwise: bb96]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:141:20: 141:57
    }

    bb95: {
        _36 = move _38;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:141:20: 141:57
        goto -> bb94;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:141:20: 141:57
    }

    bb96: {
        _0 = DecodedKey::Unicode(const '\u{12}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:142:21: 142:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:141:17: 147:18
    }

    bb97: {
        _39 = Modifiers::is_caps(_3) -> [return: bb98, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:143:27: 143:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:143:37: 143:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb98: {
        switchInt(move _39) -> [0: bb100, otherwise: bb99]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:143:27: 143:46
    }

    bb99: {
        _0 = DecodedKey::Unicode(const 'R'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:144:21: 144:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:143:24: 147:18
    }

    bb100: {
        _0 = DecodedKey::Unicode(const 'r'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:146:21: 146:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:143:24: 147:18
    }

    bb101: {
        _41 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:150:20: 150:34
        switchInt(move _41) -> [0: bb102, otherwise: bb103]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:150:20: 150:57
    }

    bb102: {
        _40 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:150:20: 150:57
        goto -> bb104;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:150:20: 150:57
    }

    bb103: {
        _42 = Modifiers::is_ctrl(_3) -> [return: bb105, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:150:38: 150:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:150:48: 150:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb104: {
        switchInt(move _40) -> [0: bb107, otherwise: bb106]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:150:20: 150:57
    }

    bb105: {
        _40 = move _42;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:150:20: 150:57
        goto -> bb104;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:150:20: 150:57
    }

    bb106: {
        _0 = DecodedKey::Unicode(const '\u{14}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:151:21: 151:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:150:17: 156:18
    }

    bb107: {
        _43 = Modifiers::is_caps(_3) -> [return: bb108, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:152:27: 152:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:152:37: 152:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb108: {
        switchInt(move _43) -> [0: bb110, otherwise: bb109]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:152:27: 152:46
    }

    bb109: {
        _0 = DecodedKey::Unicode(const 'T'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:153:21: 153:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:152:24: 156:18
    }

    bb110: {
        _0 = DecodedKey::Unicode(const 't'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:155:21: 155:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:152:24: 156:18
    }

    bb111: {
        _45 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:159:20: 159:34
        switchInt(move _45) -> [0: bb112, otherwise: bb113]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:159:20: 159:57
    }

    bb112: {
        _44 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:159:20: 159:57
        goto -> bb114;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:159:20: 159:57
    }

    bb113: {
        _46 = Modifiers::is_ctrl(_3) -> [return: bb115, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:159:38: 159:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:159:48: 159:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb114: {
        switchInt(move _44) -> [0: bb117, otherwise: bb116]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:159:20: 159:57
    }

    bb115: {
        _44 = move _46;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:159:20: 159:57
        goto -> bb114;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:159:20: 159:57
    }

    bb116: {
        _0 = DecodedKey::Unicode(const '\u{19}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:160:21: 160:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:159:17: 165:18
    }

    bb117: {
        _47 = Modifiers::is_caps(_3) -> [return: bb118, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:161:27: 161:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:161:37: 161:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb118: {
        switchInt(move _47) -> [0: bb120, otherwise: bb119]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:161:27: 161:46
    }

    bb119: {
        _0 = DecodedKey::Unicode(const 'Y'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:162:21: 162:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:161:24: 165:18
    }

    bb120: {
        _0 = DecodedKey::Unicode(const 'y'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:164:21: 164:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:161:24: 165:18
    }

    bb121: {
        _49 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:168:20: 168:34
        switchInt(move _49) -> [0: bb122, otherwise: bb123]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:168:20: 168:57
    }

    bb122: {
        _48 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:168:20: 168:57
        goto -> bb124;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:168:20: 168:57
    }

    bb123: {
        _50 = Modifiers::is_ctrl(_3) -> [return: bb125, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:168:38: 168:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:168:48: 168:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb124: {
        switchInt(move _48) -> [0: bb127, otherwise: bb126]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:168:20: 168:57
    }

    bb125: {
        _48 = move _50;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:168:20: 168:57
        goto -> bb124;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:168:20: 168:57
    }

    bb126: {
        _0 = DecodedKey::Unicode(const '\u{15}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:169:21: 169:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:168:17: 174:18
    }

    bb127: {
        _51 = Modifiers::is_caps(_3) -> [return: bb128, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:170:27: 170:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:170:37: 170:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb128: {
        switchInt(move _51) -> [0: bb130, otherwise: bb129]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:170:27: 170:46
    }

    bb129: {
        _0 = DecodedKey::Unicode(const 'U'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:171:21: 171:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:170:24: 174:18
    }

    bb130: {
        _0 = DecodedKey::Unicode(const 'u'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:173:21: 173:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:170:24: 174:18
    }

    bb131: {
        _53 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:177:20: 177:34
        switchInt(move _53) -> [0: bb132, otherwise: bb133]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:177:20: 177:57
    }

    bb132: {
        _52 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:177:20: 177:57
        goto -> bb134;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:177:20: 177:57
    }

    bb133: {
        _54 = Modifiers::is_ctrl(_3) -> [return: bb135, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:177:38: 177:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:177:48: 177:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb134: {
        switchInt(move _52) -> [0: bb137, otherwise: bb136]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:177:20: 177:57
    }

    bb135: {
        _52 = move _54;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:177:20: 177:57
        goto -> bb134;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:177:20: 177:57
    }

    bb136: {
        _0 = DecodedKey::Unicode(const '\t'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:178:21: 178:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:177:17: 183:18
    }

    bb137: {
        _55 = Modifiers::is_caps(_3) -> [return: bb138, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:179:27: 179:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:179:37: 179:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb138: {
        switchInt(move _55) -> [0: bb140, otherwise: bb139]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:179:27: 179:46
    }

    bb139: {
        _0 = DecodedKey::Unicode(const 'I'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:180:21: 180:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:179:24: 183:18
    }

    bb140: {
        _0 = DecodedKey::Unicode(const 'i'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:182:21: 182:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:179:24: 183:18
    }

    bb141: {
        _57 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:186:20: 186:34
        switchInt(move _57) -> [0: bb142, otherwise: bb143]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:186:20: 186:57
    }

    bb142: {
        _56 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:186:20: 186:57
        goto -> bb144;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:186:20: 186:57
    }

    bb143: {
        _58 = Modifiers::is_ctrl(_3) -> [return: bb145, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:186:38: 186:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:186:48: 186:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb144: {
        switchInt(move _56) -> [0: bb147, otherwise: bb146]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:186:20: 186:57
    }

    bb145: {
        _56 = move _58;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:186:20: 186:57
        goto -> bb144;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:186:20: 186:57
    }

    bb146: {
        _0 = DecodedKey::Unicode(const '\u{f}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:187:21: 187:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:186:17: 192:18
    }

    bb147: {
        _59 = Modifiers::is_caps(_3) -> [return: bb148, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:188:27: 188:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:188:37: 188:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb148: {
        switchInt(move _59) -> [0: bb150, otherwise: bb149]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:188:27: 188:46
    }

    bb149: {
        _0 = DecodedKey::Unicode(const 'O'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:189:21: 189:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:188:24: 192:18
    }

    bb150: {
        _0 = DecodedKey::Unicode(const 'o'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:191:21: 191:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:188:24: 192:18
    }

    bb151: {
        _61 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:195:20: 195:34
        switchInt(move _61) -> [0: bb152, otherwise: bb153]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:195:20: 195:57
    }

    bb152: {
        _60 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:195:20: 195:57
        goto -> bb154;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:195:20: 195:57
    }

    bb153: {
        _62 = Modifiers::is_ctrl(_3) -> [return: bb155, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:195:38: 195:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:195:48: 195:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb154: {
        switchInt(move _60) -> [0: bb157, otherwise: bb156]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:195:20: 195:57
    }

    bb155: {
        _60 = move _62;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:195:20: 195:57
        goto -> bb154;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:195:20: 195:57
    }

    bb156: {
        _0 = DecodedKey::Unicode(const '\u{10}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:196:21: 196:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:195:17: 201:18
    }

    bb157: {
        _63 = Modifiers::is_caps(_3) -> [return: bb158, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:197:27: 197:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:197:37: 197:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb158: {
        switchInt(move _63) -> [0: bb160, otherwise: bb159]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:197:27: 197:46
    }

    bb159: {
        _0 = DecodedKey::Unicode(const 'P'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:198:21: 198:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:197:24: 201:18
    }

    bb160: {
        _0 = DecodedKey::Unicode(const 'p'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:200:21: 200:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:197:24: 201:18
    }

    bb161: {
        _64 = Modifiers::is_shifted(_3) -> [return: bb162, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:204:20: 204:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:204:30: 204:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb162: {
        switchInt(move _64) -> [0: bb164, otherwise: bb163]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:204:20: 204:42
    }

    bb163: {
        _0 = DecodedKey::Unicode(const '{'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:205:21: 205:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:204:17: 208:18
    }

    bb164: {
        _0 = DecodedKey::Unicode(const '['); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:207:21: 207:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:204:17: 208:18
    }

    bb165: {
        _65 = Modifiers::is_shifted(_3) -> [return: bb166, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:211:20: 211:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:211:30: 211:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb166: {
        switchInt(move _65) -> [0: bb168, otherwise: bb167]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:211:20: 211:42
    }

    bb167: {
        _0 = DecodedKey::Unicode(const '}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:212:21: 212:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:211:17: 215:18
    }

    bb168: {
        _0 = DecodedKey::Unicode(const ']'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:214:21: 214:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:211:17: 215:18
    }

    bb169: {
        _66 = Modifiers::is_shifted(_3) -> [return: bb170, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:218:20: 218:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:218:30: 218:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb170: {
        switchInt(move _66) -> [0: bb172, otherwise: bb171]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:218:20: 218:42
    }

    bb171: {
        _0 = DecodedKey::Unicode(const '|'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:219:21: 219:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:218:17: 222:18
    }

    bb172: {
        _0 = DecodedKey::Unicode(const '\\'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:221:21: 221:46
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:218:17: 222:18
    }

    bb173: {
        _68 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:225:20: 225:34
        switchInt(move _68) -> [0: bb174, otherwise: bb175]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:225:20: 225:57
    }

    bb174: {
        _67 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:225:20: 225:57
        goto -> bb176;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:225:20: 225:57
    }

    bb175: {
        _69 = Modifiers::is_ctrl(_3) -> [return: bb177, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:225:38: 225:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:225:48: 225:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb176: {
        switchInt(move _67) -> [0: bb179, otherwise: bb178]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:225:20: 225:57
    }

    bb177: {
        _67 = move _69;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:225:20: 225:57
        goto -> bb176;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:225:20: 225:57
    }

    bb178: {
        _0 = DecodedKey::Unicode(const '\u{1}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:226:21: 226:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:225:17: 231:18
    }

    bb179: {
        _70 = Modifiers::is_caps(_3) -> [return: bb180, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:227:27: 227:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:227:37: 227:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb180: {
        switchInt(move _70) -> [0: bb182, otherwise: bb181]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:227:27: 227:46
    }

    bb181: {
        _0 = DecodedKey::Unicode(const 'A'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:228:21: 228:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:227:24: 231:18
    }

    bb182: {
        _0 = DecodedKey::Unicode(const 'a'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:230:21: 230:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:227:24: 231:18
    }

    bb183: {
        _72 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:234:20: 234:34
        switchInt(move _72) -> [0: bb184, otherwise: bb185]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:234:20: 234:57
    }

    bb184: {
        _71 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:234:20: 234:57
        goto -> bb186;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:234:20: 234:57
    }

    bb185: {
        _73 = Modifiers::is_ctrl(_3) -> [return: bb187, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:234:38: 234:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:234:48: 234:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb186: {
        switchInt(move _71) -> [0: bb189, otherwise: bb188]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:234:20: 234:57
    }

    bb187: {
        _71 = move _73;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:234:20: 234:57
        goto -> bb186;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:234:20: 234:57
    }

    bb188: {
        _0 = DecodedKey::Unicode(const '\u{13}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:235:21: 235:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:234:17: 240:18
    }

    bb189: {
        _74 = Modifiers::is_caps(_3) -> [return: bb190, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:236:27: 236:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:236:37: 236:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb190: {
        switchInt(move _74) -> [0: bb192, otherwise: bb191]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:236:27: 236:46
    }

    bb191: {
        _0 = DecodedKey::Unicode(const 'S'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:237:21: 237:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:236:24: 240:18
    }

    bb192: {
        _0 = DecodedKey::Unicode(const 's'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:239:21: 239:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:236:24: 240:18
    }

    bb193: {
        _76 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:243:20: 243:34
        switchInt(move _76) -> [0: bb194, otherwise: bb195]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:243:20: 243:57
    }

    bb194: {
        _75 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:243:20: 243:57
        goto -> bb196;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:243:20: 243:57
    }

    bb195: {
        _77 = Modifiers::is_ctrl(_3) -> [return: bb197, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:243:38: 243:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:243:48: 243:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb196: {
        switchInt(move _75) -> [0: bb199, otherwise: bb198]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:243:20: 243:57
    }

    bb197: {
        _75 = move _77;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:243:20: 243:57
        goto -> bb196;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:243:20: 243:57
    }

    bb198: {
        _0 = DecodedKey::Unicode(const '\u{4}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:244:21: 244:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:243:17: 249:18
    }

    bb199: {
        _78 = Modifiers::is_caps(_3) -> [return: bb200, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:245:27: 245:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:245:37: 245:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb200: {
        switchInt(move _78) -> [0: bb202, otherwise: bb201]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:245:27: 245:46
    }

    bb201: {
        _0 = DecodedKey::Unicode(const 'D'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:246:21: 246:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:245:24: 249:18
    }

    bb202: {
        _0 = DecodedKey::Unicode(const 'd'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:248:21: 248:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:245:24: 249:18
    }

    bb203: {
        _80 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:252:20: 252:34
        switchInt(move _80) -> [0: bb204, otherwise: bb205]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:252:20: 252:57
    }

    bb204: {
        _79 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:252:20: 252:57
        goto -> bb206;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:252:20: 252:57
    }

    bb205: {
        _81 = Modifiers::is_ctrl(_3) -> [return: bb207, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:252:38: 252:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:252:48: 252:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb206: {
        switchInt(move _79) -> [0: bb209, otherwise: bb208]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:252:20: 252:57
    }

    bb207: {
        _79 = move _81;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:252:20: 252:57
        goto -> bb206;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:252:20: 252:57
    }

    bb208: {
        _0 = DecodedKey::Unicode(const '\u{6}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:253:21: 253:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:252:17: 258:18
    }

    bb209: {
        _82 = Modifiers::is_caps(_3) -> [return: bb210, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:254:27: 254:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:254:37: 254:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb210: {
        switchInt(move _82) -> [0: bb212, otherwise: bb211]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:254:27: 254:46
    }

    bb211: {
        _0 = DecodedKey::Unicode(const 'F'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:255:21: 255:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:254:24: 258:18
    }

    bb212: {
        _0 = DecodedKey::Unicode(const 'f'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:257:21: 257:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:254:24: 258:18
    }

    bb213: {
        _84 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:261:20: 261:34
        switchInt(move _84) -> [0: bb214, otherwise: bb215]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:261:20: 261:57
    }

    bb214: {
        _83 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:261:20: 261:57
        goto -> bb216;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:261:20: 261:57
    }

    bb215: {
        _85 = Modifiers::is_ctrl(_3) -> [return: bb217, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:261:38: 261:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:261:48: 261:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb216: {
        switchInt(move _83) -> [0: bb219, otherwise: bb218]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:261:20: 261:57
    }

    bb217: {
        _83 = move _85;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:261:20: 261:57
        goto -> bb216;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:261:20: 261:57
    }

    bb218: {
        _0 = DecodedKey::Unicode(const '\u{7}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:262:21: 262:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:261:17: 267:18
    }

    bb219: {
        _86 = Modifiers::is_caps(_3) -> [return: bb220, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:263:27: 263:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:263:37: 263:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb220: {
        switchInt(move _86) -> [0: bb222, otherwise: bb221]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:263:27: 263:46
    }

    bb221: {
        _0 = DecodedKey::Unicode(const 'G'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:264:21: 264:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:263:24: 267:18
    }

    bb222: {
        _0 = DecodedKey::Unicode(const 'g'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:266:21: 266:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:263:24: 267:18
    }

    bb223: {
        _88 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:270:20: 270:34
        switchInt(move _88) -> [0: bb224, otherwise: bb225]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:270:20: 270:57
    }

    bb224: {
        _87 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:270:20: 270:57
        goto -> bb226;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:270:20: 270:57
    }

    bb225: {
        _89 = Modifiers::is_ctrl(_3) -> [return: bb227, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:270:38: 270:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:270:48: 270:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb226: {
        switchInt(move _87) -> [0: bb229, otherwise: bb228]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:270:20: 270:57
    }

    bb227: {
        _87 = move _89;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:270:20: 270:57
        goto -> bb226;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:270:20: 270:57
    }

    bb228: {
        _0 = DecodedKey::Unicode(const '\u{8}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:271:21: 271:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:270:17: 276:18
    }

    bb229: {
        _90 = Modifiers::is_caps(_3) -> [return: bb230, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:272:27: 272:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:272:37: 272:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb230: {
        switchInt(move _90) -> [0: bb232, otherwise: bb231]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:272:27: 272:46
    }

    bb231: {
        _0 = DecodedKey::Unicode(const 'H'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:273:21: 273:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:272:24: 276:18
    }

    bb232: {
        _0 = DecodedKey::Unicode(const 'h'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:275:21: 275:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:272:24: 276:18
    }

    bb233: {
        _92 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:279:20: 279:34
        switchInt(move _92) -> [0: bb234, otherwise: bb235]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:279:20: 279:57
    }

    bb234: {
        _91 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:279:20: 279:57
        goto -> bb236;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:279:20: 279:57
    }

    bb235: {
        _93 = Modifiers::is_ctrl(_3) -> [return: bb237, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:279:38: 279:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:279:48: 279:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb236: {
        switchInt(move _91) -> [0: bb239, otherwise: bb238]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:279:20: 279:57
    }

    bb237: {
        _91 = move _93;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:279:20: 279:57
        goto -> bb236;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:279:20: 279:57
    }

    bb238: {
        _0 = DecodedKey::Unicode(const '\n'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:280:21: 280:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:279:17: 285:18
    }

    bb239: {
        _94 = Modifiers::is_caps(_3) -> [return: bb240, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:281:27: 281:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:281:37: 281:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb240: {
        switchInt(move _94) -> [0: bb242, otherwise: bb241]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:281:27: 281:46
    }

    bb241: {
        _0 = DecodedKey::Unicode(const 'J'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:282:21: 282:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:281:24: 285:18
    }

    bb242: {
        _0 = DecodedKey::Unicode(const 'j'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:284:21: 284:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:281:24: 285:18
    }

    bb243: {
        _96 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:288:20: 288:34
        switchInt(move _96) -> [0: bb244, otherwise: bb245]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:288:20: 288:57
    }

    bb244: {
        _95 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:288:20: 288:57
        goto -> bb246;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:288:20: 288:57
    }

    bb245: {
        _97 = Modifiers::is_ctrl(_3) -> [return: bb247, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:288:38: 288:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:288:48: 288:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb246: {
        switchInt(move _95) -> [0: bb249, otherwise: bb248]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:288:20: 288:57
    }

    bb247: {
        _95 = move _97;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:288:20: 288:57
        goto -> bb246;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:288:20: 288:57
    }

    bb248: {
        _0 = DecodedKey::Unicode(const '\u{b}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:289:21: 289:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:288:17: 294:18
    }

    bb249: {
        _98 = Modifiers::is_caps(_3) -> [return: bb250, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:290:27: 290:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:290:37: 290:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb250: {
        switchInt(move _98) -> [0: bb252, otherwise: bb251]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:290:27: 290:46
    }

    bb251: {
        _0 = DecodedKey::Unicode(const 'K'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:291:21: 291:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:290:24: 294:18
    }

    bb252: {
        _0 = DecodedKey::Unicode(const 'k'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:293:21: 293:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:290:24: 294:18
    }

    bb253: {
        _100 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:297:20: 297:34
        switchInt(move _100) -> [0: bb254, otherwise: bb255]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:297:20: 297:57
    }

    bb254: {
        _99 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:297:20: 297:57
        goto -> bb256;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:297:20: 297:57
    }

    bb255: {
        _101 = Modifiers::is_ctrl(_3) -> [return: bb257, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:297:38: 297:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:297:48: 297:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb256: {
        switchInt(move _99) -> [0: bb259, otherwise: bb258]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:297:20: 297:57
    }

    bb257: {
        _99 = move _101;                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:297:20: 297:57
        goto -> bb256;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:297:20: 297:57
    }

    bb258: {
        _0 = DecodedKey::Unicode(const '\u{c}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:298:21: 298:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:297:17: 303:18
    }

    bb259: {
        _102 = Modifiers::is_caps(_3) -> [return: bb260, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:299:27: 299:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:299:37: 299:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb260: {
        switchInt(move _102) -> [0: bb262, otherwise: bb261]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:299:27: 299:46
    }

    bb261: {
        _0 = DecodedKey::Unicode(const 'L'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:300:21: 300:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:299:24: 303:18
    }

    bb262: {
        _0 = DecodedKey::Unicode(const 'l'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:302:21: 302:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:299:24: 303:18
    }

    bb263: {
        _103 = Modifiers::is_shifted(_3) -> [return: bb264, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:306:20: 306:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:306:30: 306:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb264: {
        switchInt(move _103) -> [0: bb266, otherwise: bb265]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:306:20: 306:42
    }

    bb265: {
        _0 = DecodedKey::Unicode(const ':'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:307:21: 307:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:306:17: 310:18
    }

    bb266: {
        _0 = DecodedKey::Unicode(const ';'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:309:21: 309:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:306:17: 310:18
    }

    bb267: {
        _104 = Modifiers::is_shifted(_3) -> [return: bb268, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:313:20: 313:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:313:30: 313:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb268: {
        switchInt(move _104) -> [0: bb270, otherwise: bb269]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:313:20: 313:42
    }

    bb269: {
        _0 = DecodedKey::Unicode(const '"'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:314:21: 314:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:313:17: 317:18
    }

    bb270: {
        _0 = DecodedKey::Unicode(const '\''); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:316:21: 316:46
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:313:17: 317:18
    }

    bb271: {
        _105 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb272, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:320:52: 320:61
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:320:55: 320:59
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb272: {
        _0 = DecodedKey::Unicode(move _105); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:320:32: 320:62
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:320:61: 320:62
    }

    bb273: {
        _107 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:322:20: 322:34
        switchInt(move _107) -> [0: bb274, otherwise: bb275]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:322:20: 322:57
    }

    bb274: {
        _106 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:322:20: 322:57
        goto -> bb276;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:322:20: 322:57
    }

    bb275: {
        _108 = Modifiers::is_ctrl(_3) -> [return: bb277, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:322:38: 322:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:322:48: 322:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb276: {
        switchInt(move _106) -> [0: bb279, otherwise: bb278]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:322:20: 322:57
    }

    bb277: {
        _106 = move _108;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:322:20: 322:57
        goto -> bb276;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:322:20: 322:57
    }

    bb278: {
        _0 = DecodedKey::Unicode(const '\u{1a}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:323:21: 323:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:322:17: 328:18
    }

    bb279: {
        _109 = Modifiers::is_caps(_3) -> [return: bb280, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:324:27: 324:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:324:37: 324:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb280: {
        switchInt(move _109) -> [0: bb282, otherwise: bb281]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:324:27: 324:46
    }

    bb281: {
        _0 = DecodedKey::Unicode(const 'Z'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:325:21: 325:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:324:24: 328:18
    }

    bb282: {
        _0 = DecodedKey::Unicode(const 'z'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:327:21: 327:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:324:24: 328:18
    }

    bb283: {
        _111 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:331:20: 331:34
        switchInt(move _111) -> [0: bb284, otherwise: bb285]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:331:20: 331:57
    }

    bb284: {
        _110 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:331:20: 331:57
        goto -> bb286;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:331:20: 331:57
    }

    bb285: {
        _112 = Modifiers::is_ctrl(_3) -> [return: bb287, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:331:38: 331:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:331:48: 331:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb286: {
        switchInt(move _110) -> [0: bb289, otherwise: bb288]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:331:20: 331:57
    }

    bb287: {
        _110 = move _112;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:331:20: 331:57
        goto -> bb286;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:331:20: 331:57
    }

    bb288: {
        _0 = DecodedKey::Unicode(const '\u{18}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:332:21: 332:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:331:17: 337:18
    }

    bb289: {
        _113 = Modifiers::is_caps(_3) -> [return: bb290, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:333:27: 333:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:333:37: 333:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb290: {
        switchInt(move _113) -> [0: bb292, otherwise: bb291]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:333:27: 333:46
    }

    bb291: {
        _0 = DecodedKey::Unicode(const 'X'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:334:21: 334:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:333:24: 337:18
    }

    bb292: {
        _0 = DecodedKey::Unicode(const 'x'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:336:21: 336:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:333:24: 337:18
    }

    bb293: {
        _115 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:340:20: 340:34
        switchInt(move _115) -> [0: bb294, otherwise: bb295]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:340:20: 340:57
    }

    bb294: {
        _114 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:340:20: 340:57
        goto -> bb296;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:340:20: 340:57
    }

    bb295: {
        _116 = Modifiers::is_ctrl(_3) -> [return: bb297, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:340:38: 340:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:340:48: 340:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb296: {
        switchInt(move _114) -> [0: bb299, otherwise: bb298]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:340:20: 340:57
    }

    bb297: {
        _114 = move _116;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:340:20: 340:57
        goto -> bb296;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:340:20: 340:57
    }

    bb298: {
        _0 = DecodedKey::Unicode(const '\u{3}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:341:21: 341:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:340:17: 346:18
    }

    bb299: {
        _117 = Modifiers::is_caps(_3) -> [return: bb300, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:342:27: 342:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:342:37: 342:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb300: {
        switchInt(move _117) -> [0: bb302, otherwise: bb301]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:342:27: 342:46
    }

    bb301: {
        _0 = DecodedKey::Unicode(const 'C'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:343:21: 343:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:342:24: 346:18
    }

    bb302: {
        _0 = DecodedKey::Unicode(const 'c'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:345:21: 345:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:342:24: 346:18
    }

    bb303: {
        _119 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:349:20: 349:34
        switchInt(move _119) -> [0: bb304, otherwise: bb305]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:349:20: 349:57
    }

    bb304: {
        _118 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:349:20: 349:57
        goto -> bb306;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:349:20: 349:57
    }

    bb305: {
        _120 = Modifiers::is_ctrl(_3) -> [return: bb307, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:349:38: 349:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:349:48: 349:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb306: {
        switchInt(move _118) -> [0: bb309, otherwise: bb308]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:349:20: 349:57
    }

    bb307: {
        _118 = move _120;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:349:20: 349:57
        goto -> bb306;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:349:20: 349:57
    }

    bb308: {
        _0 = DecodedKey::Unicode(const '\u{16}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:350:21: 350:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:349:17: 355:18
    }

    bb309: {
        _121 = Modifiers::is_caps(_3) -> [return: bb310, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:351:27: 351:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:351:37: 351:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb310: {
        switchInt(move _121) -> [0: bb312, otherwise: bb311]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:351:27: 351:46
    }

    bb311: {
        _0 = DecodedKey::Unicode(const 'V'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:352:21: 352:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:351:24: 355:18
    }

    bb312: {
        _0 = DecodedKey::Unicode(const 'v'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:354:21: 354:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:351:24: 355:18
    }

    bb313: {
        _123 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:358:20: 358:34
        switchInt(move _123) -> [0: bb314, otherwise: bb315]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:358:20: 358:57
    }

    bb314: {
        _122 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:358:20: 358:57
        goto -> bb316;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:358:20: 358:57
    }

    bb315: {
        _124 = Modifiers::is_ctrl(_3) -> [return: bb317, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:358:38: 358:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:358:48: 358:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb316: {
        switchInt(move _122) -> [0: bb319, otherwise: bb318]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:358:20: 358:57
    }

    bb317: {
        _122 = move _124;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:358:20: 358:57
        goto -> bb316;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:358:20: 358:57
    }

    bb318: {
        _0 = DecodedKey::Unicode(const '\u{2}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:359:21: 359:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:358:17: 364:18
    }

    bb319: {
        _125 = Modifiers::is_caps(_3) -> [return: bb320, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:360:27: 360:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:360:37: 360:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb320: {
        switchInt(move _125) -> [0: bb322, otherwise: bb321]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:360:27: 360:46
    }

    bb321: {
        _0 = DecodedKey::Unicode(const 'B'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:361:21: 361:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:360:24: 364:18
    }

    bb322: {
        _0 = DecodedKey::Unicode(const 'b'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:363:21: 363:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:360:24: 364:18
    }

    bb323: {
        _127 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:367:20: 367:34
        switchInt(move _127) -> [0: bb324, otherwise: bb325]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:367:20: 367:57
    }

    bb324: {
        _126 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:367:20: 367:57
        goto -> bb326;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:367:20: 367:57
    }

    bb325: {
        _128 = Modifiers::is_ctrl(_3) -> [return: bb327, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:367:38: 367:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:367:48: 367:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb326: {
        switchInt(move _126) -> [0: bb329, otherwise: bb328]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:367:20: 367:57
    }

    bb327: {
        _126 = move _128;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:367:20: 367:57
        goto -> bb326;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:367:20: 367:57
    }

    bb328: {
        _0 = DecodedKey::Unicode(const '\u{e}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:368:21: 368:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:367:17: 373:18
    }

    bb329: {
        _129 = Modifiers::is_caps(_3) -> [return: bb330, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:369:27: 369:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:369:37: 369:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb330: {
        switchInt(move _129) -> [0: bb332, otherwise: bb331]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:369:27: 369:46
    }

    bb331: {
        _0 = DecodedKey::Unicode(const 'N'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:370:21: 370:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:369:24: 373:18
    }

    bb332: {
        _0 = DecodedKey::Unicode(const 'n'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:372:21: 372:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:369:24: 373:18
    }

    bb333: {
        _131 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:376:20: 376:34
        switchInt(move _131) -> [0: bb334, otherwise: bb335]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:376:20: 376:57
    }

    bb334: {
        _130 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:376:20: 376:57
        goto -> bb336;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:376:20: 376:57
    }

    bb335: {
        _132 = Modifiers::is_ctrl(_3) -> [return: bb337, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:376:38: 376:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:376:48: 376:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb336: {
        switchInt(move _130) -> [0: bb339, otherwise: bb338]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:376:20: 376:57
    }

    bb337: {
        _130 = move _132;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:376:20: 376:57
        goto -> bb336;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:376:20: 376:57
    }

    bb338: {
        _0 = DecodedKey::Unicode(const '\r'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:377:21: 377:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:376:17: 382:18
    }

    bb339: {
        _133 = Modifiers::is_caps(_3) -> [return: bb340, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:378:27: 378:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:378:37: 378:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb340: {
        switchInt(move _133) -> [0: bb342, otherwise: bb341]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:378:27: 378:46
    }

    bb341: {
        _0 = DecodedKey::Unicode(const 'M'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:379:21: 379:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:378:24: 382:18
    }

    bb342: {
        _0 = DecodedKey::Unicode(const 'm'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:381:21: 381:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:378:24: 382:18
    }

    bb343: {
        _134 = Modifiers::is_shifted(_3) -> [return: bb344, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:385:20: 385:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:385:30: 385:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb344: {
        switchInt(move _134) -> [0: bb346, otherwise: bb345]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:385:20: 385:42
    }

    bb345: {
        _0 = DecodedKey::Unicode(const '<'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:386:21: 386:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:385:17: 389:18
    }

    bb346: {
        _0 = DecodedKey::Unicode(const ','); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:388:21: 388:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:385:17: 389:18
    }

    bb347: {
        _135 = Modifiers::is_shifted(_3) -> [return: bb348, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:392:20: 392:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:392:30: 392:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb348: {
        switchInt(move _135) -> [0: bb350, otherwise: bb349]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:392:20: 392:42
    }

    bb349: {
        _0 = DecodedKey::Unicode(const '>'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:393:21: 393:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:392:17: 396:18
    }

    bb350: {
        _0 = DecodedKey::Unicode(const '.'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:395:21: 395:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:392:17: 396:18
    }

    bb351: {
        _136 = Modifiers::is_shifted(_3) -> [return: bb352, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:399:20: 399:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:399:30: 399:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb352: {
        switchInt(move _136) -> [0: bb354, otherwise: bb353]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:399:20: 399:42
    }

    bb353: {
        _0 = DecodedKey::Unicode(const '?'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:400:21: 400:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:399:17: 403:18
    }

    bb354: {
        _0 = DecodedKey::Unicode(const '/'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:402:21: 402:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:399:17: 403:18
    }

    bb355: {
        _0 = DecodedKey::Unicode(const ' '); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:405:34: 405:58
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:405:34: 405:58
    }

    bb356: {
        _137 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb357, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:406:52: 406:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:406:56: 406:60
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb357: {
        _0 = DecodedKey::Unicode(move _137); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:406:32: 406:63
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:406:62: 406:63
    }

    bb358: {
        _0 = DecodedKey::Unicode(const '/'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:407:38: 407:62
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:407:38: 407:62
    }

    bb359: {
        _0 = DecodedKey::Unicode(const '*'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:408:40: 408:64
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:408:40: 408:64
    }

    bb360: {
        _0 = DecodedKey::Unicode(const '-'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:409:40: 409:64
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:409:40: 409:64
    }

    bb361: {
        _138 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:411:20: 411:37
        switchInt(move _138) -> [0: bb363, otherwise: bb362]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:411:20: 411:37
    }

    bb362: {
        _0 = DecodedKey::Unicode(const '7'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:412:21: 412:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:411:17: 415:18
    }

    bb363: {
        _139 = KeyCode::Home;            // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:414:40: 414:53
        _0 = DecodedKey::RawKey(move _139); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:414:21: 414:54
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:411:17: 415:18
    }

    bb364: {
        _140 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:418:20: 418:37
        switchInt(move _140) -> [0: bb366, otherwise: bb365]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:418:20: 418:37
    }

    bb365: {
        _0 = DecodedKey::Unicode(const '8'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:419:21: 419:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:418:17: 422:18
    }

    bb366: {
        _141 = KeyCode::ArrowUp;         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:421:40: 421:56
        _0 = DecodedKey::RawKey(move _141); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:421:21: 421:57
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:418:17: 422:18
    }

    bb367: {
        _142 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:425:20: 425:37
        switchInt(move _142) -> [0: bb369, otherwise: bb368]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:425:20: 425:37
    }

    bb368: {
        _0 = DecodedKey::Unicode(const '9'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:426:21: 426:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:425:17: 429:18
    }

    bb369: {
        _143 = KeyCode::PageUp;          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:428:40: 428:55
        _0 = DecodedKey::RawKey(move _143); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:428:21: 428:56
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:425:17: 429:18
    }

    bb370: {
        _0 = DecodedKey::Unicode(const '+'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:431:35: 431:59
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:431:35: 431:59
    }

    bb371: {
        _144 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:433:20: 433:37
        switchInt(move _144) -> [0: bb373, otherwise: bb372]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:433:20: 433:37
    }

    bb372: {
        _0 = DecodedKey::Unicode(const '4'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:434:21: 434:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:433:17: 437:18
    }

    bb373: {
        _145 = KeyCode::ArrowLeft;       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:436:40: 436:58
        _0 = DecodedKey::RawKey(move _145); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:436:21: 436:59
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:433:17: 437:18
    }

    bb374: {
        _0 = DecodedKey::Unicode(const '5'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:439:33: 439:57
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:439:33: 439:57
    }

    bb375: {
        _146 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:441:20: 441:37
        switchInt(move _146) -> [0: bb377, otherwise: bb376]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:441:20: 441:37
    }

    bb376: {
        _0 = DecodedKey::Unicode(const '6'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:442:21: 442:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:441:17: 445:18
    }

    bb377: {
        _147 = KeyCode::ArrowRight;      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:444:40: 444:59
        _0 = DecodedKey::RawKey(move _147); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:444:21: 444:60
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:441:17: 445:18
    }

    bb378: {
        _148 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:448:20: 448:37
        switchInt(move _148) -> [0: bb380, otherwise: bb379]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:448:20: 448:37
    }

    bb379: {
        _0 = DecodedKey::Unicode(const '1'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:449:21: 449:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:448:17: 452:18
    }

    bb380: {
        _149 = KeyCode::End;             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:451:40: 451:52
        _0 = DecodedKey::RawKey(move _149); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:451:21: 451:53
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:448:17: 452:18
    }

    bb381: {
        _150 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:455:20: 455:37
        switchInt(move _150) -> [0: bb383, otherwise: bb382]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:455:20: 455:37
    }

    bb382: {
        _0 = DecodedKey::Unicode(const '2'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:456:21: 456:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:455:17: 459:18
    }

    bb383: {
        _151 = KeyCode::ArrowDown;       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:458:40: 458:58
        _0 = DecodedKey::RawKey(move _151); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:458:21: 458:59
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:455:17: 459:18
    }

    bb384: {
        _152 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:462:20: 462:37
        switchInt(move _152) -> [0: bb386, otherwise: bb385]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:462:20: 462:37
    }

    bb385: {
        _0 = DecodedKey::Unicode(const '3'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:463:21: 463:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:462:17: 466:18
    }

    bb386: {
        _153 = KeyCode::PageDown;        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:465:40: 465:57
        _0 = DecodedKey::RawKey(move _153); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:465:21: 465:58
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:462:17: 466:18
    }

    bb387: {
        _154 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:469:20: 469:37
        switchInt(move _154) -> [0: bb389, otherwise: bb388]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:469:20: 469:37
    }

    bb388: {
        _0 = DecodedKey::Unicode(const '0'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:470:21: 470:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:469:17: 473:18
    }

    bb389: {
        _155 = KeyCode::Insert;          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:472:40: 472:55
        _0 = DecodedKey::RawKey(move _155); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:472:21: 472:56
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:469:17: 473:18
    }

    bb390: {
        _156 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:476:20: 476:37
        switchInt(move _156) -> [0: bb392, otherwise: bb391]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:476:20: 476:37
    }

    bb391: {
        _0 = DecodedKey::Unicode(const '.'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:477:21: 477:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:476:17: 480:18
    }

    bb392: {
        _157 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb393, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:479:41: 479:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:479:45: 479:49
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb393: {
        _0 = DecodedKey::Unicode(move _157); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:479:21: 479:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:476:17: 480:18
    }

    bb394: {
        _158 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb395, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:482:57: 482:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:482:60: 482:64
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb395: {
        _0 = DecodedKey::Unicode(move _158); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:482:37: 482:67
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:482:66: 482:67
    }

    bb396: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:485:6: 485:6
    }
}

promoted[0] in us104::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:10:1: 10:33>::map_keycode: &HandleControl = {
    let mut _0: &HandleControl;          // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:45: 17:79
    let mut _1: HandleControl;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:45: 17:79

    bb0: {
        _1 = HandleControl::MapLettersToUnicode; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:45: 17:79
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:45: 17:79
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/us104.rs:17:45: 17:79
    }
}

fn uk105::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:10:1: 10:33>::map_keycode(_1: &Uk105Key, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:12:9: 12:14
    debug keycode => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:13:9: 13:16
    debug modifiers => _3;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:14:9: 14:18
    debug handle_ctrl => _4;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:15:9: 15:20
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:16:10: 16:20
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:18:13: 18:26
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:19:20: 19:36
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:21:27: 21:49
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:28:20: 28:42
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:35:20: 35:42
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:42:20: 42:42
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:49:20: 49:36
    let mut _12: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:51:27: 51:49
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:58:20: 58:42
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:65:20: 65:42
    let mut _16: &layouts::us104::Us104Key; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:73:17: 73:58
    scope 1 {
        debug e => _2;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:71:13: 71:14
        let _15: layouts::us104::Us104Key; // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:72:21: 72:23
        scope 2 {
            debug us => const Us104Key;  // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:72:21: 72:23
        }
    }

    bb0: {
        _5 = discriminant(_2);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:17:15: 17:22
        switchInt(move _5) -> [17: bb2, 19: bb8, 20: bb16, 21: bb20, 51: bb30, 52: bb26, 71: bb12, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:17:9: 17:22
    }

    bb1: {
        _16 = &_15;                      // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:73:17: 73:58
        _0 = <Us104Key as KeyboardLayout>::map_keycode(move _16, _2, _3, _4) -> [return: bb34, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:73:17: 73:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:73:20: 73:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Us104Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Us104Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = ((*_3).6: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:19:20: 19:36
        switchInt(move _6) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:19:20: 19:36
    }

    bb3: {
        _0 = DecodedKey::Unicode(const '|'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:20:21: 20:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:19:17: 25:18
    }

    bb4: {
        _7 = Modifiers::is_shifted(_3) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:21:27: 21:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:21:37: 21:47
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _7) -> [0: bb7, otherwise: bb6]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:21:27: 21:49
    }

    bb6: {
        _0 = DecodedKey::Unicode(const '¬'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:22:21: 22:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:21:24: 25:18
    }

    bb7: {
        _0 = DecodedKey::Unicode(const '`'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:24:21: 24:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:21:24: 25:18
    }

    bb8: {
        _8 = Modifiers::is_shifted(_3) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:28:20: 28:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:28:30: 28:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _8) -> [0: bb11, otherwise: bb10]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:28:20: 28:42
    }

    bb10: {
        _0 = DecodedKey::Unicode(const '"'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:29:21: 29:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:28:17: 32:18
    }

    bb11: {
        _0 = DecodedKey::Unicode(const '2'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:31:21: 31:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:28:17: 32:18
    }

    bb12: {
        _9 = Modifiers::is_shifted(_3) -> [return: bb13, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:35:20: 35:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:35:30: 35:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb13: {
        switchInt(move _9) -> [0: bb15, otherwise: bb14]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:35:20: 35:42
    }

    bb14: {
        _0 = DecodedKey::Unicode(const '@'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:36:21: 36:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:35:17: 39:18
    }

    bb15: {
        _0 = DecodedKey::Unicode(const '\''); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:38:21: 38:46
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:35:17: 39:18
    }

    bb16: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb17, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:42:20: 42:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:42:30: 42:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb17: {
        switchInt(move _10) -> [0: bb19, otherwise: bb18]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:42:20: 42:42
    }

    bb18: {
        _0 = DecodedKey::Unicode(const '£'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:43:21: 43:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:42:17: 46:18
    }

    bb19: {
        _0 = DecodedKey::Unicode(const '3'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:45:21: 45:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:42:17: 46:18
    }

    bb20: {
        _11 = ((*_3).6: bool);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:49:20: 49:36
        switchInt(move _11) -> [0: bb22, otherwise: bb21]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:49:20: 49:36
    }

    bb21: {
        _0 = DecodedKey::Unicode(const '€'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:50:21: 50:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:49:17: 55:18
    }

    bb22: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb23, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:51:27: 51:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:51:37: 51:47
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb23: {
        switchInt(move _12) -> [0: bb25, otherwise: bb24]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:51:27: 51:49
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '$'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:52:21: 52:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:51:24: 55:18
    }

    bb25: {
        _0 = DecodedKey::Unicode(const '4'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:54:21: 54:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:51:24: 55:18
    }

    bb26: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb27, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:58:20: 58:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:58:30: 58:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb27: {
        switchInt(move _13) -> [0: bb29, otherwise: bb28]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:58:20: 58:42
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '~'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:59:21: 59:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:58:17: 62:18
    }

    bb29: {
        _0 = DecodedKey::Unicode(const '#'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:61:21: 61:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:58:17: 62:18
    }

    bb30: {
        _14 = Modifiers::is_shifted(_3) -> [return: bb31, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:65:20: 65:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:65:30: 65:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb31: {
        switchInt(move _14) -> [0: bb33, otherwise: bb32]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:65:20: 65:42
    }

    bb32: {
        _0 = DecodedKey::Unicode(const '|'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:66:21: 66:45
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:65:17: 69:18
    }

    bb33: {
        _0 = DecodedKey::Unicode(const '\\'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:68:21: 68:46
        goto -> bb34;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:65:17: 69:18
    }

    bb34: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/uk105.rs:76:6: 76:6
    }
}

fn jis109::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:13:1: 13:34>::map_keycode(_1: &Jis109Key, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:15:9: 15:14
    debug keycode => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:16:9: 16:16
    debug modifiers => _3;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:17:9: 17:18
    debug handle_ctrl => _4;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:18:9: 18:20
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:19:10: 19:20
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:21:13: 21:26
    let mut _6: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:23:36: 23:49
    let mut _7: char;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:25:52: 25:63
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:27:20: 27:42
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:34:20: 34:42
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:41:20: 41:42
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:48:20: 48:42
    let mut _12: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:55:20: 55:42
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:62:20: 62:42
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:69:20: 69:42
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:76:20: 76:42
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:83:20: 83:42
    let mut _17: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:90:20: 90:42
    let mut _18: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:97:20: 97:42
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:104:20: 104:42
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:111:20: 111:42
    let mut _21: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:118:20: 118:42
    let mut _22: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:125:20: 125:42
    let mut _23: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:132:20: 132:42
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:139:20: 139:42
    let mut _25: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:158:20: 158:42
    let mut _26: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:165:20: 165:42
    let mut _28: &layouts::us104::Us104Key; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:174:17: 174:58
    scope 1 {
        debug e => _2;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:172:13: 172:14
        let _27: layouts::us104::Us104Key; // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:173:21: 173:23
        scope 2 {
            debug us => const Us104Key;  // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:173:21: 173:23
        }
    }

    bb0: {
        _5 = discriminant(_2);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:20:15: 20:22
        switchInt(move _5) -> [0: bb3, 17: bb2, 18: bb5, 19: bb9, 20: bb13, 21: bb17, 22: bb21, 23: bb25, 24: bb29, 25: bb33, 26: bb37, 27: bb41, 28: bb45, 29: bb49, 49: bb53, 50: bb57, 52: bb61, 70: bb65, 71: bb69, 106: bb73, 107: bb74, 108: bb75, 109: bb76, 110: bb80, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:20:9: 20:22
    }

    bb1: {
        _28 = &_27;                      // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:174:17: 174:58
        _0 = <Us104Key as KeyboardLayout>::map_keycode(move _28, _2, _3, _4) -> [return: bb84, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:174:17: 174:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:174:20: 174:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Us104Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Us104Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = KeyCode::Oem8;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:23:36: 23:49
        _0 = DecodedKey::RawKey(move _6); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:23:17: 23:50
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:23:49: 23:50
    }

    bb3: {
        _7 = <u8 as Into<char>>::into(const 27_u8) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:25:52: 25:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:25:57: 25:61
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = DecodedKey::Unicode(move _7); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:25:32: 25:64
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:25:63: 25:64
    }

    bb5: {
        _8 = Modifiers::is_shifted(_3) -> [return: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:27:20: 27:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:27:30: 27:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _8) -> [0: bb8, otherwise: bb7]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:27:20: 27:42
    }

    bb7: {
        _0 = DecodedKey::Unicode(const '!'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:28:21: 28:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:27:17: 31:18
    }

    bb8: {
        _0 = DecodedKey::Unicode(const '1'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:30:21: 30:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:27:17: 31:18
    }

    bb9: {
        _9 = Modifiers::is_shifted(_3) -> [return: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:34:20: 34:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:34:30: 34:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _9) -> [0: bb12, otherwise: bb11]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:34:20: 34:42
    }

    bb11: {
        _0 = DecodedKey::Unicode(const '"'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:35:21: 35:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:34:17: 38:18
    }

    bb12: {
        _0 = DecodedKey::Unicode(const '2'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:37:21: 37:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:34:17: 38:18
    }

    bb13: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb14, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:41:20: 41:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:41:30: 41:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb14: {
        switchInt(move _10) -> [0: bb16, otherwise: bb15]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:41:20: 41:42
    }

    bb15: {
        _0 = DecodedKey::Unicode(const '#'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:42:21: 42:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:41:17: 45:18
    }

    bb16: {
        _0 = DecodedKey::Unicode(const '3'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:44:21: 44:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:41:17: 45:18
    }

    bb17: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb18, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:48:20: 48:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:48:30: 48:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(move _11) -> [0: bb20, otherwise: bb19]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:48:20: 48:42
    }

    bb19: {
        _0 = DecodedKey::Unicode(const '$'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:49:21: 49:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:48:17: 52:18
    }

    bb20: {
        _0 = DecodedKey::Unicode(const '4'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:51:21: 51:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:48:17: 52:18
    }

    bb21: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb22, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:55:20: 55:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:55:30: 55:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb22: {
        switchInt(move _12) -> [0: bb24, otherwise: bb23]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:55:20: 55:42
    }

    bb23: {
        _0 = DecodedKey::Unicode(const '%'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:56:21: 56:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:55:17: 59:18
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '5'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:58:21: 58:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:55:17: 59:18
    }

    bb25: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb26, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:62:20: 62:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:62:30: 62:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb26: {
        switchInt(move _13) -> [0: bb28, otherwise: bb27]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:62:20: 62:42
    }

    bb27: {
        _0 = DecodedKey::Unicode(const '&'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:63:21: 63:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:62:17: 66:18
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '6'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:65:21: 65:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:62:17: 66:18
    }

    bb29: {
        _14 = Modifiers::is_shifted(_3) -> [return: bb30, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:69:20: 69:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:69:30: 69:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb30: {
        switchInt(move _14) -> [0: bb32, otherwise: bb31]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:69:20: 69:42
    }

    bb31: {
        _0 = DecodedKey::Unicode(const '\''); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:70:21: 70:46
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:69:17: 73:18
    }

    bb32: {
        _0 = DecodedKey::Unicode(const '7'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:72:21: 72:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:69:17: 73:18
    }

    bb33: {
        _15 = Modifiers::is_shifted(_3) -> [return: bb34, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:76:20: 76:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:76:30: 76:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb34: {
        switchInt(move _15) -> [0: bb36, otherwise: bb35]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:76:20: 76:42
    }

    bb35: {
        _0 = DecodedKey::Unicode(const '('); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:77:21: 77:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:76:17: 80:18
    }

    bb36: {
        _0 = DecodedKey::Unicode(const '8'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:79:21: 79:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:76:17: 80:18
    }

    bb37: {
        _16 = Modifiers::is_shifted(_3) -> [return: bb38, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:83:20: 83:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:83:30: 83:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb38: {
        switchInt(move _16) -> [0: bb40, otherwise: bb39]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:83:20: 83:42
    }

    bb39: {
        _0 = DecodedKey::Unicode(const ')'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:84:21: 84:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:83:17: 87:18
    }

    bb40: {
        _0 = DecodedKey::Unicode(const '9'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:86:21: 86:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:83:17: 87:18
    }

    bb41: {
        _17 = Modifiers::is_shifted(_3) -> [return: bb42, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:90:20: 90:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:90:30: 90:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb42: {
        switchInt(move _17) -> [0: bb44, otherwise: bb43]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:90:20: 90:42
    }

    bb43: {
        _0 = DecodedKey::Unicode(const '~'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:91:21: 91:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:90:17: 94:18
    }

    bb44: {
        _0 = DecodedKey::Unicode(const '0'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:93:21: 93:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:90:17: 94:18
    }

    bb45: {
        _18 = Modifiers::is_shifted(_3) -> [return: bb46, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:97:20: 97:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:97:30: 97:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb46: {
        switchInt(move _18) -> [0: bb48, otherwise: bb47]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:97:20: 97:42
    }

    bb47: {
        _0 = DecodedKey::Unicode(const '='); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:98:21: 98:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:97:17: 101:18
    }

    bb48: {
        _0 = DecodedKey::Unicode(const '-'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:100:21: 100:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:97:17: 101:18
    }

    bb49: {
        _19 = Modifiers::is_shifted(_3) -> [return: bb50, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:104:20: 104:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:104:30: 104:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb50: {
        switchInt(move _19) -> [0: bb52, otherwise: bb51]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:104:20: 104:42
    }

    bb51: {
        _0 = DecodedKey::Unicode(const '¯'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:105:21: 105:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:104:17: 108:18
    }

    bb52: {
        _0 = DecodedKey::Unicode(const '^'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:107:21: 107:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:104:17: 108:18
    }

    bb53: {
        _20 = Modifiers::is_shifted(_3) -> [return: bb54, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:111:20: 111:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:111:30: 111:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb54: {
        switchInt(move _20) -> [0: bb56, otherwise: bb55]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:111:20: 111:42
    }

    bb55: {
        _0 = DecodedKey::Unicode(const '`'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:112:21: 112:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:111:17: 115:18
    }

    bb56: {
        _0 = DecodedKey::Unicode(const '@'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:114:21: 114:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:111:17: 115:18
    }

    bb57: {
        _21 = Modifiers::is_shifted(_3) -> [return: bb58, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:118:20: 118:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:118:30: 118:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb58: {
        switchInt(move _21) -> [0: bb60, otherwise: bb59]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:118:20: 118:42
    }

    bb59: {
        _0 = DecodedKey::Unicode(const '{'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:119:21: 119:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:118:17: 122:18
    }

    bb60: {
        _0 = DecodedKey::Unicode(const '['); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:121:21: 121:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:118:17: 122:18
    }

    bb61: {
        _22 = Modifiers::is_shifted(_3) -> [return: bb62, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:125:20: 125:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:125:30: 125:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb62: {
        switchInt(move _22) -> [0: bb64, otherwise: bb63]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:125:20: 125:42
    }

    bb63: {
        _0 = DecodedKey::Unicode(const '}'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:126:21: 126:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:125:17: 129:18
    }

    bb64: {
        _0 = DecodedKey::Unicode(const ']'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:128:21: 128:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:125:17: 129:18
    }

    bb65: {
        _23 = Modifiers::is_shifted(_3) -> [return: bb66, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:132:20: 132:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:132:30: 132:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb66: {
        switchInt(move _23) -> [0: bb68, otherwise: bb67]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:132:20: 132:42
    }

    bb67: {
        _0 = DecodedKey::Unicode(const '+'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:133:21: 133:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:132:17: 136:18
    }

    bb68: {
        _0 = DecodedKey::Unicode(const ';'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:135:21: 135:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:132:17: 136:18
    }

    bb69: {
        _24 = Modifiers::is_shifted(_3) -> [return: bb70, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:139:20: 139:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:139:30: 139:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb70: {
        switchInt(move _24) -> [0: bb72, otherwise: bb71]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:139:20: 139:42
    }

    bb71: {
        _0 = DecodedKey::Unicode(const '*'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:140:21: 140:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:139:17: 143:18
    }

    bb72: {
        _0 = DecodedKey::Unicode(const ':'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:142:21: 142:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:139:17: 143:18
    }

    bb73: {
        _0 = DecodedKey::RawKey(_2);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:147:17: 147:44
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:147:43: 147:44
    }

    bb74: {
        _0 = DecodedKey::RawKey(_2);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:151:17: 151:44
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:151:43: 151:44
    }

    bb75: {
        _0 = DecodedKey::RawKey(_2);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:155:17: 155:44
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:155:43: 155:44
    }

    bb76: {
        _25 = Modifiers::is_shifted(_3) -> [return: bb77, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:158:20: 158:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:158:30: 158:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb77: {
        switchInt(move _25) -> [0: bb79, otherwise: bb78]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:158:20: 158:42
    }

    bb78: {
        _0 = DecodedKey::Unicode(const '_'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:159:21: 159:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:158:17: 162:18
    }

    bb79: {
        _0 = DecodedKey::Unicode(const '\\'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:161:21: 161:46
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:158:17: 162:18
    }

    bb80: {
        _26 = Modifiers::is_shifted(_3) -> [return: bb81, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:165:20: 165:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:165:30: 165:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb81: {
        switchInt(move _26) -> [0: bb83, otherwise: bb82]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:165:20: 165:42
    }

    bb82: {
        _0 = DecodedKey::Unicode(const '|'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:166:21: 166:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:165:17: 169:18
    }

    bb83: {
        _0 = DecodedKey::Unicode(const '¥'); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:168:21: 168:45
        goto -> bb84;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:165:17: 169:18
    }

    bb84: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/jis109.rs:177:6: 177:6
    }
}

fn azerty::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:12:1: 12:31>::map_keycode(_1: &Azerty, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:14:9: 14:14
    debug keycode => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:15:9: 15:16
    debug modifiers => _3;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:16:9: 16:18
    debug handle_ctrl => _4;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:17:9: 17:20
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:18:10: 18:20
    let _5: bool;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:13: 19:27
    let mut _6: &HandleControl;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:30: 19:41
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:21:13: 21:28
    let mut _8: char;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:21:52: 21:63
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:24:20: 24:42
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:31:20: 31:42
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:38:20: 38:42
    let mut _12: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:40:27: 40:43
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:47:20: 47:42
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:49:27: 49:43
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:56:20: 56:42
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:58:27: 58:43
    let mut _17: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:65:20: 65:42
    let mut _18: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:67:27: 67:43
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:74:20: 74:42
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:76:27: 76:43
    let mut _21: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:83:20: 83:42
    let mut _22: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:85:27: 85:43
    let mut _23: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:92:20: 92:42
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:94:27: 94:43
    let mut _25: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:101:20: 101:42
    let mut _26: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:103:27: 103:43
    let mut _27: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:110:20: 110:42
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:112:27: 112:43
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:119:20: 119:42
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:121:27: 121:43
    let mut _31: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:128:20: 128:42
    let mut _32: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:130:27: 130:43
    let mut _33: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:136:55: 136:66
    let mut _34: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:137:49: 137:60
    let mut _35: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:139:20: 139:57
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:139:20: 139:34
    let mut _37: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:139:38: 139:57
    let mut _38: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:141:27: 141:46
    let mut _39: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:148:20: 148:57
    let mut _40: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:148:20: 148:34
    let mut _41: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:148:38: 148:57
    let mut _42: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:150:27: 150:46
    let mut _43: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:157:20: 157:57
    let mut _44: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:157:20: 157:34
    let mut _45: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:157:38: 157:57
    let mut _46: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:159:27: 159:46
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:166:20: 166:57
    let mut _48: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:166:20: 166:34
    let mut _49: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:166:38: 166:57
    let mut _50: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:168:27: 168:46
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:175:20: 175:57
    let mut _52: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:175:20: 175:34
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:175:38: 175:57
    let mut _54: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:177:27: 177:46
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:184:20: 184:57
    let mut _56: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:184:20: 184:34
    let mut _57: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:184:38: 184:57
    let mut _58: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:186:27: 186:46
    let mut _59: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:193:20: 193:57
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:193:20: 193:34
    let mut _61: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:193:38: 193:57
    let mut _62: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:195:27: 195:46
    let mut _63: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:202:20: 202:57
    let mut _64: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:202:20: 202:34
    let mut _65: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:202:38: 202:57
    let mut _66: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:204:27: 204:46
    let mut _67: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:211:20: 211:57
    let mut _68: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:211:20: 211:34
    let mut _69: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:211:38: 211:57
    let mut _70: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:213:27: 213:46
    let mut _71: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:220:20: 220:57
    let mut _72: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:220:20: 220:34
    let mut _73: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:220:38: 220:57
    let mut _74: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:222:27: 222:46
    let mut _75: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:229:20: 229:42
    let mut _76: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:231:27: 231:43
    let mut _77: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:238:20: 238:42
    let mut _78: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:240:27: 240:43
    let mut _79: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:247:20: 247:42
    let mut _80: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:254:20: 254:57
    let mut _81: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:254:20: 254:34
    let mut _82: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:254:38: 254:57
    let mut _83: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:256:27: 256:46
    let mut _84: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:263:20: 263:57
    let mut _85: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:263:20: 263:34
    let mut _86: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:263:38: 263:57
    let mut _87: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:265:27: 265:46
    let mut _88: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:272:20: 272:57
    let mut _89: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:272:20: 272:34
    let mut _90: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:272:38: 272:57
    let mut _91: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:274:27: 274:46
    let mut _92: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:281:20: 281:57
    let mut _93: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:281:20: 281:34
    let mut _94: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:281:38: 281:57
    let mut _95: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:283:27: 283:46
    let mut _96: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:290:20: 290:57
    let mut _97: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:290:20: 290:34
    let mut _98: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:290:38: 290:57
    let mut _99: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:292:27: 292:46
    let mut _100: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:299:20: 299:57
    let mut _101: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:299:20: 299:34
    let mut _102: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:299:38: 299:57
    let mut _103: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:301:27: 301:46
    let mut _104: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:308:20: 308:57
    let mut _105: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:308:20: 308:34
    let mut _106: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:308:38: 308:57
    let mut _107: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:310:27: 310:46
    let mut _108: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:317:20: 317:57
    let mut _109: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:317:20: 317:34
    let mut _110: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:317:38: 317:57
    let mut _111: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:319:27: 319:46
    let mut _112: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:326:20: 326:57
    let mut _113: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:326:20: 326:34
    let mut _114: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:326:38: 326:57
    let mut _115: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:328:27: 328:46
    let mut _116: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:335:20: 335:57
    let mut _117: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:335:20: 335:34
    let mut _118: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:335:38: 335:57
    let mut _119: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:337:27: 337:46
    let mut _120: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:344:20: 344:42
    let mut _121: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:351:52: 351:61
    let mut _122: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:353:20: 353:57
    let mut _123: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:353:20: 353:34
    let mut _124: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:353:38: 353:57
    let mut _125: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:355:27: 355:46
    let mut _126: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:362:20: 362:57
    let mut _127: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:362:20: 362:34
    let mut _128: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:362:38: 362:57
    let mut _129: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:364:27: 364:46
    let mut _130: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:371:20: 371:57
    let mut _131: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:371:20: 371:34
    let mut _132: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:371:38: 371:57
    let mut _133: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:373:27: 373:46
    let mut _134: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:380:20: 380:57
    let mut _135: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:380:20: 380:34
    let mut _136: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:380:38: 380:57
    let mut _137: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:382:27: 382:46
    let mut _138: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:389:20: 389:57
    let mut _139: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:389:20: 389:34
    let mut _140: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:389:38: 389:57
    let mut _141: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:391:27: 391:46
    let mut _142: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:398:20: 398:57
    let mut _143: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:398:20: 398:34
    let mut _144: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:398:38: 398:57
    let mut _145: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:400:27: 400:46
    let mut _146: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:407:20: 407:39
    let mut _147: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:414:20: 414:42
    let mut _148: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:421:20: 421:42
    let mut _149: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:428:20: 428:42
    let mut _150: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:435:52: 435:62
    let mut _151: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:440:20: 440:37
    let mut _152: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:443:40: 443:53
    let mut _153: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:447:20: 447:37
    let mut _154: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:450:40: 450:56
    let mut _155: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:454:20: 454:37
    let mut _156: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:457:40: 457:55
    let mut _157: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:462:20: 462:37
    let mut _158: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:465:40: 465:58
    let mut _159: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:470:20: 470:37
    let mut _160: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:473:40: 473:59
    let mut _161: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:477:20: 477:37
    let mut _162: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:480:40: 480:52
    let mut _163: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:484:20: 484:37
    let mut _164: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:487:40: 487:58
    let mut _165: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:491:20: 491:37
    let mut _166: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:494:40: 494:57
    let mut _167: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:498:20: 498:37
    let mut _168: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:501:40: 501:55
    let mut _169: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:505:20: 505:37
    let mut _170: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:508:41: 508:51
    let mut _171: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:511:57: 511:66
    let mut _172: &HandleControl;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:45: 19:79
    scope 1 {
        debug map_to_unicode => _5;      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:13: 19:27
        scope 2 {
            debug k => _2;               // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:513:13: 513:14
        }
    }

    bb0: {
        _6 = &_4;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:30: 19:41
        _172 = const _;                  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:45: 19:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:45: 19:79
                                         // + literal: Const { ty: &HandleControl, val: Unevaluated(<Azerty as KeyboardLayout>::map_keycode, [], Some(promoted[0])) }
        _5 = <HandleControl as PartialEq>::eq(move _6, _172) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:30: 19:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:30: 19:79
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HandleControl, &'b HandleControl) -> bool {<HandleControl as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_2);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:20:15: 20:22
        switchInt(move _7) -> [0: bb3, 17: bb5, 18: bb10, 19: bb14, 20: bb20, 21: bb26, 22: bb32, 23: bb38, 24: bb44, 25: bb50, 26: bb56, 27: bb62, 28: bb68, 29: bb74, 30: bb80, 35: bb385, 36: bb386, 37: bb387, 38: bb82, 39: bb84, 40: bb94, 41: bb104, 42: bb114, 43: bb124, 44: bb134, 45: bb144, 46: bb154, 47: bb164, 48: bb174, 49: bb184, 50: bb190, 51: bb6, 52: bb196, 53: bb383, 56: bb388, 57: bb391, 58: bb394, 59: bb397, 61: bb200, 62: bb210, 63: bb220, 64: bb230, 65: bb240, 66: bb250, 67: bb260, 68: bb270, 69: bb280, 70: bb290, 71: bb300, 72: bb304, 73: bb398, 74: bb401, 75: bb402, 76: bb423, 77: bb306, 78: bb316, 79: bb326, 80: bb336, 81: bb346, 82: bb356, 83: bb366, 84: bb370, 85: bb374, 86: bb378, 89: bb405, 90: bb408, 91: bb411, 92: bb421, 96: bb382, 104: bb414, 105: bb417, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:20:9: 20:22
    }

    bb2: {
        _0 = DecodedKey::RawKey(_2);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:513:18: 513:39
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:513:38: 513:39
    }

    bb3: {
        _8 = <u8 as Into<char>>::into(const 27_u8) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:21:52: 21:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:21:57: 21:61
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = DecodedKey::Unicode(move _8); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:21:32: 21:64
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:21:63: 21:64
    }

    bb5: {
        _0 = DecodedKey::Unicode(const '²'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:22:30: 22:54
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:22:30: 22:54
    }

    bb6: {
        _9 = Modifiers::is_shifted(_3) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:24:20: 24:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:24:30: 24:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _9) -> [0: bb9, otherwise: bb8]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:24:20: 24:42
    }

    bb8: {
        _0 = DecodedKey::Unicode(const '*'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:25:21: 25:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:24:17: 28:18
    }

    bb9: {
        _0 = DecodedKey::Unicode(const 'µ'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:27:21: 27:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:24:17: 28:18
    }

    bb10: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:31:20: 31:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:31:30: 31:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb11: {
        switchInt(move _10) -> [0: bb13, otherwise: bb12]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:31:20: 31:42
    }

    bb12: {
        _0 = DecodedKey::Unicode(const '1'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:32:21: 32:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:31:17: 35:18
    }

    bb13: {
        _0 = DecodedKey::Unicode(const '&'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:34:21: 34:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:31:17: 35:18
    }

    bb14: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb15, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:38:20: 38:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:38:30: 38:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb15: {
        switchInt(move _11) -> [0: bb17, otherwise: bb16]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:38:20: 38:42
    }

    bb16: {
        _0 = DecodedKey::Unicode(const '2'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:39:21: 39:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:38:17: 44:18
    }

    bb17: {
        _12 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:40:27: 40:43
        switchInt(move _12) -> [0: bb19, otherwise: bb18]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:40:27: 40:43
    }

    bb18: {
        _0 = DecodedKey::Unicode(const '~'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:41:21: 41:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:40:24: 44:18
    }

    bb19: {
        _0 = DecodedKey::Unicode(const 'é'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:43:21: 43:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:40:24: 44:18
    }

    bb20: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:47:20: 47:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:47:30: 47:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb21: {
        switchInt(move _13) -> [0: bb23, otherwise: bb22]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:47:20: 47:42
    }

    bb22: {
        _0 = DecodedKey::Unicode(const '3'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:48:21: 48:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:47:17: 53:18
    }

    bb23: {
        _14 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:49:27: 49:43
        switchInt(move _14) -> [0: bb25, otherwise: bb24]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:49:27: 49:43
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '#'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:50:21: 50:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:49:24: 53:18
    }

    bb25: {
        _0 = DecodedKey::Unicode(const '"'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:52:21: 52:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:49:24: 53:18
    }

    bb26: {
        _15 = Modifiers::is_shifted(_3) -> [return: bb27, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:56:20: 56:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:56:30: 56:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb27: {
        switchInt(move _15) -> [0: bb29, otherwise: bb28]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:56:20: 56:42
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '4'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:57:21: 57:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:56:17: 62:18
    }

    bb29: {
        _16 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:58:27: 58:43
        switchInt(move _16) -> [0: bb31, otherwise: bb30]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:58:27: 58:43
    }

    bb30: {
        _0 = DecodedKey::Unicode(const '{'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:59:21: 59:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:58:24: 62:18
    }

    bb31: {
        _0 = DecodedKey::Unicode(const '\''); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:61:21: 61:46
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:58:24: 62:18
    }

    bb32: {
        _17 = Modifiers::is_shifted(_3) -> [return: bb33, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:65:20: 65:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:65:30: 65:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb33: {
        switchInt(move _17) -> [0: bb35, otherwise: bb34]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:65:20: 65:42
    }

    bb34: {
        _0 = DecodedKey::Unicode(const '5'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:66:21: 66:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:65:17: 71:18
    }

    bb35: {
        _18 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:67:27: 67:43
        switchInt(move _18) -> [0: bb37, otherwise: bb36]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:67:27: 67:43
    }

    bb36: {
        _0 = DecodedKey::Unicode(const '['); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:68:21: 68:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:67:24: 71:18
    }

    bb37: {
        _0 = DecodedKey::Unicode(const '('); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:70:21: 70:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:67:24: 71:18
    }

    bb38: {
        _19 = Modifiers::is_shifted(_3) -> [return: bb39, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:74:20: 74:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:74:30: 74:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb39: {
        switchInt(move _19) -> [0: bb41, otherwise: bb40]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:74:20: 74:42
    }

    bb40: {
        _0 = DecodedKey::Unicode(const '6'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:75:21: 75:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:74:17: 80:18
    }

    bb41: {
        _20 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:76:27: 76:43
        switchInt(move _20) -> [0: bb43, otherwise: bb42]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:76:27: 76:43
    }

    bb42: {
        _0 = DecodedKey::Unicode(const '|'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:77:21: 77:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:76:24: 80:18
    }

    bb43: {
        _0 = DecodedKey::Unicode(const '-'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:79:21: 79:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:76:24: 80:18
    }

    bb44: {
        _21 = Modifiers::is_shifted(_3) -> [return: bb45, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:83:20: 83:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:83:30: 83:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb45: {
        switchInt(move _21) -> [0: bb47, otherwise: bb46]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:83:20: 83:42
    }

    bb46: {
        _0 = DecodedKey::Unicode(const '7'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:84:21: 84:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:83:17: 89:18
    }

    bb47: {
        _22 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:85:27: 85:43
        switchInt(move _22) -> [0: bb49, otherwise: bb48]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:85:27: 85:43
    }

    bb48: {
        _0 = DecodedKey::Unicode(const '`'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:86:21: 86:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:85:24: 89:18
    }

    bb49: {
        _0 = DecodedKey::Unicode(const 'è'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:88:21: 88:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:85:24: 89:18
    }

    bb50: {
        _23 = Modifiers::is_shifted(_3) -> [return: bb51, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:92:20: 92:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:92:30: 92:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb51: {
        switchInt(move _23) -> [0: bb53, otherwise: bb52]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:92:20: 92:42
    }

    bb52: {
        _0 = DecodedKey::Unicode(const '8'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:93:21: 93:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:92:17: 98:18
    }

    bb53: {
        _24 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:94:27: 94:43
        switchInt(move _24) -> [0: bb55, otherwise: bb54]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:94:27: 94:43
    }

    bb54: {
        _0 = DecodedKey::Unicode(const '\\'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:95:21: 95:46
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:94:24: 98:18
    }

    bb55: {
        _0 = DecodedKey::Unicode(const '_'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:97:21: 97:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:94:24: 98:18
    }

    bb56: {
        _25 = Modifiers::is_shifted(_3) -> [return: bb57, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:101:20: 101:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:101:30: 101:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb57: {
        switchInt(move _25) -> [0: bb59, otherwise: bb58]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:101:20: 101:42
    }

    bb58: {
        _0 = DecodedKey::Unicode(const '9'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:102:21: 102:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:101:17: 107:18
    }

    bb59: {
        _26 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:103:27: 103:43
        switchInt(move _26) -> [0: bb61, otherwise: bb60]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:103:27: 103:43
    }

    bb60: {
        _0 = DecodedKey::Unicode(const '^'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:104:21: 104:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:103:24: 107:18
    }

    bb61: {
        _0 = DecodedKey::Unicode(const 'ç'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:106:21: 106:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:103:24: 107:18
    }

    bb62: {
        _27 = Modifiers::is_shifted(_3) -> [return: bb63, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:110:20: 110:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:110:30: 110:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb63: {
        switchInt(move _27) -> [0: bb65, otherwise: bb64]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:110:20: 110:42
    }

    bb64: {
        _0 = DecodedKey::Unicode(const '0'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:111:21: 111:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:110:17: 116:18
    }

    bb65: {
        _28 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:112:27: 112:43
        switchInt(move _28) -> [0: bb67, otherwise: bb66]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:112:27: 112:43
    }

    bb66: {
        _0 = DecodedKey::Unicode(const '@'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:113:21: 113:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:112:24: 116:18
    }

    bb67: {
        _0 = DecodedKey::Unicode(const 'à'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:115:21: 115:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:112:24: 116:18
    }

    bb68: {
        _29 = Modifiers::is_shifted(_3) -> [return: bb69, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:119:20: 119:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:119:30: 119:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb69: {
        switchInt(move _29) -> [0: bb71, otherwise: bb70]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:119:20: 119:42
    }

    bb70: {
        _0 = DecodedKey::Unicode(const '°'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:120:21: 120:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:119:17: 125:18
    }

    bb71: {
        _30 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:121:27: 121:43
        switchInt(move _30) -> [0: bb73, otherwise: bb72]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:121:27: 121:43
    }

    bb72: {
        _0 = DecodedKey::Unicode(const ']'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:122:21: 122:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:121:24: 125:18
    }

    bb73: {
        _0 = DecodedKey::Unicode(const ')'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:124:21: 124:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:121:24: 125:18
    }

    bb74: {
        _31 = Modifiers::is_shifted(_3) -> [return: bb75, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:128:20: 128:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:128:30: 128:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb75: {
        switchInt(move _31) -> [0: bb77, otherwise: bb76]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:128:20: 128:42
    }

    bb76: {
        _0 = DecodedKey::Unicode(const '+'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:129:21: 129:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:128:17: 134:18
    }

    bb77: {
        _32 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:130:27: 130:43
        switchInt(move _32) -> [0: bb79, otherwise: bb78]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:130:27: 130:43
    }

    bb78: {
        _0 = DecodedKey::Unicode(const '}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:131:21: 131:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:130:24: 134:18
    }

    bb79: {
        _0 = DecodedKey::Unicode(const '='); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:133:21: 133:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:130:24: 134:18
    }

    bb80: {
        _33 = <u8 as Into<char>>::into(const 8_u8) -> [return: bb81, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:136:55: 136:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:136:60: 136:64
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb81: {
        _0 = DecodedKey::Unicode(move _33); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:136:35: 136:67
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:136:66: 136:67
    }

    bb82: {
        _34 = <u8 as Into<char>>::into(const 9_u8) -> [return: bb83, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:137:49: 137:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:137:54: 137:58
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb83: {
        _0 = DecodedKey::Unicode(move _34); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:137:29: 137:61
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:137:60: 137:61
    }

    bb84: {
        _36 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:139:20: 139:34
        switchInt(move _36) -> [0: bb85, otherwise: bb86]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:139:20: 139:57
    }

    bb85: {
        _35 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:139:20: 139:57
        goto -> bb87;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:139:20: 139:57
    }

    bb86: {
        _37 = Modifiers::is_ctrl(_3) -> [return: bb88, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:139:38: 139:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:139:48: 139:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb87: {
        switchInt(move _35) -> [0: bb90, otherwise: bb89]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:139:20: 139:57
    }

    bb88: {
        _35 = move _37;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:139:20: 139:57
        goto -> bb87;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:139:20: 139:57
    }

    bb89: {
        _0 = DecodedKey::Unicode(const '\u{1}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:140:21: 140:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:139:17: 145:18
    }

    bb90: {
        _38 = Modifiers::is_caps(_3) -> [return: bb91, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:141:27: 141:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:141:37: 141:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb91: {
        switchInt(move _38) -> [0: bb93, otherwise: bb92]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:141:27: 141:46
    }

    bb92: {
        _0 = DecodedKey::Unicode(const 'A'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:142:21: 142:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:141:24: 145:18
    }

    bb93: {
        _0 = DecodedKey::Unicode(const 'a'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:144:21: 144:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:141:24: 145:18
    }

    bb94: {
        _40 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:148:20: 148:34
        switchInt(move _40) -> [0: bb95, otherwise: bb96]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:148:20: 148:57
    }

    bb95: {
        _39 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:148:20: 148:57
        goto -> bb97;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:148:20: 148:57
    }

    bb96: {
        _41 = Modifiers::is_ctrl(_3) -> [return: bb98, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:148:38: 148:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:148:48: 148:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb97: {
        switchInt(move _39) -> [0: bb100, otherwise: bb99]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:148:20: 148:57
    }

    bb98: {
        _39 = move _41;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:148:20: 148:57
        goto -> bb97;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:148:20: 148:57
    }

    bb99: {
        _0 = DecodedKey::Unicode(const '\u{1a}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:149:21: 149:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:148:17: 154:18
    }

    bb100: {
        _42 = Modifiers::is_caps(_3) -> [return: bb101, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:150:27: 150:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:150:37: 150:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb101: {
        switchInt(move _42) -> [0: bb103, otherwise: bb102]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:150:27: 150:46
    }

    bb102: {
        _0 = DecodedKey::Unicode(const 'Z'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:151:21: 151:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:150:24: 154:18
    }

    bb103: {
        _0 = DecodedKey::Unicode(const 'z'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:153:21: 153:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:150:24: 154:18
    }

    bb104: {
        _44 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:157:20: 157:34
        switchInt(move _44) -> [0: bb105, otherwise: bb106]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:157:20: 157:57
    }

    bb105: {
        _43 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:157:20: 157:57
        goto -> bb107;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:157:20: 157:57
    }

    bb106: {
        _45 = Modifiers::is_ctrl(_3) -> [return: bb108, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:157:38: 157:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:157:48: 157:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb107: {
        switchInt(move _43) -> [0: bb110, otherwise: bb109]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:157:20: 157:57
    }

    bb108: {
        _43 = move _45;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:157:20: 157:57
        goto -> bb107;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:157:20: 157:57
    }

    bb109: {
        _0 = DecodedKey::Unicode(const '\u{5}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:158:21: 158:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:157:17: 163:18
    }

    bb110: {
        _46 = Modifiers::is_caps(_3) -> [return: bb111, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:159:27: 159:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:159:37: 159:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb111: {
        switchInt(move _46) -> [0: bb113, otherwise: bb112]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:159:27: 159:46
    }

    bb112: {
        _0 = DecodedKey::Unicode(const 'E'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:160:21: 160:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:159:24: 163:18
    }

    bb113: {
        _0 = DecodedKey::Unicode(const 'e'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:162:21: 162:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:159:24: 163:18
    }

    bb114: {
        _48 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:166:20: 166:34
        switchInt(move _48) -> [0: bb115, otherwise: bb116]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:166:20: 166:57
    }

    bb115: {
        _47 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:166:20: 166:57
        goto -> bb117;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:166:20: 166:57
    }

    bb116: {
        _49 = Modifiers::is_ctrl(_3) -> [return: bb118, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:166:38: 166:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:166:48: 166:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb117: {
        switchInt(move _47) -> [0: bb120, otherwise: bb119]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:166:20: 166:57
    }

    bb118: {
        _47 = move _49;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:166:20: 166:57
        goto -> bb117;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:166:20: 166:57
    }

    bb119: {
        _0 = DecodedKey::Unicode(const '\u{12}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:167:21: 167:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:166:17: 172:18
    }

    bb120: {
        _50 = Modifiers::is_caps(_3) -> [return: bb121, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:168:27: 168:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:168:37: 168:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb121: {
        switchInt(move _50) -> [0: bb123, otherwise: bb122]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:168:27: 168:46
    }

    bb122: {
        _0 = DecodedKey::Unicode(const 'R'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:169:21: 169:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:168:24: 172:18
    }

    bb123: {
        _0 = DecodedKey::Unicode(const 'r'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:171:21: 171:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:168:24: 172:18
    }

    bb124: {
        _52 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:175:20: 175:34
        switchInt(move _52) -> [0: bb125, otherwise: bb126]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:175:20: 175:57
    }

    bb125: {
        _51 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:175:20: 175:57
        goto -> bb127;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:175:20: 175:57
    }

    bb126: {
        _53 = Modifiers::is_ctrl(_3) -> [return: bb128, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:175:38: 175:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:175:48: 175:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb127: {
        switchInt(move _51) -> [0: bb130, otherwise: bb129]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:175:20: 175:57
    }

    bb128: {
        _51 = move _53;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:175:20: 175:57
        goto -> bb127;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:175:20: 175:57
    }

    bb129: {
        _0 = DecodedKey::Unicode(const '\u{14}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:176:21: 176:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:175:17: 181:18
    }

    bb130: {
        _54 = Modifiers::is_caps(_3) -> [return: bb131, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:177:27: 177:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:177:37: 177:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb131: {
        switchInt(move _54) -> [0: bb133, otherwise: bb132]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:177:27: 177:46
    }

    bb132: {
        _0 = DecodedKey::Unicode(const 'T'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:178:21: 178:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:177:24: 181:18
    }

    bb133: {
        _0 = DecodedKey::Unicode(const 't'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:180:21: 180:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:177:24: 181:18
    }

    bb134: {
        _56 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:184:20: 184:34
        switchInt(move _56) -> [0: bb135, otherwise: bb136]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:184:20: 184:57
    }

    bb135: {
        _55 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:184:20: 184:57
        goto -> bb137;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:184:20: 184:57
    }

    bb136: {
        _57 = Modifiers::is_ctrl(_3) -> [return: bb138, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:184:38: 184:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:184:48: 184:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb137: {
        switchInt(move _55) -> [0: bb140, otherwise: bb139]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:184:20: 184:57
    }

    bb138: {
        _55 = move _57;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:184:20: 184:57
        goto -> bb137;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:184:20: 184:57
    }

    bb139: {
        _0 = DecodedKey::Unicode(const '\u{19}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:185:21: 185:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:184:17: 190:18
    }

    bb140: {
        _58 = Modifiers::is_caps(_3) -> [return: bb141, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:186:27: 186:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:186:37: 186:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb141: {
        switchInt(move _58) -> [0: bb143, otherwise: bb142]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:186:27: 186:46
    }

    bb142: {
        _0 = DecodedKey::Unicode(const 'Y'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:187:21: 187:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:186:24: 190:18
    }

    bb143: {
        _0 = DecodedKey::Unicode(const 'y'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:189:21: 189:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:186:24: 190:18
    }

    bb144: {
        _60 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:193:20: 193:34
        switchInt(move _60) -> [0: bb145, otherwise: bb146]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:193:20: 193:57
    }

    bb145: {
        _59 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:193:20: 193:57
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:193:20: 193:57
    }

    bb146: {
        _61 = Modifiers::is_ctrl(_3) -> [return: bb148, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:193:38: 193:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:193:48: 193:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb147: {
        switchInt(move _59) -> [0: bb150, otherwise: bb149]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:193:20: 193:57
    }

    bb148: {
        _59 = move _61;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:193:20: 193:57
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:193:20: 193:57
    }

    bb149: {
        _0 = DecodedKey::Unicode(const '\u{15}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:194:21: 194:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:193:17: 199:18
    }

    bb150: {
        _62 = Modifiers::is_caps(_3) -> [return: bb151, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:195:27: 195:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:195:37: 195:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb151: {
        switchInt(move _62) -> [0: bb153, otherwise: bb152]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:195:27: 195:46
    }

    bb152: {
        _0 = DecodedKey::Unicode(const 'U'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:196:21: 196:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:195:24: 199:18
    }

    bb153: {
        _0 = DecodedKey::Unicode(const 'u'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:198:21: 198:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:195:24: 199:18
    }

    bb154: {
        _64 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:202:20: 202:34
        switchInt(move _64) -> [0: bb155, otherwise: bb156]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:202:20: 202:57
    }

    bb155: {
        _63 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:202:20: 202:57
        goto -> bb157;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:202:20: 202:57
    }

    bb156: {
        _65 = Modifiers::is_ctrl(_3) -> [return: bb158, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:202:38: 202:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:202:48: 202:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb157: {
        switchInt(move _63) -> [0: bb160, otherwise: bb159]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:202:20: 202:57
    }

    bb158: {
        _63 = move _65;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:202:20: 202:57
        goto -> bb157;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:202:20: 202:57
    }

    bb159: {
        _0 = DecodedKey::Unicode(const '\t'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:203:21: 203:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:202:17: 208:18
    }

    bb160: {
        _66 = Modifiers::is_caps(_3) -> [return: bb161, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:204:27: 204:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:204:37: 204:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb161: {
        switchInt(move _66) -> [0: bb163, otherwise: bb162]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:204:27: 204:46
    }

    bb162: {
        _0 = DecodedKey::Unicode(const 'I'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:205:21: 205:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:204:24: 208:18
    }

    bb163: {
        _0 = DecodedKey::Unicode(const 'i'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:207:21: 207:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:204:24: 208:18
    }

    bb164: {
        _68 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:211:20: 211:34
        switchInt(move _68) -> [0: bb165, otherwise: bb166]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:211:20: 211:57
    }

    bb165: {
        _67 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:211:20: 211:57
        goto -> bb167;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:211:20: 211:57
    }

    bb166: {
        _69 = Modifiers::is_ctrl(_3) -> [return: bb168, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:211:38: 211:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:211:48: 211:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb167: {
        switchInt(move _67) -> [0: bb170, otherwise: bb169]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:211:20: 211:57
    }

    bb168: {
        _67 = move _69;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:211:20: 211:57
        goto -> bb167;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:211:20: 211:57
    }

    bb169: {
        _0 = DecodedKey::Unicode(const '\u{f}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:212:21: 212:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:211:17: 217:18
    }

    bb170: {
        _70 = Modifiers::is_caps(_3) -> [return: bb171, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:213:27: 213:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:213:37: 213:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb171: {
        switchInt(move _70) -> [0: bb173, otherwise: bb172]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:213:27: 213:46
    }

    bb172: {
        _0 = DecodedKey::Unicode(const 'O'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:214:21: 214:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:213:24: 217:18
    }

    bb173: {
        _0 = DecodedKey::Unicode(const 'o'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:216:21: 216:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:213:24: 217:18
    }

    bb174: {
        _72 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:220:20: 220:34
        switchInt(move _72) -> [0: bb175, otherwise: bb176]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:220:20: 220:57
    }

    bb175: {
        _71 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:220:20: 220:57
        goto -> bb177;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:220:20: 220:57
    }

    bb176: {
        _73 = Modifiers::is_ctrl(_3) -> [return: bb178, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:220:38: 220:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:220:48: 220:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb177: {
        switchInt(move _71) -> [0: bb180, otherwise: bb179]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:220:20: 220:57
    }

    bb178: {
        _71 = move _73;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:220:20: 220:57
        goto -> bb177;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:220:20: 220:57
    }

    bb179: {
        _0 = DecodedKey::Unicode(const '\u{10}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:221:21: 221:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:220:17: 226:18
    }

    bb180: {
        _74 = Modifiers::is_caps(_3) -> [return: bb181, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:222:27: 222:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:222:37: 222:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb181: {
        switchInt(move _74) -> [0: bb183, otherwise: bb182]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:222:27: 222:46
    }

    bb182: {
        _0 = DecodedKey::Unicode(const 'P'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:223:21: 223:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:222:24: 226:18
    }

    bb183: {
        _0 = DecodedKey::Unicode(const 'p'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:225:21: 225:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:222:24: 226:18
    }

    bb184: {
        _75 = Modifiers::is_shifted(_3) -> [return: bb185, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:229:20: 229:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:229:30: 229:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb185: {
        switchInt(move _75) -> [0: bb187, otherwise: bb186]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:229:20: 229:42
    }

    bb186: {
        _0 = DecodedKey::Unicode(const '¨'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:230:21: 230:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:229:17: 235:18
    }

    bb187: {
        _76 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:231:27: 231:43
        switchInt(move _76) -> [0: bb189, otherwise: bb188]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:231:27: 231:43
    }

    bb188: {
        _0 = DecodedKey::Unicode(const 'ˇ'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:232:21: 232:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:231:24: 235:18
    }

    bb189: {
        _0 = DecodedKey::Unicode(const '^'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:234:21: 234:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:231:24: 235:18
    }

    bb190: {
        _77 = Modifiers::is_shifted(_3) -> [return: bb191, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:238:20: 238:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:238:30: 238:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb191: {
        switchInt(move _77) -> [0: bb193, otherwise: bb192]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:238:20: 238:42
    }

    bb192: {
        _0 = DecodedKey::Unicode(const '£'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:239:21: 239:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:238:17: 244:18
    }

    bb193: {
        _78 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:240:27: 240:43
        switchInt(move _78) -> [0: bb195, otherwise: bb194]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:240:27: 240:43
    }

    bb194: {
        _0 = DecodedKey::Unicode(const '¤'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:241:21: 241:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:240:24: 244:18
    }

    bb195: {
        _0 = DecodedKey::Unicode(const '$'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:243:21: 243:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:240:24: 244:18
    }

    bb196: {
        _79 = Modifiers::is_shifted(_3) -> [return: bb197, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:247:20: 247:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:247:30: 247:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb197: {
        switchInt(move _79) -> [0: bb199, otherwise: bb198]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:247:20: 247:42
    }

    bb198: {
        _0 = DecodedKey::Unicode(const 'µ'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:248:21: 248:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:247:17: 251:18
    }

    bb199: {
        _0 = DecodedKey::Unicode(const '*'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:250:21: 250:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:247:17: 251:18
    }

    bb200: {
        _81 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:254:20: 254:34
        switchInt(move _81) -> [0: bb201, otherwise: bb202]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:254:20: 254:57
    }

    bb201: {
        _80 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:254:20: 254:57
        goto -> bb203;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:254:20: 254:57
    }

    bb202: {
        _82 = Modifiers::is_ctrl(_3) -> [return: bb204, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:254:38: 254:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:254:48: 254:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb203: {
        switchInt(move _80) -> [0: bb206, otherwise: bb205]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:254:20: 254:57
    }

    bb204: {
        _80 = move _82;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:254:20: 254:57
        goto -> bb203;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:254:20: 254:57
    }

    bb205: {
        _0 = DecodedKey::Unicode(const '\u{11}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:255:21: 255:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:254:17: 260:18
    }

    bb206: {
        _83 = Modifiers::is_caps(_3) -> [return: bb207, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:256:27: 256:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:256:37: 256:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb207: {
        switchInt(move _83) -> [0: bb209, otherwise: bb208]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:256:27: 256:46
    }

    bb208: {
        _0 = DecodedKey::Unicode(const 'Q'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:257:21: 257:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:256:24: 260:18
    }

    bb209: {
        _0 = DecodedKey::Unicode(const 'q'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:259:21: 259:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:256:24: 260:18
    }

    bb210: {
        _85 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:263:20: 263:34
        switchInt(move _85) -> [0: bb211, otherwise: bb212]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:263:20: 263:57
    }

    bb211: {
        _84 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:263:20: 263:57
        goto -> bb213;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:263:20: 263:57
    }

    bb212: {
        _86 = Modifiers::is_ctrl(_3) -> [return: bb214, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:263:38: 263:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:263:48: 263:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb213: {
        switchInt(move _84) -> [0: bb216, otherwise: bb215]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:263:20: 263:57
    }

    bb214: {
        _84 = move _86;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:263:20: 263:57
        goto -> bb213;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:263:20: 263:57
    }

    bb215: {
        _0 = DecodedKey::Unicode(const '\u{13}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:264:21: 264:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:263:17: 269:18
    }

    bb216: {
        _87 = Modifiers::is_caps(_3) -> [return: bb217, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:265:27: 265:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:265:37: 265:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb217: {
        switchInt(move _87) -> [0: bb219, otherwise: bb218]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:265:27: 265:46
    }

    bb218: {
        _0 = DecodedKey::Unicode(const 'S'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:266:21: 266:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:265:24: 269:18
    }

    bb219: {
        _0 = DecodedKey::Unicode(const 's'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:268:21: 268:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:265:24: 269:18
    }

    bb220: {
        _89 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:272:20: 272:34
        switchInt(move _89) -> [0: bb221, otherwise: bb222]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:272:20: 272:57
    }

    bb221: {
        _88 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:272:20: 272:57
        goto -> bb223;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:272:20: 272:57
    }

    bb222: {
        _90 = Modifiers::is_ctrl(_3) -> [return: bb224, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:272:38: 272:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:272:48: 272:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb223: {
        switchInt(move _88) -> [0: bb226, otherwise: bb225]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:272:20: 272:57
    }

    bb224: {
        _88 = move _90;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:272:20: 272:57
        goto -> bb223;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:272:20: 272:57
    }

    bb225: {
        _0 = DecodedKey::Unicode(const '\u{4}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:273:21: 273:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:272:17: 278:18
    }

    bb226: {
        _91 = Modifiers::is_caps(_3) -> [return: bb227, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:274:27: 274:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:274:37: 274:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb227: {
        switchInt(move _91) -> [0: bb229, otherwise: bb228]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:274:27: 274:46
    }

    bb228: {
        _0 = DecodedKey::Unicode(const 'D'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:275:21: 275:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:274:24: 278:18
    }

    bb229: {
        _0 = DecodedKey::Unicode(const 'd'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:277:21: 277:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:274:24: 278:18
    }

    bb230: {
        _93 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:281:20: 281:34
        switchInt(move _93) -> [0: bb231, otherwise: bb232]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:281:20: 281:57
    }

    bb231: {
        _92 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:281:20: 281:57
        goto -> bb233;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:281:20: 281:57
    }

    bb232: {
        _94 = Modifiers::is_ctrl(_3) -> [return: bb234, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:281:38: 281:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:281:48: 281:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb233: {
        switchInt(move _92) -> [0: bb236, otherwise: bb235]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:281:20: 281:57
    }

    bb234: {
        _92 = move _94;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:281:20: 281:57
        goto -> bb233;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:281:20: 281:57
    }

    bb235: {
        _0 = DecodedKey::Unicode(const '\u{6}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:282:21: 282:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:281:17: 287:18
    }

    bb236: {
        _95 = Modifiers::is_caps(_3) -> [return: bb237, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:283:27: 283:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:283:37: 283:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb237: {
        switchInt(move _95) -> [0: bb239, otherwise: bb238]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:283:27: 283:46
    }

    bb238: {
        _0 = DecodedKey::Unicode(const 'F'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:284:21: 284:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:283:24: 287:18
    }

    bb239: {
        _0 = DecodedKey::Unicode(const 'f'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:286:21: 286:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:283:24: 287:18
    }

    bb240: {
        _97 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:290:20: 290:34
        switchInt(move _97) -> [0: bb241, otherwise: bb242]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:290:20: 290:57
    }

    bb241: {
        _96 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:290:20: 290:57
        goto -> bb243;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:290:20: 290:57
    }

    bb242: {
        _98 = Modifiers::is_ctrl(_3) -> [return: bb244, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:290:38: 290:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:290:48: 290:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb243: {
        switchInt(move _96) -> [0: bb246, otherwise: bb245]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:290:20: 290:57
    }

    bb244: {
        _96 = move _98;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:290:20: 290:57
        goto -> bb243;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:290:20: 290:57
    }

    bb245: {
        _0 = DecodedKey::Unicode(const '\u{7}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:291:21: 291:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:290:17: 296:18
    }

    bb246: {
        _99 = Modifiers::is_caps(_3) -> [return: bb247, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:292:27: 292:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:292:37: 292:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb247: {
        switchInt(move _99) -> [0: bb249, otherwise: bb248]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:292:27: 292:46
    }

    bb248: {
        _0 = DecodedKey::Unicode(const 'G'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:293:21: 293:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:292:24: 296:18
    }

    bb249: {
        _0 = DecodedKey::Unicode(const 'g'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:295:21: 295:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:292:24: 296:18
    }

    bb250: {
        _101 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:299:20: 299:34
        switchInt(move _101) -> [0: bb251, otherwise: bb252]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:299:20: 299:57
    }

    bb251: {
        _100 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:299:20: 299:57
        goto -> bb253;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:299:20: 299:57
    }

    bb252: {
        _102 = Modifiers::is_ctrl(_3) -> [return: bb254, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:299:38: 299:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:299:48: 299:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb253: {
        switchInt(move _100) -> [0: bb256, otherwise: bb255]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:299:20: 299:57
    }

    bb254: {
        _100 = move _102;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:299:20: 299:57
        goto -> bb253;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:299:20: 299:57
    }

    bb255: {
        _0 = DecodedKey::Unicode(const '\u{8}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:300:21: 300:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:299:17: 305:18
    }

    bb256: {
        _103 = Modifiers::is_caps(_3) -> [return: bb257, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:301:27: 301:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:301:37: 301:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb257: {
        switchInt(move _103) -> [0: bb259, otherwise: bb258]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:301:27: 301:46
    }

    bb258: {
        _0 = DecodedKey::Unicode(const 'H'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:302:21: 302:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:301:24: 305:18
    }

    bb259: {
        _0 = DecodedKey::Unicode(const 'h'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:304:21: 304:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:301:24: 305:18
    }

    bb260: {
        _105 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:308:20: 308:34
        switchInt(move _105) -> [0: bb261, otherwise: bb262]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:308:20: 308:57
    }

    bb261: {
        _104 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:308:20: 308:57
        goto -> bb263;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:308:20: 308:57
    }

    bb262: {
        _106 = Modifiers::is_ctrl(_3) -> [return: bb264, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:308:38: 308:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:308:48: 308:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb263: {
        switchInt(move _104) -> [0: bb266, otherwise: bb265]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:308:20: 308:57
    }

    bb264: {
        _104 = move _106;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:308:20: 308:57
        goto -> bb263;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:308:20: 308:57
    }

    bb265: {
        _0 = DecodedKey::Unicode(const '\n'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:309:21: 309:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:308:17: 314:18
    }

    bb266: {
        _107 = Modifiers::is_caps(_3) -> [return: bb267, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:310:27: 310:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:310:37: 310:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb267: {
        switchInt(move _107) -> [0: bb269, otherwise: bb268]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:310:27: 310:46
    }

    bb268: {
        _0 = DecodedKey::Unicode(const 'J'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:311:21: 311:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:310:24: 314:18
    }

    bb269: {
        _0 = DecodedKey::Unicode(const 'j'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:313:21: 313:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:310:24: 314:18
    }

    bb270: {
        _109 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:317:20: 317:34
        switchInt(move _109) -> [0: bb271, otherwise: bb272]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:317:20: 317:57
    }

    bb271: {
        _108 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:317:20: 317:57
        goto -> bb273;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:317:20: 317:57
    }

    bb272: {
        _110 = Modifiers::is_ctrl(_3) -> [return: bb274, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:317:38: 317:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:317:48: 317:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb273: {
        switchInt(move _108) -> [0: bb276, otherwise: bb275]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:317:20: 317:57
    }

    bb274: {
        _108 = move _110;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:317:20: 317:57
        goto -> bb273;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:317:20: 317:57
    }

    bb275: {
        _0 = DecodedKey::Unicode(const '\u{b}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:318:21: 318:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:317:17: 323:18
    }

    bb276: {
        _111 = Modifiers::is_caps(_3) -> [return: bb277, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:319:27: 319:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:319:37: 319:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb277: {
        switchInt(move _111) -> [0: bb279, otherwise: bb278]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:319:27: 319:46
    }

    bb278: {
        _0 = DecodedKey::Unicode(const 'K'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:320:21: 320:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:319:24: 323:18
    }

    bb279: {
        _0 = DecodedKey::Unicode(const 'k'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:322:21: 322:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:319:24: 323:18
    }

    bb280: {
        _113 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:326:20: 326:34
        switchInt(move _113) -> [0: bb281, otherwise: bb282]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:326:20: 326:57
    }

    bb281: {
        _112 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:326:20: 326:57
        goto -> bb283;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:326:20: 326:57
    }

    bb282: {
        _114 = Modifiers::is_ctrl(_3) -> [return: bb284, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:326:38: 326:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:326:48: 326:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb283: {
        switchInt(move _112) -> [0: bb286, otherwise: bb285]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:326:20: 326:57
    }

    bb284: {
        _112 = move _114;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:326:20: 326:57
        goto -> bb283;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:326:20: 326:57
    }

    bb285: {
        _0 = DecodedKey::Unicode(const '\u{c}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:327:21: 327:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:326:17: 332:18
    }

    bb286: {
        _115 = Modifiers::is_caps(_3) -> [return: bb287, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:328:27: 328:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:328:37: 328:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb287: {
        switchInt(move _115) -> [0: bb289, otherwise: bb288]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:328:27: 328:46
    }

    bb288: {
        _0 = DecodedKey::Unicode(const 'L'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:329:21: 329:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:328:24: 332:18
    }

    bb289: {
        _0 = DecodedKey::Unicode(const 'l'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:331:21: 331:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:328:24: 332:18
    }

    bb290: {
        _117 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:335:20: 335:34
        switchInt(move _117) -> [0: bb291, otherwise: bb292]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:335:20: 335:57
    }

    bb291: {
        _116 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:335:20: 335:57
        goto -> bb293;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:335:20: 335:57
    }

    bb292: {
        _118 = Modifiers::is_ctrl(_3) -> [return: bb294, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:335:38: 335:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:335:48: 335:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb293: {
        switchInt(move _116) -> [0: bb296, otherwise: bb295]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:335:20: 335:57
    }

    bb294: {
        _116 = move _118;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:335:20: 335:57
        goto -> bb293;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:335:20: 335:57
    }

    bb295: {
        _0 = DecodedKey::Unicode(const '\r'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:336:21: 336:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:335:17: 341:18
    }

    bb296: {
        _119 = Modifiers::is_caps(_3) -> [return: bb297, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:337:27: 337:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:337:37: 337:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb297: {
        switchInt(move _119) -> [0: bb299, otherwise: bb298]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:337:27: 337:46
    }

    bb298: {
        _0 = DecodedKey::Unicode(const 'M'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:338:21: 338:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:337:24: 341:18
    }

    bb299: {
        _0 = DecodedKey::Unicode(const 'm'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:340:21: 340:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:337:24: 341:18
    }

    bb300: {
        _120 = Modifiers::is_shifted(_3) -> [return: bb301, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:344:20: 344:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:344:30: 344:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb301: {
        switchInt(move _120) -> [0: bb303, otherwise: bb302]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:344:20: 344:42
    }

    bb302: {
        _0 = DecodedKey::Unicode(const '%'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:345:21: 345:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:344:17: 348:18
    }

    bb303: {
        _0 = DecodedKey::Unicode(const 'ù'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:347:21: 347:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:344:17: 348:18
    }

    bb304: {
        _121 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb305, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:351:52: 351:61
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:351:55: 351:59
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb305: {
        _0 = DecodedKey::Unicode(move _121); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:351:32: 351:62
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:351:61: 351:62
    }

    bb306: {
        _123 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:353:20: 353:34
        switchInt(move _123) -> [0: bb307, otherwise: bb308]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:353:20: 353:57
    }

    bb307: {
        _122 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:353:20: 353:57
        goto -> bb309;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:353:20: 353:57
    }

    bb308: {
        _124 = Modifiers::is_ctrl(_3) -> [return: bb310, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:353:38: 353:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:353:48: 353:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb309: {
        switchInt(move _122) -> [0: bb312, otherwise: bb311]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:353:20: 353:57
    }

    bb310: {
        _122 = move _124;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:353:20: 353:57
        goto -> bb309;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:353:20: 353:57
    }

    bb311: {
        _0 = DecodedKey::Unicode(const '\u{17}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:354:21: 354:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:353:17: 359:18
    }

    bb312: {
        _125 = Modifiers::is_caps(_3) -> [return: bb313, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:355:27: 355:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:355:37: 355:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb313: {
        switchInt(move _125) -> [0: bb315, otherwise: bb314]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:355:27: 355:46
    }

    bb314: {
        _0 = DecodedKey::Unicode(const 'W'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:356:21: 356:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:355:24: 359:18
    }

    bb315: {
        _0 = DecodedKey::Unicode(const 'w'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:358:21: 358:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:355:24: 359:18
    }

    bb316: {
        _127 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:362:20: 362:34
        switchInt(move _127) -> [0: bb317, otherwise: bb318]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:362:20: 362:57
    }

    bb317: {
        _126 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:362:20: 362:57
        goto -> bb319;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:362:20: 362:57
    }

    bb318: {
        _128 = Modifiers::is_ctrl(_3) -> [return: bb320, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:362:38: 362:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:362:48: 362:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb319: {
        switchInt(move _126) -> [0: bb322, otherwise: bb321]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:362:20: 362:57
    }

    bb320: {
        _126 = move _128;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:362:20: 362:57
        goto -> bb319;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:362:20: 362:57
    }

    bb321: {
        _0 = DecodedKey::Unicode(const '\u{18}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:363:21: 363:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:362:17: 368:18
    }

    bb322: {
        _129 = Modifiers::is_caps(_3) -> [return: bb323, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:364:27: 364:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:364:37: 364:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb323: {
        switchInt(move _129) -> [0: bb325, otherwise: bb324]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:364:27: 364:46
    }

    bb324: {
        _0 = DecodedKey::Unicode(const 'X'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:365:21: 365:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:364:24: 368:18
    }

    bb325: {
        _0 = DecodedKey::Unicode(const 'x'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:367:21: 367:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:364:24: 368:18
    }

    bb326: {
        _131 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:371:20: 371:34
        switchInt(move _131) -> [0: bb327, otherwise: bb328]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:371:20: 371:57
    }

    bb327: {
        _130 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:371:20: 371:57
        goto -> bb329;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:371:20: 371:57
    }

    bb328: {
        _132 = Modifiers::is_ctrl(_3) -> [return: bb330, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:371:38: 371:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:371:48: 371:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb329: {
        switchInt(move _130) -> [0: bb332, otherwise: bb331]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:371:20: 371:57
    }

    bb330: {
        _130 = move _132;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:371:20: 371:57
        goto -> bb329;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:371:20: 371:57
    }

    bb331: {
        _0 = DecodedKey::Unicode(const '\u{3}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:372:21: 372:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:371:17: 377:18
    }

    bb332: {
        _133 = Modifiers::is_caps(_3) -> [return: bb333, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:373:27: 373:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:373:37: 373:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb333: {
        switchInt(move _133) -> [0: bb335, otherwise: bb334]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:373:27: 373:46
    }

    bb334: {
        _0 = DecodedKey::Unicode(const 'C'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:374:21: 374:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:373:24: 377:18
    }

    bb335: {
        _0 = DecodedKey::Unicode(const 'c'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:376:21: 376:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:373:24: 377:18
    }

    bb336: {
        _135 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:380:20: 380:34
        switchInt(move _135) -> [0: bb337, otherwise: bb338]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:380:20: 380:57
    }

    bb337: {
        _134 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:380:20: 380:57
        goto -> bb339;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:380:20: 380:57
    }

    bb338: {
        _136 = Modifiers::is_ctrl(_3) -> [return: bb340, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:380:38: 380:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:380:48: 380:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb339: {
        switchInt(move _134) -> [0: bb342, otherwise: bb341]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:380:20: 380:57
    }

    bb340: {
        _134 = move _136;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:380:20: 380:57
        goto -> bb339;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:380:20: 380:57
    }

    bb341: {
        _0 = DecodedKey::Unicode(const '\u{16}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:381:21: 381:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:380:17: 386:18
    }

    bb342: {
        _137 = Modifiers::is_caps(_3) -> [return: bb343, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:382:27: 382:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:382:37: 382:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb343: {
        switchInt(move _137) -> [0: bb345, otherwise: bb344]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:382:27: 382:46
    }

    bb344: {
        _0 = DecodedKey::Unicode(const 'V'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:383:21: 383:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:382:24: 386:18
    }

    bb345: {
        _0 = DecodedKey::Unicode(const 'v'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:385:21: 385:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:382:24: 386:18
    }

    bb346: {
        _139 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:389:20: 389:34
        switchInt(move _139) -> [0: bb347, otherwise: bb348]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:389:20: 389:57
    }

    bb347: {
        _138 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:389:20: 389:57
        goto -> bb349;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:389:20: 389:57
    }

    bb348: {
        _140 = Modifiers::is_ctrl(_3) -> [return: bb350, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:389:38: 389:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:389:48: 389:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb349: {
        switchInt(move _138) -> [0: bb352, otherwise: bb351]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:389:20: 389:57
    }

    bb350: {
        _138 = move _140;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:389:20: 389:57
        goto -> bb349;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:389:20: 389:57
    }

    bb351: {
        _0 = DecodedKey::Unicode(const '\u{2}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:390:21: 390:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:389:17: 395:18
    }

    bb352: {
        _141 = Modifiers::is_caps(_3) -> [return: bb353, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:391:27: 391:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:391:37: 391:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb353: {
        switchInt(move _141) -> [0: bb355, otherwise: bb354]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:391:27: 391:46
    }

    bb354: {
        _0 = DecodedKey::Unicode(const 'B'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:392:21: 392:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:391:24: 395:18
    }

    bb355: {
        _0 = DecodedKey::Unicode(const 'b'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:394:21: 394:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:391:24: 395:18
    }

    bb356: {
        _143 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:398:20: 398:34
        switchInt(move _143) -> [0: bb357, otherwise: bb358]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:398:20: 398:57
    }

    bb357: {
        _142 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:398:20: 398:57
        goto -> bb359;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:398:20: 398:57
    }

    bb358: {
        _144 = Modifiers::is_ctrl(_3) -> [return: bb360, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:398:38: 398:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:398:48: 398:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb359: {
        switchInt(move _142) -> [0: bb362, otherwise: bb361]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:398:20: 398:57
    }

    bb360: {
        _142 = move _144;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:398:20: 398:57
        goto -> bb359;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:398:20: 398:57
    }

    bb361: {
        _0 = DecodedKey::Unicode(const '\u{e}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:399:21: 399:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:398:17: 404:18
    }

    bb362: {
        _145 = Modifiers::is_caps(_3) -> [return: bb363, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:400:27: 400:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:400:37: 400:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb363: {
        switchInt(move _145) -> [0: bb365, otherwise: bb364]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:400:27: 400:46
    }

    bb364: {
        _0 = DecodedKey::Unicode(const 'N'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:401:21: 401:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:400:24: 404:18
    }

    bb365: {
        _0 = DecodedKey::Unicode(const 'n'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:403:21: 403:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:400:24: 404:18
    }

    bb366: {
        _146 = Modifiers::is_caps(_3) -> [return: bb367, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:407:20: 407:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:407:30: 407:37
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb367: {
        switchInt(move _146) -> [0: bb369, otherwise: bb368]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:407:20: 407:39
    }

    bb368: {
        _0 = DecodedKey::Unicode(const '?'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:408:21: 408:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:407:17: 411:18
    }

    bb369: {
        _0 = DecodedKey::Unicode(const ','); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:410:21: 410:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:407:17: 411:18
    }

    bb370: {
        _147 = Modifiers::is_shifted(_3) -> [return: bb371, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:414:20: 414:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:414:30: 414:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb371: {
        switchInt(move _147) -> [0: bb373, otherwise: bb372]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:414:20: 414:42
    }

    bb372: {
        _0 = DecodedKey::Unicode(const '.'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:415:21: 415:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:414:17: 418:18
    }

    bb373: {
        _0 = DecodedKey::Unicode(const ';'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:417:21: 417:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:414:17: 418:18
    }

    bb374: {
        _148 = Modifiers::is_shifted(_3) -> [return: bb375, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:421:20: 421:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:421:30: 421:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb375: {
        switchInt(move _148) -> [0: bb377, otherwise: bb376]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:421:20: 421:42
    }

    bb376: {
        _0 = DecodedKey::Unicode(const '/'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:422:21: 422:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:421:17: 425:18
    }

    bb377: {
        _0 = DecodedKey::Unicode(const ':'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:424:21: 424:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:421:17: 425:18
    }

    bb378: {
        _149 = Modifiers::is_shifted(_3) -> [return: bb379, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:428:20: 428:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:428:30: 428:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb379: {
        switchInt(move _149) -> [0: bb381, otherwise: bb380]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:428:20: 428:42
    }

    bb380: {
        _0 = DecodedKey::Unicode(const '§'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:429:21: 429:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:428:17: 432:18
    }

    bb381: {
        _0 = DecodedKey::Unicode(const '!'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:431:21: 431:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:428:17: 432:18
    }

    bb382: {
        _0 = DecodedKey::Unicode(const ' '); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:434:34: 434:58
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:434:34: 434:58
    }

    bb383: {
        _150 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb384, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:435:52: 435:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:435:56: 435:60
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb384: {
        _0 = DecodedKey::Unicode(move _150); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:435:32: 435:63
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:435:62: 435:63
    }

    bb385: {
        _0 = DecodedKey::Unicode(const '/'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:436:38: 436:62
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:436:38: 436:62
    }

    bb386: {
        _0 = DecodedKey::Unicode(const '*'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:437:40: 437:64
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:437:40: 437:64
    }

    bb387: {
        _0 = DecodedKey::Unicode(const '-'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:438:40: 438:64
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:438:40: 438:64
    }

    bb388: {
        _151 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:440:20: 440:37
        switchInt(move _151) -> [0: bb390, otherwise: bb389]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:440:20: 440:37
    }

    bb389: {
        _0 = DecodedKey::Unicode(const '7'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:441:21: 441:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:440:17: 444:18
    }

    bb390: {
        _152 = KeyCode::Home;            // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:443:40: 443:53
        _0 = DecodedKey::RawKey(move _152); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:443:21: 443:54
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:440:17: 444:18
    }

    bb391: {
        _153 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:447:20: 447:37
        switchInt(move _153) -> [0: bb393, otherwise: bb392]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:447:20: 447:37
    }

    bb392: {
        _0 = DecodedKey::Unicode(const '8'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:448:21: 448:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:447:17: 451:18
    }

    bb393: {
        _154 = KeyCode::ArrowUp;         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:450:40: 450:56
        _0 = DecodedKey::RawKey(move _154); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:450:21: 450:57
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:447:17: 451:18
    }

    bb394: {
        _155 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:454:20: 454:37
        switchInt(move _155) -> [0: bb396, otherwise: bb395]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:454:20: 454:37
    }

    bb395: {
        _0 = DecodedKey::Unicode(const '9'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:455:21: 455:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:454:17: 458:18
    }

    bb396: {
        _156 = KeyCode::PageUp;          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:457:40: 457:55
        _0 = DecodedKey::RawKey(move _156); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:457:21: 457:56
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:454:17: 458:18
    }

    bb397: {
        _0 = DecodedKey::Unicode(const '+'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:460:35: 460:59
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:460:35: 460:59
    }

    bb398: {
        _157 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:462:20: 462:37
        switchInt(move _157) -> [0: bb400, otherwise: bb399]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:462:20: 462:37
    }

    bb399: {
        _0 = DecodedKey::Unicode(const '4'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:463:21: 463:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:462:17: 466:18
    }

    bb400: {
        _158 = KeyCode::ArrowLeft;       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:465:40: 465:58
        _0 = DecodedKey::RawKey(move _158); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:465:21: 465:59
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:462:17: 466:18
    }

    bb401: {
        _0 = DecodedKey::Unicode(const '5'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:468:33: 468:57
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:468:33: 468:57
    }

    bb402: {
        _159 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:470:20: 470:37
        switchInt(move _159) -> [0: bb404, otherwise: bb403]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:470:20: 470:37
    }

    bb403: {
        _0 = DecodedKey::Unicode(const '6'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:471:21: 471:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:470:17: 474:18
    }

    bb404: {
        _160 = KeyCode::ArrowRight;      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:473:40: 473:59
        _0 = DecodedKey::RawKey(move _160); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:473:21: 473:60
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:470:17: 474:18
    }

    bb405: {
        _161 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:477:20: 477:37
        switchInt(move _161) -> [0: bb407, otherwise: bb406]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:477:20: 477:37
    }

    bb406: {
        _0 = DecodedKey::Unicode(const '1'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:478:21: 478:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:477:17: 481:18
    }

    bb407: {
        _162 = KeyCode::End;             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:480:40: 480:52
        _0 = DecodedKey::RawKey(move _162); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:480:21: 480:53
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:477:17: 481:18
    }

    bb408: {
        _163 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:484:20: 484:37
        switchInt(move _163) -> [0: bb410, otherwise: bb409]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:484:20: 484:37
    }

    bb409: {
        _0 = DecodedKey::Unicode(const '2'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:485:21: 485:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:484:17: 488:18
    }

    bb410: {
        _164 = KeyCode::ArrowDown;       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:487:40: 487:58
        _0 = DecodedKey::RawKey(move _164); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:487:21: 487:59
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:484:17: 488:18
    }

    bb411: {
        _165 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:491:20: 491:37
        switchInt(move _165) -> [0: bb413, otherwise: bb412]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:491:20: 491:37
    }

    bb412: {
        _0 = DecodedKey::Unicode(const '3'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:492:21: 492:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:491:17: 495:18
    }

    bb413: {
        _166 = KeyCode::PageDown;        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:494:40: 494:57
        _0 = DecodedKey::RawKey(move _166); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:494:21: 494:58
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:491:17: 495:18
    }

    bb414: {
        _167 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:498:20: 498:37
        switchInt(move _167) -> [0: bb416, otherwise: bb415]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:498:20: 498:37
    }

    bb415: {
        _0 = DecodedKey::Unicode(const '0'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:499:21: 499:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:498:17: 502:18
    }

    bb416: {
        _168 = KeyCode::Insert;          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:501:40: 501:55
        _0 = DecodedKey::RawKey(move _168); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:501:21: 501:56
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:498:17: 502:18
    }

    bb417: {
        _169 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:505:20: 505:37
        switchInt(move _169) -> [0: bb419, otherwise: bb418]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:505:20: 505:37
    }

    bb418: {
        _0 = DecodedKey::Unicode(const '.'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:506:21: 506:45
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:505:17: 509:18
    }

    bb419: {
        _170 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb420, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:508:41: 508:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:508:45: 508:49
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb420: {
        _0 = DecodedKey::Unicode(move _170); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:508:21: 508:52
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:505:17: 509:18
    }

    bb421: {
        _171 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb422, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:511:57: 511:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:511:60: 511:64
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb422: {
        _0 = DecodedKey::Unicode(move _171); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:511:37: 511:67
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:511:66: 511:67
    }

    bb423: {
        _0 = DecodedKey::Unicode(const '<'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:512:32: 512:56
        goto -> bb424;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:512:32: 512:56
    }

    bb424: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:515:6: 515:6
    }
}

promoted[0] in azerty::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:12:1: 12:31>::map_keycode: &HandleControl = {
    let mut _0: &HandleControl;          // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:45: 19:79
    let mut _1: HandleControl;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:45: 19:79

    bb0: {
        _1 = HandleControl::MapLettersToUnicode; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:45: 19:79
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:45: 19:79
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/azerty.rs:19:45: 19:79
    }
}

fn colemak::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:10:1: 10:32>::map_keycode(_1: &Colemak, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:12:9: 12:14
    debug keycode => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:13:9: 13:16
    debug modifiers => _3;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:14:9: 14:18
    debug handle_ctrl => _4;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:15:9: 15:20
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:16:10: 16:20
    let _5: bool;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:13: 17:27
    let mut _6: &HandleControl;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:30: 17:41
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:19:13: 19:26
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:20:20: 20:42
    let mut _9: char;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:26:52: 26:63
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:28:20: 28:42
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:35:20: 35:42
    let mut _12: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:42:20: 42:42
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:49:20: 49:42
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:56:20: 56:42
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:63:20: 63:42
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:70:20: 70:42
    let mut _17: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:77:20: 77:42
    let mut _18: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:84:20: 84:42
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:91:20: 91:42
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:98:20: 98:42
    let mut _21: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:105:20: 105:42
    let mut _22: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:111:55: 111:66
    let mut _23: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:112:49: 112:60
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:114:20: 114:57
    let mut _25: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:114:20: 114:34
    let mut _26: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:114:38: 114:57
    let mut _27: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:116:27: 116:46
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:123:20: 123:57
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:123:20: 123:34
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:123:38: 123:57
    let mut _31: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:125:27: 125:46
    let mut _32: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:132:20: 132:57
    let mut _33: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:132:20: 132:34
    let mut _34: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:132:38: 132:57
    let mut _35: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:134:27: 134:46
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:141:20: 141:57
    let mut _37: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:141:20: 141:34
    let mut _38: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:141:38: 141:57
    let mut _39: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:143:27: 143:46
    let mut _40: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:150:20: 150:57
    let mut _41: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:150:20: 150:34
    let mut _42: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:150:38: 150:57
    let mut _43: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:152:27: 152:46
    let mut _44: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:159:20: 159:57
    let mut _45: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:159:20: 159:34
    let mut _46: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:159:38: 159:57
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:161:27: 161:46
    let mut _48: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:168:20: 168:57
    let mut _49: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:168:20: 168:34
    let mut _50: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:168:38: 168:57
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:170:27: 170:46
    let mut _52: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:177:20: 177:57
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:177:20: 177:34
    let mut _54: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:177:38: 177:57
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:179:27: 179:46
    let mut _56: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:186:20: 186:57
    let mut _57: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:186:20: 186:34
    let mut _58: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:186:38: 186:57
    let mut _59: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:188:27: 188:46
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:195:20: 195:39
    let mut _61: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:202:20: 202:42
    let mut _62: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:209:20: 209:42
    let mut _63: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:216:20: 216:42
    let mut _64: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:223:20: 223:57
    let mut _65: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:223:20: 223:34
    let mut _66: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:223:38: 223:57
    let mut _67: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:225:27: 225:46
    let mut _68: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:232:20: 232:57
    let mut _69: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:232:20: 232:34
    let mut _70: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:232:38: 232:57
    let mut _71: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:234:27: 234:46
    let mut _72: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:241:20: 241:57
    let mut _73: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:241:20: 241:34
    let mut _74: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:241:38: 241:57
    let mut _75: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:243:27: 243:46
    let mut _76: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:250:20: 250:57
    let mut _77: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:250:20: 250:34
    let mut _78: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:250:38: 250:57
    let mut _79: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:252:27: 252:46
    let mut _80: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:259:20: 259:57
    let mut _81: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:259:20: 259:34
    let mut _82: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:259:38: 259:57
    let mut _83: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:261:27: 261:46
    let mut _84: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:268:20: 268:57
    let mut _85: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:268:20: 268:34
    let mut _86: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:268:38: 268:57
    let mut _87: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:270:27: 270:46
    let mut _88: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:277:20: 277:57
    let mut _89: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:277:20: 277:34
    let mut _90: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:277:38: 277:57
    let mut _91: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:279:27: 279:46
    let mut _92: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:286:20: 286:57
    let mut _93: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:286:20: 286:34
    let mut _94: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:286:38: 286:57
    let mut _95: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:288:27: 288:46
    let mut _96: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:295:20: 295:57
    let mut _97: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:295:20: 295:34
    let mut _98: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:295:38: 295:57
    let mut _99: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:297:27: 297:46
    let mut _100: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:304:20: 304:57
    let mut _101: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:304:20: 304:34
    let mut _102: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:304:38: 304:57
    let mut _103: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:306:27: 306:49
    let mut _104: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:313:20: 313:42
    let mut _105: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:320:52: 320:61
    let mut _106: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:322:20: 322:57
    let mut _107: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:322:20: 322:34
    let mut _108: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:322:38: 322:57
    let mut _109: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:324:27: 324:46
    let mut _110: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:331:20: 331:57
    let mut _111: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:331:20: 331:34
    let mut _112: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:331:38: 331:57
    let mut _113: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:333:27: 333:46
    let mut _114: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:340:20: 340:57
    let mut _115: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:340:20: 340:34
    let mut _116: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:340:38: 340:57
    let mut _117: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:342:27: 342:46
    let mut _118: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:349:20: 349:57
    let mut _119: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:349:20: 349:34
    let mut _120: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:349:38: 349:57
    let mut _121: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:351:27: 351:46
    let mut _122: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:358:20: 358:57
    let mut _123: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:358:20: 358:34
    let mut _124: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:358:38: 358:57
    let mut _125: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:360:27: 360:46
    let mut _126: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:367:20: 367:57
    let mut _127: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:367:20: 367:34
    let mut _128: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:367:38: 367:57
    let mut _129: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:369:27: 369:46
    let mut _130: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:376:20: 376:57
    let mut _131: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:376:20: 376:34
    let mut _132: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:376:38: 376:57
    let mut _133: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:378:27: 378:46
    let mut _134: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:385:20: 385:42
    let mut _135: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:392:20: 392:42
    let mut _136: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:399:20: 399:42
    let mut _137: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:406:52: 406:62
    let mut _138: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:411:20: 411:37
    let mut _139: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:414:40: 414:53
    let mut _140: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:418:20: 418:37
    let mut _141: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:421:40: 421:56
    let mut _142: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:425:20: 425:37
    let mut _143: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:428:40: 428:55
    let mut _144: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:433:20: 433:37
    let mut _145: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:436:40: 436:58
    let mut _146: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:441:20: 441:37
    let mut _147: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:444:40: 444:59
    let mut _148: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:448:20: 448:37
    let mut _149: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:451:40: 451:52
    let mut _150: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:455:20: 455:37
    let mut _151: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:458:40: 458:58
    let mut _152: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:462:20: 462:37
    let mut _153: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:465:40: 465:57
    let mut _154: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:469:20: 469:37
    let mut _155: KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:472:40: 472:55
    let mut _156: bool;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:476:20: 476:37
    let mut _157: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:479:41: 479:51
    let mut _158: char;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:482:57: 482:66
    let mut _159: &HandleControl;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:45: 17:79
    scope 1 {
        debug map_to_unicode => _5;      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:13: 17:27
        scope 2 {
            debug k => _2;               // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:483:13: 483:14
        }
    }

    bb0: {
        _6 = &_4;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:30: 17:41
        _159 = const _;                  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:45: 17:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:45: 17:79
                                         // + literal: Const { ty: &HandleControl, val: Unevaluated(<Colemak as KeyboardLayout>::map_keycode, [], Some(promoted[0])) }
        _5 = <HandleControl as PartialEq>::eq(move _6, _159) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:30: 17:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:30: 17:79
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HandleControl, &'b HandleControl) -> bool {<HandleControl as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_2);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:18:15: 18:22
        switchInt(move _7) -> [0: bb7, 17: bb3, 18: bb9, 19: bb13, 20: bb17, 21: bb21, 22: bb25, 23: bb29, 24: bb33, 25: bb37, 26: bb41, 27: bb45, 28: bb49, 29: bb53, 30: bb57, 35: bb358, 36: bb359, 37: bb360, 38: bb59, 39: bb61, 40: bb71, 41: bb81, 42: bb91, 43: bb101, 44: bb111, 45: bb121, 46: bb131, 47: bb141, 48: bb151, 49: bb155, 50: bb159, 52: bb163, 53: bb356, 56: bb361, 57: bb364, 58: bb367, 59: bb370, 61: bb167, 62: bb177, 63: bb187, 64: bb197, 65: bb207, 66: bb217, 67: bb227, 68: bb237, 69: bb247, 70: bb257, 71: bb267, 72: bb271, 73: bb371, 74: bb374, 75: bb375, 77: bb273, 78: bb283, 79: bb293, 80: bb303, 81: bb313, 82: bb323, 83: bb333, 84: bb343, 85: bb347, 86: bb351, 89: bb378, 90: bb381, 91: bb384, 92: bb394, 96: bb355, 104: bb387, 105: bb390, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:18:9: 18:22
    }

    bb2: {
        _0 = DecodedKey::RawKey(_2);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:483:18: 483:39
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:483:38: 483:39
    }

    bb3: {
        _8 = Modifiers::is_shifted(_3) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:20:20: 20:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:20:30: 20:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt(move _8) -> [0: bb6, otherwise: bb5]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:20:20: 20:42
    }

    bb5: {
        _0 = DecodedKey::Unicode(const '~'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:21:21: 21:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:20:17: 24:18
    }

    bb6: {
        _0 = DecodedKey::Unicode(const '`'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:23:21: 23:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:20:17: 24:18
    }

    bb7: {
        _9 = <u8 as Into<char>>::into(const 27_u8) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:26:52: 26:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:26:57: 26:61
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = DecodedKey::Unicode(move _9); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:26:32: 26:64
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:26:63: 26:64
    }

    bb9: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:28:20: 28:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:28:30: 28:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _10) -> [0: bb12, otherwise: bb11]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:28:20: 28:42
    }

    bb11: {
        _0 = DecodedKey::Unicode(const '!'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:29:21: 29:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:28:17: 32:18
    }

    bb12: {
        _0 = DecodedKey::Unicode(const '1'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:31:21: 31:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:28:17: 32:18
    }

    bb13: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb14, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:35:20: 35:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:35:30: 35:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb14: {
        switchInt(move _11) -> [0: bb16, otherwise: bb15]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:35:20: 35:42
    }

    bb15: {
        _0 = DecodedKey::Unicode(const '@'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:36:21: 36:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:35:17: 39:18
    }

    bb16: {
        _0 = DecodedKey::Unicode(const '2'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:38:21: 38:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:35:17: 39:18
    }

    bb17: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:42:20: 42:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:42:30: 42:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(move _12) -> [0: bb20, otherwise: bb19]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:42:20: 42:42
    }

    bb19: {
        _0 = DecodedKey::Unicode(const '#'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:43:21: 43:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:42:17: 46:18
    }

    bb20: {
        _0 = DecodedKey::Unicode(const '3'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:45:21: 45:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:42:17: 46:18
    }

    bb21: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb22, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:49:20: 49:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:49:30: 49:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb22: {
        switchInt(move _13) -> [0: bb24, otherwise: bb23]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:49:20: 49:42
    }

    bb23: {
        _0 = DecodedKey::Unicode(const '$'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:50:21: 50:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:49:17: 53:18
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '4'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:52:21: 52:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:49:17: 53:18
    }

    bb25: {
        _14 = Modifiers::is_shifted(_3) -> [return: bb26, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:56:20: 56:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:56:30: 56:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb26: {
        switchInt(move _14) -> [0: bb28, otherwise: bb27]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:56:20: 56:42
    }

    bb27: {
        _0 = DecodedKey::Unicode(const '%'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:57:21: 57:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:56:17: 60:18
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '5'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:59:21: 59:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:56:17: 60:18
    }

    bb29: {
        _15 = Modifiers::is_shifted(_3) -> [return: bb30, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:63:20: 63:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:63:30: 63:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb30: {
        switchInt(move _15) -> [0: bb32, otherwise: bb31]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:63:20: 63:42
    }

    bb31: {
        _0 = DecodedKey::Unicode(const '^'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:64:21: 64:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:63:17: 67:18
    }

    bb32: {
        _0 = DecodedKey::Unicode(const '6'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:66:21: 66:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:63:17: 67:18
    }

    bb33: {
        _16 = Modifiers::is_shifted(_3) -> [return: bb34, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:70:20: 70:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:70:30: 70:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb34: {
        switchInt(move _16) -> [0: bb36, otherwise: bb35]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:70:20: 70:42
    }

    bb35: {
        _0 = DecodedKey::Unicode(const '&'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:71:21: 71:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:70:17: 74:18
    }

    bb36: {
        _0 = DecodedKey::Unicode(const '7'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:73:21: 73:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:70:17: 74:18
    }

    bb37: {
        _17 = Modifiers::is_shifted(_3) -> [return: bb38, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:77:20: 77:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:77:30: 77:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb38: {
        switchInt(move _17) -> [0: bb40, otherwise: bb39]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:77:20: 77:42
    }

    bb39: {
        _0 = DecodedKey::Unicode(const '*'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:78:21: 78:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:77:17: 81:18
    }

    bb40: {
        _0 = DecodedKey::Unicode(const '8'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:80:21: 80:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:77:17: 81:18
    }

    bb41: {
        _18 = Modifiers::is_shifted(_3) -> [return: bb42, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:84:20: 84:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:84:30: 84:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb42: {
        switchInt(move _18) -> [0: bb44, otherwise: bb43]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:84:20: 84:42
    }

    bb43: {
        _0 = DecodedKey::Unicode(const '('); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:85:21: 85:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:84:17: 88:18
    }

    bb44: {
        _0 = DecodedKey::Unicode(const '9'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:87:21: 87:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:84:17: 88:18
    }

    bb45: {
        _19 = Modifiers::is_shifted(_3) -> [return: bb46, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:91:20: 91:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:91:30: 91:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb46: {
        switchInt(move _19) -> [0: bb48, otherwise: bb47]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:91:20: 91:42
    }

    bb47: {
        _0 = DecodedKey::Unicode(const ')'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:92:21: 92:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:91:17: 95:18
    }

    bb48: {
        _0 = DecodedKey::Unicode(const '0'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:94:21: 94:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:91:17: 95:18
    }

    bb49: {
        _20 = Modifiers::is_shifted(_3) -> [return: bb50, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:98:20: 98:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:98:30: 98:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb50: {
        switchInt(move _20) -> [0: bb52, otherwise: bb51]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:98:20: 98:42
    }

    bb51: {
        _0 = DecodedKey::Unicode(const '_'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:99:21: 99:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:98:17: 102:18
    }

    bb52: {
        _0 = DecodedKey::Unicode(const '-'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:101:21: 101:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:98:17: 102:18
    }

    bb53: {
        _21 = Modifiers::is_shifted(_3) -> [return: bb54, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:105:20: 105:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:105:30: 105:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb54: {
        switchInt(move _21) -> [0: bb56, otherwise: bb55]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:105:20: 105:42
    }

    bb55: {
        _0 = DecodedKey::Unicode(const '+'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:106:21: 106:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:105:17: 109:18
    }

    bb56: {
        _0 = DecodedKey::Unicode(const '='); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:108:21: 108:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:105:17: 109:18
    }

    bb57: {
        _22 = <u8 as Into<char>>::into(const 8_u8) -> [return: bb58, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:111:55: 111:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:111:60: 111:64
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb58: {
        _0 = DecodedKey::Unicode(move _22); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:111:35: 111:67
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:111:66: 111:67
    }

    bb59: {
        _23 = <u8 as Into<char>>::into(const 9_u8) -> [return: bb60, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:112:49: 112:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:112:54: 112:58
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb60: {
        _0 = DecodedKey::Unicode(move _23); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:112:29: 112:61
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:112:60: 112:61
    }

    bb61: {
        _25 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:114:20: 114:34
        switchInt(move _25) -> [0: bb62, otherwise: bb63]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:114:20: 114:57
    }

    bb62: {
        _24 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:114:20: 114:57
        goto -> bb64;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:114:20: 114:57
    }

    bb63: {
        _26 = Modifiers::is_ctrl(_3) -> [return: bb65, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:114:38: 114:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:114:48: 114:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb64: {
        switchInt(move _24) -> [0: bb67, otherwise: bb66]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:114:20: 114:57
    }

    bb65: {
        _24 = move _26;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:114:20: 114:57
        goto -> bb64;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:114:20: 114:57
    }

    bb66: {
        _0 = DecodedKey::Unicode(const '\u{11}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:115:21: 115:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:114:17: 120:18
    }

    bb67: {
        _27 = Modifiers::is_caps(_3) -> [return: bb68, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:116:27: 116:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:116:37: 116:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb68: {
        switchInt(move _27) -> [0: bb70, otherwise: bb69]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:116:27: 116:46
    }

    bb69: {
        _0 = DecodedKey::Unicode(const 'Q'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:117:21: 117:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:116:24: 120:18
    }

    bb70: {
        _0 = DecodedKey::Unicode(const 'q'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:119:21: 119:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:116:24: 120:18
    }

    bb71: {
        _29 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:123:20: 123:34
        switchInt(move _29) -> [0: bb72, otherwise: bb73]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:123:20: 123:57
    }

    bb72: {
        _28 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:123:20: 123:57
        goto -> bb74;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:123:20: 123:57
    }

    bb73: {
        _30 = Modifiers::is_ctrl(_3) -> [return: bb75, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:123:38: 123:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:123:48: 123:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb74: {
        switchInt(move _28) -> [0: bb77, otherwise: bb76]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:123:20: 123:57
    }

    bb75: {
        _28 = move _30;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:123:20: 123:57
        goto -> bb74;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:123:20: 123:57
    }

    bb76: {
        _0 = DecodedKey::Unicode(const '\u{17}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:124:21: 124:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:123:17: 129:18
    }

    bb77: {
        _31 = Modifiers::is_caps(_3) -> [return: bb78, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:125:27: 125:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:125:37: 125:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb78: {
        switchInt(move _31) -> [0: bb80, otherwise: bb79]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:125:27: 125:46
    }

    bb79: {
        _0 = DecodedKey::Unicode(const 'W'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:126:21: 126:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:125:24: 129:18
    }

    bb80: {
        _0 = DecodedKey::Unicode(const 'w'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:128:21: 128:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:125:24: 129:18
    }

    bb81: {
        _33 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:132:20: 132:34
        switchInt(move _33) -> [0: bb82, otherwise: bb83]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:132:20: 132:57
    }

    bb82: {
        _32 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:132:20: 132:57
        goto -> bb84;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:132:20: 132:57
    }

    bb83: {
        _34 = Modifiers::is_ctrl(_3) -> [return: bb85, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:132:38: 132:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:132:48: 132:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb84: {
        switchInt(move _32) -> [0: bb87, otherwise: bb86]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:132:20: 132:57
    }

    bb85: {
        _32 = move _34;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:132:20: 132:57
        goto -> bb84;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:132:20: 132:57
    }

    bb86: {
        _0 = DecodedKey::Unicode(const '\u{6}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:133:21: 133:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:132:17: 138:18
    }

    bb87: {
        _35 = Modifiers::is_caps(_3) -> [return: bb88, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:134:27: 134:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:134:37: 134:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb88: {
        switchInt(move _35) -> [0: bb90, otherwise: bb89]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:134:27: 134:46
    }

    bb89: {
        _0 = DecodedKey::Unicode(const 'F'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:135:21: 135:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:134:24: 138:18
    }

    bb90: {
        _0 = DecodedKey::Unicode(const 'f'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:137:21: 137:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:134:24: 138:18
    }

    bb91: {
        _37 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:141:20: 141:34
        switchInt(move _37) -> [0: bb92, otherwise: bb93]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:141:20: 141:57
    }

    bb92: {
        _36 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:141:20: 141:57
        goto -> bb94;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:141:20: 141:57
    }

    bb93: {
        _38 = Modifiers::is_ctrl(_3) -> [return: bb95, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:141:38: 141:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:141:48: 141:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb94: {
        switchInt(move _36) -> [0: bb97, otherwise: bb96]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:141:20: 141:57
    }

    bb95: {
        _36 = move _38;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:141:20: 141:57
        goto -> bb94;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:141:20: 141:57
    }

    bb96: {
        _0 = DecodedKey::Unicode(const '\u{12}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:142:21: 142:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:141:17: 147:18
    }

    bb97: {
        _39 = Modifiers::is_caps(_3) -> [return: bb98, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:143:27: 143:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:143:37: 143:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb98: {
        switchInt(move _39) -> [0: bb100, otherwise: bb99]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:143:27: 143:46
    }

    bb99: {
        _0 = DecodedKey::Unicode(const 'P'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:144:21: 144:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:143:24: 147:18
    }

    bb100: {
        _0 = DecodedKey::Unicode(const 'p'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:146:21: 146:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:143:24: 147:18
    }

    bb101: {
        _41 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:150:20: 150:34
        switchInt(move _41) -> [0: bb102, otherwise: bb103]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:150:20: 150:57
    }

    bb102: {
        _40 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:150:20: 150:57
        goto -> bb104;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:150:20: 150:57
    }

    bb103: {
        _42 = Modifiers::is_ctrl(_3) -> [return: bb105, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:150:38: 150:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:150:48: 150:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb104: {
        switchInt(move _40) -> [0: bb107, otherwise: bb106]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:150:20: 150:57
    }

    bb105: {
        _40 = move _42;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:150:20: 150:57
        goto -> bb104;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:150:20: 150:57
    }

    bb106: {
        _0 = DecodedKey::Unicode(const '\u{7}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:151:21: 151:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:150:17: 156:18
    }

    bb107: {
        _43 = Modifiers::is_caps(_3) -> [return: bb108, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:152:27: 152:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:152:37: 152:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb108: {
        switchInt(move _43) -> [0: bb110, otherwise: bb109]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:152:27: 152:46
    }

    bb109: {
        _0 = DecodedKey::Unicode(const 'G'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:153:21: 153:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:152:24: 156:18
    }

    bb110: {
        _0 = DecodedKey::Unicode(const 'g'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:155:21: 155:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:152:24: 156:18
    }

    bb111: {
        _45 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:159:20: 159:34
        switchInt(move _45) -> [0: bb112, otherwise: bb113]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:159:20: 159:57
    }

    bb112: {
        _44 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:159:20: 159:57
        goto -> bb114;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:159:20: 159:57
    }

    bb113: {
        _46 = Modifiers::is_ctrl(_3) -> [return: bb115, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:159:38: 159:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:159:48: 159:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb114: {
        switchInt(move _44) -> [0: bb117, otherwise: bb116]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:159:20: 159:57
    }

    bb115: {
        _44 = move _46;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:159:20: 159:57
        goto -> bb114;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:159:20: 159:57
    }

    bb116: {
        _0 = DecodedKey::Unicode(const '\n'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:160:21: 160:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:159:17: 165:18
    }

    bb117: {
        _47 = Modifiers::is_caps(_3) -> [return: bb118, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:161:27: 161:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:161:37: 161:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb118: {
        switchInt(move _47) -> [0: bb120, otherwise: bb119]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:161:27: 161:46
    }

    bb119: {
        _0 = DecodedKey::Unicode(const 'J'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:162:21: 162:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:161:24: 165:18
    }

    bb120: {
        _0 = DecodedKey::Unicode(const 'j'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:164:21: 164:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:161:24: 165:18
    }

    bb121: {
        _49 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:168:20: 168:34
        switchInt(move _49) -> [0: bb122, otherwise: bb123]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:168:20: 168:57
    }

    bb122: {
        _48 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:168:20: 168:57
        goto -> bb124;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:168:20: 168:57
    }

    bb123: {
        _50 = Modifiers::is_ctrl(_3) -> [return: bb125, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:168:38: 168:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:168:48: 168:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb124: {
        switchInt(move _48) -> [0: bb127, otherwise: bb126]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:168:20: 168:57
    }

    bb125: {
        _48 = move _50;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:168:20: 168:57
        goto -> bb124;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:168:20: 168:57
    }

    bb126: {
        _0 = DecodedKey::Unicode(const '\u{c}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:169:21: 169:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:168:17: 174:18
    }

    bb127: {
        _51 = Modifiers::is_caps(_3) -> [return: bb128, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:170:27: 170:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:170:37: 170:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb128: {
        switchInt(move _51) -> [0: bb130, otherwise: bb129]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:170:27: 170:46
    }

    bb129: {
        _0 = DecodedKey::Unicode(const 'L'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:171:21: 171:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:170:24: 174:18
    }

    bb130: {
        _0 = DecodedKey::Unicode(const 'l'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:173:21: 173:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:170:24: 174:18
    }

    bb131: {
        _53 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:177:20: 177:34
        switchInt(move _53) -> [0: bb132, otherwise: bb133]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:177:20: 177:57
    }

    bb132: {
        _52 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:177:20: 177:57
        goto -> bb134;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:177:20: 177:57
    }

    bb133: {
        _54 = Modifiers::is_ctrl(_3) -> [return: bb135, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:177:38: 177:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:177:48: 177:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb134: {
        switchInt(move _52) -> [0: bb137, otherwise: bb136]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:177:20: 177:57
    }

    bb135: {
        _52 = move _54;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:177:20: 177:57
        goto -> bb134;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:177:20: 177:57
    }

    bb136: {
        _0 = DecodedKey::Unicode(const '\u{15}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:178:21: 178:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:177:17: 183:18
    }

    bb137: {
        _55 = Modifiers::is_caps(_3) -> [return: bb138, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:179:27: 179:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:179:37: 179:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb138: {
        switchInt(move _55) -> [0: bb140, otherwise: bb139]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:179:27: 179:46
    }

    bb139: {
        _0 = DecodedKey::Unicode(const 'U'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:180:21: 180:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:179:24: 183:18
    }

    bb140: {
        _0 = DecodedKey::Unicode(const 'u'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:182:21: 182:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:179:24: 183:18
    }

    bb141: {
        _57 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:186:20: 186:34
        switchInt(move _57) -> [0: bb142, otherwise: bb143]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:186:20: 186:57
    }

    bb142: {
        _56 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:186:20: 186:57
        goto -> bb144;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:186:20: 186:57
    }

    bb143: {
        _58 = Modifiers::is_ctrl(_3) -> [return: bb145, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:186:38: 186:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:186:48: 186:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb144: {
        switchInt(move _56) -> [0: bb147, otherwise: bb146]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:186:20: 186:57
    }

    bb145: {
        _56 = move _58;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:186:20: 186:57
        goto -> bb144;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:186:20: 186:57
    }

    bb146: {
        _0 = DecodedKey::Unicode(const '\u{19}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:187:21: 187:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:186:17: 192:18
    }

    bb147: {
        _59 = Modifiers::is_caps(_3) -> [return: bb148, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:188:27: 188:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:188:37: 188:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb148: {
        switchInt(move _59) -> [0: bb150, otherwise: bb149]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:188:27: 188:46
    }

    bb149: {
        _0 = DecodedKey::Unicode(const 'Y'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:189:21: 189:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:188:24: 192:18
    }

    bb150: {
        _0 = DecodedKey::Unicode(const 'y'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:191:21: 191:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:188:24: 192:18
    }

    bb151: {
        _60 = Modifiers::is_caps(_3) -> [return: bb152, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:195:20: 195:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:195:30: 195:37
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb152: {
        switchInt(move _60) -> [0: bb154, otherwise: bb153]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:195:20: 195:39
    }

    bb153: {
        _0 = DecodedKey::Unicode(const ':'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:196:21: 196:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:195:17: 199:18
    }

    bb154: {
        _0 = DecodedKey::Unicode(const ';'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:198:21: 198:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:195:17: 199:18
    }

    bb155: {
        _61 = Modifiers::is_shifted(_3) -> [return: bb156, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:202:20: 202:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:202:30: 202:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb156: {
        switchInt(move _61) -> [0: bb158, otherwise: bb157]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:202:20: 202:42
    }

    bb157: {
        _0 = DecodedKey::Unicode(const '{'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:203:21: 203:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:202:17: 206:18
    }

    bb158: {
        _0 = DecodedKey::Unicode(const '['); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:205:21: 205:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:202:17: 206:18
    }

    bb159: {
        _62 = Modifiers::is_shifted(_3) -> [return: bb160, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:209:20: 209:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:209:30: 209:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb160: {
        switchInt(move _62) -> [0: bb162, otherwise: bb161]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:209:20: 209:42
    }

    bb161: {
        _0 = DecodedKey::Unicode(const '}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:210:21: 210:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:209:17: 213:18
    }

    bb162: {
        _0 = DecodedKey::Unicode(const ']'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:212:21: 212:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:209:17: 213:18
    }

    bb163: {
        _63 = Modifiers::is_shifted(_3) -> [return: bb164, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:216:20: 216:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:216:30: 216:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb164: {
        switchInt(move _63) -> [0: bb166, otherwise: bb165]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:216:20: 216:42
    }

    bb165: {
        _0 = DecodedKey::Unicode(const '|'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:217:21: 217:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:216:17: 220:18
    }

    bb166: {
        _0 = DecodedKey::Unicode(const '\\'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:219:21: 219:46
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:216:17: 220:18
    }

    bb167: {
        _65 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:223:20: 223:34
        switchInt(move _65) -> [0: bb168, otherwise: bb169]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:223:20: 223:57
    }

    bb168: {
        _64 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:223:20: 223:57
        goto -> bb170;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:223:20: 223:57
    }

    bb169: {
        _66 = Modifiers::is_ctrl(_3) -> [return: bb171, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:223:38: 223:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:223:48: 223:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb170: {
        switchInt(move _64) -> [0: bb173, otherwise: bb172]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:223:20: 223:57
    }

    bb171: {
        _64 = move _66;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:223:20: 223:57
        goto -> bb170;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:223:20: 223:57
    }

    bb172: {
        _0 = DecodedKey::Unicode(const '\u{1}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:224:21: 224:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:223:17: 229:18
    }

    bb173: {
        _67 = Modifiers::is_caps(_3) -> [return: bb174, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:225:27: 225:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:225:37: 225:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb174: {
        switchInt(move _67) -> [0: bb176, otherwise: bb175]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:225:27: 225:46
    }

    bb175: {
        _0 = DecodedKey::Unicode(const 'A'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:226:21: 226:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:225:24: 229:18
    }

    bb176: {
        _0 = DecodedKey::Unicode(const 'a'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:228:21: 228:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:225:24: 229:18
    }

    bb177: {
        _69 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:232:20: 232:34
        switchInt(move _69) -> [0: bb178, otherwise: bb179]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:232:20: 232:57
    }

    bb178: {
        _68 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:232:20: 232:57
        goto -> bb180;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:232:20: 232:57
    }

    bb179: {
        _70 = Modifiers::is_ctrl(_3) -> [return: bb181, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:232:38: 232:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:232:48: 232:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb180: {
        switchInt(move _68) -> [0: bb183, otherwise: bb182]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:232:20: 232:57
    }

    bb181: {
        _68 = move _70;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:232:20: 232:57
        goto -> bb180;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:232:20: 232:57
    }

    bb182: {
        _0 = DecodedKey::Unicode(const '\u{12}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:233:21: 233:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:232:17: 238:18
    }

    bb183: {
        _71 = Modifiers::is_caps(_3) -> [return: bb184, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:234:27: 234:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:234:37: 234:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb184: {
        switchInt(move _71) -> [0: bb186, otherwise: bb185]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:234:27: 234:46
    }

    bb185: {
        _0 = DecodedKey::Unicode(const 'R'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:235:21: 235:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:234:24: 238:18
    }

    bb186: {
        _0 = DecodedKey::Unicode(const 'r'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:237:21: 237:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:234:24: 238:18
    }

    bb187: {
        _73 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:241:20: 241:34
        switchInt(move _73) -> [0: bb188, otherwise: bb189]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:241:20: 241:57
    }

    bb188: {
        _72 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:241:20: 241:57
        goto -> bb190;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:241:20: 241:57
    }

    bb189: {
        _74 = Modifiers::is_ctrl(_3) -> [return: bb191, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:241:38: 241:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:241:48: 241:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb190: {
        switchInt(move _72) -> [0: bb193, otherwise: bb192]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:241:20: 241:57
    }

    bb191: {
        _72 = move _74;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:241:20: 241:57
        goto -> bb190;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:241:20: 241:57
    }

    bb192: {
        _0 = DecodedKey::Unicode(const '\u{13}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:242:21: 242:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:241:17: 247:18
    }

    bb193: {
        _75 = Modifiers::is_caps(_3) -> [return: bb194, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:243:27: 243:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:243:37: 243:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb194: {
        switchInt(move _75) -> [0: bb196, otherwise: bb195]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:243:27: 243:46
    }

    bb195: {
        _0 = DecodedKey::Unicode(const 'S'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:244:21: 244:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:243:24: 247:18
    }

    bb196: {
        _0 = DecodedKey::Unicode(const 's'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:246:21: 246:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:243:24: 247:18
    }

    bb197: {
        _77 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:250:20: 250:34
        switchInt(move _77) -> [0: bb198, otherwise: bb199]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:250:20: 250:57
    }

    bb198: {
        _76 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:250:20: 250:57
        goto -> bb200;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:250:20: 250:57
    }

    bb199: {
        _78 = Modifiers::is_ctrl(_3) -> [return: bb201, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:250:38: 250:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:250:48: 250:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb200: {
        switchInt(move _76) -> [0: bb203, otherwise: bb202]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:250:20: 250:57
    }

    bb201: {
        _76 = move _78;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:250:20: 250:57
        goto -> bb200;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:250:20: 250:57
    }

    bb202: {
        _0 = DecodedKey::Unicode(const '\u{14}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:251:21: 251:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:250:17: 256:18
    }

    bb203: {
        _79 = Modifiers::is_caps(_3) -> [return: bb204, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:252:27: 252:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:252:37: 252:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb204: {
        switchInt(move _79) -> [0: bb206, otherwise: bb205]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:252:27: 252:46
    }

    bb205: {
        _0 = DecodedKey::Unicode(const 'T'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:253:21: 253:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:252:24: 256:18
    }

    bb206: {
        _0 = DecodedKey::Unicode(const 't'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:255:21: 255:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:252:24: 256:18
    }

    bb207: {
        _81 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:259:20: 259:34
        switchInt(move _81) -> [0: bb208, otherwise: bb209]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:259:20: 259:57
    }

    bb208: {
        _80 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:259:20: 259:57
        goto -> bb210;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:259:20: 259:57
    }

    bb209: {
        _82 = Modifiers::is_ctrl(_3) -> [return: bb211, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:259:38: 259:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:259:48: 259:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb210: {
        switchInt(move _80) -> [0: bb213, otherwise: bb212]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:259:20: 259:57
    }

    bb211: {
        _80 = move _82;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:259:20: 259:57
        goto -> bb210;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:259:20: 259:57
    }

    bb212: {
        _0 = DecodedKey::Unicode(const '\u{4}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:260:21: 260:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:259:17: 265:18
    }

    bb213: {
        _83 = Modifiers::is_caps(_3) -> [return: bb214, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:261:27: 261:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:261:37: 261:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb214: {
        switchInt(move _83) -> [0: bb216, otherwise: bb215]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:261:27: 261:46
    }

    bb215: {
        _0 = DecodedKey::Unicode(const 'D'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:262:21: 262:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:261:24: 265:18
    }

    bb216: {
        _0 = DecodedKey::Unicode(const 'd'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:264:21: 264:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:261:24: 265:18
    }

    bb217: {
        _85 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:268:20: 268:34
        switchInt(move _85) -> [0: bb218, otherwise: bb219]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:268:20: 268:57
    }

    bb218: {
        _84 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:268:20: 268:57
        goto -> bb220;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:268:20: 268:57
    }

    bb219: {
        _86 = Modifiers::is_ctrl(_3) -> [return: bb221, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:268:38: 268:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:268:48: 268:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb220: {
        switchInt(move _84) -> [0: bb223, otherwise: bb222]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:268:20: 268:57
    }

    bb221: {
        _84 = move _86;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:268:20: 268:57
        goto -> bb220;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:268:20: 268:57
    }

    bb222: {
        _0 = DecodedKey::Unicode(const '\u{8}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:269:21: 269:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:268:17: 274:18
    }

    bb223: {
        _87 = Modifiers::is_caps(_3) -> [return: bb224, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:270:27: 270:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:270:37: 270:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb224: {
        switchInt(move _87) -> [0: bb226, otherwise: bb225]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:270:27: 270:46
    }

    bb225: {
        _0 = DecodedKey::Unicode(const 'H'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:271:21: 271:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:270:24: 274:18
    }

    bb226: {
        _0 = DecodedKey::Unicode(const 'h'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:273:21: 273:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:270:24: 274:18
    }

    bb227: {
        _89 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:277:20: 277:34
        switchInt(move _89) -> [0: bb228, otherwise: bb229]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:277:20: 277:57
    }

    bb228: {
        _88 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:277:20: 277:57
        goto -> bb230;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:277:20: 277:57
    }

    bb229: {
        _90 = Modifiers::is_ctrl(_3) -> [return: bb231, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:277:38: 277:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:277:48: 277:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb230: {
        switchInt(move _88) -> [0: bb233, otherwise: bb232]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:277:20: 277:57
    }

    bb231: {
        _88 = move _90;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:277:20: 277:57
        goto -> bb230;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:277:20: 277:57
    }

    bb232: {
        _0 = DecodedKey::Unicode(const '\u{e}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:278:21: 278:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:277:17: 283:18
    }

    bb233: {
        _91 = Modifiers::is_caps(_3) -> [return: bb234, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:279:27: 279:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:279:37: 279:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb234: {
        switchInt(move _91) -> [0: bb236, otherwise: bb235]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:279:27: 279:46
    }

    bb235: {
        _0 = DecodedKey::Unicode(const 'N'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:280:21: 280:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:279:24: 283:18
    }

    bb236: {
        _0 = DecodedKey::Unicode(const 'n'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:282:21: 282:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:279:24: 283:18
    }

    bb237: {
        _93 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:286:20: 286:34
        switchInt(move _93) -> [0: bb238, otherwise: bb239]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:286:20: 286:57
    }

    bb238: {
        _92 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:286:20: 286:57
        goto -> bb240;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:286:20: 286:57
    }

    bb239: {
        _94 = Modifiers::is_ctrl(_3) -> [return: bb241, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:286:38: 286:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:286:48: 286:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb240: {
        switchInt(move _92) -> [0: bb243, otherwise: bb242]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:286:20: 286:57
    }

    bb241: {
        _92 = move _94;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:286:20: 286:57
        goto -> bb240;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:286:20: 286:57
    }

    bb242: {
        _0 = DecodedKey::Unicode(const '\u{5}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:287:21: 287:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:286:17: 292:18
    }

    bb243: {
        _95 = Modifiers::is_caps(_3) -> [return: bb244, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:288:27: 288:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:288:37: 288:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb244: {
        switchInt(move _95) -> [0: bb246, otherwise: bb245]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:288:27: 288:46
    }

    bb245: {
        _0 = DecodedKey::Unicode(const 'E'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:289:21: 289:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:288:24: 292:18
    }

    bb246: {
        _0 = DecodedKey::Unicode(const 'e'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:291:21: 291:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:288:24: 292:18
    }

    bb247: {
        _97 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:295:20: 295:34
        switchInt(move _97) -> [0: bb248, otherwise: bb249]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:295:20: 295:57
    }

    bb248: {
        _96 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:295:20: 295:57
        goto -> bb250;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:295:20: 295:57
    }

    bb249: {
        _98 = Modifiers::is_ctrl(_3) -> [return: bb251, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:295:38: 295:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:295:48: 295:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb250: {
        switchInt(move _96) -> [0: bb253, otherwise: bb252]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:295:20: 295:57
    }

    bb251: {
        _96 = move _98;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:295:20: 295:57
        goto -> bb250;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:295:20: 295:57
    }

    bb252: {
        _0 = DecodedKey::Unicode(const '\t'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:296:21: 296:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:295:17: 301:18
    }

    bb253: {
        _99 = Modifiers::is_caps(_3) -> [return: bb254, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:297:27: 297:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:297:37: 297:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb254: {
        switchInt(move _99) -> [0: bb256, otherwise: bb255]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:297:27: 297:46
    }

    bb255: {
        _0 = DecodedKey::Unicode(const 'I'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:298:21: 298:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:297:24: 301:18
    }

    bb256: {
        _0 = DecodedKey::Unicode(const 'i'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:300:21: 300:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:297:24: 301:18
    }

    bb257: {
        _101 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:304:20: 304:34
        switchInt(move _101) -> [0: bb258, otherwise: bb259]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:304:20: 304:57
    }

    bb258: {
        _100 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:304:20: 304:57
        goto -> bb260;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:304:20: 304:57
    }

    bb259: {
        _102 = Modifiers::is_ctrl(_3) -> [return: bb261, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:304:38: 304:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:304:48: 304:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb260: {
        switchInt(move _100) -> [0: bb263, otherwise: bb262]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:304:20: 304:57
    }

    bb261: {
        _100 = move _102;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:304:20: 304:57
        goto -> bb260;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:304:20: 304:57
    }

    bb262: {
        _0 = DecodedKey::Unicode(const '\u{f}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:305:21: 305:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:304:17: 310:18
    }

    bb263: {
        _103 = Modifiers::is_shifted(_3) -> [return: bb264, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:306:27: 306:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:306:37: 306:47
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb264: {
        switchInt(move _103) -> [0: bb266, otherwise: bb265]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:306:27: 306:49
    }

    bb265: {
        _0 = DecodedKey::Unicode(const 'O'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:307:21: 307:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:306:24: 310:18
    }

    bb266: {
        _0 = DecodedKey::Unicode(const 'o'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:309:21: 309:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:306:24: 310:18
    }

    bb267: {
        _104 = Modifiers::is_shifted(_3) -> [return: bb268, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:313:20: 313:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:313:30: 313:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb268: {
        switchInt(move _104) -> [0: bb270, otherwise: bb269]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:313:20: 313:42
    }

    bb269: {
        _0 = DecodedKey::Unicode(const '"'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:314:21: 314:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:313:17: 317:18
    }

    bb270: {
        _0 = DecodedKey::Unicode(const '\''); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:316:21: 316:46
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:313:17: 317:18
    }

    bb271: {
        _105 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb272, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:320:52: 320:61
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:320:55: 320:59
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb272: {
        _0 = DecodedKey::Unicode(move _105); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:320:32: 320:62
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:320:61: 320:62
    }

    bb273: {
        _107 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:322:20: 322:34
        switchInt(move _107) -> [0: bb274, otherwise: bb275]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:322:20: 322:57
    }

    bb274: {
        _106 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:322:20: 322:57
        goto -> bb276;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:322:20: 322:57
    }

    bb275: {
        _108 = Modifiers::is_ctrl(_3) -> [return: bb277, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:322:38: 322:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:322:48: 322:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb276: {
        switchInt(move _106) -> [0: bb279, otherwise: bb278]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:322:20: 322:57
    }

    bb277: {
        _106 = move _108;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:322:20: 322:57
        goto -> bb276;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:322:20: 322:57
    }

    bb278: {
        _0 = DecodedKey::Unicode(const '\u{1a}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:323:21: 323:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:322:17: 328:18
    }

    bb279: {
        _109 = Modifiers::is_caps(_3) -> [return: bb280, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:324:27: 324:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:324:37: 324:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb280: {
        switchInt(move _109) -> [0: bb282, otherwise: bb281]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:324:27: 324:46
    }

    bb281: {
        _0 = DecodedKey::Unicode(const 'Z'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:325:21: 325:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:324:24: 328:18
    }

    bb282: {
        _0 = DecodedKey::Unicode(const 'z'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:327:21: 327:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:324:24: 328:18
    }

    bb283: {
        _111 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:331:20: 331:34
        switchInt(move _111) -> [0: bb284, otherwise: bb285]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:331:20: 331:57
    }

    bb284: {
        _110 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:331:20: 331:57
        goto -> bb286;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:331:20: 331:57
    }

    bb285: {
        _112 = Modifiers::is_ctrl(_3) -> [return: bb287, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:331:38: 331:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:331:48: 331:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb286: {
        switchInt(move _110) -> [0: bb289, otherwise: bb288]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:331:20: 331:57
    }

    bb287: {
        _110 = move _112;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:331:20: 331:57
        goto -> bb286;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:331:20: 331:57
    }

    bb288: {
        _0 = DecodedKey::Unicode(const '\u{18}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:332:21: 332:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:331:17: 337:18
    }

    bb289: {
        _113 = Modifiers::is_caps(_3) -> [return: bb290, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:333:27: 333:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:333:37: 333:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb290: {
        switchInt(move _113) -> [0: bb292, otherwise: bb291]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:333:27: 333:46
    }

    bb291: {
        _0 = DecodedKey::Unicode(const 'X'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:334:21: 334:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:333:24: 337:18
    }

    bb292: {
        _0 = DecodedKey::Unicode(const 'x'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:336:21: 336:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:333:24: 337:18
    }

    bb293: {
        _115 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:340:20: 340:34
        switchInt(move _115) -> [0: bb294, otherwise: bb295]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:340:20: 340:57
    }

    bb294: {
        _114 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:340:20: 340:57
        goto -> bb296;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:340:20: 340:57
    }

    bb295: {
        _116 = Modifiers::is_ctrl(_3) -> [return: bb297, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:340:38: 340:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:340:48: 340:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb296: {
        switchInt(move _114) -> [0: bb299, otherwise: bb298]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:340:20: 340:57
    }

    bb297: {
        _114 = move _116;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:340:20: 340:57
        goto -> bb296;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:340:20: 340:57
    }

    bb298: {
        _0 = DecodedKey::Unicode(const '\u{3}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:341:21: 341:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:340:17: 346:18
    }

    bb299: {
        _117 = Modifiers::is_caps(_3) -> [return: bb300, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:342:27: 342:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:342:37: 342:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb300: {
        switchInt(move _117) -> [0: bb302, otherwise: bb301]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:342:27: 342:46
    }

    bb301: {
        _0 = DecodedKey::Unicode(const 'C'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:343:21: 343:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:342:24: 346:18
    }

    bb302: {
        _0 = DecodedKey::Unicode(const 'c'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:345:21: 345:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:342:24: 346:18
    }

    bb303: {
        _119 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:349:20: 349:34
        switchInt(move _119) -> [0: bb304, otherwise: bb305]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:349:20: 349:57
    }

    bb304: {
        _118 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:349:20: 349:57
        goto -> bb306;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:349:20: 349:57
    }

    bb305: {
        _120 = Modifiers::is_ctrl(_3) -> [return: bb307, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:349:38: 349:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:349:48: 349:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb306: {
        switchInt(move _118) -> [0: bb309, otherwise: bb308]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:349:20: 349:57
    }

    bb307: {
        _118 = move _120;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:349:20: 349:57
        goto -> bb306;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:349:20: 349:57
    }

    bb308: {
        _0 = DecodedKey::Unicode(const '\u{16}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:350:21: 350:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:349:17: 355:18
    }

    bb309: {
        _121 = Modifiers::is_caps(_3) -> [return: bb310, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:351:27: 351:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:351:37: 351:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb310: {
        switchInt(move _121) -> [0: bb312, otherwise: bb311]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:351:27: 351:46
    }

    bb311: {
        _0 = DecodedKey::Unicode(const 'V'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:352:21: 352:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:351:24: 355:18
    }

    bb312: {
        _0 = DecodedKey::Unicode(const 'v'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:354:21: 354:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:351:24: 355:18
    }

    bb313: {
        _123 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:358:20: 358:34
        switchInt(move _123) -> [0: bb314, otherwise: bb315]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:358:20: 358:57
    }

    bb314: {
        _122 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:358:20: 358:57
        goto -> bb316;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:358:20: 358:57
    }

    bb315: {
        _124 = Modifiers::is_ctrl(_3) -> [return: bb317, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:358:38: 358:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:358:48: 358:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb316: {
        switchInt(move _122) -> [0: bb319, otherwise: bb318]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:358:20: 358:57
    }

    bb317: {
        _122 = move _124;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:358:20: 358:57
        goto -> bb316;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:358:20: 358:57
    }

    bb318: {
        _0 = DecodedKey::Unicode(const '\u{2}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:359:21: 359:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:358:17: 364:18
    }

    bb319: {
        _125 = Modifiers::is_caps(_3) -> [return: bb320, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:360:27: 360:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:360:37: 360:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb320: {
        switchInt(move _125) -> [0: bb322, otherwise: bb321]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:360:27: 360:46
    }

    bb321: {
        _0 = DecodedKey::Unicode(const 'B'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:361:21: 361:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:360:24: 364:18
    }

    bb322: {
        _0 = DecodedKey::Unicode(const 'b'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:363:21: 363:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:360:24: 364:18
    }

    bb323: {
        _127 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:367:20: 367:34
        switchInt(move _127) -> [0: bb324, otherwise: bb325]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:367:20: 367:57
    }

    bb324: {
        _126 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:367:20: 367:57
        goto -> bb326;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:367:20: 367:57
    }

    bb325: {
        _128 = Modifiers::is_ctrl(_3) -> [return: bb327, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:367:38: 367:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:367:48: 367:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb326: {
        switchInt(move _126) -> [0: bb329, otherwise: bb328]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:367:20: 367:57
    }

    bb327: {
        _126 = move _128;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:367:20: 367:57
        goto -> bb326;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:367:20: 367:57
    }

    bb328: {
        _0 = DecodedKey::Unicode(const '\u{b}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:368:21: 368:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:367:17: 373:18
    }

    bb329: {
        _129 = Modifiers::is_caps(_3) -> [return: bb330, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:369:27: 369:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:369:37: 369:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb330: {
        switchInt(move _129) -> [0: bb332, otherwise: bb331]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:369:27: 369:46
    }

    bb331: {
        _0 = DecodedKey::Unicode(const 'K'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:370:21: 370:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:369:24: 373:18
    }

    bb332: {
        _0 = DecodedKey::Unicode(const 'k'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:372:21: 372:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:369:24: 373:18
    }

    bb333: {
        _131 = _5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:376:20: 376:34
        switchInt(move _131) -> [0: bb334, otherwise: bb335]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:376:20: 376:57
    }

    bb334: {
        _130 = const false;              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:376:20: 376:57
        goto -> bb336;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:376:20: 376:57
    }

    bb335: {
        _132 = Modifiers::is_ctrl(_3) -> [return: bb337, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:376:38: 376:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:376:48: 376:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb336: {
        switchInt(move _130) -> [0: bb339, otherwise: bb338]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:376:20: 376:57
    }

    bb337: {
        _130 = move _132;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:376:20: 376:57
        goto -> bb336;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:376:20: 376:57
    }

    bb338: {
        _0 = DecodedKey::Unicode(const '\r'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:377:21: 377:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:376:17: 382:18
    }

    bb339: {
        _133 = Modifiers::is_caps(_3) -> [return: bb340, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:378:27: 378:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:378:37: 378:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb340: {
        switchInt(move _133) -> [0: bb342, otherwise: bb341]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:378:27: 378:46
    }

    bb341: {
        _0 = DecodedKey::Unicode(const 'M'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:379:21: 379:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:378:24: 382:18
    }

    bb342: {
        _0 = DecodedKey::Unicode(const 'm'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:381:21: 381:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:378:24: 382:18
    }

    bb343: {
        _134 = Modifiers::is_shifted(_3) -> [return: bb344, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:385:20: 385:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:385:30: 385:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb344: {
        switchInt(move _134) -> [0: bb346, otherwise: bb345]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:385:20: 385:42
    }

    bb345: {
        _0 = DecodedKey::Unicode(const '<'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:386:21: 386:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:385:17: 389:18
    }

    bb346: {
        _0 = DecodedKey::Unicode(const ','); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:388:21: 388:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:385:17: 389:18
    }

    bb347: {
        _135 = Modifiers::is_shifted(_3) -> [return: bb348, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:392:20: 392:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:392:30: 392:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb348: {
        switchInt(move _135) -> [0: bb350, otherwise: bb349]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:392:20: 392:42
    }

    bb349: {
        _0 = DecodedKey::Unicode(const '>'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:393:21: 393:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:392:17: 396:18
    }

    bb350: {
        _0 = DecodedKey::Unicode(const '.'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:395:21: 395:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:392:17: 396:18
    }

    bb351: {
        _136 = Modifiers::is_shifted(_3) -> [return: bb352, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:399:20: 399:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:399:30: 399:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb352: {
        switchInt(move _136) -> [0: bb354, otherwise: bb353]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:399:20: 399:42
    }

    bb353: {
        _0 = DecodedKey::Unicode(const '?'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:400:21: 400:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:399:17: 403:18
    }

    bb354: {
        _0 = DecodedKey::Unicode(const '/'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:402:21: 402:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:399:17: 403:18
    }

    bb355: {
        _0 = DecodedKey::Unicode(const ' '); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:405:34: 405:58
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:405:34: 405:58
    }

    bb356: {
        _137 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb357, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:406:52: 406:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:406:56: 406:60
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb357: {
        _0 = DecodedKey::Unicode(move _137); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:406:32: 406:63
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:406:62: 406:63
    }

    bb358: {
        _0 = DecodedKey::Unicode(const '/'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:407:38: 407:62
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:407:38: 407:62
    }

    bb359: {
        _0 = DecodedKey::Unicode(const '*'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:408:40: 408:64
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:408:40: 408:64
    }

    bb360: {
        _0 = DecodedKey::Unicode(const '-'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:409:40: 409:64
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:409:40: 409:64
    }

    bb361: {
        _138 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:411:20: 411:37
        switchInt(move _138) -> [0: bb363, otherwise: bb362]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:411:20: 411:37
    }

    bb362: {
        _0 = DecodedKey::Unicode(const '7'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:412:21: 412:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:411:17: 415:18
    }

    bb363: {
        _139 = KeyCode::Home;            // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:414:40: 414:53
        _0 = DecodedKey::RawKey(move _139); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:414:21: 414:54
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:411:17: 415:18
    }

    bb364: {
        _140 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:418:20: 418:37
        switchInt(move _140) -> [0: bb366, otherwise: bb365]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:418:20: 418:37
    }

    bb365: {
        _0 = DecodedKey::Unicode(const '8'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:419:21: 419:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:418:17: 422:18
    }

    bb366: {
        _141 = KeyCode::ArrowUp;         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:421:40: 421:56
        _0 = DecodedKey::RawKey(move _141); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:421:21: 421:57
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:418:17: 422:18
    }

    bb367: {
        _142 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:425:20: 425:37
        switchInt(move _142) -> [0: bb369, otherwise: bb368]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:425:20: 425:37
    }

    bb368: {
        _0 = DecodedKey::Unicode(const '9'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:426:21: 426:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:425:17: 429:18
    }

    bb369: {
        _143 = KeyCode::PageUp;          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:428:40: 428:55
        _0 = DecodedKey::RawKey(move _143); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:428:21: 428:56
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:425:17: 429:18
    }

    bb370: {
        _0 = DecodedKey::Unicode(const '+'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:431:35: 431:59
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:431:35: 431:59
    }

    bb371: {
        _144 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:433:20: 433:37
        switchInt(move _144) -> [0: bb373, otherwise: bb372]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:433:20: 433:37
    }

    bb372: {
        _0 = DecodedKey::Unicode(const '4'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:434:21: 434:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:433:17: 437:18
    }

    bb373: {
        _145 = KeyCode::ArrowLeft;       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:436:40: 436:58
        _0 = DecodedKey::RawKey(move _145); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:436:21: 436:59
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:433:17: 437:18
    }

    bb374: {
        _0 = DecodedKey::Unicode(const '5'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:439:33: 439:57
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:439:33: 439:57
    }

    bb375: {
        _146 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:441:20: 441:37
        switchInt(move _146) -> [0: bb377, otherwise: bb376]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:441:20: 441:37
    }

    bb376: {
        _0 = DecodedKey::Unicode(const '6'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:442:21: 442:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:441:17: 445:18
    }

    bb377: {
        _147 = KeyCode::ArrowRight;      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:444:40: 444:59
        _0 = DecodedKey::RawKey(move _147); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:444:21: 444:60
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:441:17: 445:18
    }

    bb378: {
        _148 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:448:20: 448:37
        switchInt(move _148) -> [0: bb380, otherwise: bb379]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:448:20: 448:37
    }

    bb379: {
        _0 = DecodedKey::Unicode(const '1'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:449:21: 449:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:448:17: 452:18
    }

    bb380: {
        _149 = KeyCode::End;             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:451:40: 451:52
        _0 = DecodedKey::RawKey(move _149); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:451:21: 451:53
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:448:17: 452:18
    }

    bb381: {
        _150 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:455:20: 455:37
        switchInt(move _150) -> [0: bb383, otherwise: bb382]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:455:20: 455:37
    }

    bb382: {
        _0 = DecodedKey::Unicode(const '2'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:456:21: 456:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:455:17: 459:18
    }

    bb383: {
        _151 = KeyCode::ArrowDown;       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:458:40: 458:58
        _0 = DecodedKey::RawKey(move _151); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:458:21: 458:59
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:455:17: 459:18
    }

    bb384: {
        _152 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:462:20: 462:37
        switchInt(move _152) -> [0: bb386, otherwise: bb385]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:462:20: 462:37
    }

    bb385: {
        _0 = DecodedKey::Unicode(const '3'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:463:21: 463:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:462:17: 466:18
    }

    bb386: {
        _153 = KeyCode::PageDown;        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:465:40: 465:57
        _0 = DecodedKey::RawKey(move _153); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:465:21: 465:58
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:462:17: 466:18
    }

    bb387: {
        _154 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:469:20: 469:37
        switchInt(move _154) -> [0: bb389, otherwise: bb388]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:469:20: 469:37
    }

    bb388: {
        _0 = DecodedKey::Unicode(const '0'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:470:21: 470:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:469:17: 473:18
    }

    bb389: {
        _155 = KeyCode::Insert;          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:472:40: 472:55
        _0 = DecodedKey::RawKey(move _155); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:472:21: 472:56
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:469:17: 473:18
    }

    bb390: {
        _156 = ((*_3).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:476:20: 476:37
        switchInt(move _156) -> [0: bb392, otherwise: bb391]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:476:20: 476:37
    }

    bb391: {
        _0 = DecodedKey::Unicode(const '.'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:477:21: 477:45
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:476:17: 480:18
    }

    bb392: {
        _157 = <u8 as Into<char>>::into(const 127_u8) -> [return: bb393, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:479:41: 479:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:479:45: 479:49
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb393: {
        _0 = DecodedKey::Unicode(move _157); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:479:21: 479:52
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:476:17: 480:18
    }

    bb394: {
        _158 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb395, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:482:57: 482:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:482:60: 482:64
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb395: {
        _0 = DecodedKey::Unicode(move _158); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:482:37: 482:67
        goto -> bb396;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:482:66: 482:67
    }

    bb396: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:485:6: 485:6
    }
}

promoted[0] in colemak::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:10:1: 10:32>::map_keycode: &HandleControl = {
    let mut _0: &HandleControl;          // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:45: 17:79
    let mut _1: HandleControl;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:45: 17:79

    bb0: {
        _1 = HandleControl::MapLettersToUnicode; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:45: 17:79
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:45: 17:79
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/colemak.rs:17:45: 17:79
    }
}

fn de105::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:12:1: 12:33>::map_keycode(_1: &De105Key, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:14:9: 14:14
    debug keycode => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:15:9: 15:16
    debug modifiers => _3;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:16:9: 16:18
    debug handle_ctrl => _4;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:17:9: 17:20
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:18:10: 18:20
    let _5: bool;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:13: 19:27
    let mut _6: &HandleControl;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:30: 19:41
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:21:13: 21:28
    let mut _8: char;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:21:52: 21:63
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:23:20: 23:42
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:30:20: 30:42
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:37:20: 37:42
    let mut _12: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:44:20: 44:42
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:51:20: 51:42
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:58:20: 58:42
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:65:20: 65:42
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:72:20: 72:42
    let mut _17: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:79:20: 79:42
    let mut _18: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:86:20: 86:42
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:93:20: 93:42
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:100:20: 100:42
    let mut _21: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:107:20: 107:42
    let mut _22: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:113:55: 113:66
    let mut _23: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:114:49: 114:60
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:116:20: 116:57
    let mut _25: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:116:20: 116:34
    let mut _26: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:116:38: 116:57
    let mut _27: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:118:27: 118:43
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:120:27: 120:46
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:127:20: 127:57
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:127:20: 127:34
    let mut _31: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:127:38: 127:57
    let mut _32: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:129:27: 129:43
    let mut _33: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:131:27: 131:46
    let mut _34: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:138:20: 138:57
    let mut _35: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:138:20: 138:34
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:138:38: 138:57
    let mut _37: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:140:27: 140:46
    let mut _38: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:147:20: 147:39
    let mut _39: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:154:20: 154:36
    let mut _40: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:156:27: 156:46
    let mut _41: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:162:52: 162:61
    let mut _42: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:164:20: 164:42
    let mut _43: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:171:20: 171:42
    let mut _44: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:178:20: 178:42
    let mut _45: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:185:20: 185:57
    let mut _46: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:185:20: 185:34
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:185:38: 185:57
    let mut _48: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:187:27: 187:46
    let mut _49: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:194:20: 194:42
    let mut _50: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:201:20: 201:42
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:208:20: 208:42
    let mut _52: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:215:20: 215:42
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:217:27: 217:43
    let mut _55: &layouts::us104::Us104Key; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:225:17: 225:58
    let mut _56: HandleControl;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:225:46: 225:57
    let mut _57: &HandleControl;         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:45: 19:79
    scope 1 {
        debug map_to_unicode => _5;      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:13: 19:27
        scope 2 {
            debug e => _2;               // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:223:13: 223:14
            let _54: layouts::us104::Us104Key; // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:224:21: 224:23
            scope 3 {
                debug us => const Us104Key; // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:224:21: 224:23
            }
        }
    }

    bb0: {
        _6 = &_4;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:30: 19:41
        _57 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:45: 19:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:45: 19:79
                                         // + literal: Const { ty: &HandleControl, val: Unevaluated(<De105Key as KeyboardLayout>::map_keycode, [], Some(promoted[0])) }
        _5 = <HandleControl as PartialEq>::eq(move _6, _57) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:30: 19:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:30: 19:79
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HandleControl, &'b HandleControl) -> bool {<HandleControl as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_2);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:20:15: 20:22
        switchInt(move _7) -> [0: bb3, 17: bb5, 18: bb9, 19: bb13, 20: bb17, 21: bb21, 22: bb25, 23: bb29, 24: bb33, 25: bb37, 26: bb41, 27: bb45, 28: bb49, 29: bb53, 30: bb57, 38: bb59, 39: bb61, 41: bb73, 44: bb85, 49: bb95, 50: bb99, 51: bb141, 52: bb107, 70: bb111, 71: bb115, 72: bb105, 77: bb119, 84: bb129, 85: bb133, 86: bb137, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:20:9: 20:22
    }

    bb2: {
        _55 = &_54;                      // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:225:17: 225:58
        _56 = _4;                        // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:225:46: 225:57
        _0 = <Us104Key as KeyboardLayout>::map_keycode(move _55, _2, _3, move _56) -> [return: bb147, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:225:17: 225:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:225:20: 225:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Us104Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Us104Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = <u8 as Into<char>>::into(const 27_u8) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:21:52: 21:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:21:57: 21:61
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = DecodedKey::Unicode(move _8); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:21:32: 21:64
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:21:63: 21:64
    }

    bb5: {
        _9 = Modifiers::is_shifted(_3) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:23:20: 23:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:23:30: 23:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _9) -> [0: bb8, otherwise: bb7]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:23:20: 23:42
    }

    bb7: {
        _0 = DecodedKey::Unicode(const '°'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:24:21: 24:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:23:17: 27:18
    }

    bb8: {
        _0 = DecodedKey::Unicode(const '^'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:26:21: 26:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:23:17: 27:18
    }

    bb9: {
        _10 = Modifiers::is_shifted(_3) -> [return: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:30:20: 30:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:30:30: 30:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _10) -> [0: bb12, otherwise: bb11]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:30:20: 30:42
    }

    bb11: {
        _0 = DecodedKey::Unicode(const '!'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:31:21: 31:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:30:17: 34:18
    }

    bb12: {
        _0 = DecodedKey::Unicode(const '1'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:33:21: 33:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:30:17: 34:18
    }

    bb13: {
        _11 = Modifiers::is_shifted(_3) -> [return: bb14, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:37:20: 37:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:37:30: 37:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb14: {
        switchInt(move _11) -> [0: bb16, otherwise: bb15]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:37:20: 37:42
    }

    bb15: {
        _0 = DecodedKey::Unicode(const '"'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:38:21: 38:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:37:17: 41:18
    }

    bb16: {
        _0 = DecodedKey::Unicode(const '2'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:40:21: 40:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:37:17: 41:18
    }

    bb17: {
        _12 = Modifiers::is_shifted(_3) -> [return: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:44:20: 44:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:44:30: 44:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(move _12) -> [0: bb20, otherwise: bb19]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:44:20: 44:42
    }

    bb19: {
        _0 = DecodedKey::Unicode(const '§'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:45:21: 45:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:44:17: 48:18
    }

    bb20: {
        _0 = DecodedKey::Unicode(const '3'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:47:21: 47:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:44:17: 48:18
    }

    bb21: {
        _13 = Modifiers::is_shifted(_3) -> [return: bb22, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:51:20: 51:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:51:30: 51:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb22: {
        switchInt(move _13) -> [0: bb24, otherwise: bb23]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:51:20: 51:42
    }

    bb23: {
        _0 = DecodedKey::Unicode(const '$'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:52:21: 52:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:51:17: 55:18
    }

    bb24: {
        _0 = DecodedKey::Unicode(const '4'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:54:21: 54:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:51:17: 55:18
    }

    bb25: {
        _14 = Modifiers::is_shifted(_3) -> [return: bb26, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:58:20: 58:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:58:30: 58:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb26: {
        switchInt(move _14) -> [0: bb28, otherwise: bb27]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:58:20: 58:42
    }

    bb27: {
        _0 = DecodedKey::Unicode(const '%'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:59:21: 59:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:58:17: 62:18
    }

    bb28: {
        _0 = DecodedKey::Unicode(const '5'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:61:21: 61:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:58:17: 62:18
    }

    bb29: {
        _15 = Modifiers::is_shifted(_3) -> [return: bb30, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:65:20: 65:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:65:30: 65:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb30: {
        switchInt(move _15) -> [0: bb32, otherwise: bb31]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:65:20: 65:42
    }

    bb31: {
        _0 = DecodedKey::Unicode(const '&'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:66:21: 66:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:65:17: 69:18
    }

    bb32: {
        _0 = DecodedKey::Unicode(const '6'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:68:21: 68:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:65:17: 69:18
    }

    bb33: {
        _16 = Modifiers::is_shifted(_3) -> [return: bb34, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:72:20: 72:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:72:30: 72:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb34: {
        switchInt(move _16) -> [0: bb36, otherwise: bb35]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:72:20: 72:42
    }

    bb35: {
        _0 = DecodedKey::Unicode(const '/'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:73:21: 73:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:72:17: 76:18
    }

    bb36: {
        _0 = DecodedKey::Unicode(const '7'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:75:21: 75:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:72:17: 76:18
    }

    bb37: {
        _17 = Modifiers::is_shifted(_3) -> [return: bb38, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:79:20: 79:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:79:30: 79:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb38: {
        switchInt(move _17) -> [0: bb40, otherwise: bb39]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:79:20: 79:42
    }

    bb39: {
        _0 = DecodedKey::Unicode(const '('); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:80:21: 80:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:79:17: 83:18
    }

    bb40: {
        _0 = DecodedKey::Unicode(const '8'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:82:21: 82:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:79:17: 83:18
    }

    bb41: {
        _18 = Modifiers::is_shifted(_3) -> [return: bb42, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:86:20: 86:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:86:30: 86:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb42: {
        switchInt(move _18) -> [0: bb44, otherwise: bb43]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:86:20: 86:42
    }

    bb43: {
        _0 = DecodedKey::Unicode(const ')'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:87:21: 87:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:86:17: 90:18
    }

    bb44: {
        _0 = DecodedKey::Unicode(const '9'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:89:21: 89:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:86:17: 90:18
    }

    bb45: {
        _19 = Modifiers::is_shifted(_3) -> [return: bb46, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:93:20: 93:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:93:30: 93:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb46: {
        switchInt(move _19) -> [0: bb48, otherwise: bb47]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:93:20: 93:42
    }

    bb47: {
        _0 = DecodedKey::Unicode(const '='); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:94:21: 94:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:93:17: 97:18
    }

    bb48: {
        _0 = DecodedKey::Unicode(const '0'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:96:21: 96:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:93:17: 97:18
    }

    bb49: {
        _20 = Modifiers::is_shifted(_3) -> [return: bb50, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:100:20: 100:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:100:30: 100:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb50: {
        switchInt(move _20) -> [0: bb52, otherwise: bb51]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:100:20: 100:42
    }

    bb51: {
        _0 = DecodedKey::Unicode(const '?'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:101:21: 101:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:100:17: 104:18
    }

    bb52: {
        _0 = DecodedKey::Unicode(const 'ß'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:103:21: 103:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:100:17: 104:18
    }

    bb53: {
        _21 = Modifiers::is_shifted(_3) -> [return: bb54, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:107:20: 107:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:107:30: 107:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb54: {
        switchInt(move _21) -> [0: bb56, otherwise: bb55]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:107:20: 107:42
    }

    bb55: {
        _0 = DecodedKey::Unicode(const '`'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:108:21: 108:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:107:17: 111:18
    }

    bb56: {
        _0 = DecodedKey::Unicode(const '´'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:110:21: 110:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:107:17: 111:18
    }

    bb57: {
        _22 = <u8 as Into<char>>::into(const 8_u8) -> [return: bb58, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:113:55: 113:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:113:60: 113:64
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb58: {
        _0 = DecodedKey::Unicode(move _22); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:113:35: 113:67
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:113:66: 113:67
    }

    bb59: {
        _23 = <u8 as Into<char>>::into(const 9_u8) -> [return: bb60, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:114:49: 114:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:114:54: 114:58
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb60: {
        _0 = DecodedKey::Unicode(move _23); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:114:29: 114:61
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:114:60: 114:61
    }

    bb61: {
        _25 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:116:20: 116:34
        switchInt(move _25) -> [0: bb62, otherwise: bb63]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:116:20: 116:57
    }

    bb62: {
        _24 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:116:20: 116:57
        goto -> bb64;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:116:20: 116:57
    }

    bb63: {
        _26 = Modifiers::is_ctrl(_3) -> [return: bb65, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:116:38: 116:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:116:48: 116:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb64: {
        switchInt(move _24) -> [0: bb67, otherwise: bb66]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:116:20: 116:57
    }

    bb65: {
        _24 = move _26;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:116:20: 116:57
        goto -> bb64;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:116:20: 116:57
    }

    bb66: {
        _0 = DecodedKey::Unicode(const '\u{11}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:117:21: 117:52
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:116:17: 124:18
    }

    bb67: {
        _27 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:118:27: 118:43
        switchInt(move _27) -> [0: bb69, otherwise: bb68]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:118:27: 118:43
    }

    bb68: {
        _0 = DecodedKey::Unicode(const '@'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:119:21: 119:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:118:24: 124:18
    }

    bb69: {
        _28 = Modifiers::is_caps(_3) -> [return: bb70, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:120:27: 120:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:120:37: 120:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb70: {
        switchInt(move _28) -> [0: bb72, otherwise: bb71]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:120:27: 120:46
    }

    bb71: {
        _0 = DecodedKey::Unicode(const 'Q'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:121:21: 121:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:120:24: 124:18
    }

    bb72: {
        _0 = DecodedKey::Unicode(const 'q'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:123:21: 123:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:120:24: 124:18
    }

    bb73: {
        _30 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:127:20: 127:34
        switchInt(move _30) -> [0: bb74, otherwise: bb75]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:127:20: 127:57
    }

    bb74: {
        _29 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:127:20: 127:57
        goto -> bb76;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:127:20: 127:57
    }

    bb75: {
        _31 = Modifiers::is_ctrl(_3) -> [return: bb77, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:127:38: 127:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:127:48: 127:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb76: {
        switchInt(move _29) -> [0: bb79, otherwise: bb78]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:127:20: 127:57
    }

    bb77: {
        _29 = move _31;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:127:20: 127:57
        goto -> bb76;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:127:20: 127:57
    }

    bb78: {
        _0 = DecodedKey::Unicode(const '\u{5}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:128:21: 128:52
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:127:17: 135:18
    }

    bb79: {
        _32 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:129:27: 129:43
        switchInt(move _32) -> [0: bb81, otherwise: bb80]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:129:27: 129:43
    }

    bb80: {
        _0 = DecodedKey::Unicode(const '€'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:130:21: 130:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:129:24: 135:18
    }

    bb81: {
        _33 = Modifiers::is_caps(_3) -> [return: bb82, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:131:27: 131:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:131:37: 131:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb82: {
        switchInt(move _33) -> [0: bb84, otherwise: bb83]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:131:27: 131:46
    }

    bb83: {
        _0 = DecodedKey::Unicode(const 'E'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:132:21: 132:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:131:24: 135:18
    }

    bb84: {
        _0 = DecodedKey::Unicode(const 'e'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:134:21: 134:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:131:24: 135:18
    }

    bb85: {
        _35 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:138:20: 138:34
        switchInt(move _35) -> [0: bb86, otherwise: bb87]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:138:20: 138:57
    }

    bb86: {
        _34 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:138:20: 138:57
        goto -> bb88;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:138:20: 138:57
    }

    bb87: {
        _36 = Modifiers::is_ctrl(_3) -> [return: bb89, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:138:38: 138:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:138:48: 138:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb88: {
        switchInt(move _34) -> [0: bb91, otherwise: bb90]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:138:20: 138:57
    }

    bb89: {
        _34 = move _36;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:138:20: 138:57
        goto -> bb88;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:138:20: 138:57
    }

    bb90: {
        _0 = DecodedKey::Unicode(const '\u{14}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:139:21: 139:52
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:138:17: 144:18
    }

    bb91: {
        _37 = Modifiers::is_caps(_3) -> [return: bb92, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:140:27: 140:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:140:37: 140:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb92: {
        switchInt(move _37) -> [0: bb94, otherwise: bb93]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:140:27: 140:46
    }

    bb93: {
        _0 = DecodedKey::Unicode(const 'Z'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:141:21: 141:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:140:24: 144:18
    }

    bb94: {
        _0 = DecodedKey::Unicode(const 'z'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:143:21: 143:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:140:24: 144:18
    }

    bb95: {
        _38 = Modifiers::is_caps(_3) -> [return: bb96, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:147:20: 147:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:147:30: 147:37
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb96: {
        switchInt(move _38) -> [0: bb98, otherwise: bb97]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:147:20: 147:39
    }

    bb97: {
        _0 = DecodedKey::Unicode(const 'Ü'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:148:21: 148:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:147:17: 151:18
    }

    bb98: {
        _0 = DecodedKey::Unicode(const 'ü'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:150:21: 150:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:147:17: 151:18
    }

    bb99: {
        _39 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:154:20: 154:36
        switchInt(move _39) -> [0: bb101, otherwise: bb100]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:154:20: 154:36
    }

    bb100: {
        _0 = DecodedKey::Unicode(const '~'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:155:21: 155:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:154:17: 160:18
    }

    bb101: {
        _40 = Modifiers::is_caps(_3) -> [return: bb102, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:156:27: 156:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:156:37: 156:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb102: {
        switchInt(move _40) -> [0: bb104, otherwise: bb103]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:156:27: 156:46
    }

    bb103: {
        _0 = DecodedKey::Unicode(const '*'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:157:21: 157:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:156:24: 160:18
    }

    bb104: {
        _0 = DecodedKey::Unicode(const '+'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:159:21: 159:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:156:24: 160:18
    }

    bb105: {
        _41 = <u8 as Into<char>>::into(const 10_u8) -> [return: bb106, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:162:52: 162:61
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:162:55: 162:59
                                         // + literal: Const { ty: fn(u8) -> char {<u8 as Into<char>>::into}, val: Value(<ZST>) }
    }

    bb106: {
        _0 = DecodedKey::Unicode(move _41); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:162:32: 162:62
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:162:61: 162:62
    }

    bb107: {
        _42 = Modifiers::is_shifted(_3) -> [return: bb108, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:164:20: 164:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:164:30: 164:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb108: {
        switchInt(move _42) -> [0: bb110, otherwise: bb109]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:164:20: 164:42
    }

    bb109: {
        _0 = DecodedKey::Unicode(const '\''); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:165:21: 165:46
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:164:17: 168:18
    }

    bb110: {
        _0 = DecodedKey::Unicode(const '#'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:167:21: 167:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:164:17: 168:18
    }

    bb111: {
        _43 = Modifiers::is_shifted(_3) -> [return: bb112, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:171:20: 171:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:171:30: 171:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb112: {
        switchInt(move _43) -> [0: bb114, otherwise: bb113]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:171:20: 171:42
    }

    bb113: {
        _0 = DecodedKey::Unicode(const 'Ö'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:172:21: 172:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:171:17: 175:18
    }

    bb114: {
        _0 = DecodedKey::Unicode(const 'ö'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:174:21: 174:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:171:17: 175:18
    }

    bb115: {
        _44 = Modifiers::is_shifted(_3) -> [return: bb116, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:178:20: 178:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:178:30: 178:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb116: {
        switchInt(move _44) -> [0: bb118, otherwise: bb117]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:178:20: 178:42
    }

    bb117: {
        _0 = DecodedKey::Unicode(const 'Ä'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:179:21: 179:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:178:17: 182:18
    }

    bb118: {
        _0 = DecodedKey::Unicode(const 'ä'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:181:21: 181:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:178:17: 182:18
    }

    bb119: {
        _46 = _5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:185:20: 185:34
        switchInt(move _46) -> [0: bb120, otherwise: bb121]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:185:20: 185:57
    }

    bb120: {
        _45 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:185:20: 185:57
        goto -> bb122;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:185:20: 185:57
    }

    bb121: {
        _47 = Modifiers::is_ctrl(_3) -> [return: bb123, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:185:38: 185:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:185:48: 185:55
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_ctrl}, val: Value(<ZST>) }
    }

    bb122: {
        switchInt(move _45) -> [0: bb125, otherwise: bb124]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:185:20: 185:57
    }

    bb123: {
        _45 = move _47;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:185:20: 185:57
        goto -> bb122;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:185:20: 185:57
    }

    bb124: {
        _0 = DecodedKey::Unicode(const '\u{1a}'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:186:21: 186:52
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:185:17: 191:18
    }

    bb125: {
        _48 = Modifiers::is_caps(_3) -> [return: bb126, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:187:27: 187:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:187:37: 187:44
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_caps}, val: Value(<ZST>) }
    }

    bb126: {
        switchInt(move _48) -> [0: bb128, otherwise: bb127]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:187:27: 187:46
    }

    bb127: {
        _0 = DecodedKey::Unicode(const 'Y'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:188:21: 188:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:187:24: 191:18
    }

    bb128: {
        _0 = DecodedKey::Unicode(const 'y'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:190:21: 190:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:187:24: 191:18
    }

    bb129: {
        _49 = Modifiers::is_shifted(_3) -> [return: bb130, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:194:20: 194:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:194:30: 194:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb130: {
        switchInt(move _49) -> [0: bb132, otherwise: bb131]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:194:20: 194:42
    }

    bb131: {
        _0 = DecodedKey::Unicode(const ';'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:195:21: 195:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:194:17: 198:18
    }

    bb132: {
        _0 = DecodedKey::Unicode(const ','); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:197:21: 197:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:194:17: 198:18
    }

    bb133: {
        _50 = Modifiers::is_shifted(_3) -> [return: bb134, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:201:20: 201:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:201:30: 201:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb134: {
        switchInt(move _50) -> [0: bb136, otherwise: bb135]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:201:20: 201:42
    }

    bb135: {
        _0 = DecodedKey::Unicode(const ':'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:202:21: 202:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:201:17: 205:18
    }

    bb136: {
        _0 = DecodedKey::Unicode(const '.'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:204:21: 204:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:201:17: 205:18
    }

    bb137: {
        _51 = Modifiers::is_shifted(_3) -> [return: bb138, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:208:20: 208:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:208:30: 208:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb138: {
        switchInt(move _51) -> [0: bb140, otherwise: bb139]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:208:20: 208:42
    }

    bb139: {
        _0 = DecodedKey::Unicode(const '_'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:209:21: 209:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:208:17: 212:18
    }

    bb140: {
        _0 = DecodedKey::Unicode(const '-'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:211:21: 211:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:208:17: 212:18
    }

    bb141: {
        _52 = Modifiers::is_shifted(_3) -> [return: bb142, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:215:20: 215:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:215:30: 215:40
                                         // + literal: Const { ty: for<'a> fn(&'a Modifiers) -> bool {Modifiers::is_shifted}, val: Value(<ZST>) }
    }

    bb142: {
        switchInt(move _52) -> [0: bb144, otherwise: bb143]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:215:20: 215:42
    }

    bb143: {
        _0 = DecodedKey::Unicode(const '>'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:216:21: 216:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:215:17: 221:18
    }

    bb144: {
        _53 = ((*_3).6: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:217:27: 217:43
        switchInt(move _53) -> [0: bb146, otherwise: bb145]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:217:27: 217:43
    }

    bb145: {
        _0 = DecodedKey::Unicode(const '|'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:218:21: 218:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:217:24: 221:18
    }

    bb146: {
        _0 = DecodedKey::Unicode(const '<'); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:220:21: 220:45
        goto -> bb147;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:217:24: 221:18
    }

    bb147: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:228:6: 228:6
    }
}

promoted[0] in de105::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:12:1: 12:33>::map_keycode: &HandleControl = {
    let mut _0: &HandleControl;          // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:45: 19:79
    let mut _1: HandleControl;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:45: 19:79

    bb0: {
        _1 = HandleControl::MapLettersToUnicode; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:45: 19:79
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:45: 19:79
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/de105.rs:19:45: 19:79
    }
}

fn layouts::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:43:1: 43:41>::map_keycode(_1: &AnyLayout, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:45:9: 45:14
    debug keycode => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:46:9: 46:16
    debug modifiers => _3;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:47:9: 47:18
    debug handle_ctrl => _4;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:48:9: 48:20
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:49:10: 49:27
    let mut _5: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:51:13: 51:40
    let _6: &layouts::dvorak_programmer104::DVP104Key; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:51:34: 51:39
    let _7: &layouts::dvorak104::Dvorak104Key; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:52:37: 52:42
    let _8: &layouts::us104::Us104Key;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:53:33: 53:38
    let _9: &layouts::uk105::Uk105Key;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:54:33: 54:38
    let _10: &layouts::jis109::Jis109Key; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:55:34: 55:39
    let _11: &layouts::azerty::Azerty;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:56:31: 56:36
    let _12: &layouts::colemak::Colemak; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:57:32: 57:37
    let _13: &layouts::de105::De105Key;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:58:33: 58:38
    scope 1 {
        debug inner => _6;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:51:34: 51:39
    }
    scope 2 {
        debug inner => _7;               // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:52:37: 52:42
    }
    scope 3 {
        debug inner => _8;               // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:53:33: 53:38
    }
    scope 4 {
        debug inner => _9;               // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:54:33: 54:38
    }
    scope 5 {
        debug inner => _10;              // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:55:34: 55:39
    }
    scope 6 {
        debug inner => _11;              // in scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:56:31: 56:36
    }
    scope 7 {
        debug inner => _12;              // in scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:57:32: 57:37
    }
    scope 8 {
        debug inner => _13;              // in scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:58:33: 58:38
    }

    bb0: {
        _5 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:50:15: 50:19
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:50:9: 50:19
    }

    bb1: {
        _13 = &(((*_1) as De105Key).0: layouts::de105::De105Key); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:58:33: 58:38
        _0 = <De105Key as KeyboardLayout>::map_keycode(_13, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:58:43: 58:93
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:58:49: 58:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a De105Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<De105Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:50:15: 50:19
    }

    bb3: {
        _6 = &(((*_1) as DVP104Key).0: layouts::dvorak_programmer104::DVP104Key); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:51:34: 51:39
        _0 = <DVP104Key as KeyboardLayout>::map_keycode(_6, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:51:44: 51:94
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:51:50: 51:61
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a DVP104Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<DVP104Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = &(((*_1) as Dvorak104Key).0: layouts::dvorak104::Dvorak104Key); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:52:37: 52:42
        _0 = <Dvorak104Key as KeyboardLayout>::map_keycode(_7, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:52:47: 52:97
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:52:53: 52:64
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Dvorak104Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Dvorak104Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = &(((*_1) as Us104Key).0: layouts::us104::Us104Key); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:53:33: 53:38
        _0 = <Us104Key as KeyboardLayout>::map_keycode(_8, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:53:43: 53:93
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:53:49: 53:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Us104Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Us104Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = &(((*_1) as Uk105Key).0: layouts::uk105::Uk105Key); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:54:33: 54:38
        _0 = <Uk105Key as KeyboardLayout>::map_keycode(_9, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:54:43: 54:93
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:54:49: 54:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Uk105Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Uk105Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = &(((*_1) as Jis109Key).0: layouts::jis109::Jis109Key); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:55:34: 55:39
        _0 = <Jis109Key as KeyboardLayout>::map_keycode(_10, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:55:44: 55:94
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:55:50: 55:61
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Jis109Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Jis109Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb8: {
        _11 = &(((*_1) as Azerty).0: layouts::azerty::Azerty); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:56:31: 56:36
        _0 = <Azerty as KeyboardLayout>::map_keycode(_11, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:56:41: 56:91
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:56:47: 56:58
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Azerty, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Azerty as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb9: {
        _12 = &(((*_1) as Colemak).0: layouts::colemak::Colemak); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:57:32: 57:37
        _0 = <Colemak as KeyboardLayout>::map_keycode(_12, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:57:42: 57:92
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:57:48: 57:59
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Colemak, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Colemak as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:60:6: 60:6
    }
}

fn layouts::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:63:1: 63:42>::map_keycode(_1: &&AnyLayout, _2: KeyCode, _3: &Modifiers, _4: HandleControl) -> DecodedKey {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:65:9: 65:14
    debug keycode => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:66:9: 66:16
    debug modifiers => _3;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:67:9: 67:18
    debug handle_ctrl => _4;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:68:9: 68:20
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:69:10: 69:27
    let mut _5: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:71:13: 71:40
    let _6: &layouts::dvorak_programmer104::DVP104Key; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:71:34: 71:39
    let _7: &layouts::dvorak104::Dvorak104Key; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:72:37: 72:42
    let _8: &layouts::us104::Us104Key;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:73:33: 73:38
    let _9: &layouts::uk105::Uk105Key;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:74:33: 74:38
    let _10: &layouts::jis109::Jis109Key; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:75:34: 75:39
    let _11: &layouts::azerty::Azerty;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:76:31: 76:36
    let _12: &layouts::colemak::Colemak; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:77:32: 77:37
    let _13: &layouts::de105::De105Key;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:78:33: 78:38
    let mut _14: &layouts::AnyLayout;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:65:9: 65:14
    let mut _15: &layouts::AnyLayout;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:65:9: 65:14
    let mut _16: &layouts::AnyLayout;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:65:9: 65:14
    let mut _17: &layouts::AnyLayout;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:65:9: 65:14
    let mut _18: &layouts::AnyLayout;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:65:9: 65:14
    let mut _19: &layouts::AnyLayout;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:65:9: 65:14
    let mut _20: &layouts::AnyLayout;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:65:9: 65:14
    let mut _21: &layouts::AnyLayout;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:65:9: 65:14
    let mut _22: &layouts::AnyLayout;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:65:9: 65:14
    scope 1 {
        debug inner => _6;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:71:34: 71:39
    }
    scope 2 {
        debug inner => _7;               // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:72:37: 72:42
    }
    scope 3 {
        debug inner => _8;               // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:73:33: 73:38
    }
    scope 4 {
        debug inner => _9;               // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:74:33: 74:38
    }
    scope 5 {
        debug inner => _10;              // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:75:34: 75:39
    }
    scope 6 {
        debug inner => _11;              // in scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:76:31: 76:36
    }
    scope 7 {
        debug inner => _12;              // in scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:77:32: 77:37
    }
    scope 8 {
        debug inner => _13;              // in scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:78:33: 78:38
    }

    bb0: {
        _14 = deref_copy (*_1);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:70:15: 70:19
        _5 = discriminant((*_14));       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:70:15: 70:19
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:70:9: 70:19
    }

    bb1: {
        _15 = deref_copy (*_1);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:78:33: 78:38
        _13 = &(((*_15) as De105Key).0: layouts::de105::De105Key); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:78:33: 78:38
        _0 = <De105Key as KeyboardLayout>::map_keycode(_13, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:78:43: 78:93
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:78:49: 78:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a De105Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<De105Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:70:15: 70:19
    }

    bb3: {
        _16 = deref_copy (*_1);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:71:34: 71:39
        _6 = &(((*_16) as DVP104Key).0: layouts::dvorak_programmer104::DVP104Key); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:71:34: 71:39
        _0 = <DVP104Key as KeyboardLayout>::map_keycode(_6, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:71:44: 71:94
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:71:50: 71:61
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a DVP104Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<DVP104Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb4: {
        _17 = deref_copy (*_1);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:72:37: 72:42
        _7 = &(((*_17) as Dvorak104Key).0: layouts::dvorak104::Dvorak104Key); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:72:37: 72:42
        _0 = <Dvorak104Key as KeyboardLayout>::map_keycode(_7, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:72:47: 72:97
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:72:53: 72:64
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Dvorak104Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Dvorak104Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = deref_copy (*_1);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:73:33: 73:38
        _8 = &(((*_18) as Us104Key).0: layouts::us104::Us104Key); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:73:33: 73:38
        _0 = <Us104Key as KeyboardLayout>::map_keycode(_8, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:73:43: 73:93
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:73:49: 73:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Us104Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Us104Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb6: {
        _19 = deref_copy (*_1);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:74:33: 74:38
        _9 = &(((*_19) as Uk105Key).0: layouts::uk105::Uk105Key); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:74:33: 74:38
        _0 = <Uk105Key as KeyboardLayout>::map_keycode(_9, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:74:43: 74:93
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:74:49: 74:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Uk105Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Uk105Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb7: {
        _20 = deref_copy (*_1);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:75:34: 75:39
        _10 = &(((*_20) as Jis109Key).0: layouts::jis109::Jis109Key); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:75:34: 75:39
        _0 = <Jis109Key as KeyboardLayout>::map_keycode(_10, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:75:44: 75:94
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:75:50: 75:61
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Jis109Key, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Jis109Key as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb8: {
        _21 = deref_copy (*_1);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:76:31: 76:36
        _11 = &(((*_21) as Azerty).0: layouts::azerty::Azerty); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:76:31: 76:36
        _0 = <Azerty as KeyboardLayout>::map_keycode(_11, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:76:41: 76:91
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:76:47: 76:58
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Azerty, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Azerty as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = deref_copy (*_1);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:77:32: 77:37
        _12 = &(((*_22) as Colemak).0: layouts::colemak::Colemak); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:77:32: 77:37
        _0 = <Colemak as KeyboardLayout>::map_keycode(_12, _2, _3, _4) -> [return: bb10, unwind unreachable]; // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:77:42: 77:92
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:77:48: 77:59
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Colemak, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<Colemak as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:80:6: 80:6
    }
}

fn set1::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:15:1: 15:18>::new() -> ScancodeSet1 {
    let mut _0: scancodes::set1::ScancodeSet1; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:17:27: 17:39
    let mut _1: DecodeState;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:19:20: 19:38

    bb0: {
        _1 = DecodeState::Start;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:19:20: 19:38
        _0 = ScancodeSet1 { state: move _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:18:9: 20:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:21:6: 21:6
    }
}

// MIR FOR CTFE
fn set1::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:15:1: 15:18>::new() -> ScancodeSet1 {
    let mut _0: scancodes::set1::ScancodeSet1; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:17:27: 17:39
    let mut _1: DecodeState;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:19:20: 19:38

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:19:20: 19:38
        _1 = DecodeState::Start;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:19:20: 19:38
        _0 = ScancodeSet1 { state: move _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:18:9: 20:10
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:20:9: 20:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:21:6: 21:6
    }
}

fn set1::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:15:1: 15:18>::map_scancode(_1: u8) -> Result<KeyCode, Error> {
    debug code => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:24:21: 24:25
    let mut _0: core::result::Result<KeyCode, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:24:34: 24:56
    let mut _2: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:26:24: 26:39
    let mut _3: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:27:24: 27:37
    let mut _4: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:28:24: 28:37
    let mut _5: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:29:24: 29:37
    let mut _6: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:30:24: 30:37
    let mut _7: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:31:24: 31:37
    let mut _8: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:32:24: 32:37
    let mut _9: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:33:24: 33:37
    let mut _10: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:34:24: 34:37
    let mut _11: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:35:24: 35:37
    let mut _12: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:36:24: 36:37
    let mut _13: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:37:24: 37:41
    let mut _14: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:38:24: 38:40
    let mut _15: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:39:24: 39:42
    let mut _16: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:40:24: 40:36
    let mut _17: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:41:24: 41:34
    let mut _18: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:42:24: 42:34
    let mut _19: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:43:24: 43:34
    let mut _20: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:44:24: 44:34
    let mut _21: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:45:24: 45:34
    let mut _22: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:46:24: 46:34
    let mut _23: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:47:24: 47:34
    let mut _24: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:48:24: 48:34
    let mut _25: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:49:24: 49:34
    let mut _26: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:50:24: 50:34
    let mut _27: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:51:24: 51:37
    let mut _28: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:52:24: 52:37
    let mut _29: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:53:24: 53:39
    let mut _30: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:54:24: 54:41
    let mut _31: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:55:24: 55:34
    let mut _32: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:56:24: 56:34
    let mut _33: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:57:24: 57:34
    let mut _34: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:58:24: 58:34
    let mut _35: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:59:24: 59:34
    let mut _36: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:60:24: 60:34
    let mut _37: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:61:24: 61:34
    let mut _38: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:62:24: 62:34
    let mut _39: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:63:24: 63:34
    let mut _40: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:64:24: 64:37
    let mut _41: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:65:24: 65:37
    let mut _42: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:66:24: 66:37
    let mut _43: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:67:24: 67:39
    let mut _44: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:68:24: 68:37
    let mut _45: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:69:24: 69:34
    let mut _46: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:70:24: 70:34
    let mut _47: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:71:24: 71:34
    let mut _48: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:72:24: 72:34
    let mut _49: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:73:24: 73:34
    let mut _50: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:74:24: 74:34
    let mut _51: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:75:24: 75:34
    let mut _52: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:76:24: 76:41
    let mut _53: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:77:24: 77:42
    let mut _54: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:78:24: 78:37
    let mut _55: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:79:24: 79:39
    let mut _56: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:80:24: 80:47
    let mut _57: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:81:24: 81:37
    let mut _58: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:82:24: 82:41
    let mut _59: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:83:24: 83:41
    let mut _60: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:84:24: 84:35
    let mut _61: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:85:24: 85:35
    let mut _62: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:86:24: 86:35
    let mut _63: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:87:24: 87:35
    let mut _64: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:88:24: 88:35
    let mut _65: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:89:24: 89:35
    let mut _66: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:90:24: 90:35
    let mut _67: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:91:24: 91:35
    let mut _68: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:92:24: 92:35
    let mut _69: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:93:24: 93:36
    let mut _70: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:94:24: 94:43
    let mut _71: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:95:24: 95:43
    let mut _72: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:96:24: 96:40
    let mut _73: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:97:24: 97:40
    let mut _74: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:98:24: 98:40
    let mut _75: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:99:24: 99:47
    let mut _76: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:100:24: 100:40
    let mut _77: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:101:24: 101:40
    let mut _78: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:102:24: 102:40
    let mut _79: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:103:24: 103:42
    let mut _80: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:104:24: 104:40
    let mut _81: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:105:24: 105:40
    let mut _82: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:106:24: 106:40
    let mut _83: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:107:24: 107:40
    let mut _84: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:108:24: 108:45
    let mut _85: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:109:24: 109:38
    let mut _86: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:111:24: 111:37
    let mut _87: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:112:24: 112:36
    let mut _88: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:113:24: 113:36
    let mut _89: Error;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:114:22: 114:43

    bb0: {
        switchInt(_1) -> [1: bb2, 2: bb3, 3: bb4, 4: bb5, 5: bb6, 6: bb7, 7: bb8, 8: bb9, 9: bb10, 10: bb11, 11: bb12, 12: bb13, 13: bb14, 14: bb15, 15: bb16, 16: bb17, 17: bb18, 18: bb19, 19: bb20, 20: bb21, 21: bb22, 22: bb23, 23: bb24, 24: bb25, 25: bb26, 26: bb27, 27: bb28, 28: bb29, 29: bb30, 30: bb31, 31: bb32, 32: bb33, 33: bb34, 34: bb35, 35: bb36, 36: bb37, 37: bb38, 38: bb39, 39: bb40, 40: bb41, 41: bb42, 42: bb43, 43: bb44, 44: bb45, 45: bb46, 46: bb47, 47: bb48, 48: bb49, 49: bb50, 50: bb51, 51: bb52, 52: bb53, 53: bb54, 54: bb55, 55: bb56, 56: bb57, 57: bb58, 58: bb59, 59: bb60, 60: bb61, 61: bb62, 62: bb63, 63: bb64, 64: bb65, 65: bb66, 66: bb67, 67: bb68, 68: bb69, 69: bb70, 70: bb71, 71: bb72, 72: bb73, 73: bb74, 74: bb75, 75: bb76, 76: bb77, 77: bb78, 78: bb79, 79: bb80, 80: bb81, 81: bb82, 82: bb83, 83: bb84, 84: bb85, 86: bb86, 87: bb87, 88: bb88, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:25:9: 25:19
    }

    bb1: {
        _89 = Error::UnknownKeyCode;     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:114:22: 114:43
        _0 = Result::<KeyCode, Error>::Err(move _89); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:114:18: 114:44
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:114:43: 114:44
    }

    bb2: {
        _2 = KeyCode::Escape;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:26:24: 26:39
        _0 = Result::<KeyCode, Error>::Ok(move _2); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:26:21: 26:40
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:26:39: 26:40
    }

    bb3: {
        _3 = KeyCode::Key1;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:27:24: 27:37
        _0 = Result::<KeyCode, Error>::Ok(move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:27:21: 27:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:27:37: 27:38
    }

    bb4: {
        _4 = KeyCode::Key2;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:28:24: 28:37
        _0 = Result::<KeyCode, Error>::Ok(move _4); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:28:21: 28:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:28:37: 28:38
    }

    bb5: {
        _5 = KeyCode::Key3;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:29:24: 29:37
        _0 = Result::<KeyCode, Error>::Ok(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:29:21: 29:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:29:37: 29:38
    }

    bb6: {
        _6 = KeyCode::Key4;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:30:24: 30:37
        _0 = Result::<KeyCode, Error>::Ok(move _6); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:30:21: 30:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:30:37: 30:38
    }

    bb7: {
        _7 = KeyCode::Key5;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:31:24: 31:37
        _0 = Result::<KeyCode, Error>::Ok(move _7); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:31:21: 31:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:31:37: 31:38
    }

    bb8: {
        _8 = KeyCode::Key6;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:32:24: 32:37
        _0 = Result::<KeyCode, Error>::Ok(move _8); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:32:21: 32:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:32:37: 32:38
    }

    bb9: {
        _9 = KeyCode::Key7;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:33:24: 33:37
        _0 = Result::<KeyCode, Error>::Ok(move _9); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:33:21: 33:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:33:37: 33:38
    }

    bb10: {
        _10 = KeyCode::Key8;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:34:24: 34:37
        _0 = Result::<KeyCode, Error>::Ok(move _10); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:34:21: 34:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:34:37: 34:38
    }

    bb11: {
        _11 = KeyCode::Key9;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:35:24: 35:37
        _0 = Result::<KeyCode, Error>::Ok(move _11); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:35:21: 35:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:35:37: 35:38
    }

    bb12: {
        _12 = KeyCode::Key0;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:36:24: 36:37
        _0 = Result::<KeyCode, Error>::Ok(move _12); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:36:21: 36:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:36:37: 36:38
    }

    bb13: {
        _13 = KeyCode::OemMinus;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:37:24: 37:41
        _0 = Result::<KeyCode, Error>::Ok(move _13); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:37:21: 37:42
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:37:41: 37:42
    }

    bb14: {
        _14 = KeyCode::OemPlus;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:38:24: 38:40
        _0 = Result::<KeyCode, Error>::Ok(move _14); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:38:21: 38:41
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:38:40: 38:41
    }

    bb15: {
        _15 = KeyCode::Backspace;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:39:24: 39:42
        _0 = Result::<KeyCode, Error>::Ok(move _15); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:39:21: 39:43
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:39:42: 39:43
    }

    bb16: {
        _16 = KeyCode::Tab;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:40:24: 40:36
        _0 = Result::<KeyCode, Error>::Ok(move _16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:40:21: 40:37
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:40:36: 40:37
    }

    bb17: {
        _17 = KeyCode::Q;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:41:24: 41:34
        _0 = Result::<KeyCode, Error>::Ok(move _17); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:41:21: 41:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:41:34: 41:35
    }

    bb18: {
        _18 = KeyCode::W;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:42:24: 42:34
        _0 = Result::<KeyCode, Error>::Ok(move _18); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:42:21: 42:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:42:34: 42:35
    }

    bb19: {
        _19 = KeyCode::E;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:43:24: 43:34
        _0 = Result::<KeyCode, Error>::Ok(move _19); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:43:21: 43:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:43:34: 43:35
    }

    bb20: {
        _20 = KeyCode::R;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:44:24: 44:34
        _0 = Result::<KeyCode, Error>::Ok(move _20); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:44:21: 44:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:44:34: 44:35
    }

    bb21: {
        _21 = KeyCode::T;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:45:24: 45:34
        _0 = Result::<KeyCode, Error>::Ok(move _21); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:45:21: 45:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:45:34: 45:35
    }

    bb22: {
        _22 = KeyCode::Y;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:46:24: 46:34
        _0 = Result::<KeyCode, Error>::Ok(move _22); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:46:21: 46:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:46:34: 46:35
    }

    bb23: {
        _23 = KeyCode::U;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:47:24: 47:34
        _0 = Result::<KeyCode, Error>::Ok(move _23); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:47:21: 47:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:47:34: 47:35
    }

    bb24: {
        _24 = KeyCode::I;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:48:24: 48:34
        _0 = Result::<KeyCode, Error>::Ok(move _24); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:48:21: 48:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:48:34: 48:35
    }

    bb25: {
        _25 = KeyCode::O;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:49:24: 49:34
        _0 = Result::<KeyCode, Error>::Ok(move _25); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:49:21: 49:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:49:34: 49:35
    }

    bb26: {
        _26 = KeyCode::P;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:50:24: 50:34
        _0 = Result::<KeyCode, Error>::Ok(move _26); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:50:21: 50:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:50:34: 50:35
    }

    bb27: {
        _27 = KeyCode::Oem4;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:51:24: 51:37
        _0 = Result::<KeyCode, Error>::Ok(move _27); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:51:21: 51:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:51:37: 51:38
    }

    bb28: {
        _28 = KeyCode::Oem6;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:52:24: 52:37
        _0 = Result::<KeyCode, Error>::Ok(move _28); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:52:21: 52:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:52:37: 52:38
    }

    bb29: {
        _29 = KeyCode::Return;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:53:24: 53:39
        _0 = Result::<KeyCode, Error>::Ok(move _29); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:53:21: 53:40
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:53:39: 53:40
    }

    bb30: {
        _30 = KeyCode::LControl;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:54:24: 54:41
        _0 = Result::<KeyCode, Error>::Ok(move _30); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:54:21: 54:42
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:54:41: 54:42
    }

    bb31: {
        _31 = KeyCode::A;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:55:24: 55:34
        _0 = Result::<KeyCode, Error>::Ok(move _31); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:55:21: 55:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:55:34: 55:35
    }

    bb32: {
        _32 = KeyCode::S;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:56:24: 56:34
        _0 = Result::<KeyCode, Error>::Ok(move _32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:56:21: 56:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:56:34: 56:35
    }

    bb33: {
        _33 = KeyCode::D;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:57:24: 57:34
        _0 = Result::<KeyCode, Error>::Ok(move _33); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:57:21: 57:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:57:34: 57:35
    }

    bb34: {
        _34 = KeyCode::F;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:58:24: 58:34
        _0 = Result::<KeyCode, Error>::Ok(move _34); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:58:21: 58:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:58:34: 58:35
    }

    bb35: {
        _35 = KeyCode::G;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:59:24: 59:34
        _0 = Result::<KeyCode, Error>::Ok(move _35); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:59:21: 59:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:59:34: 59:35
    }

    bb36: {
        _36 = KeyCode::H;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:60:24: 60:34
        _0 = Result::<KeyCode, Error>::Ok(move _36); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:60:21: 60:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:60:34: 60:35
    }

    bb37: {
        _37 = KeyCode::J;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:61:24: 61:34
        _0 = Result::<KeyCode, Error>::Ok(move _37); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:61:21: 61:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:61:34: 61:35
    }

    bb38: {
        _38 = KeyCode::K;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:62:24: 62:34
        _0 = Result::<KeyCode, Error>::Ok(move _38); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:62:21: 62:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:62:34: 62:35
    }

    bb39: {
        _39 = KeyCode::L;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:63:24: 63:34
        _0 = Result::<KeyCode, Error>::Ok(move _39); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:63:21: 63:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:63:34: 63:35
    }

    bb40: {
        _40 = KeyCode::Oem1;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:64:24: 64:37
        _0 = Result::<KeyCode, Error>::Ok(move _40); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:64:21: 64:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:64:37: 64:38
    }

    bb41: {
        _41 = KeyCode::Oem3;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:65:24: 65:37
        _0 = Result::<KeyCode, Error>::Ok(move _41); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:65:21: 65:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:65:37: 65:38
    }

    bb42: {
        _42 = KeyCode::Oem8;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:66:24: 66:37
        _0 = Result::<KeyCode, Error>::Ok(move _42); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:66:21: 66:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:66:37: 66:38
    }

    bb43: {
        _43 = KeyCode::LShift;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:67:24: 67:39
        _0 = Result::<KeyCode, Error>::Ok(move _43); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:67:21: 67:40
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:67:39: 67:40
    }

    bb44: {
        _44 = KeyCode::Oem7;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:68:24: 68:37
        _0 = Result::<KeyCode, Error>::Ok(move _44); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:68:21: 68:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:68:37: 68:38
    }

    bb45: {
        _45 = KeyCode::Z;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:69:24: 69:34
        _0 = Result::<KeyCode, Error>::Ok(move _45); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:69:21: 69:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:69:34: 69:35
    }

    bb46: {
        _46 = KeyCode::X;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:70:24: 70:34
        _0 = Result::<KeyCode, Error>::Ok(move _46); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:70:21: 70:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:70:34: 70:35
    }

    bb47: {
        _47 = KeyCode::C;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:71:24: 71:34
        _0 = Result::<KeyCode, Error>::Ok(move _47); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:71:21: 71:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:71:34: 71:35
    }

    bb48: {
        _48 = KeyCode::V;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:72:24: 72:34
        _0 = Result::<KeyCode, Error>::Ok(move _48); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:72:21: 72:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:72:34: 72:35
    }

    bb49: {
        _49 = KeyCode::B;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:73:24: 73:34
        _0 = Result::<KeyCode, Error>::Ok(move _49); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:73:21: 73:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:73:34: 73:35
    }

    bb50: {
        _50 = KeyCode::N;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:74:24: 74:34
        _0 = Result::<KeyCode, Error>::Ok(move _50); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:74:21: 74:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:74:34: 74:35
    }

    bb51: {
        _51 = KeyCode::M;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:75:24: 75:34
        _0 = Result::<KeyCode, Error>::Ok(move _51); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:75:21: 75:35
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:75:34: 75:35
    }

    bb52: {
        _52 = KeyCode::OemComma;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:76:24: 76:41
        _0 = Result::<KeyCode, Error>::Ok(move _52); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:76:21: 76:42
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:76:41: 76:42
    }

    bb53: {
        _53 = KeyCode::OemPeriod;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:77:24: 77:42
        _0 = Result::<KeyCode, Error>::Ok(move _53); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:77:21: 77:43
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:77:42: 77:43
    }

    bb54: {
        _54 = KeyCode::Oem2;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:78:24: 78:37
        _0 = Result::<KeyCode, Error>::Ok(move _54); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:78:21: 78:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:78:37: 78:38
    }

    bb55: {
        _55 = KeyCode::RShift;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:79:24: 79:39
        _0 = Result::<KeyCode, Error>::Ok(move _55); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:79:21: 79:40
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:79:39: 79:40
    }

    bb56: {
        _56 = KeyCode::NumpadMultiply;   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:80:24: 80:47
        _0 = Result::<KeyCode, Error>::Ok(move _56); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:80:21: 80:48
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:80:47: 80:48
    }

    bb57: {
        _57 = KeyCode::LAlt;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:81:24: 81:37
        _0 = Result::<KeyCode, Error>::Ok(move _57); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:81:21: 81:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:81:37: 81:38
    }

    bb58: {
        _58 = KeyCode::Spacebar;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:82:24: 82:41
        _0 = Result::<KeyCode, Error>::Ok(move _58); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:82:21: 82:42
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:82:41: 82:42
    }

    bb59: {
        _59 = KeyCode::CapsLock;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:83:24: 83:41
        _0 = Result::<KeyCode, Error>::Ok(move _59); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:83:21: 83:42
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:83:41: 83:42
    }

    bb60: {
        _60 = KeyCode::F1;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:84:24: 84:35
        _0 = Result::<KeyCode, Error>::Ok(move _60); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:84:21: 84:36
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:84:35: 84:36
    }

    bb61: {
        _61 = KeyCode::F2;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:85:24: 85:35
        _0 = Result::<KeyCode, Error>::Ok(move _61); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:85:21: 85:36
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:85:35: 85:36
    }

    bb62: {
        _62 = KeyCode::F3;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:86:24: 86:35
        _0 = Result::<KeyCode, Error>::Ok(move _62); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:86:21: 86:36
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:86:35: 86:36
    }

    bb63: {
        _63 = KeyCode::F4;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:87:24: 87:35
        _0 = Result::<KeyCode, Error>::Ok(move _63); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:87:21: 87:36
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:87:35: 87:36
    }

    bb64: {
        _64 = KeyCode::F5;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:88:24: 88:35
        _0 = Result::<KeyCode, Error>::Ok(move _64); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:88:21: 88:36
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:88:35: 88:36
    }

    bb65: {
        _65 = KeyCode::F6;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:89:24: 89:35
        _0 = Result::<KeyCode, Error>::Ok(move _65); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:89:21: 89:36
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:89:35: 89:36
    }

    bb66: {
        _66 = KeyCode::F7;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:90:24: 90:35
        _0 = Result::<KeyCode, Error>::Ok(move _66); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:90:21: 90:36
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:90:35: 90:36
    }

    bb67: {
        _67 = KeyCode::F8;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:91:24: 91:35
        _0 = Result::<KeyCode, Error>::Ok(move _67); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:91:21: 91:36
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:91:35: 91:36
    }

    bb68: {
        _68 = KeyCode::F9;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:92:24: 92:35
        _0 = Result::<KeyCode, Error>::Ok(move _68); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:92:21: 92:36
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:92:35: 92:36
    }

    bb69: {
        _69 = KeyCode::F10;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:93:24: 93:36
        _0 = Result::<KeyCode, Error>::Ok(move _69); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:93:21: 93:37
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:93:36: 93:37
    }

    bb70: {
        _70 = KeyCode::NumpadLock;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:94:24: 94:43
        _0 = Result::<KeyCode, Error>::Ok(move _70); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:94:21: 94:44
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:94:43: 94:44
    }

    bb71: {
        _71 = KeyCode::ScrollLock;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:95:24: 95:43
        _0 = Result::<KeyCode, Error>::Ok(move _71); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:95:21: 95:44
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:95:43: 95:44
    }

    bb72: {
        _72 = KeyCode::Numpad7;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:96:24: 96:40
        _0 = Result::<KeyCode, Error>::Ok(move _72); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:96:21: 96:41
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:96:40: 96:41
    }

    bb73: {
        _73 = KeyCode::Numpad8;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:97:24: 97:40
        _0 = Result::<KeyCode, Error>::Ok(move _73); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:97:21: 97:41
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:97:40: 97:41
    }

    bb74: {
        _74 = KeyCode::Numpad9;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:98:24: 98:40
        _0 = Result::<KeyCode, Error>::Ok(move _74); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:98:21: 98:41
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:98:40: 98:41
    }

    bb75: {
        _75 = KeyCode::NumpadSubtract;   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:99:24: 99:47
        _0 = Result::<KeyCode, Error>::Ok(move _75); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:99:21: 99:48
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:99:47: 99:48
    }

    bb76: {
        _76 = KeyCode::Numpad4;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:100:24: 100:40
        _0 = Result::<KeyCode, Error>::Ok(move _76); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:100:21: 100:41
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:100:40: 100:41
    }

    bb77: {
        _77 = KeyCode::Numpad5;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:101:24: 101:40
        _0 = Result::<KeyCode, Error>::Ok(move _77); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:101:21: 101:41
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:101:40: 101:41
    }

    bb78: {
        _78 = KeyCode::Numpad6;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:102:24: 102:40
        _0 = Result::<KeyCode, Error>::Ok(move _78); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:102:21: 102:41
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:102:40: 102:41
    }

    bb79: {
        _79 = KeyCode::NumpadAdd;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:103:24: 103:42
        _0 = Result::<KeyCode, Error>::Ok(move _79); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:103:21: 103:43
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:103:42: 103:43
    }

    bb80: {
        _80 = KeyCode::Numpad1;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:104:24: 104:40
        _0 = Result::<KeyCode, Error>::Ok(move _80); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:104:21: 104:41
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:104:40: 104:41
    }

    bb81: {
        _81 = KeyCode::Numpad2;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:105:24: 105:40
        _0 = Result::<KeyCode, Error>::Ok(move _81); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:105:21: 105:41
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:105:40: 105:41
    }

    bb82: {
        _82 = KeyCode::Numpad3;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:106:24: 106:40
        _0 = Result::<KeyCode, Error>::Ok(move _82); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:106:21: 106:41
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:106:40: 106:41
    }

    bb83: {
        _83 = KeyCode::Numpad0;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:107:24: 107:40
        _0 = Result::<KeyCode, Error>::Ok(move _83); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:107:21: 107:41
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:107:40: 107:41
    }

    bb84: {
        _84 = KeyCode::NumpadPeriod;     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:108:24: 108:45
        _0 = Result::<KeyCode, Error>::Ok(move _84); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:108:21: 108:46
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:108:45: 108:46
    }

    bb85: {
        _85 = KeyCode::SysRq;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:109:24: 109:38
        _0 = Result::<KeyCode, Error>::Ok(move _85); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:109:21: 109:39
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:109:38: 109:39
    }

    bb86: {
        _86 = KeyCode::Oem5;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:111:24: 111:37
        _0 = Result::<KeyCode, Error>::Ok(move _86); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:111:21: 111:38
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:111:37: 111:38
    }

    bb87: {
        _87 = KeyCode::F11;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:112:24: 112:36
        _0 = Result::<KeyCode, Error>::Ok(move _87); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:112:21: 112:37
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:112:36: 112:37
    }

    bb88: {
        _88 = KeyCode::F12;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:113:24: 113:36
        _0 = Result::<KeyCode, Error>::Ok(move _88); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:113:21: 113:37
        goto -> bb89;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:113:36: 113:37
    }

    bb89: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:116:6: 116:6
    }
}

fn set1::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:15:1: 15:18>::map_extended_scancode(_1: u8) -> Result<KeyCode, Error> {
    debug code => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:119:30: 119:34
    let mut _0: core::result::Result<KeyCode, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:119:43: 119:65
    let mut _2: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:121:24: 121:42
    let mut _3: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:130:24: 130:42
    let mut _4: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:133:24: 133:44
    let mut _5: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:134:24: 134:41
    let mut _6: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:137:24: 137:37
    let mut _7: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:138:24: 138:43
    let mut _8: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:139:24: 139:37
    let mut _9: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:141:24: 141:37
    let mut _10: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:147:24: 147:38
    let mut _11: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:151:24: 151:43
    let mut _12: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:153:24: 153:41
    let mut _13: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:155:24: 155:40
    let mut _14: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:158:24: 158:45
    let mut _15: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:160:24: 160:44
    let mut _16: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:161:24: 161:39
    let mut _17: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:176:24: 176:37
    let mut _18: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:177:24: 177:40
    let mut _19: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:178:24: 178:39
    let mut _20: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:180:24: 180:42
    let mut _21: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:182:24: 182:43
    let mut _22: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:184:24: 184:36
    let mut _23: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:185:24: 185:42
    let mut _24: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:186:24: 186:41
    let mut _25: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:187:24: 187:39
    let mut _26: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:188:24: 188:39
    let mut _27: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:189:24: 189:37
    let mut _28: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:190:24: 190:37
    let mut _29: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:191:24: 191:37
    let mut _30: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:208:24: 208:38
    let mut _31: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:209:24: 209:38
    let mut _32: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:210:24: 210:38
    let mut _33: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:211:24: 211:37
    let mut _34: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:212:24: 212:38
    let mut _35: Error;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:213:22: 213:43

    bb0: {
        switchInt(_1) -> [16: bb2, 25: bb3, 28: bb4, 29: bb5, 32: bb6, 33: bb7, 34: bb8, 36: bb9, 42: bb10, 46: bb11, 48: bb12, 50: bb13, 53: bb14, 55: bb15, 56: bb16, 71: bb17, 72: bb18, 73: bb19, 75: bb20, 77: bb21, 79: bb22, 80: bb23, 81: bb24, 82: bb25, 83: bb26, 91: bb27, 92: bb28, 93: bb29, 112: bb30, 115: bb31, 121: bb32, 123: bb33, 125: bb34, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:120:9: 120:19
    }

    bb1: {
        _35 = Error::UnknownKeyCode;     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:213:22: 213:43
        _0 = Result::<KeyCode, Error>::Err(move _35); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:213:18: 213:44
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:213:43: 213:44
    }

    bb2: {
        _2 = KeyCode::PrevTrack;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:121:24: 121:42
        _0 = Result::<KeyCode, Error>::Ok(move _2); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:121:21: 121:43
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:121:42: 121:43
    }

    bb3: {
        _3 = KeyCode::NextTrack;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:130:24: 130:42
        _0 = Result::<KeyCode, Error>::Ok(move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:130:21: 130:43
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:130:42: 130:43
    }

    bb4: {
        _4 = KeyCode::NumpadEnter;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:133:24: 133:44
        _0 = Result::<KeyCode, Error>::Ok(move _4); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:133:21: 133:45
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:133:44: 133:45
    }

    bb5: {
        _5 = KeyCode::RControl;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:134:24: 134:41
        _0 = Result::<KeyCode, Error>::Ok(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:134:21: 134:42
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:134:41: 134:42
    }

    bb6: {
        _6 = KeyCode::Mute;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:137:24: 137:37
        _0 = Result::<KeyCode, Error>::Ok(move _6); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:137:21: 137:38
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:137:37: 137:38
    }

    bb7: {
        _7 = KeyCode::Calculator;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:138:24: 138:43
        _0 = Result::<KeyCode, Error>::Ok(move _7); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:138:21: 138:44
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:138:43: 138:44
    }

    bb8: {
        _8 = KeyCode::Play;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:139:24: 139:37
        _0 = Result::<KeyCode, Error>::Ok(move _8); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:139:21: 139:38
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:139:37: 139:38
    }

    bb9: {
        _9 = KeyCode::Stop;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:141:24: 141:37
        _0 = Result::<KeyCode, Error>::Ok(move _9); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:141:21: 141:38
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:141:37: 141:38
    }

    bb10: {
        _10 = KeyCode::RAlt2;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:147:24: 147:38
        _0 = Result::<KeyCode, Error>::Ok(move _10); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:147:21: 147:39
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:147:38: 147:39
    }

    bb11: {
        _11 = KeyCode::VolumeDown;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:151:24: 151:43
        _0 = Result::<KeyCode, Error>::Ok(move _11); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:151:21: 151:44
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:151:43: 151:44
    }

    bb12: {
        _12 = KeyCode::VolumeUp;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:153:24: 153:41
        _0 = Result::<KeyCode, Error>::Ok(move _12); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:153:21: 153:42
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:153:41: 153:42
    }

    bb13: {
        _13 = KeyCode::WWWHome;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:155:24: 155:40
        _0 = Result::<KeyCode, Error>::Ok(move _13); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:155:21: 155:41
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:155:40: 155:41
    }

    bb14: {
        _14 = KeyCode::NumpadDivide;     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:158:24: 158:45
        _0 = Result::<KeyCode, Error>::Ok(move _14); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:158:21: 158:46
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:158:45: 158:46
    }

    bb15: {
        _15 = KeyCode::PrintScreen;      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:160:24: 160:44
        _0 = Result::<KeyCode, Error>::Ok(move _15); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:160:21: 160:45
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:160:44: 160:45
    }

    bb16: {
        _16 = KeyCode::RAltGr;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:161:24: 161:39
        _0 = Result::<KeyCode, Error>::Ok(move _16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:161:21: 161:40
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:161:39: 161:40
    }

    bb17: {
        _17 = KeyCode::Home;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:176:24: 176:37
        _0 = Result::<KeyCode, Error>::Ok(move _17); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:176:21: 176:38
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:176:37: 176:38
    }

    bb18: {
        _18 = KeyCode::ArrowUp;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:177:24: 177:40
        _0 = Result::<KeyCode, Error>::Ok(move _18); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:177:21: 177:41
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:177:40: 177:41
    }

    bb19: {
        _19 = KeyCode::PageUp;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:178:24: 178:39
        _0 = Result::<KeyCode, Error>::Ok(move _19); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:178:21: 178:40
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:178:39: 178:40
    }

    bb20: {
        _20 = KeyCode::ArrowLeft;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:180:24: 180:42
        _0 = Result::<KeyCode, Error>::Ok(move _20); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:180:21: 180:43
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:180:42: 180:43
    }

    bb21: {
        _21 = KeyCode::ArrowRight;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:182:24: 182:43
        _0 = Result::<KeyCode, Error>::Ok(move _21); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:182:21: 182:44
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:182:43: 182:44
    }

    bb22: {
        _22 = KeyCode::End;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:184:24: 184:36
        _0 = Result::<KeyCode, Error>::Ok(move _22); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:184:21: 184:37
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:184:36: 184:37
    }

    bb23: {
        _23 = KeyCode::ArrowDown;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:185:24: 185:42
        _0 = Result::<KeyCode, Error>::Ok(move _23); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:185:21: 185:43
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:185:42: 185:43
    }

    bb24: {
        _24 = KeyCode::PageDown;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:186:24: 186:41
        _0 = Result::<KeyCode, Error>::Ok(move _24); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:186:21: 186:42
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:186:41: 186:42
    }

    bb25: {
        _25 = KeyCode::Insert;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:187:24: 187:39
        _0 = Result::<KeyCode, Error>::Ok(move _25); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:187:21: 187:40
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:187:39: 187:40
    }

    bb26: {
        _26 = KeyCode::Delete;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:188:24: 188:39
        _0 = Result::<KeyCode, Error>::Ok(move _26); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:188:21: 188:40
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:188:39: 188:40
    }

    bb27: {
        _27 = KeyCode::LWin;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:189:24: 189:37
        _0 = Result::<KeyCode, Error>::Ok(move _27); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:189:21: 189:38
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:189:37: 189:38
    }

    bb28: {
        _28 = KeyCode::RWin;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:190:24: 190:37
        _0 = Result::<KeyCode, Error>::Ok(move _28); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:190:21: 190:38
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:190:37: 190:38
    }

    bb29: {
        _29 = KeyCode::Apps;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:191:24: 191:37
        _0 = Result::<KeyCode, Error>::Ok(move _29); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:191:21: 191:38
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:191:37: 191:38
    }

    bb30: {
        _30 = KeyCode::Oem11;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:208:24: 208:38
        _0 = Result::<KeyCode, Error>::Ok(move _30); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:208:21: 208:39
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:208:38: 208:39
    }

    bb31: {
        _31 = KeyCode::Oem12;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:209:24: 209:38
        _0 = Result::<KeyCode, Error>::Ok(move _31); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:209:21: 209:39
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:209:38: 209:39
    }

    bb32: {
        _32 = KeyCode::Oem10;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:210:24: 210:38
        _0 = Result::<KeyCode, Error>::Ok(move _32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:210:21: 210:39
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:210:38: 210:39
    }

    bb33: {
        _33 = KeyCode::Oem9;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:211:24: 211:37
        _0 = Result::<KeyCode, Error>::Ok(move _33); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:211:21: 211:38
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:211:37: 211:38
    }

    bb34: {
        _34 = KeyCode::Oem13;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:212:24: 212:38
        _0 = Result::<KeyCode, Error>::Ok(move _34); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:212:21: 212:39
        goto -> bb35;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:212:38: 212:39
    }

    bb35: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:215:6: 215:6
    }
}

fn set1::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:15:1: 15:18>::map_extended2_scancode(_1: u8) -> Result<KeyCode, Error> {
    debug code => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:218:31: 218:35
    let mut _0: core::result::Result<KeyCode, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:218:44: 218:66
    let mut _2: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:220:24: 220:42
    let mut _3: Error;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:221:22: 221:43

    bb0: {
        switchInt(_1) -> [29: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:219:9: 219:19
    }

    bb1: {
        _3 = Error::UnknownKeyCode;      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:221:22: 221:43
        _0 = Result::<KeyCode, Error>::Err(move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:221:18: 221:44
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:221:43: 221:44
    }

    bb2: {
        _2 = KeyCode::RControl2;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:220:24: 220:42
        _0 = Result::<KeyCode, Error>::Ok(move _2); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:220:21: 220:43
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:220:42: 220:43
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:223:6: 223:6
    }
}

fn set1::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:226:1: 226:34>::advance_state(_1: &mut ScancodeSet1, _2: u8) -> Result<Option<KeyEvent>, Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:242:22: 242:31
    debug code => _2;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:242:33: 242:37
    let mut _0: core::result::Result<core::option::Option<KeyEvent>, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:242:46: 242:77
    let mut _3: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:244:13: 244:31
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:254:21: 254:32
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:254:21: 254:32
    let mut _6: DecodeState;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:247:38: 247:59
    let mut _7: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:248:28: 248:32
    let mut _8: DecodeState;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:251:38: 251:60
    let mut _9: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:252:28: 252:32
    let mut _10: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:256:28: 259:27
    let mut _11: KeyEvent;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:256:33: 259:26
    let mut _12: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:29: 257:61
    let mut _13: core::result::Result<KeyCode, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:29: 257:60
    let mut _14: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:48: 257:59
    let mut _15: (u8, bool);             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:48: 257:59
    let mut _16: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:60: 257:61
    let _17: core::result::Result<core::convert::Infallible, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:60: 257:61
    let _18: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:29: 257:61
    let mut _19: KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:258:29: 258:41
    let mut _20: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:263:28: 266:27
    let mut _21: KeyEvent;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:263:33: 266:26
    let mut _22: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:29: 264:54
    let mut _23: core::result::Result<KeyCode, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:29: 264:53
    let mut _24: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:53: 264:54
    let _25: core::result::Result<core::convert::Infallible, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:53: 264:54
    let _26: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:29: 264:54
    let mut _27: KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:265:29: 265:43
    let mut _28: DecodeState;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:271:30: 271:48
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:273:21: 273:32
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:273:21: 273:32
    let mut _31: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:275:28: 278:27
    let mut _32: KeyEvent;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:275:33: 278:26
    let mut _33: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:29: 276:70
    let mut _34: core::result::Result<KeyCode, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:29: 276:69
    let mut _35: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:57: 276:68
    let mut _36: (u8, bool);             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:57: 276:68
    let mut _37: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:69: 276:70
    let _38: core::result::Result<core::convert::Infallible, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:69: 276:70
    let _39: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:29: 276:70
    let mut _40: KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:277:29: 277:41
    let mut _41: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:282:28: 285:27
    let mut _42: KeyEvent;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:282:33: 285:26
    let mut _43: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:29: 283:63
    let mut _44: core::result::Result<KeyCode, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:29: 283:62
    let mut _45: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:62: 283:63
    let _46: core::result::Result<core::convert::Infallible, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:62: 283:63
    let _47: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:29: 283:63
    let mut _48: KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:284:29: 284:43
    let mut _49: DecodeState;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:290:30: 290:48
    let mut _50: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:292:21: 292:32
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:292:21: 292:32
    let mut _52: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:294:28: 297:27
    let mut _53: KeyEvent;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:294:33: 297:26
    let mut _54: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:29: 295:71
    let mut _55: core::result::Result<KeyCode, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:29: 295:70
    let mut _56: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:58: 295:69
    let mut _57: (u8, bool);             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:58: 295:69
    let mut _58: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:70: 295:71
    let _59: core::result::Result<core::convert::Infallible, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:70: 295:71
    let _60: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:29: 295:71
    let mut _61: KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:296:29: 296:41
    let mut _62: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:301:28: 304:27
    let mut _63: KeyEvent;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:301:33: 304:26
    let mut _64: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:29: 302:64
    let mut _65: core::result::Result<KeyCode, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:29: 302:63
    let mut _66: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:63: 302:64
    let _67: core::result::Result<core::convert::Infallible, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:63: 302:64
    let _68: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:29: 302:64
    let mut _69: KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:303:29: 303:43
    let _70: !;                          // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:705:9: 705:52
    scope 1 {
        debug residual => _17;           // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:60: 257:61
        scope 2 {
        }
    }
    scope 3 {
        debug val => _18;                // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:29: 257:61
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _25;           // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:53: 264:54
        scope 6 {
        }
    }
    scope 7 {
        debug val => _26;                // in scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:29: 264:54
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _38;           // in scope 9 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:69: 276:70
        scope 10 {
        }
    }
    scope 11 {
        debug val => _39;                // in scope 11 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:29: 276:70
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _46;           // in scope 13 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:62: 283:63
        scope 14 {
        }
    }
    scope 15 {
        debug val => _47;                // in scope 15 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:29: 283:63
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _59;           // in scope 17 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:70: 295:71
        scope 18 {
        }
    }
    scope 19 {
        debug val => _60;                // in scope 19 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:29: 295:71
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _67;           // in scope 21 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:63: 302:64
        scope 22 {
        }
    }
    scope 23 {
        debug val => _68;                // in scope 23 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:29: 302:64
        scope 24 {
        }
    }

    bb0: {
        _3 = discriminant(((*_1).0: DecodeState)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:243:15: 243:25
        switchInt(move _3) -> [0: bb2, 1: bb21, 4: bb36, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:243:9: 243:25
    }

    bb1: {
        _70 = panic(const "not implemented") -> unwind unreachable; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:705:9: 705:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:705:9: 705:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:705:34: 705:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(_2) -> [224: bb6, 225: bb7, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:245:17: 245:27
    }

    bb3: {
        _4 = Le(const 128_u8, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:254:21: 254:32
        switchInt(move _4) -> [0: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:254:21: 254:32
    }

    bb4: {
        _5 = Le(_2, const u8::MAX);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:254:21: 254:32
        switchInt(move _5) -> [0: bb5, otherwise: bb8]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:254:21: 254:32
    }

    bb5: {
        _23 = ScancodeSet1::map_scancode(_2) -> [return: bb16, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:29: 264:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:29: 264:47
                                         // + literal: Const { ty: fn(u8) -> Result<KeyCode, Error> {ScancodeSet1::map_scancode}, val: Value(<ZST>) }
    }

    bb6: {
        _6 = DecodeState::Extended;      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:247:38: 247:59
        ((*_1).0: DecodeState) = move _6; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:247:25: 247:59
        _7 = Option::<KeyEvent>::None;   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:248:28: 248:32
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _7); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:248:25: 248:33
        goto -> bb51;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:248:32: 248:33
    }

    bb7: {
        _8 = DecodeState::Extended2;     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:251:38: 251:60
        ((*_1).0: DecodeState) = move _8; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:251:25: 251:60
        _9 = Option::<KeyEvent>::None;   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:252:28: 252:32
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _9); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:252:25: 252:33
        goto -> bb51;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:252:32: 252:33
    }

    bb8: {
        _15 = CheckedSub(_2, const 128_u8); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:48: 257:59
        assert(!move (_15.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 128_u8) -> [success: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:48: 257:59
    }

    bb9: {
        _14 = move (_15.0: u8);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:48: 257:59
        _13 = ScancodeSet1::map_scancode(move _14) -> [return: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:29: 257:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:29: 257:47
                                         // + literal: Const { ty: fn(u8) -> Result<KeyCode, Error> {ScancodeSet1::map_scancode}, val: Value(<ZST>) }
    }

    bb10: {
        _12 = <Result<KeyCode, Error> as Try>::branch(move _13) -> [return: bb11, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:29: 257:61
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:29: 257:61
                                         // + literal: Const { ty: fn(Result<KeyCode, Error>) -> ControlFlow<<Result<KeyCode, Error> as Try>::Residual, <Result<KeyCode, Error> as Try>::Output> {<Result<KeyCode, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb11: {
        _16 = discriminant(_12);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:29: 257:61
        switchInt(move _16) -> [0: bb12, 1: bb14, otherwise: bb13]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:29: 257:61
    }

    bb12: {
        _18 = ((_12 as Continue).0: KeyCode); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:29: 257:61
        _19 = KeyState::Up;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:258:29: 258:41
        _11 = KeyEvent::new(_18, move _19) -> [return: bb15, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:256:33: 259:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:256:33: 256:46
                                         // + literal: Const { ty: fn(KeyCode, KeyState) -> KeyEvent {KeyEvent::new}, val: Value(<ZST>) }
    }

    bb13: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:29: 257:61
    }

    bb14: {
        _17 = ((_12 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:60: 257:61
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_17) -> [return: bb51, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:29: 257:61
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:257:60: 257:61
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb15: {
        _10 = Option::<KeyEvent>::Some(move _11); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:256:28: 259:27
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _10); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:256:25: 259:28
        goto -> bb51;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:260:21: 260:22
    }

    bb16: {
        _22 = <Result<KeyCode, Error> as Try>::branch(move _23) -> [return: bb17, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:29: 264:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:29: 264:54
                                         // + literal: Const { ty: fn(Result<KeyCode, Error>) -> ControlFlow<<Result<KeyCode, Error> as Try>::Residual, <Result<KeyCode, Error> as Try>::Output> {<Result<KeyCode, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb17: {
        _24 = discriminant(_22);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:29: 264:54
        switchInt(move _24) -> [0: bb18, 1: bb19, otherwise: bb13]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:29: 264:54
    }

    bb18: {
        _26 = ((_22 as Continue).0: KeyCode); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:29: 264:54
        _27 = KeyState::Down;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:265:29: 265:43
        _21 = KeyEvent::new(_26, move _27) -> [return: bb20, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:263:33: 266:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:263:33: 263:46
                                         // + literal: Const { ty: fn(KeyCode, KeyState) -> KeyEvent {KeyEvent::new}, val: Value(<ZST>) }
    }

    bb19: {
        _25 = ((_22 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:53: 264:54
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_25) -> [return: bb51, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:29: 264:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:264:53: 264:54
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb20: {
        _20 = Option::<KeyEvent>::Some(move _21); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:263:28: 266:27
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _20); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:263:25: 266:28
        goto -> bb51;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:267:21: 267:22
    }

    bb21: {
        _28 = DecodeState::Start;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:271:30: 271:48
        ((*_1).0: DecodeState) = move _28; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:271:17: 271:48
        _29 = Le(const 128_u8, _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:273:21: 273:32
        switchInt(move _29) -> [0: bb23, otherwise: bb22]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:273:21: 273:32
    }

    bb22: {
        _30 = Le(_2, const u8::MAX);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:273:21: 273:32
        switchInt(move _30) -> [0: bb23, otherwise: bb24]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:273:21: 273:32
    }

    bb23: {
        _44 = ScancodeSet1::map_extended_scancode(_2) -> [return: bb31, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:29: 283:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:29: 283:56
                                         // + literal: Const { ty: fn(u8) -> Result<KeyCode, Error> {ScancodeSet1::map_extended_scancode}, val: Value(<ZST>) }
    }

    bb24: {
        _36 = CheckedSub(_2, const 128_u8); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:57: 276:68
        assert(!move (_36.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 128_u8) -> [success: bb25, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:57: 276:68
    }

    bb25: {
        _35 = move (_36.0: u8);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:57: 276:68
        _34 = ScancodeSet1::map_extended_scancode(move _35) -> [return: bb26, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:29: 276:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:29: 276:56
                                         // + literal: Const { ty: fn(u8) -> Result<KeyCode, Error> {ScancodeSet1::map_extended_scancode}, val: Value(<ZST>) }
    }

    bb26: {
        _33 = <Result<KeyCode, Error> as Try>::branch(move _34) -> [return: bb27, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:29: 276:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:29: 276:70
                                         // + literal: Const { ty: fn(Result<KeyCode, Error>) -> ControlFlow<<Result<KeyCode, Error> as Try>::Residual, <Result<KeyCode, Error> as Try>::Output> {<Result<KeyCode, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb27: {
        _37 = discriminant(_33);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:29: 276:70
        switchInt(move _37) -> [0: bb28, 1: bb29, otherwise: bb13]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:29: 276:70
    }

    bb28: {
        _39 = ((_33 as Continue).0: KeyCode); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:29: 276:70
        _40 = KeyState::Up;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:277:29: 277:41
        _32 = KeyEvent::new(_39, move _40) -> [return: bb30, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:275:33: 278:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:275:33: 275:46
                                         // + literal: Const { ty: fn(KeyCode, KeyState) -> KeyEvent {KeyEvent::new}, val: Value(<ZST>) }
    }

    bb29: {
        _38 = ((_33 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:69: 276:70
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_38) -> [return: bb51, unwind unreachable]; // scope 10 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:29: 276:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:276:69: 276:70
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb30: {
        _31 = Option::<KeyEvent>::Some(move _32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:275:28: 278:27
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _31); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:275:25: 278:28
        goto -> bb51;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:279:21: 279:22
    }

    bb31: {
        _43 = <Result<KeyCode, Error> as Try>::branch(move _44) -> [return: bb32, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:29: 283:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:29: 283:63
                                         // + literal: Const { ty: fn(Result<KeyCode, Error>) -> ControlFlow<<Result<KeyCode, Error> as Try>::Residual, <Result<KeyCode, Error> as Try>::Output> {<Result<KeyCode, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb32: {
        _45 = discriminant(_43);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:29: 283:63
        switchInt(move _45) -> [0: bb33, 1: bb34, otherwise: bb13]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:29: 283:63
    }

    bb33: {
        _47 = ((_43 as Continue).0: KeyCode); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:29: 283:63
        _48 = KeyState::Down;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:284:29: 284:43
        _42 = KeyEvent::new(_47, move _48) -> [return: bb35, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:282:33: 285:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:282:33: 282:46
                                         // + literal: Const { ty: fn(KeyCode, KeyState) -> KeyEvent {KeyEvent::new}, val: Value(<ZST>) }
    }

    bb34: {
        _46 = ((_43 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:62: 283:63
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_46) -> [return: bb51, unwind unreachable]; // scope 14 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:29: 283:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:283:62: 283:63
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb35: {
        _41 = Option::<KeyEvent>::Some(move _42); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:282:28: 285:27
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _41); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:282:25: 285:28
        goto -> bb51;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:286:21: 286:22
    }

    bb36: {
        _49 = DecodeState::Start;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:290:30: 290:48
        ((*_1).0: DecodeState) = move _49; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:290:17: 290:48
        _50 = Le(const 128_u8, _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:292:21: 292:32
        switchInt(move _50) -> [0: bb38, otherwise: bb37]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:292:21: 292:32
    }

    bb37: {
        _51 = Le(_2, const u8::MAX);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:292:21: 292:32
        switchInt(move _51) -> [0: bb38, otherwise: bb39]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:292:21: 292:32
    }

    bb38: {
        _65 = ScancodeSet1::map_extended2_scancode(_2) -> [return: bb46, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:29: 302:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:29: 302:57
                                         // + literal: Const { ty: fn(u8) -> Result<KeyCode, Error> {ScancodeSet1::map_extended2_scancode}, val: Value(<ZST>) }
    }

    bb39: {
        _57 = CheckedSub(_2, const 128_u8); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:58: 295:69
        assert(!move (_57.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 128_u8) -> [success: bb40, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:58: 295:69
    }

    bb40: {
        _56 = move (_57.0: u8);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:58: 295:69
        _55 = ScancodeSet1::map_extended2_scancode(move _56) -> [return: bb41, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:29: 295:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:29: 295:57
                                         // + literal: Const { ty: fn(u8) -> Result<KeyCode, Error> {ScancodeSet1::map_extended2_scancode}, val: Value(<ZST>) }
    }

    bb41: {
        _54 = <Result<KeyCode, Error> as Try>::branch(move _55) -> [return: bb42, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:29: 295:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:29: 295:71
                                         // + literal: Const { ty: fn(Result<KeyCode, Error>) -> ControlFlow<<Result<KeyCode, Error> as Try>::Residual, <Result<KeyCode, Error> as Try>::Output> {<Result<KeyCode, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb42: {
        _58 = discriminant(_54);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:29: 295:71
        switchInt(move _58) -> [0: bb43, 1: bb44, otherwise: bb13]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:29: 295:71
    }

    bb43: {
        _60 = ((_54 as Continue).0: KeyCode); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:29: 295:71
        _61 = KeyState::Up;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:296:29: 296:41
        _53 = KeyEvent::new(_60, move _61) -> [return: bb45, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:294:33: 297:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:294:33: 294:46
                                         // + literal: Const { ty: fn(KeyCode, KeyState) -> KeyEvent {KeyEvent::new}, val: Value(<ZST>) }
    }

    bb44: {
        _59 = ((_54 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:70: 295:71
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_59) -> [return: bb51, unwind unreachable]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:29: 295:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:295:70: 295:71
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb45: {
        _52 = Option::<KeyEvent>::Some(move _53); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:294:28: 297:27
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _52); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:294:25: 297:28
        goto -> bb51;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:298:21: 298:22
    }

    bb46: {
        _64 = <Result<KeyCode, Error> as Try>::branch(move _65) -> [return: bb47, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:29: 302:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:29: 302:64
                                         // + literal: Const { ty: fn(Result<KeyCode, Error>) -> ControlFlow<<Result<KeyCode, Error> as Try>::Residual, <Result<KeyCode, Error> as Try>::Output> {<Result<KeyCode, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb47: {
        _66 = discriminant(_64);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:29: 302:64
        switchInt(move _66) -> [0: bb48, 1: bb49, otherwise: bb13]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:29: 302:64
    }

    bb48: {
        _68 = ((_64 as Continue).0: KeyCode); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:29: 302:64
        _69 = KeyState::Down;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:303:29: 303:43
        _63 = KeyEvent::new(_68, move _69) -> [return: bb50, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:301:33: 304:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:301:33: 301:46
                                         // + literal: Const { ty: fn(KeyCode, KeyState) -> KeyEvent {KeyEvent::new}, val: Value(<ZST>) }
    }

    bb49: {
        _67 = ((_64 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:63: 302:64
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_67) -> [return: bb51, unwind unreachable]; // scope 22 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:29: 302:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:302:63: 302:64
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb50: {
        _62 = Option::<KeyEvent>::Some(move _63); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:301:28: 304:27
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _62); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:301:25: 304:28
        goto -> bb51;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:305:21: 305:22
    }

    bb51: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set1.rs:313:6: 313:6
    }
}

fn set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:16:1: 16:18>::new() -> ScancodeSet2 {
    let mut _0: scancodes::set2::ScancodeSet2; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:18:27: 18:39
    let mut _1: DecodeState;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:20:20: 20:38

    bb0: {
        _1 = DecodeState::Start;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:20:20: 20:38
        _0 = ScancodeSet2 { state: move _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:19:9: 21:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:22:6: 22:6
    }
}

// MIR FOR CTFE
fn set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:16:1: 16:18>::new() -> ScancodeSet2 {
    let mut _0: scancodes::set2::ScancodeSet2; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:18:27: 18:39
    let mut _1: DecodeState;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:20:20: 20:38

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:20:20: 20:38
        _1 = DecodeState::Start;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:20:20: 20:38
        _0 = ScancodeSet2 { state: move _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:19:9: 21:10
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:21:9: 21:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:22:6: 22:6
    }
}

fn set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:16:1: 16:18>::map_scancode(_1: u8) -> Result<KeyCode, Error> {
    debug code => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:25:21: 25:25
    let mut _0: core::result::Result<KeyCode, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:25:34: 25:56
    let mut _2: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:27:24: 27:44
    let mut _3: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:28:24: 28:35
    let mut _4: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:30:24: 30:35
    let mut _5: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:31:24: 31:35
    let mut _6: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:32:24: 32:35
    let mut _7: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:33:24: 33:35
    let mut _8: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:34:24: 34:36
    let mut _9: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:35:24: 35:36
    let mut _10: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:36:24: 36:35
    let mut _11: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:37:24: 37:35
    let mut _12: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:38:24: 38:35
    let mut _13: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:39:24: 39:36
    let mut _14: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:40:24: 40:37
    let mut _15: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:41:24: 41:37
    let mut _16: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:42:24: 42:39
    let mut _17: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:43:24: 43:38
    let mut _18: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:44:24: 44:41
    let mut _19: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:45:24: 45:34
    let mut _20: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:46:24: 46:37
    let mut _21: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:47:24: 47:34
    let mut _22: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:48:24: 48:34
    let mut _23: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:49:24: 49:34
    let mut _24: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:50:24: 50:34
    let mut _25: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:51:24: 51:37
    let mut _26: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:52:24: 52:34
    let mut _27: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:53:24: 53:34
    let mut _28: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:54:24: 54:34
    let mut _29: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:55:24: 55:34
    let mut _30: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:56:24: 56:37
    let mut _31: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:57:24: 57:37
    let mut _32: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:58:24: 58:41
    let mut _33: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:59:24: 59:34
    let mut _34: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:60:24: 60:34
    let mut _35: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:61:24: 61:34
    let mut _36: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:62:24: 62:34
    let mut _37: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:63:24: 63:37
    let mut _38: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:64:24: 64:34
    let mut _39: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:65:24: 65:34
    let mut _40: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:66:24: 66:34
    let mut _41: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:67:24: 67:34
    let mut _42: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:68:24: 68:34
    let mut _43: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:69:24: 69:37
    let mut _44: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:70:24: 70:34
    let mut _45: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:71:24: 71:34
    let mut _46: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:72:24: 72:34
    let mut _47: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:73:24: 73:37
    let mut _48: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:74:24: 74:37
    let mut _49: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:75:24: 75:41
    let mut _50: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:76:24: 76:34
    let mut _51: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:77:24: 77:34
    let mut _52: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:78:24: 78:34
    let mut _53: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:79:24: 79:37
    let mut _54: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:80:24: 80:37
    let mut _55: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:81:24: 81:42
    let mut _56: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:82:24: 82:37
    let mut _57: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:83:24: 83:34
    let mut _58: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:84:24: 84:37
    let mut _59: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:85:24: 85:34
    let mut _60: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:86:24: 86:41
    let mut _61: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:87:24: 87:38
    let mut _62: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:88:24: 88:37
    let mut _63: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:89:24: 89:37
    let mut _64: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:90:24: 90:40
    let mut _65: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:91:24: 91:41
    let mut _66: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:92:24: 92:39
    let mut _67: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:93:24: 93:39
    let mut _68: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:94:24: 94:37
    let mut _69: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:95:24: 95:37
    let mut _70: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:96:24: 96:37
    let mut _71: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:97:24: 97:38
    let mut _72: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:98:24: 98:42
    let mut _73: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:99:24: 99:37
    let mut _74: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:100:24: 100:40
    let mut _75: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:101:24: 101:38
    let mut _76: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:102:24: 102:40
    let mut _77: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:103:24: 103:40
    let mut _78: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:104:24: 104:40
    let mut _79: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:105:24: 105:45
    let mut _80: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:106:24: 106:40
    let mut _81: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:107:24: 107:40
    let mut _82: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:108:24: 108:40
    let mut _83: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:109:24: 109:40
    let mut _84: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:110:24: 110:39
    let mut _85: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:111:24: 111:43
    let mut _86: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:112:24: 112:36
    let mut _87: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:113:24: 113:42
    let mut _88: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:114:24: 114:40
    let mut _89: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:115:24: 115:47
    let mut _90: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:116:24: 116:47
    let mut _91: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:117:24: 117:40
    let mut _92: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:118:24: 118:43
    let mut _93: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:119:24: 119:38
    let mut _94: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:120:24: 120:35
    let mut _95: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:121:24: 121:46
    let mut _96: Error;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:122:22: 122:43

    bb0: {
        switchInt(_1) -> [0: bb2, 1: bb3, 3: bb4, 4: bb5, 5: bb6, 6: bb7, 7: bb8, 9: bb9, 10: bb10, 11: bb11, 12: bb12, 13: bb13, 14: bb14, 17: bb15, 18: bb16, 19: bb17, 20: bb18, 21: bb19, 22: bb20, 26: bb21, 27: bb22, 28: bb23, 29: bb24, 30: bb25, 33: bb26, 34: bb27, 35: bb28, 36: bb29, 37: bb30, 38: bb31, 41: bb32, 42: bb33, 43: bb34, 44: bb35, 45: bb36, 46: bb37, 49: bb38, 50: bb39, 51: bb40, 52: bb41, 53: bb42, 54: bb43, 58: bb44, 59: bb45, 60: bb46, 61: bb47, 62: bb48, 65: bb49, 66: bb50, 67: bb51, 68: bb52, 69: bb53, 70: bb54, 73: bb55, 74: bb56, 75: bb57, 76: bb58, 77: bb59, 78: bb60, 81: bb61, 82: bb62, 84: bb63, 85: bb64, 88: bb65, 89: bb66, 90: bb67, 91: bb68, 93: bb69, 97: bb70, 100: bb71, 102: bb72, 103: bb73, 105: bb74, 106: bb75, 107: bb76, 108: bb77, 112: bb78, 113: bb79, 114: bb80, 115: bb81, 116: bb82, 117: bb83, 118: bb84, 119: bb85, 120: bb86, 121: bb87, 122: bb88, 123: bb89, 124: bb90, 125: bb91, 126: bb92, 127: bb93, 131: bb94, 170: bb95, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:26:9: 26:19
    }

    bb1: {
        _96 = Error::UnknownKeyCode;     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:122:22: 122:43
        _0 = Result::<KeyCode, Error>::Err(move _96); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:122:18: 122:44
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:122:43: 122:44
    }

    bb2: {
        _2 = KeyCode::TooManyKeys;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:27:24: 27:44
        _0 = Result::<KeyCode, Error>::Ok(move _2); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:27:21: 27:45
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:27:44: 27:45
    }

    bb3: {
        _3 = KeyCode::F9;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:28:24: 28:35
        _0 = Result::<KeyCode, Error>::Ok(move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:28:21: 28:36
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:28:35: 28:36
    }

    bb4: {
        _4 = KeyCode::F5;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:30:24: 30:35
        _0 = Result::<KeyCode, Error>::Ok(move _4); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:30:21: 30:36
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:30:35: 30:36
    }

    bb5: {
        _5 = KeyCode::F3;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:31:24: 31:35
        _0 = Result::<KeyCode, Error>::Ok(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:31:21: 31:36
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:31:35: 31:36
    }

    bb6: {
        _6 = KeyCode::F1;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:32:24: 32:35
        _0 = Result::<KeyCode, Error>::Ok(move _6); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:32:21: 32:36
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:32:35: 32:36
    }

    bb7: {
        _7 = KeyCode::F2;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:33:24: 33:35
        _0 = Result::<KeyCode, Error>::Ok(move _7); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:33:21: 33:36
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:33:35: 33:36
    }

    bb8: {
        _8 = KeyCode::F12;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:34:24: 34:36
        _0 = Result::<KeyCode, Error>::Ok(move _8); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:34:21: 34:37
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:34:36: 34:37
    }

    bb9: {
        _9 = KeyCode::F10;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:35:24: 35:36
        _0 = Result::<KeyCode, Error>::Ok(move _9); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:35:21: 35:37
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:35:36: 35:37
    }

    bb10: {
        _10 = KeyCode::F8;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:36:24: 36:35
        _0 = Result::<KeyCode, Error>::Ok(move _10); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:36:21: 36:36
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:36:35: 36:36
    }

    bb11: {
        _11 = KeyCode::F6;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:37:24: 37:35
        _0 = Result::<KeyCode, Error>::Ok(move _11); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:37:21: 37:36
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:37:35: 37:36
    }

    bb12: {
        _12 = KeyCode::F4;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:38:24: 38:35
        _0 = Result::<KeyCode, Error>::Ok(move _12); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:38:21: 38:36
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:38:35: 38:36
    }

    bb13: {
        _13 = KeyCode::Tab;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:39:24: 39:36
        _0 = Result::<KeyCode, Error>::Ok(move _13); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:39:21: 39:37
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:39:36: 39:37
    }

    bb14: {
        _14 = KeyCode::Oem8;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:40:24: 40:37
        _0 = Result::<KeyCode, Error>::Ok(move _14); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:40:21: 40:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:40:37: 40:38
    }

    bb15: {
        _15 = KeyCode::LAlt;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:41:24: 41:37
        _0 = Result::<KeyCode, Error>::Ok(move _15); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:41:21: 41:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:41:37: 41:38
    }

    bb16: {
        _16 = KeyCode::LShift;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:42:24: 42:39
        _0 = Result::<KeyCode, Error>::Ok(move _16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:42:21: 42:40
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:42:39: 42:40
    }

    bb17: {
        _17 = KeyCode::Oem11;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:43:24: 43:38
        _0 = Result::<KeyCode, Error>::Ok(move _17); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:43:21: 43:39
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:43:38: 43:39
    }

    bb18: {
        _18 = KeyCode::LControl;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:44:24: 44:41
        _0 = Result::<KeyCode, Error>::Ok(move _18); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:44:21: 44:42
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:44:41: 44:42
    }

    bb19: {
        _19 = KeyCode::Q;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:45:24: 45:34
        _0 = Result::<KeyCode, Error>::Ok(move _19); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:45:21: 45:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:45:34: 45:35
    }

    bb20: {
        _20 = KeyCode::Key1;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:46:24: 46:37
        _0 = Result::<KeyCode, Error>::Ok(move _20); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:46:21: 46:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:46:37: 46:38
    }

    bb21: {
        _21 = KeyCode::Z;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:47:24: 47:34
        _0 = Result::<KeyCode, Error>::Ok(move _21); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:47:21: 47:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:47:34: 47:35
    }

    bb22: {
        _22 = KeyCode::S;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:48:24: 48:34
        _0 = Result::<KeyCode, Error>::Ok(move _22); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:48:21: 48:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:48:34: 48:35
    }

    bb23: {
        _23 = KeyCode::A;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:49:24: 49:34
        _0 = Result::<KeyCode, Error>::Ok(move _23); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:49:21: 49:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:49:34: 49:35
    }

    bb24: {
        _24 = KeyCode::W;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:50:24: 50:34
        _0 = Result::<KeyCode, Error>::Ok(move _24); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:50:21: 50:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:50:34: 50:35
    }

    bb25: {
        _25 = KeyCode::Key2;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:51:24: 51:37
        _0 = Result::<KeyCode, Error>::Ok(move _25); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:51:21: 51:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:51:37: 51:38
    }

    bb26: {
        _26 = KeyCode::C;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:52:24: 52:34
        _0 = Result::<KeyCode, Error>::Ok(move _26); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:52:21: 52:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:52:34: 52:35
    }

    bb27: {
        _27 = KeyCode::X;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:53:24: 53:34
        _0 = Result::<KeyCode, Error>::Ok(move _27); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:53:21: 53:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:53:34: 53:35
    }

    bb28: {
        _28 = KeyCode::D;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:54:24: 54:34
        _0 = Result::<KeyCode, Error>::Ok(move _28); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:54:21: 54:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:54:34: 54:35
    }

    bb29: {
        _29 = KeyCode::E;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:55:24: 55:34
        _0 = Result::<KeyCode, Error>::Ok(move _29); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:55:21: 55:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:55:34: 55:35
    }

    bb30: {
        _30 = KeyCode::Key4;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:56:24: 56:37
        _0 = Result::<KeyCode, Error>::Ok(move _30); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:56:21: 56:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:56:37: 56:38
    }

    bb31: {
        _31 = KeyCode::Key3;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:57:24: 57:37
        _0 = Result::<KeyCode, Error>::Ok(move _31); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:57:21: 57:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:57:37: 57:38
    }

    bb32: {
        _32 = KeyCode::Spacebar;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:58:24: 58:41
        _0 = Result::<KeyCode, Error>::Ok(move _32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:58:21: 58:42
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:58:41: 58:42
    }

    bb33: {
        _33 = KeyCode::V;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:59:24: 59:34
        _0 = Result::<KeyCode, Error>::Ok(move _33); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:59:21: 59:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:59:34: 59:35
    }

    bb34: {
        _34 = KeyCode::F;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:60:24: 60:34
        _0 = Result::<KeyCode, Error>::Ok(move _34); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:60:21: 60:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:60:34: 60:35
    }

    bb35: {
        _35 = KeyCode::T;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:61:24: 61:34
        _0 = Result::<KeyCode, Error>::Ok(move _35); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:61:21: 61:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:61:34: 61:35
    }

    bb36: {
        _36 = KeyCode::R;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:62:24: 62:34
        _0 = Result::<KeyCode, Error>::Ok(move _36); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:62:21: 62:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:62:34: 62:35
    }

    bb37: {
        _37 = KeyCode::Key5;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:63:24: 63:37
        _0 = Result::<KeyCode, Error>::Ok(move _37); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:63:21: 63:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:63:37: 63:38
    }

    bb38: {
        _38 = KeyCode::N;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:64:24: 64:34
        _0 = Result::<KeyCode, Error>::Ok(move _38); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:64:21: 64:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:64:34: 64:35
    }

    bb39: {
        _39 = KeyCode::B;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:65:24: 65:34
        _0 = Result::<KeyCode, Error>::Ok(move _39); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:65:21: 65:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:65:34: 65:35
    }

    bb40: {
        _40 = KeyCode::H;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:66:24: 66:34
        _0 = Result::<KeyCode, Error>::Ok(move _40); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:66:21: 66:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:66:34: 66:35
    }

    bb41: {
        _41 = KeyCode::G;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:67:24: 67:34
        _0 = Result::<KeyCode, Error>::Ok(move _41); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:67:21: 67:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:67:34: 67:35
    }

    bb42: {
        _42 = KeyCode::Y;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:68:24: 68:34
        _0 = Result::<KeyCode, Error>::Ok(move _42); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:68:21: 68:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:68:34: 68:35
    }

    bb43: {
        _43 = KeyCode::Key6;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:69:24: 69:37
        _0 = Result::<KeyCode, Error>::Ok(move _43); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:69:21: 69:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:69:37: 69:38
    }

    bb44: {
        _44 = KeyCode::M;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:70:24: 70:34
        _0 = Result::<KeyCode, Error>::Ok(move _44); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:70:21: 70:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:70:34: 70:35
    }

    bb45: {
        _45 = KeyCode::J;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:71:24: 71:34
        _0 = Result::<KeyCode, Error>::Ok(move _45); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:71:21: 71:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:71:34: 71:35
    }

    bb46: {
        _46 = KeyCode::U;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:72:24: 72:34
        _0 = Result::<KeyCode, Error>::Ok(move _46); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:72:21: 72:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:72:34: 72:35
    }

    bb47: {
        _47 = KeyCode::Key7;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:73:24: 73:37
        _0 = Result::<KeyCode, Error>::Ok(move _47); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:73:21: 73:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:73:37: 73:38
    }

    bb48: {
        _48 = KeyCode::Key8;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:74:24: 74:37
        _0 = Result::<KeyCode, Error>::Ok(move _48); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:74:21: 74:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:74:37: 74:38
    }

    bb49: {
        _49 = KeyCode::OemComma;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:75:24: 75:41
        _0 = Result::<KeyCode, Error>::Ok(move _49); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:75:21: 75:42
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:75:41: 75:42
    }

    bb50: {
        _50 = KeyCode::K;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:76:24: 76:34
        _0 = Result::<KeyCode, Error>::Ok(move _50); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:76:21: 76:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:76:34: 76:35
    }

    bb51: {
        _51 = KeyCode::I;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:77:24: 77:34
        _0 = Result::<KeyCode, Error>::Ok(move _51); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:77:21: 77:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:77:34: 77:35
    }

    bb52: {
        _52 = KeyCode::O;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:78:24: 78:34
        _0 = Result::<KeyCode, Error>::Ok(move _52); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:78:21: 78:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:78:34: 78:35
    }

    bb53: {
        _53 = KeyCode::Key0;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:79:24: 79:37
        _0 = Result::<KeyCode, Error>::Ok(move _53); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:79:21: 79:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:79:37: 79:38
    }

    bb54: {
        _54 = KeyCode::Key9;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:80:24: 80:37
        _0 = Result::<KeyCode, Error>::Ok(move _54); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:80:21: 80:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:80:37: 80:38
    }

    bb55: {
        _55 = KeyCode::OemPeriod;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:81:24: 81:42
        _0 = Result::<KeyCode, Error>::Ok(move _55); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:81:21: 81:43
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:81:42: 81:43
    }

    bb56: {
        _56 = KeyCode::Oem2;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:82:24: 82:37
        _0 = Result::<KeyCode, Error>::Ok(move _56); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:82:21: 82:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:82:37: 82:38
    }

    bb57: {
        _57 = KeyCode::L;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:83:24: 83:34
        _0 = Result::<KeyCode, Error>::Ok(move _57); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:83:21: 83:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:83:34: 83:35
    }

    bb58: {
        _58 = KeyCode::Oem1;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:84:24: 84:37
        _0 = Result::<KeyCode, Error>::Ok(move _58); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:84:21: 84:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:84:37: 84:38
    }

    bb59: {
        _59 = KeyCode::P;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:85:24: 85:34
        _0 = Result::<KeyCode, Error>::Ok(move _59); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:85:21: 85:35
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:85:34: 85:35
    }

    bb60: {
        _60 = KeyCode::OemMinus;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:86:24: 86:41
        _0 = Result::<KeyCode, Error>::Ok(move _60); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:86:21: 86:42
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:86:41: 86:42
    }

    bb61: {
        _61 = KeyCode::Oem12;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:87:24: 87:38
        _0 = Result::<KeyCode, Error>::Ok(move _61); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:87:21: 87:39
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:87:38: 87:39
    }

    bb62: {
        _62 = KeyCode::Oem3;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:88:24: 88:37
        _0 = Result::<KeyCode, Error>::Ok(move _62); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:88:21: 88:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:88:37: 88:38
    }

    bb63: {
        _63 = KeyCode::Oem4;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:89:24: 89:37
        _0 = Result::<KeyCode, Error>::Ok(move _63); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:89:21: 89:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:89:37: 89:38
    }

    bb64: {
        _64 = KeyCode::OemPlus;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:90:24: 90:40
        _0 = Result::<KeyCode, Error>::Ok(move _64); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:90:21: 90:41
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:90:40: 90:41
    }

    bb65: {
        _65 = KeyCode::CapsLock;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:91:24: 91:41
        _0 = Result::<KeyCode, Error>::Ok(move _65); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:91:21: 91:42
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:91:41: 91:42
    }

    bb66: {
        _66 = KeyCode::RShift;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:92:24: 92:39
        _0 = Result::<KeyCode, Error>::Ok(move _66); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:92:21: 92:40
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:92:39: 92:40
    }

    bb67: {
        _67 = KeyCode::Return;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:93:24: 93:39
        _0 = Result::<KeyCode, Error>::Ok(move _67); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:93:21: 93:40
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:93:39: 93:40
    }

    bb68: {
        _68 = KeyCode::Oem6;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:94:24: 94:37
        _0 = Result::<KeyCode, Error>::Ok(move _68); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:94:21: 94:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:94:37: 94:38
    }

    bb69: {
        _69 = KeyCode::Oem7;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:95:24: 95:37
        _0 = Result::<KeyCode, Error>::Ok(move _69); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:95:21: 95:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:95:37: 95:38
    }

    bb70: {
        _70 = KeyCode::Oem5;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:96:24: 96:37
        _0 = Result::<KeyCode, Error>::Ok(move _70); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:96:21: 96:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:96:37: 96:38
    }

    bb71: {
        _71 = KeyCode::Oem10;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:97:24: 97:38
        _0 = Result::<KeyCode, Error>::Ok(move _71); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:97:21: 97:39
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:97:38: 97:39
    }

    bb72: {
        _72 = KeyCode::Backspace;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:98:24: 98:42
        _0 = Result::<KeyCode, Error>::Ok(move _72); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:98:21: 98:43
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:98:42: 98:43
    }

    bb73: {
        _73 = KeyCode::Oem9;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:99:24: 99:37
        _0 = Result::<KeyCode, Error>::Ok(move _73); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:99:21: 99:38
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:99:37: 99:38
    }

    bb74: {
        _74 = KeyCode::Numpad1;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:100:24: 100:40
        _0 = Result::<KeyCode, Error>::Ok(move _74); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:100:21: 100:41
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:100:40: 100:41
    }

    bb75: {
        _75 = KeyCode::Oem13;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:101:24: 101:38
        _0 = Result::<KeyCode, Error>::Ok(move _75); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:101:21: 101:39
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:101:38: 101:39
    }

    bb76: {
        _76 = KeyCode::Numpad4;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:102:24: 102:40
        _0 = Result::<KeyCode, Error>::Ok(move _76); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:102:21: 102:41
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:102:40: 102:41
    }

    bb77: {
        _77 = KeyCode::Numpad7;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:103:24: 103:40
        _0 = Result::<KeyCode, Error>::Ok(move _77); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:103:21: 103:41
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:103:40: 103:41
    }

    bb78: {
        _78 = KeyCode::Numpad0;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:104:24: 104:40
        _0 = Result::<KeyCode, Error>::Ok(move _78); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:104:21: 104:41
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:104:40: 104:41
    }

    bb79: {
        _79 = KeyCode::NumpadPeriod;     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:105:24: 105:45
        _0 = Result::<KeyCode, Error>::Ok(move _79); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:105:21: 105:46
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:105:45: 105:46
    }

    bb80: {
        _80 = KeyCode::Numpad2;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:106:24: 106:40
        _0 = Result::<KeyCode, Error>::Ok(move _80); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:106:21: 106:41
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:106:40: 106:41
    }

    bb81: {
        _81 = KeyCode::Numpad5;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:107:24: 107:40
        _0 = Result::<KeyCode, Error>::Ok(move _81); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:107:21: 107:41
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:107:40: 107:41
    }

    bb82: {
        _82 = KeyCode::Numpad6;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:108:24: 108:40
        _0 = Result::<KeyCode, Error>::Ok(move _82); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:108:21: 108:41
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:108:40: 108:41
    }

    bb83: {
        _83 = KeyCode::Numpad8;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:109:24: 109:40
        _0 = Result::<KeyCode, Error>::Ok(move _83); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:109:21: 109:41
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:109:40: 109:41
    }

    bb84: {
        _84 = KeyCode::Escape;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:110:24: 110:39
        _0 = Result::<KeyCode, Error>::Ok(move _84); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:110:21: 110:40
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:110:39: 110:40
    }

    bb85: {
        _85 = KeyCode::NumpadLock;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:111:24: 111:43
        _0 = Result::<KeyCode, Error>::Ok(move _85); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:111:21: 111:44
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:111:43: 111:44
    }

    bb86: {
        _86 = KeyCode::F11;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:112:24: 112:36
        _0 = Result::<KeyCode, Error>::Ok(move _86); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:112:21: 112:37
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:112:36: 112:37
    }

    bb87: {
        _87 = KeyCode::NumpadAdd;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:113:24: 113:42
        _0 = Result::<KeyCode, Error>::Ok(move _87); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:113:21: 113:43
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:113:42: 113:43
    }

    bb88: {
        _88 = KeyCode::Numpad3;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:114:24: 114:40
        _0 = Result::<KeyCode, Error>::Ok(move _88); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:114:21: 114:41
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:114:40: 114:41
    }

    bb89: {
        _89 = KeyCode::NumpadSubtract;   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:115:24: 115:47
        _0 = Result::<KeyCode, Error>::Ok(move _89); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:115:21: 115:48
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:115:47: 115:48
    }

    bb90: {
        _90 = KeyCode::NumpadMultiply;   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:116:24: 116:47
        _0 = Result::<KeyCode, Error>::Ok(move _90); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:116:21: 116:48
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:116:47: 116:48
    }

    bb91: {
        _91 = KeyCode::Numpad9;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:117:24: 117:40
        _0 = Result::<KeyCode, Error>::Ok(move _91); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:117:21: 117:41
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:117:40: 117:41
    }

    bb92: {
        _92 = KeyCode::ScrollLock;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:118:24: 118:43
        _0 = Result::<KeyCode, Error>::Ok(move _92); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:118:21: 118:44
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:118:43: 118:44
    }

    bb93: {
        _93 = KeyCode::SysRq;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:119:24: 119:38
        _0 = Result::<KeyCode, Error>::Ok(move _93); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:119:21: 119:39
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:119:38: 119:39
    }

    bb94: {
        _94 = KeyCode::F7;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:120:24: 120:35
        _0 = Result::<KeyCode, Error>::Ok(move _94); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:120:21: 120:36
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:120:35: 120:36
    }

    bb95: {
        _95 = KeyCode::PowerOnTestOk;    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:121:24: 121:46
        _0 = Result::<KeyCode, Error>::Ok(move _95); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:121:21: 121:47
        goto -> bb96;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:121:46: 121:47
    }

    bb96: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:124:6: 124:6
    }
}

fn set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:16:1: 16:18>::map_extended_scancode(_1: u8) -> Result<KeyCode, Error> {
    debug code => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:127:30: 127:34
    let mut _0: core::result::Result<KeyCode, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:127:43: 127:65
    let mut _2: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:129:24: 129:39
    let mut _3: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:130:24: 130:38
    let mut _4: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:131:24: 131:41
    let mut _5: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:132:24: 132:42
    let mut _6: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:133:24: 133:37
    let mut _7: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:134:24: 134:43
    let mut _8: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:135:24: 135:37
    let mut _9: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:136:24: 136:37
    let mut _10: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:137:24: 137:43
    let mut _11: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:138:24: 138:37
    let mut _12: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:139:24: 139:41
    let mut _13: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:140:24: 140:37
    let mut _14: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:141:24: 141:40
    let mut _15: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:142:24: 142:37
    let mut _16: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:143:24: 143:45
    let mut _17: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:144:24: 144:42
    let mut _18: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:145:24: 145:44
    let mut _19: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:146:24: 146:36
    let mut _20: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:147:24: 147:42
    let mut _21: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:148:24: 148:37
    let mut _22: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:149:24: 149:39
    let mut _23: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:150:24: 150:39
    let mut _24: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:151:24: 151:42
    let mut _25: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:152:24: 152:43
    let mut _26: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:153:24: 153:40
    let mut _27: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:154:24: 154:41
    let mut _28: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:155:24: 155:44
    let mut _29: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:156:24: 156:39
    let mut _30: Error;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:157:22: 157:43

    bb0: {
        switchInt(_1) -> [17: bb2, 18: bb3, 20: bb4, 21: bb5, 31: bb6, 33: bb7, 35: bb8, 39: bb9, 43: bb10, 47: bb11, 50: bb12, 52: bb13, 58: bb14, 59: bb15, 74: bb16, 77: bb17, 90: bb18, 105: bb19, 107: bb20, 108: bb21, 112: bb22, 113: bb23, 114: bb24, 116: bb25, 117: bb26, 122: bb27, 124: bb28, 125: bb29, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:128:9: 128:19
    }

    bb1: {
        _30 = Error::UnknownKeyCode;     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:157:22: 157:43
        _0 = Result::<KeyCode, Error>::Err(move _30); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:157:18: 157:44
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:157:43: 157:44
    }

    bb2: {
        _2 = KeyCode::RAltGr;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:129:24: 129:39
        _0 = Result::<KeyCode, Error>::Ok(move _2); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:129:21: 129:40
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:129:39: 129:40
    }

    bb3: {
        _3 = KeyCode::RAlt2;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:130:24: 130:38
        _0 = Result::<KeyCode, Error>::Ok(move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:130:21: 130:39
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:130:38: 130:39
    }

    bb4: {
        _4 = KeyCode::RControl;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:131:24: 131:41
        _0 = Result::<KeyCode, Error>::Ok(move _4); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:131:21: 131:42
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:131:41: 131:42
    }

    bb5: {
        _5 = KeyCode::PrevTrack;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:132:24: 132:42
        _0 = Result::<KeyCode, Error>::Ok(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:132:21: 132:43
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:132:42: 132:43
    }

    bb6: {
        _6 = KeyCode::LWin;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:133:24: 133:37
        _0 = Result::<KeyCode, Error>::Ok(move _6); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:133:21: 133:38
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:133:37: 133:38
    }

    bb7: {
        _7 = KeyCode::VolumeDown;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:134:24: 134:43
        _0 = Result::<KeyCode, Error>::Ok(move _7); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:134:21: 134:44
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:134:43: 134:44
    }

    bb8: {
        _8 = KeyCode::Mute;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:135:24: 135:37
        _0 = Result::<KeyCode, Error>::Ok(move _8); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:135:21: 135:38
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:135:37: 135:38
    }

    bb9: {
        _9 = KeyCode::RWin;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:136:24: 136:37
        _0 = Result::<KeyCode, Error>::Ok(move _9); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:136:21: 136:38
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:136:37: 136:38
    }

    bb10: {
        _10 = KeyCode::Calculator;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:137:24: 137:43
        _0 = Result::<KeyCode, Error>::Ok(move _10); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:137:21: 137:44
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:137:43: 137:44
    }

    bb11: {
        _11 = KeyCode::Apps;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:138:24: 138:37
        _0 = Result::<KeyCode, Error>::Ok(move _11); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:138:21: 138:38
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:138:37: 138:38
    }

    bb12: {
        _12 = KeyCode::VolumeUp;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:139:24: 139:41
        _0 = Result::<KeyCode, Error>::Ok(move _12); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:139:21: 139:42
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:139:41: 139:42
    }

    bb13: {
        _13 = KeyCode::Play;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:140:24: 140:37
        _0 = Result::<KeyCode, Error>::Ok(move _13); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:140:21: 140:38
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:140:37: 140:38
    }

    bb14: {
        _14 = KeyCode::WWWHome;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:141:24: 141:40
        _0 = Result::<KeyCode, Error>::Ok(move _14); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:141:21: 141:41
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:141:40: 141:41
    }

    bb15: {
        _15 = KeyCode::Stop;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:142:24: 142:37
        _0 = Result::<KeyCode, Error>::Ok(move _15); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:142:21: 142:38
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:142:37: 142:38
    }

    bb16: {
        _16 = KeyCode::NumpadDivide;     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:143:24: 143:45
        _0 = Result::<KeyCode, Error>::Ok(move _16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:143:21: 143:46
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:143:45: 143:46
    }

    bb17: {
        _17 = KeyCode::NextTrack;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:144:24: 144:42
        _0 = Result::<KeyCode, Error>::Ok(move _17); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:144:21: 144:43
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:144:42: 144:43
    }

    bb18: {
        _18 = KeyCode::NumpadEnter;      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:145:24: 145:44
        _0 = Result::<KeyCode, Error>::Ok(move _18); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:145:21: 145:45
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:145:44: 145:45
    }

    bb19: {
        _19 = KeyCode::End;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:146:24: 146:36
        _0 = Result::<KeyCode, Error>::Ok(move _19); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:146:21: 146:37
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:146:36: 146:37
    }

    bb20: {
        _20 = KeyCode::ArrowLeft;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:147:24: 147:42
        _0 = Result::<KeyCode, Error>::Ok(move _20); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:147:21: 147:43
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:147:42: 147:43
    }

    bb21: {
        _21 = KeyCode::Home;             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:148:24: 148:37
        _0 = Result::<KeyCode, Error>::Ok(move _21); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:148:21: 148:38
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:148:37: 148:38
    }

    bb22: {
        _22 = KeyCode::Insert;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:149:24: 149:39
        _0 = Result::<KeyCode, Error>::Ok(move _22); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:149:21: 149:40
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:149:39: 149:40
    }

    bb23: {
        _23 = KeyCode::Delete;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:150:24: 150:39
        _0 = Result::<KeyCode, Error>::Ok(move _23); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:150:21: 150:40
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:150:39: 150:40
    }

    bb24: {
        _24 = KeyCode::ArrowDown;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:151:24: 151:42
        _0 = Result::<KeyCode, Error>::Ok(move _24); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:151:21: 151:43
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:151:42: 151:43
    }

    bb25: {
        _25 = KeyCode::ArrowRight;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:152:24: 152:43
        _0 = Result::<KeyCode, Error>::Ok(move _25); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:152:21: 152:44
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:152:43: 152:44
    }

    bb26: {
        _26 = KeyCode::ArrowUp;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:153:24: 153:40
        _0 = Result::<KeyCode, Error>::Ok(move _26); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:153:21: 153:41
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:153:40: 153:41
    }

    bb27: {
        _27 = KeyCode::PageDown;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:154:24: 154:41
        _0 = Result::<KeyCode, Error>::Ok(move _27); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:154:21: 154:42
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:154:41: 154:42
    }

    bb28: {
        _28 = KeyCode::PrintScreen;      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:155:24: 155:44
        _0 = Result::<KeyCode, Error>::Ok(move _28); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:155:21: 155:45
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:155:44: 155:45
    }

    bb29: {
        _29 = KeyCode::PageUp;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:156:24: 156:39
        _0 = Result::<KeyCode, Error>::Ok(move _29); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:156:21: 156:40
        goto -> bb30;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:156:39: 156:40
    }

    bb30: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:159:6: 159:6
    }
}

fn set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:16:1: 16:18>::map_extended2_scancode(_1: u8) -> Result<KeyCode, Error> {
    debug code => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:162:31: 162:35
    let mut _0: core::result::Result<KeyCode, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:162:44: 162:66
    let mut _2: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:164:24: 164:42
    let mut _3: Error;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:165:22: 165:43

    bb0: {
        switchInt(_1) -> [20: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:163:9: 163:19
    }

    bb1: {
        _3 = Error::UnknownKeyCode;      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:165:22: 165:43
        _0 = Result::<KeyCode, Error>::Err(move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:165:18: 165:44
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:165:43: 165:44
    }

    bb2: {
        _2 = KeyCode::RControl2;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:164:24: 164:42
        _0 = Result::<KeyCode, Error>::Ok(move _2); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:164:21: 164:43
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:164:42: 164:43
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:167:6: 167:6
    }
}

fn set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:170:1: 170:34>::advance_state(_1: &mut ScancodeSet2, _2: u8) -> Result<Option<KeyEvent>, Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:195:22: 195:31
    debug code => _2;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:195:33: 195:37
    let mut _0: core::result::Result<core::option::Option<KeyEvent>, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:195:46: 195:77
    let mut _3: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:197:13: 197:31
    let mut _4: DecodeState;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:199:34: 199:55
    let mut _5: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:200:24: 200:28
    let mut _6: DecodeState;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:203:34: 203:56
    let mut _7: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:204:24: 204:28
    let mut _8: DecodeState;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:207:34: 207:54
    let mut _9: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:208:24: 208:28
    let _10: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:25: 211:32
    let mut _11: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:35: 211:60
    let mut _12: core::result::Result<KeyCode, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:35: 211:59
    let mut _13: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:59: 211:60
    let _14: core::result::Result<core::convert::Infallible, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:59: 211:60
    let _15: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:35: 211:60
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:24: 212:92
    let mut _17: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:24: 212:55
    let mut _18: &KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:24: 212:31
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:59: 212:92
    let mut _20: &KeyCode;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:59: 212:66
    let mut _21: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:213:28: 213:78
    let mut _22: KeyEvent;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:213:33: 213:77
    let mut _23: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:213:47: 213:54
    let mut _24: KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:213:56: 213:76
    let mut _25: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:215:28: 218:27
    let mut _26: KeyEvent;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:215:33: 218:26
    let mut _27: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:29: 216:54
    let mut _28: core::result::Result<KeyCode, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:29: 216:53
    let mut _29: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:53: 216:54
    let mut _32: KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:217:29: 217:43
    let mut _33: DecodeState;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:223:30: 223:48
    let mut _34: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:20: 224:80
    let mut _35: KeyEvent;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:25: 224:79
    let mut _36: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:39: 224:64
    let mut _37: core::result::Result<KeyCode, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:39: 224:63
    let mut _38: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:63: 224:64
    let _39: core::result::Result<core::convert::Infallible, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:63: 224:64
    let _40: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:39: 224:64
    let mut _41: KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:66: 224:78
    let mut _42: DecodeState;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:228:34: 228:62
    let mut _43: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:229:24: 229:28
    let mut _44: DecodeState;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:232:34: 232:52
    let mut _45: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:35: 234:69
    let mut _46: core::result::Result<KeyCode, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:35: 234:68
    let mut _47: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:68: 234:69
    let _48: core::result::Result<core::convert::Infallible, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:68: 234:69
    let _49: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:35: 234:69
    let mut _50: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:235:24: 235:68
    let mut _51: KeyEvent;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:235:29: 235:67
    let mut _52: KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:235:52: 235:66
    let mut _53: DecodeState;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:239:30: 239:48
    let mut _54: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:240:20: 243:19
    let mut _55: KeyEvent;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:240:25: 243:18
    let mut _56: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:21: 241:55
    let mut _57: core::result::Result<KeyCode, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:21: 241:54
    let mut _58: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:54: 241:55
    let _59: core::result::Result<core::convert::Infallible, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:54: 241:55
    let _60: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:21: 241:55
    let mut _61: KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:242:21: 242:33
    let mut _62: DecodeState;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:247:34: 247:63
    let mut _63: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:248:24: 248:28
    let mut _64: DecodeState;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:251:34: 251:52
    let mut _65: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:252:24: 255:23
    let mut _66: KeyEvent;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:252:29: 255:22
    let mut _67: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:25: 253:60
    let mut _68: core::result::Result<KeyCode, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:25: 253:59
    let mut _69: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:59: 253:60
    let _70: core::result::Result<core::convert::Infallible, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:59: 253:60
    let _71: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:25: 253:60
    let mut _72: KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:254:25: 254:39
    let mut _73: DecodeState;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:259:30: 259:48
    let mut _74: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:260:20: 263:19
    let mut _75: KeyEvent;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:260:25: 263:18
    let mut _76: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, KeyCode>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:21: 261:56
    let mut _77: core::result::Result<KeyCode, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:21: 261:55
    let mut _78: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:55: 261:56
    let _79: core::result::Result<core::convert::Infallible, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:55: 261:56
    let _80: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:21: 261:56
    let mut _81: KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:262:21: 262:33
    scope 1 {
        debug keycode => _10;            // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:25: 211:32
        let _30: core::result::Result<core::convert::Infallible, Error>; // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:53: 216:54
        let _31: KeyCode;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:29: 216:54
        let mut _82: &KeyCode;           // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:70: 212:92
        let mut _83: &KeyCode;           // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:35: 212:55
        scope 6 {
            debug residual => _30;       // in scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:53: 216:54
            scope 7 {
            }
        }
        scope 8 {
            debug val => _31;            // in scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:29: 216:54
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _14;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:59: 211:60
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;                // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:35: 211:60
        scope 5 {
        }
    }
    scope 10 {
        debug residual => _39;           // in scope 10 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:63: 224:64
        scope 11 {
        }
    }
    scope 12 {
        debug val => _40;                // in scope 12 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:39: 224:64
        scope 13 {
        }
    }
    scope 14 {
        debug keycode => _49;            // in scope 14 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:25: 234:32
    }
    scope 15 {
        debug residual => _48;           // in scope 15 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:68: 234:69
        scope 16 {
        }
    }
    scope 17 {
        debug val => _49;                // in scope 17 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:35: 234:69
        scope 18 {
        }
    }
    scope 19 {
        debug residual => _59;           // in scope 19 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:54: 241:55
        scope 20 {
        }
    }
    scope 21 {
        debug val => _60;                // in scope 21 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:21: 241:55
        scope 22 {
        }
    }
    scope 23 {
        debug residual => _70;           // in scope 23 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:59: 253:60
        scope 24 {
        }
    }
    scope 25 {
        debug val => _71;                // in scope 25 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:25: 253:60
        scope 26 {
        }
    }
    scope 27 {
        debug residual => _79;           // in scope 27 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:55: 261:56
        scope 28 {
        }
    }
    scope 29 {
        debug val => _80;                // in scope 29 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:21: 261:56
        scope 30 {
        }
    }

    bb0: {
        _3 = discriminant(((*_1).0: DecodeState)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:196:15: 196:25
        switchInt(move _3) -> [0: bb3, 1: bb31, 2: bb25, 3: bb39, 4: bb45, 5: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:196:9: 196:25
    }

    bb1: {
        _73 = DecodeState::Start;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:259:30: 259:48
        ((*_1).0: DecodeState) = move _73; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:259:17: 259:48
        _77 = ScancodeSet2::map_extended2_scancode(_2) -> [return: bb53, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:21: 261:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:21: 261:49
                                         // + literal: Const { ty: fn(u8) -> Result<KeyCode, Error> {ScancodeSet2::map_extended2_scancode}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:196:15: 196:25
    }

    bb3: {
        switchInt(_2) -> [224: bb5, 225: bb6, 240: bb7, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:197:35: 197:45
    }

    bb4: {
        _12 = ScancodeSet2::map_scancode(_2) -> [return: bb8, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:35: 211:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:35: 211:53
                                         // + literal: Const { ty: fn(u8) -> Result<KeyCode, Error> {ScancodeSet2::map_scancode}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = DecodeState::Extended;      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:199:34: 199:55
        ((*_1).0: DecodeState) = move _4; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:199:21: 199:55
        _5 = Option::<KeyEvent>::None;   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:200:24: 200:28
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:200:21: 200:29
        goto -> bb58;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:200:28: 200:29
    }

    bb6: {
        _6 = DecodeState::Extended2;     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:203:34: 203:56
        ((*_1).0: DecodeState) = move _6; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:203:21: 203:56
        _7 = Option::<KeyEvent>::None;   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:204:24: 204:28
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _7); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:204:21: 204:29
        goto -> bb58;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:204:28: 204:29
    }

    bb7: {
        _8 = DecodeState::Release;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:207:34: 207:54
        ((*_1).0: DecodeState) = move _8; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:207:21: 207:54
        _9 = Option::<KeyEvent>::None;   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:208:24: 208:28
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _9); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:208:21: 208:29
        goto -> bb58;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:208:28: 208:29
    }

    bb8: {
        _11 = <Result<KeyCode, Error> as Try>::branch(move _12) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:35: 211:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:35: 211:60
                                         // + literal: Const { ty: fn(Result<KeyCode, Error>) -> ControlFlow<<Result<KeyCode, Error> as Try>::Residual, <Result<KeyCode, Error> as Try>::Output> {<Result<KeyCode, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = discriminant(_11);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:35: 211:60
        switchInt(move _13) -> [0: bb10, 1: bb11, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:35: 211:60
    }

    bb10: {
        _15 = ((_11 as Continue).0: KeyCode); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:35: 211:60
        _10 = _15;                       // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:35: 211:60
        _18 = &_10;                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:24: 212:31
        _83 = const _;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:35: 212:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:35: 212:55
                                         // + literal: Const { ty: &KeyCode, val: Unevaluated(<ScancodeSet2 as ScancodeSet>::advance_state, [], Some(promoted[1])) }
        _17 = <KeyCode as PartialEq>::eq(move _18, _83) -> [return: bb15, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:24: 212:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:24: 212:55
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a KeyCode, &'b KeyCode) -> bool {<KeyCode as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb11: {
        _14 = ((_11 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:59: 211:60
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_14) -> [return: bb58, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:35: 211:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:211:59: 211:60
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb12: {
        _16 = const true;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:24: 212:92
        goto -> bb14;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:24: 212:92
    }

    bb13: {
        _20 = &_10;                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:59: 212:66
        _82 = const _;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:70: 212:92
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:70: 212:92
                                         // + literal: Const { ty: &KeyCode, val: Unevaluated(<ScancodeSet2 as ScancodeSet>::advance_state, [], Some(promoted[0])) }
        _19 = <KeyCode as PartialEq>::eq(move _20, _82) -> [return: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:59: 212:92
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:59: 212:92
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a KeyCode, &'b KeyCode) -> bool {<KeyCode as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        switchInt(move _16) -> [0: bb19, otherwise: bb17]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:24: 212:92
    }

    bb15: {
        switchInt(move _17) -> [0: bb13, otherwise: bb12]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:24: 212:92
    }

    bb16: {
        _16 = move _19;                  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:24: 212:92
        goto -> bb14;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:24: 212:92
    }

    bb17: {
        _23 = _10;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:213:47: 213:54
        _24 = KeyState::SingleShot;      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:213:56: 213:76
        _22 = KeyEvent::new(move _23, move _24) -> [return: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:213:33: 213:77
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:213:33: 213:46
                                         // + literal: Const { ty: fn(KeyCode, KeyState) -> KeyEvent {KeyEvent::new}, val: Value(<ZST>) }
    }

    bb18: {
        _21 = Option::<KeyEvent>::Some(move _22); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:213:28: 213:78
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _21); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:213:25: 213:79
        goto -> bb58;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:21: 219:22
    }

    bb19: {
        _28 = ScancodeSet2::map_scancode(_2) -> [return: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:29: 216:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:29: 216:47
                                         // + literal: Const { ty: fn(u8) -> Result<KeyCode, Error> {ScancodeSet2::map_scancode}, val: Value(<ZST>) }
    }

    bb20: {
        _27 = <Result<KeyCode, Error> as Try>::branch(move _28) -> [return: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:29: 216:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:29: 216:54
                                         // + literal: Const { ty: fn(Result<KeyCode, Error>) -> ControlFlow<<Result<KeyCode, Error> as Try>::Residual, <Result<KeyCode, Error> as Try>::Output> {<Result<KeyCode, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb21: {
        _29 = discriminant(_27);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:29: 216:54
        switchInt(move _29) -> [0: bb22, 1: bb23, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:29: 216:54
    }

    bb22: {
        _31 = ((_27 as Continue).0: KeyCode); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:29: 216:54
        _32 = KeyState::Down;            // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:217:29: 217:43
        _26 = KeyEvent::new(_31, move _32) -> [return: bb24, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:215:33: 218:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:215:33: 215:46
                                         // + literal: Const { ty: fn(KeyCode, KeyState) -> KeyEvent {KeyEvent::new}, val: Value(<ZST>) }
    }

    bb23: {
        _30 = ((_27 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:53: 216:54
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_30) -> [return: bb58, unwind unreachable]; // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:29: 216:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:216:53: 216:54
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb24: {
        _25 = Option::<KeyEvent>::Some(move _26); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:215:28: 218:27
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _25); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:215:25: 218:28
        goto -> bb58;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:21: 219:22
    }

    bb25: {
        _33 = DecodeState::Start;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:223:30: 223:48
        ((*_1).0: DecodeState) = move _33; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:223:17: 223:48
        _37 = ScancodeSet2::map_scancode(_2) -> [return: bb26, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:39: 224:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:39: 224:57
                                         // + literal: Const { ty: fn(u8) -> Result<KeyCode, Error> {ScancodeSet2::map_scancode}, val: Value(<ZST>) }
    }

    bb26: {
        _36 = <Result<KeyCode, Error> as Try>::branch(move _37) -> [return: bb27, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:39: 224:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:39: 224:64
                                         // + literal: Const { ty: fn(Result<KeyCode, Error>) -> ControlFlow<<Result<KeyCode, Error> as Try>::Residual, <Result<KeyCode, Error> as Try>::Output> {<Result<KeyCode, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb27: {
        _38 = discriminant(_36);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:39: 224:64
        switchInt(move _38) -> [0: bb28, 1: bb29, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:39: 224:64
    }

    bb28: {
        _40 = ((_36 as Continue).0: KeyCode); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:39: 224:64
        _41 = KeyState::Up;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:66: 224:78
        _35 = KeyEvent::new(_40, move _41) -> [return: bb30, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:25: 224:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:25: 224:38
                                         // + literal: Const { ty: fn(KeyCode, KeyState) -> KeyEvent {KeyEvent::new}, val: Value(<ZST>) }
    }

    bb29: {
        _39 = ((_36 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:63: 224:64
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_39) -> [return: bb58, unwind unreachable]; // scope 11 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:39: 224:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:63: 224:64
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb30: {
        _34 = Option::<KeyEvent>::Some(move _35); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:20: 224:80
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _34); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:224:17: 224:81
        goto -> bb58;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:225:13: 225:14
    }

    bb31: {
        switchInt(_2) -> [240: bb33, otherwise: bb32]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:226:38: 226:48
    }

    bb32: {
        _44 = DecodeState::Start;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:232:34: 232:52
        ((*_1).0: DecodeState) = move _44; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:232:21: 232:52
        _46 = ScancodeSet2::map_extended_scancode(_2) -> [return: bb34, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:35: 234:68
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:35: 234:62
                                         // + literal: Const { ty: fn(u8) -> Result<KeyCode, Error> {ScancodeSet2::map_extended_scancode}, val: Value(<ZST>) }
    }

    bb33: {
        _42 = DecodeState::ExtendedRelease; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:228:34: 228:62
        ((*_1).0: DecodeState) = move _42; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:228:21: 228:62
        _43 = Option::<KeyEvent>::None;  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:229:24: 229:28
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _43); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:229:21: 229:29
        goto -> bb58;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:229:28: 229:29
    }

    bb34: {
        _45 = <Result<KeyCode, Error> as Try>::branch(move _46) -> [return: bb35, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:35: 234:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:35: 234:69
                                         // + literal: Const { ty: fn(Result<KeyCode, Error>) -> ControlFlow<<Result<KeyCode, Error> as Try>::Residual, <Result<KeyCode, Error> as Try>::Output> {<Result<KeyCode, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb35: {
        _47 = discriminant(_45);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:35: 234:69
        switchInt(move _47) -> [0: bb36, 1: bb37, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:35: 234:69
    }

    bb36: {
        _49 = ((_45 as Continue).0: KeyCode); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:35: 234:69
        _52 = KeyState::Down;            // scope 14 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:235:52: 235:66
        _51 = KeyEvent::new(_49, move _52) -> [return: bb38, unwind unreachable]; // scope 14 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:235:29: 235:67
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:235:29: 235:42
                                         // + literal: Const { ty: fn(KeyCode, KeyState) -> KeyEvent {KeyEvent::new}, val: Value(<ZST>) }
    }

    bb37: {
        _48 = ((_45 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:68: 234:69
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_48) -> [return: bb58, unwind unreachable]; // scope 16 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:35: 234:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:234:68: 234:69
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb38: {
        _50 = Option::<KeyEvent>::Some(move _51); // scope 14 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:235:24: 235:68
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _50); // scope 14 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:235:21: 235:69
        goto -> bb58;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:236:17: 236:18
    }

    bb39: {
        _53 = DecodeState::Start;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:239:30: 239:48
        ((*_1).0: DecodeState) = move _53; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:239:17: 239:48
        _57 = ScancodeSet2::map_extended_scancode(_2) -> [return: bb40, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:21: 241:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:21: 241:48
                                         // + literal: Const { ty: fn(u8) -> Result<KeyCode, Error> {ScancodeSet2::map_extended_scancode}, val: Value(<ZST>) }
    }

    bb40: {
        _56 = <Result<KeyCode, Error> as Try>::branch(move _57) -> [return: bb41, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:21: 241:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:21: 241:55
                                         // + literal: Const { ty: fn(Result<KeyCode, Error>) -> ControlFlow<<Result<KeyCode, Error> as Try>::Residual, <Result<KeyCode, Error> as Try>::Output> {<Result<KeyCode, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb41: {
        _58 = discriminant(_56);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:21: 241:55
        switchInt(move _58) -> [0: bb42, 1: bb43, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:21: 241:55
    }

    bb42: {
        _60 = ((_56 as Continue).0: KeyCode); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:21: 241:55
        _61 = KeyState::Up;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:242:21: 242:33
        _55 = KeyEvent::new(_60, move _61) -> [return: bb44, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:240:25: 243:18
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:240:25: 240:38
                                         // + literal: Const { ty: fn(KeyCode, KeyState) -> KeyEvent {KeyEvent::new}, val: Value(<ZST>) }
    }

    bb43: {
        _59 = ((_56 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:54: 241:55
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_59) -> [return: bb58, unwind unreachable]; // scope 20 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:21: 241:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:241:54: 241:55
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb44: {
        _54 = Option::<KeyEvent>::Some(move _55); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:240:20: 243:19
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _54); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:240:17: 243:20
        goto -> bb58;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:244:13: 244:14
    }

    bb45: {
        switchInt(_2) -> [240: bb47, otherwise: bb46]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:245:39: 245:49
    }

    bb46: {
        _64 = DecodeState::Start;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:251:34: 251:52
        ((*_1).0: DecodeState) = move _64; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:251:21: 251:52
        _68 = ScancodeSet2::map_extended2_scancode(_2) -> [return: bb48, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:25: 253:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:25: 253:53
                                         // + literal: Const { ty: fn(u8) -> Result<KeyCode, Error> {ScancodeSet2::map_extended2_scancode}, val: Value(<ZST>) }
    }

    bb47: {
        _62 = DecodeState::Extended2Release; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:247:34: 247:63
        ((*_1).0: DecodeState) = move _62; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:247:21: 247:63
        _63 = Option::<KeyEvent>::None;  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:248:24: 248:28
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _63); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:248:21: 248:29
        goto -> bb58;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:248:28: 248:29
    }

    bb48: {
        _67 = <Result<KeyCode, Error> as Try>::branch(move _68) -> [return: bb49, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:25: 253:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:25: 253:60
                                         // + literal: Const { ty: fn(Result<KeyCode, Error>) -> ControlFlow<<Result<KeyCode, Error> as Try>::Residual, <Result<KeyCode, Error> as Try>::Output> {<Result<KeyCode, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb49: {
        _69 = discriminant(_67);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:25: 253:60
        switchInt(move _69) -> [0: bb50, 1: bb51, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:25: 253:60
    }

    bb50: {
        _71 = ((_67 as Continue).0: KeyCode); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:25: 253:60
        _72 = KeyState::Down;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:254:25: 254:39
        _66 = KeyEvent::new(_71, move _72) -> [return: bb52, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:252:29: 255:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:252:29: 252:42
                                         // + literal: Const { ty: fn(KeyCode, KeyState) -> KeyEvent {KeyEvent::new}, val: Value(<ZST>) }
    }

    bb51: {
        _70 = ((_67 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:59: 253:60
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_70) -> [return: bb58, unwind unreachable]; // scope 24 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:25: 253:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:253:59: 253:60
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb52: {
        _65 = Option::<KeyEvent>::Some(move _66); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:252:24: 255:23
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _65); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:252:21: 255:24
        goto -> bb58;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:256:17: 256:18
    }

    bb53: {
        _76 = <Result<KeyCode, Error> as Try>::branch(move _77) -> [return: bb54, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:21: 261:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:21: 261:56
                                         // + literal: Const { ty: fn(Result<KeyCode, Error>) -> ControlFlow<<Result<KeyCode, Error> as Try>::Residual, <Result<KeyCode, Error> as Try>::Output> {<Result<KeyCode, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb54: {
        _78 = discriminant(_76);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:21: 261:56
        switchInt(move _78) -> [0: bb55, 1: bb56, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:21: 261:56
    }

    bb55: {
        _80 = ((_76 as Continue).0: KeyCode); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:21: 261:56
        _81 = KeyState::Up;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:262:21: 262:33
        _75 = KeyEvent::new(_80, move _81) -> [return: bb57, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:260:25: 263:18
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:260:25: 260:38
                                         // + literal: Const { ty: fn(KeyCode, KeyState) -> KeyEvent {KeyEvent::new}, val: Value(<ZST>) }
    }

    bb56: {
        _79 = ((_76 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:55: 261:56
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_79) -> [return: bb58, unwind unreachable]; // scope 28 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:21: 261:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:261:55: 261:56
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb57: {
        _74 = Option::<KeyEvent>::Some(move _75); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:260:20: 263:19
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _74); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:260:17: 263:20
        goto -> bb58;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:264:13: 264:14
    }

    bb58: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:266:6: 266:6
    }
}

promoted[0] in set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:170:1: 170:34>::advance_state: &KeyCode = {
    let mut _0: &KeyCode;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:70: 212:92
    let mut _1: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:70: 212:92

    bb0: {
        _1 = KeyCode::PowerOnTestOk;     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:70: 212:92
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:70: 212:92
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:70: 212:92
    }
}

promoted[1] in set2::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:170:1: 170:34>::advance_state: &KeyCode = {
    let mut _0: &KeyCode;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:35: 212:55
    let mut _1: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:35: 212:55

    bb0: {
        _1 = KeyCode::TooManyKeys;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:35: 212:55
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:35: 212:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/scancodes/set2.rs:212:35: 212:55
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:40:10: 40:15>::fmt(_1: &Keyboard<L, S>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:40:10: 40:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:40:10: 40:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:40:10: 40:15
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:40:10: 40:15
    let _4: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:46:5: 46:28
    let mut _5: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:46:5: 46:28
    let _6: &Ps2Decoder;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:46:5: 46:28
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:47:5: 47:20
    let mut _8: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:47:5: 47:20
    let _9: &S;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:47:5: 47:20
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:48:5: 48:35
    let mut _11: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:48:5: 48:35
    let _12: &&EventDecoder<L>;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:48:5: 48:35
    let _13: &EventDecoder<L>;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:48:5: 48:35

    bb0: {
        _3 = const "Keyboard";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:40:10: 40:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:40:10: 40:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "ps2_decoder";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:46:5: 46:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:46:5: 46:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: Ps2Decoder);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:46:5: 46:28
        _5 = _6 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:46:5: 46:28
        _7 = const "scancode_set";       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:47:5: 47:20
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:47:5: 47:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: S);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:47:5: 47:20
        _8 = _9 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:47:5: 47:20
        _10 = const "event_decoder";     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:48:5: 48:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:48:5: 48:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = &((*_1).2: EventDecoder<L>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:48:5: 48:35
        _12 = &_13;                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:48:5: 48:35
        _11 = _12 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:48:5: 48:35
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:40:10: 40:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:40:10: 40:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:40:15: 40:15
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:52:10: 52:15>::fmt(_1: &Ps2Decoder, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:52:10: 52:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:52:10: 52:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:52:10: 52:15
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:52:10: 52:15
    let _4: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:54:5: 54:18
    let mut _5: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:54:5: 54:18
    let _6: &u16;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:54:5: 54:18
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:55:5: 55:17
    let mut _8: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:55:5: 55:17
    let _9: &&u8;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:55:5: 55:17
    let _10: &u8;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:55:5: 55:17

    bb0: {
        _3 = const "Ps2Decoder";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:52:10: 52:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:52:10: 52:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "register";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:54:5: 54:18
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:54:5: 54:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: u16);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:54:5: 54:18
        _5 = _6 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:54:5: 54:18
        _7 = const "num_bits";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:55:5: 55:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:55:5: 55:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &((*_1).1: u8);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:55:5: 55:17
        _9 = &_10;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:55:5: 55:17
        _8 = _9 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:55:5: 55:17
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:52:10: 52:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:52:10: 52:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:52:15: 52:15
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:59:10: 59:15>::fmt(_1: &EventDecoder<L>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:59:10: 59:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:59:10: 59:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:59:10: 59:15
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:59:10: 59:15
    let _4: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:64:5: 64:31
    let mut _5: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:64:5: 64:31
    let _6: &HandleControl;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:64:5: 64:31
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:65:5: 65:25
    let mut _8: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:65:5: 65:25
    let _9: &Modifiers;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:65:5: 65:25
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:66:5: 66:14
    let mut _11: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:66:5: 66:14
    let _12: &&L;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:66:5: 66:14
    let _13: &L;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:66:5: 66:14

    bb0: {
        _3 = const "EventDecoder";       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:59:10: 59:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "handle_ctrl";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:64:5: 64:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:64:5: 64:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: HandleControl);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:64:5: 64:31
        _5 = _6 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:64:5: 64:31
        _7 = const "modifiers";          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:65:5: 65:25
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:65:5: 65:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: Modifiers);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:65:5: 65:25
        _8 = _9 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:65:5: 65:25
        _10 = const "layout";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:66:5: 66:14
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:66:5: 66:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = &((*_1).2: L);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:66:5: 66:14
        _12 = &_13;                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:66:5: 66:14
        _11 = _12 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:66:5: 66:14
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:59:10: 59:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:59:15: 59:15
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15>::fmt(_1: &Error, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
    let mut _3: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
    let _5: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
    let _6: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
    let _8: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
    let _9: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
    }

    bb1: {
        _9 = const "InvalidState";       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _9;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:14: 70:15
    }

    bb2: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
    }

    bb3: {
        _5 = const "BadStartBit";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:14: 70:15
    }

    bb4: {
        _6 = const "BadStopBit";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:14: 70:15
    }

    bb5: {
        _7 = const "ParityError";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _7;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:14: 70:15
    }

    bb6: {
        _8 = const "UnknownKeyCode";     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _8;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:14: 70:15
    }

    bb7: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb8, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:10: 70:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:15: 70:15
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:17: 70:26>::eq(_1: &Error, _2: &Error) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:17: 70:26
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:17: 70:26
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:17: 70:26
    let _3: isize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:17: 70:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:17: 70:26
        let _4: isize;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:17: 70:26
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:17: 70:26
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:17: 70:26
        _4 = discriminant((*_2));        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:17: 70:26
        _0 = Eq(_3, _4);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:17: 70:26
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:26: 70:26
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:28: 70:30>::assert_receiver_is_total_eq(_1: &Error) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:28: 70:30
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:28: 70:30

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:30: 70:30
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:38: 70:43>::clone(_1: &Error) -> Error {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:38: 70:43
    let mut _0: Error;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:38: 70:43

    bb0: {
        _0 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:38: 70:43
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:70:43: 70:43
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15>::fmt(_1: &KeyCode, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let mut _3: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _5: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _6: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _8: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _9: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _11: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _12: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _13: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _14: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _15: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _16: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _17: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _18: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _19: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _20: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _21: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _22: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _23: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _24: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _25: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _26: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _27: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _28: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _29: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _30: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _31: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _32: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _33: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _34: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _35: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _36: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _37: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _38: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _39: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _40: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _41: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _42: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _43: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _44: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _45: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _46: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _47: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _48: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _49: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _50: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _51: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _52: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _53: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _54: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _55: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _56: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _57: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _58: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _59: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _60: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _61: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _62: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _63: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _64: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _65: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _66: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _67: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _68: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _69: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _70: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _71: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _72: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _73: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _74: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _75: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _76: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _77: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _78: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _79: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _80: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _81: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _82: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _83: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _84: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _85: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _86: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _87: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _88: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _89: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _90: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _91: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _92: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _93: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _94: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _95: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _96: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _97: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _98: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _99: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _100: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _101: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _102: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _103: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _104: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _105: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _106: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _107: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _108: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _109: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _110: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _111: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _112: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _113: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _114: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _115: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _116: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _117: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _118: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _119: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _120: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _121: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _122: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _123: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _124: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _125: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _126: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _127: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    let _128: &str;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb18, 16: bb19, 17: bb20, 18: bb21, 19: bb22, 20: bb23, 21: bb24, 22: bb25, 23: bb26, 24: bb27, 25: bb28, 26: bb29, 27: bb30, 28: bb31, 29: bb32, 30: bb33, 31: bb34, 32: bb35, 33: bb36, 34: bb37, 35: bb38, 36: bb39, 37: bb40, 38: bb41, 39: bb42, 40: bb43, 41: bb44, 42: bb45, 43: bb46, 44: bb47, 45: bb48, 46: bb49, 47: bb50, 48: bb51, 49: bb52, 50: bb53, 51: bb54, 52: bb55, 53: bb56, 54: bb57, 55: bb58, 56: bb59, 57: bb60, 58: bb61, 59: bb62, 60: bb63, 61: bb64, 62: bb65, 63: bb66, 64: bb67, 65: bb68, 66: bb69, 67: bb70, 68: bb71, 69: bb72, 70: bb73, 71: bb74, 72: bb75, 73: bb76, 74: bb77, 75: bb78, 76: bb79, 77: bb80, 78: bb81, 79: bb82, 80: bb83, 81: bb84, 82: bb85, 83: bb86, 84: bb87, 85: bb88, 86: bb89, 87: bb90, 88: bb91, 89: bb92, 90: bb93, 91: bb94, 92: bb95, 93: bb96, 94: bb97, 95: bb98, 96: bb99, 97: bb100, 98: bb101, 99: bb102, 100: bb103, 101: bb104, 102: bb105, 103: bb106, 104: bb107, 105: bb108, 106: bb109, 107: bb110, 108: bb111, 109: bb112, 110: bb113, 111: bb114, 112: bb115, 113: bb116, 114: bb117, 115: bb118, 116: bb119, 117: bb120, 118: bb121, 119: bb122, 120: bb123, 121: bb124, 122: bb125, 123: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    }

    bb1: {
        _128 = const "RAlt2";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _128;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb2: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
    }

    bb3: {
        _5 = const "Escape";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb4: {
        _6 = const "F1";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb5: {
        _7 = const "F2";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _7;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb6: {
        _8 = const "F3";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _8;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb7: {
        _9 = const "F4";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _9;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb8: {
        _10 = const "F5";                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _10;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb9: {
        _11 = const "F6";                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _11;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb10: {
        _12 = const "F7";                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _12;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb11: {
        _13 = const "F8";                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _13;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb12: {
        _14 = const "F9";                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _14;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb13: {
        _15 = const "F10";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _15;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb14: {
        _16 = const "F11";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _16;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb15: {
        _17 = const "F12";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _17;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb16: {
        _18 = const "PrintScreen";       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _18;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb17: {
        _19 = const "SysRq";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _19;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb18: {
        _20 = const "ScrollLock";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _20;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb19: {
        _21 = const "PauseBreak";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _21;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb20: {
        _22 = const "Oem8";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _22;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb21: {
        _23 = const "Key1";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _23;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb22: {
        _24 = const "Key2";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _24;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb23: {
        _25 = const "Key3";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _25;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb24: {
        _26 = const "Key4";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _26;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb25: {
        _27 = const "Key5";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _27;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb26: {
        _28 = const "Key6";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _28;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb27: {
        _29 = const "Key7";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _29;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb28: {
        _30 = const "Key8";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _30;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb29: {
        _31 = const "Key9";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _31;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb30: {
        _32 = const "Key0";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _32;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb31: {
        _33 = const "OemMinus";          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _33;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb32: {
        _34 = const "OemPlus";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _34;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb33: {
        _35 = const "Backspace";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _35;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb34: {
        _36 = const "Insert";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _36;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb35: {
        _37 = const "Home";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _37;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb36: {
        _38 = const "PageUp";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _38;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb37: {
        _39 = const "NumpadLock";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _39;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb38: {
        _40 = const "NumpadDivide";      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _40;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb39: {
        _41 = const "NumpadMultiply";    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _41;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb40: {
        _42 = const "NumpadSubtract";    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _42;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb41: {
        _43 = const "Tab";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _43;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb42: {
        _44 = const "Q";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _44;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb43: {
        _45 = const "W";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _45;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb44: {
        _46 = const "E";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _46;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb45: {
        _47 = const "R";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _47;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb46: {
        _48 = const "T";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _48;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb47: {
        _49 = const "Y";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _49;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb48: {
        _50 = const "U";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _50;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb49: {
        _51 = const "I";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _51;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb50: {
        _52 = const "O";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _52;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb51: {
        _53 = const "P";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _53;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb52: {
        _54 = const "Oem4";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _54;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb53: {
        _55 = const "Oem6";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _55;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb54: {
        _56 = const "Oem5";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _56;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb55: {
        _57 = const "Oem7";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _57;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb56: {
        _58 = const "Delete";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _58;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb57: {
        _59 = const "End";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _59;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb58: {
        _60 = const "PageDown";          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _60;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb59: {
        _61 = const "Numpad7";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _61;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb60: {
        _62 = const "Numpad8";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _62;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb61: {
        _63 = const "Numpad9";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _63;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb62: {
        _64 = const "NumpadAdd";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _64;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb63: {
        _65 = const "CapsLock";          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _65;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb64: {
        _66 = const "A";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _66;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb65: {
        _67 = const "S";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _67;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb66: {
        _68 = const "D";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _68;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb67: {
        _69 = const "F";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _69;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb68: {
        _70 = const "G";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _70;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb69: {
        _71 = const "H";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _71;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb70: {
        _72 = const "J";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _72;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb71: {
        _73 = const "K";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _73;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb72: {
        _74 = const "L";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _74;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb73: {
        _75 = const "Oem1";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _75;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb74: {
        _76 = const "Oem3";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _76;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb75: {
        _77 = const "Return";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _77;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb76: {
        _78 = const "Numpad4";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _78;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb77: {
        _79 = const "Numpad5";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _79;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb78: {
        _80 = const "Numpad6";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _80;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb79: {
        _81 = const "LShift";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _81;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb80: {
        _82 = const "Z";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _82;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb81: {
        _83 = const "X";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _83;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb82: {
        _84 = const "C";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _84;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb83: {
        _85 = const "V";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _85;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb84: {
        _86 = const "B";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _86;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb85: {
        _87 = const "N";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _87;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb86: {
        _88 = const "M";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _88;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb87: {
        _89 = const "OemComma";          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _89;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb88: {
        _90 = const "OemPeriod";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _90;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb89: {
        _91 = const "Oem2";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _91;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb90: {
        _92 = const "RShift";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _92;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb91: {
        _93 = const "ArrowUp";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _93;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb92: {
        _94 = const "Numpad1";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _94;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb93: {
        _95 = const "Numpad2";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _95;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb94: {
        _96 = const "Numpad3";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _96;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb95: {
        _97 = const "NumpadEnter";       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _97;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb96: {
        _98 = const "LControl";          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _98;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb97: {
        _99 = const "LWin";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _99;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb98: {
        _100 = const "LAlt";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _100;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb99: {
        _101 = const "Spacebar";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _101;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb100: {
        _102 = const "RAltGr";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _102;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb101: {
        _103 = const "RWin";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _103;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb102: {
        _104 = const "Apps";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _104;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb103: {
        _105 = const "RControl";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _105;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb104: {
        _106 = const "ArrowLeft";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _106;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb105: {
        _107 = const "ArrowDown";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _107;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb106: {
        _108 = const "ArrowRight";       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _108;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb107: {
        _109 = const "Numpad0";          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _109;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb108: {
        _110 = const "NumpadPeriod";     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _110;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb109: {
        _111 = const "Oem9";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _111;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb110: {
        _112 = const "Oem10";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _112;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb111: {
        _113 = const "Oem11";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _113;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb112: {
        _114 = const "Oem12";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _114;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb113: {
        _115 = const "Oem13";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _115;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb114: {
        _116 = const "PrevTrack";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _116;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb115: {
        _117 = const "NextTrack";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _117;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb116: {
        _118 = const "Mute";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _118;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb117: {
        _119 = const "Calculator";       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _119;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb118: {
        _120 = const "Play";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _120;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb119: {
        _121 = const "Stop";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _121;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb120: {
        _122 = const "VolumeDown";       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _122;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb121: {
        _123 = const "VolumeUp";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _123;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb122: {
        _124 = const "WWWHome";          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _124;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb123: {
        _125 = const "PowerOnTestOk";    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _125;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb124: {
        _126 = const "TooManyKeys";      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _126;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb125: {
        _127 = const "RControl2";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _127;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
        goto -> bb126;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:14: 85:15
    }

    bb126: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb127, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:10: 85:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb127: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:15: 85:15
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:17: 85:26>::eq(_1: &KeyCode, _2: &KeyCode) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:17: 85:26
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:17: 85:26
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:17: 85:26
    let _3: u8;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:17: 85:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:17: 85:26
        let _4: u8;                      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:17: 85:26
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:17: 85:26
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:17: 85:26
        _4 = discriminant((*_2));        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:17: 85:26
        _0 = Eq(_3, _4);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:17: 85:26
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:26: 85:26
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:28: 85:30>::assert_receiver_is_total_eq(_1: &KeyCode) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:28: 85:30
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:28: 85:30

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:30: 85:30
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:38: 85:43>::clone(_1: &KeyCode) -> KeyCode {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:38: 85:43
    let mut _0: KeyCode;                 // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:38: 85:43

    bb0: {
        _0 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:38: 85:43
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:43: 85:43
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55>::partial_cmp(_1: &KeyCode, _2: &KeyCode) -> Option<core::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
    let mut _0: core::option::Option<core::cmp::Ordering>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
    let _3: u8;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
    let _5: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
    let _6: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
        let _4: u8;                      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
        _4 = discriminant((*_2));        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
        _5 = &_3;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
        _6 = &_4;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
        _0 = <u8 as PartialOrd>::partial_cmp(_5, _6) -> [return: bb1, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:45: 85:55
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> Option<core::cmp::Ordering> {<u8 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:55: 85:55
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60>::cmp(_1: &KeyCode, _2: &KeyCode) -> core::cmp::Ordering {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
    let mut _0: core::cmp::Ordering;     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
    let _3: u8;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
    let _5: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
    let _6: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
        let _4: u8;                      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
        _4 = discriminant((*_2));        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
        _5 = &_3;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
        _6 = &_4;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
        _0 = <u8 as Ord>::cmp(_5, _6) -> [return: bb1, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:57: 85:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> core::cmp::Ordering {<u8 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:85:60: 85:60
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15>::fmt(_1: &KeyState, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
    let mut _3: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
    let _5: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
    let _6: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
    }

    bb1: {
        _7 = const "SingleShot";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _7;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:14: 365:15
    }

    bb2: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
    }

    bb3: {
        _5 = const "Up";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:14: 365:15
    }

    bb4: {
        _6 = const "Down";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:14: 365:15
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:10: 365:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:15: 365:15
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:17: 365:26>::eq(_1: &KeyState, _2: &KeyState) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:17: 365:26
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:17: 365:26
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:17: 365:26
    let _3: isize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:17: 365:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:17: 365:26
        let _4: isize;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:17: 365:26
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:17: 365:26
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:17: 365:26
        _4 = discriminant((*_2));        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:17: 365:26
        _0 = Eq(_3, _4);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:17: 365:26
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:26: 365:26
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:28: 365:30>::assert_receiver_is_total_eq(_1: &KeyState) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:28: 365:30
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:28: 365:30

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:30: 365:30
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:38: 365:43>::clone(_1: &KeyState) -> KeyState {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:38: 365:43
    let mut _0: KeyState;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:38: 365:43

    bb0: {
        _0 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:38: 365:43
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:365:43: 365:43
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15>::fmt(_1: &HandleControl, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
    let mut _3: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
    let _5: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
    let _6: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
    }

    bb1: {
        _6 = const "Ignore";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
        goto -> bb4;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:14: 378:15
    }

    bb2: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
    }

    bb3: {
        _5 = const "MapLettersToUnicode"; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
        goto -> bb4;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:14: 378:15
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:10: 378:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:15: 378:15
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:17: 378:26>::eq(_1: &HandleControl, _2: &HandleControl) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:17: 378:26
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:17: 378:26
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:17: 378:26
    let _3: isize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:17: 378:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:17: 378:26
        let _4: isize;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:17: 378:26
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:17: 378:26
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:17: 378:26
        _4 = discriminant((*_2));        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:17: 378:26
        _0 = Eq(_3, _4);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:17: 378:26
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:26: 378:26
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:28: 378:30>::assert_receiver_is_total_eq(_1: &HandleControl) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:28: 378:30
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:28: 378:30

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:30: 378:30
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:38: 378:43>::clone(_1: &HandleControl) -> HandleControl {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:38: 378:43
    let mut _0: HandleControl;           // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:38: 378:43

    bb0: {
        _0 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:38: 378:43
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:378:43: 378:43
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:10: 390:15>::fmt(_1: &KeyEvent, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:10: 390:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:10: 390:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:10: 390:15
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:10: 390:15
    let _4: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
    let mut _5: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
    let _6: &KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
    let mut _8: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
    let _9: &&KeyState;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
    let _10: &KeyState;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24

    bb0: {
        _3 = const "KeyEvent";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:10: 390:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:10: 390:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "code";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: KeyCode);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
        _5 = _6 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
        _7 = const "state";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &((*_1).1: KeyState);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
        _9 = &_10;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
        _8 = _9 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:10: 390:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:10: 390:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:15: 390:15
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:17: 390:26>::eq(_1: &KeyEvent, _2: &KeyEvent) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:17: 390:26
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:17: 390:26
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:17: 390:26
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
    let mut _4: &KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
    let mut _5: &KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
    let mut _7: &KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
    let mut _8: &KeyState;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24

    bb0: {
        _4 = &((*_1).0: KeyCode);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
        _5 = &((*_2).0: KeyCode);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
        _3 = <KeyCode as PartialEq>::eq(move _4, move _5) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a KeyCode, &'b KeyCode) -> bool {<KeyCode as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
    }

    bb2: {
        _7 = &((*_1).1: KeyState);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
        _8 = &((*_2).1: KeyState);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
        _6 = <KeyState as PartialEq>::eq(move _7, move _8) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a KeyState, &'b KeyState) -> bool {<KeyState as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:26: 390:26
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
    }

    bb5: {
        _0 = move _6;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:28: 390:30>::assert_receiver_is_total_eq(_1: &KeyEvent) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:28: 390:30
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:28: 390:30
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:30: 390:30
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:32: 390:37>::clone(_1: &KeyEvent) -> KeyEvent {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:32: 390:37
    let mut _0: KeyEvent;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:32: 390:37
    let mut _2: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
    let _3: &KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
    let mut _4: KeyState;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
    let _5: &KeyState;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24

    bb0: {
        _3 = &((*_1).0: KeyCode);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
        _2 = <KeyCode as Clone>::clone(_3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:393:5: 393:22
                                         // + literal: Const { ty: for<'a> fn(&'a KeyCode) -> KeyCode {<KeyCode as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: KeyState);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
        _4 = <KeyState as Clone>::clone(_5) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:395:5: 395:24
                                         // + literal: Const { ty: for<'a> fn(&'a KeyState) -> KeyState {<KeyState as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = KeyEvent { code: move _2, state: move _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:32: 390:37
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:390:37: 390:37
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15>::fmt(_1: &Modifiers, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
    let _4: &[&dyn core::fmt::Debug; 8]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
    let _5: [&dyn core::fmt::Debug; 8];  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
    let mut _6: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:426:5: 426:21
    let _7: &bool;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:426:5: 426:21
    let mut _8: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:428:5: 428:21
    let _9: &bool;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:428:5: 428:21
    let mut _10: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:430:5: 430:20
    let _11: &bool;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:430:5: 430:20
    let mut _12: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:432:5: 432:20
    let _13: &bool;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:432:5: 432:20
    let mut _14: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:434:5: 434:22
    let _15: &bool;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:434:5: 434:22
    let mut _16: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:436:5: 436:23
    let _17: &bool;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:436:5: 436:23
    let mut _18: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:438:5: 438:21
    let _19: &bool;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:438:5: 438:21
    let mut _20: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21
    let _21: &&bool;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21
    let _22: &bool;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21
    let _23: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
    let mut _24: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
    let mut _25: &[&str; 8];             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
    scope 1 {
        debug names => const _;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
        let _3: &[&dyn core::fmt::Debug]; // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
        scope 2 {
            debug values => _3;          // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
        }
    }

    bb0: {
        _25 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
                                         // + literal: Const { ty: &[&str; 8], val: Unevaluated(<Modifiers as Debug>::fmt, [], Some(promoted[0])) }
        _7 = &((*_1).0: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:426:5: 426:21
        _6 = _7 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:426:5: 426:21
        _9 = &((*_1).1: bool);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:428:5: 428:21
        _8 = _9 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:428:5: 428:21
        _11 = &((*_1).2: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:430:5: 430:20
        _10 = _11 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:430:5: 430:20
        _13 = &((*_1).3: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:432:5: 432:20
        _12 = _13 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:432:5: 432:20
        _15 = &((*_1).4: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:434:5: 434:22
        _14 = _15 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:434:5: 434:22
        _17 = &((*_1).5: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:436:5: 436:23
        _16 = _17 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:436:5: 436:23
        _19 = &((*_1).6: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:438:5: 438:21
        _18 = _19 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:438:5: 438:21
        _22 = &((*_1).7: bool);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21
        _21 = &_22;                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21
        _20 = _21 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
        _4 = &_5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
        _3 = _4 as &[&dyn core::fmt::Debug] (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
        _23 = const "Modifiers";         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = _25 as &[&str] (Pointer(Unsize)); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _23, move _24, _3) -> [return: bb1, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:15: 423:15
    }
}

promoted[0] in <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15>::fmt: &[&str; 8] = {
    let mut _0: &[&str; 8];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
    let mut _1: [&str; 8];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
    let mut _2: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:428:5: 428:21
    let mut _3: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:428:5: 428:21
    let mut _4: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:430:5: 430:20
    let mut _5: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:430:5: 430:20
    let mut _6: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:432:5: 432:20
    let mut _7: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:432:5: 432:20
    let mut _8: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:434:5: 434:22
    let mut _9: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:434:5: 434:22
    let mut _10: &str;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:436:5: 436:23
    let mut _11: &str;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:436:5: 436:23
    let mut _12: &str;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:438:5: 438:21
    let mut _13: &str;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:438:5: 438:21
    let mut _14: &str;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21
    let mut _15: &str;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21

    bb0: {
        _3 = const "rshift";             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:428:5: 428:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:428:5: 428:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:428:5: 428:21
        _5 = const "lctrl";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:430:5: 430:20
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:430:5: 430:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:430:5: 430:20
        _7 = const "rctrl";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:432:5: 432:20
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:432:5: 432:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:432:5: 432:20
        _9 = const "numlock";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:434:5: 434:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:434:5: 434:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:434:5: 434:22
        _11 = const "capslock";          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:436:5: 436:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:436:5: 436:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:436:5: 436:23
        _13 = const "alt_gr";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:438:5: 438:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:438:5: 438:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &(*_13);                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:438:5: 438:21
        _15 = const "rctrl2";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = &(*_15);                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21
        _1 = [const "lshift", move _2, move _4, move _6, move _8, move _10, move _12, move _14]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:426:5: 426:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:10: 423:15
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:17: 423:24>::default() -> Modifiers {
    let mut _0: Modifiers;               // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:17: 423:24
    let mut _1: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:426:5: 426:21
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:428:5: 428:21
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:430:5: 430:20
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:432:5: 432:20
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:434:5: 434:22
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:436:5: 436:23
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:438:5: 438:21
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21

    bb0: {
        _1 = <bool as Default>::default() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:426:5: 426:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:426:5: 426:21
                                         // + literal: Const { ty: fn() -> bool {<bool as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <bool as Default>::default() -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:428:5: 428:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:428:5: 428:21
                                         // + literal: Const { ty: fn() -> bool {<bool as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <bool as Default>::default() -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:430:5: 430:20
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:430:5: 430:20
                                         // + literal: Const { ty: fn() -> bool {<bool as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <bool as Default>::default() -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:432:5: 432:20
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:432:5: 432:20
                                         // + literal: Const { ty: fn() -> bool {<bool as Default>::default}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = <bool as Default>::default() -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:434:5: 434:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:434:5: 434:22
                                         // + literal: Const { ty: fn() -> bool {<bool as Default>::default}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = <bool as Default>::default() -> [return: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:436:5: 436:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:436:5: 436:23
                                         // + literal: Const { ty: fn() -> bool {<bool as Default>::default}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = <bool as Default>::default() -> [return: bb7, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:438:5: 438:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:438:5: 438:21
                                         // + literal: Const { ty: fn() -> bool {<bool as Default>::default}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = <bool as Default>::default() -> [return: bb8, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:440:5: 440:21
                                         // + literal: Const { ty: fn() -> bool {<bool as Default>::default}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Modifiers { lshift: move _1, rshift: move _2, lctrl: move _3, rctrl: move _4, numlock: move _5, capslock: move _6, alt_gr: move _7, rctrl2: move _8 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:17: 423:24
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:423:24: 423:24
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15>::fmt(_1: &DecodedKey, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
    let mut _3: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
    let _4: &KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
    let _5: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
    let mut _6: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
    let _7: &&KeyCode;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
    let _8: &char;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
    let _9: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
    let mut _10: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
    let _11: &&char;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
    }
    scope 2 {
        debug __self_0 => _8;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
    }

    bb1: {
        _8 = &(((*_1) as Unicode).0: char); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
        _9 = const "Unicode";            // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = &_8;                       // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
        _10 = _11 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb4, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
    }

    bb3: {
        _4 = &(((*_1) as RawKey).0: KeyCode); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
        _5 = const "RawKey";             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = &_4;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
        _6 = _7 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:10: 444:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:15: 444:15
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26>::eq(_1: &DecodedKey, _2: &DecodedKey) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let _3: isize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _7: (&DecodedKey, &DecodedKey); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _8: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _9: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _10: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _15: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
    let mut _16: char;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
    let mut _17: &DecodedKey;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _18: &DecodedKey;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _19: &DecodedKey;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _20: &DecodedKey;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _21: &DecodedKey;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _22: &DecodedKey;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    let mut _23: &DecodedKey;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        let _4: isize;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
            let _11: &KeyCode;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
            let _12: &KeyCode;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
            let _13: &char;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
            let _14: &char;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
            scope 3 {
                debug __self_0 => _11;   // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
                debug __arg1_0 => _12;   // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
            }
            scope 4 {
                debug __self_0 => _13;   // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
                debug __arg1_0 => _14;   // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        _4 = discriminant((*_2));        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        _5 = Eq(_3, _4);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    }

    bb1: {
        _0 = const false;                // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        goto -> bb3;                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    }

    bb2: {
        _7 = (_1, _2);                   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        _17 = deref_copy (_7.0: &DecodedKey); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        _10 = discriminant((*_17));      // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:26: 444:26
    }

    bb4: {
        _18 = deref_copy (_7.1: &DecodedKey); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        _8 = discriminant((*_18));       // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        switchInt(move _8) -> [0: bb7, otherwise: bb5]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    }

    bb5: {
        unreachable;                     // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    }

    bb6: {
        _19 = deref_copy (_7.1: &DecodedKey); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        _9 = discriminant((*_19));       // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        switchInt(move _9) -> [1: bb8, otherwise: bb5]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    }

    bb7: {
        _20 = deref_copy (_7.0: &DecodedKey); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
        _11 = &(((*_20) as RawKey).0: KeyCode); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
        _21 = deref_copy (_7.1: &DecodedKey); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
        _12 = &(((*_21) as RawKey).0: KeyCode); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
        _6 = <KeyCode as PartialEq>::eq(_11, _12) -> [return: bb9, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:12: 446:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a KeyCode, &'b KeyCode) -> bool {<KeyCode as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _22 = deref_copy (_7.0: &DecodedKey); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
        _13 = &(((*_22) as Unicode).0: char); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
        _23 = deref_copy (_7.1: &DecodedKey); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
        _14 = &(((*_23) as Unicode).0: char); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
        _15 = (*_13);                    // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
        _16 = (*_14);                    // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
        _6 = Eq(move _15, move _16);     // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:13: 447:17
        goto -> bb9;                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:25: 444:26
    }

    bb9: {
        _0 = move _6;                    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
        goto -> bb3;                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:17: 444:26
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:28: 444:30>::assert_receiver_is_total_eq(_1: &DecodedKey) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:28: 444:30
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:28: 444:30
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:30: 444:30
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:38: 444:43>::clone(_1: &DecodedKey) -> DecodedKey {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:38: 444:43
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:38: 444:43
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:38: 444:43
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:444:43: 444:43
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15>::fmt(_1: &DecodeState, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
    let mut _3: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
    let _5: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
    let _6: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
    let _8: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
    let _9: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
    }

    bb1: {
        _10 = const "Extended2Release";  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _10;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
        goto -> bb8;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:14: 465:15
    }

    bb2: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
    }

    bb3: {
        _5 = const "Start";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
        goto -> bb8;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:14: 465:15
    }

    bb4: {
        _6 = const "Extended";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
        goto -> bb8;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:14: 465:15
    }

    bb5: {
        _7 = const "Release";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _7;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
        goto -> bb8;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:14: 465:15
    }

    bb6: {
        _8 = const "ExtendedRelease";    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _8;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
        goto -> bb8;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:14: 465:15
    }

    bb7: {
        _9 = const "Extended2";          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _9;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
        goto -> bb8;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:14: 465:15
    }

    bb8: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:10: 465:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:15: 465:15
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:23: 465:28>::clone(_1: &DecodeState) -> DecodeState {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:23: 465:28
    let mut _0: DecodeState;             // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:23: 465:28

    bb0: {
        _0 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:23: 465:28
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:28: 465:28
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:30: 465:32>::assert_receiver_is_total_eq(_1: &DecodeState) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:30: 465:32
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:30: 465:32

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:32: 465:32
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:34: 465:43>::eq(_1: &DecodeState, _2: &DecodeState) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:34: 465:43
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:34: 465:43
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:34: 465:43
    let _3: isize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:34: 465:43
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:34: 465:43
        let _4: isize;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:34: 465:43
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:34: 465:43
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:34: 465:43
        _4 = discriminant((*_2));        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:34: 465:43
        _0 = Eq(_3, _4);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:34: 465:43
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:465:43: 465:43
    }
}

const KEYCODE_BITS: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:481:21: 481:23

    bb0: {
        _0 = const 11_u8;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:481:26: 481:28
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:481:1: 481:29
    }
}

const EXTENDED_KEY_CODE: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:482:26: 482:28

    bb0: {
        _0 = const 224_u8;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:482:31: 482:35
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:482:1: 482:36
    }
}

const EXTENDED2_KEY_CODE: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:483:27: 483:29

    bb0: {
        _0 = const 225_u8;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:483:32: 483:36
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:483:1: 483:37
    }
}

const KEY_RELEASE_CODE: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:484:25: 484:27

    bb0: {
        _0 = const 240_u8;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:484:30: 484:34
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:484:1: 484:35
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 492:26>::new(_1: S, _2: L, _3: HandleControl) -> Keyboard<L, S> {
    debug scancode_set => _1;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:498:22: 498:34
    debug layout => _2;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:498:39: 498:45
    debug handle_ctrl => _3;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:498:50: 498:61
    let mut _0: Keyboard<L, S>;          // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:498:81: 498:95
    let mut _4: Ps2Decoder;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:500:26: 500:43
    let mut _5: EventDecoder<L>;         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:28: 502:66

    bb0: {
        _4 = Ps2Decoder::new() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:500:26: 500:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:500:26: 500:41
                                         // + literal: Const { ty: fn() -> Ps2Decoder {Ps2Decoder::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = EventDecoder::<L>::new(move _2, _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:28: 502:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:28: 502:45
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(L, HandleControl) -> EventDecoder<L> {EventDecoder::<L>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Keyboard::<L, S> { ps2_decoder: move _4, scancode_set: move _1, event_decoder: move _5 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:499:9: 503:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:504:6: 504:6
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 492:26>::new(_1: S, _2: L, _3: HandleControl) -> Keyboard<L, S> {
    debug scancode_set => _1;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:498:22: 498:34
    debug layout => _2;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:498:39: 498:45
    debug handle_ctrl => _3;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:498:50: 498:61
    let mut _0: Keyboard<L, S>;          // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:498:81: 498:95
    let mut _4: Ps2Decoder;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:500:26: 500:43
    let mut _5: S;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:501:13: 501:25
    let mut _6: EventDecoder<L>;         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:28: 502:66
    let mut _7: L;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:46: 502:52
    let mut _8: HandleControl;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:54: 502:65
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:504:5: 504:6
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:504:5: 504:6

    bb0: {
        _10 = const false;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:500:26: 500:43
        _9 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:500:26: 500:43
        _10 = const true;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:500:26: 500:43
        _9 = const true;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:500:26: 500:43
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:500:26: 500:43
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:500:26: 500:43
        _4 = Ps2Decoder::new() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:500:26: 500:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:500:26: 500:41
                                         // + literal: Const { ty: fn() -> Ps2Decoder {Ps2Decoder::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:501:13: 501:25
        _10 = const false;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:501:13: 501:25
        _5 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:501:13: 501:25
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:28: 502:66
        StorageLive(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:46: 502:52
        _9 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:46: 502:52
        _7 = move _2;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:46: 502:52
        StorageLive(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:54: 502:65
        _8 = _3;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:54: 502:65
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:28: 502:66
        _6 = EventDecoder::<L>::new(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:28: 502:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:28: 502:45
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(L, HandleControl) -> EventDecoder<L> {EventDecoder::<L>::new}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:65: 502:66
        StorageDead(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:502:65: 502:66
        _0 = Keyboard::<L, S> { ps2_decoder: move _4, scancode_set: move _5, event_decoder: move _6 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:499:9: 503:10
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:503:9: 503:10
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:503:9: 503:10
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:503:9: 503:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:504:6: 504:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 492:26>::set_ctrl_handling(_1: &mut Keyboard<L, S>, _2: HandleControl) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:507:30: 507:39
    debug new_value => _2;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:507:41: 507:50
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:507:67: 507:67
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:508:9: 508:56
    let mut _4: &mut EventDecoder<L>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:508:9: 508:56

    bb0: {
        _4 = &mut ((*_1).2: EventDecoder<L>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:508:9: 508:56
        _3 = EventDecoder::<L>::set_ctrl_handling(move _4, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:508:9: 508:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:508:28: 508:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut EventDecoder<L>, HandleControl) {EventDecoder::<L>::set_ctrl_handling}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:509:6: 509:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 492:26>::get_ctrl_handling(_1: &Keyboard<L, S>) -> HandleControl {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:512:36: 512:41
    let mut _0: HandleControl;           // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:512:46: 512:59
    let mut _2: &EventDecoder<L>;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:513:9: 513:47

    bb0: {
        _2 = &((*_1).2: EventDecoder<L>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:513:9: 513:47
        _0 = EventDecoder::<L>::get_ctrl_handling(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:513:9: 513:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:513:28: 513:45
                                         // + literal: Const { ty: for<'a> fn(&'a EventDecoder<L>) -> HandleControl {EventDecoder::<L>::get_ctrl_handling}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:514:6: 514:6
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 492:26>::get_ctrl_handling(_1: &Keyboard<L, S>) -> HandleControl {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:512:36: 512:41
    let mut _0: HandleControl;           // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:512:46: 512:59
    let mut _2: &EventDecoder<L>;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:513:9: 513:47

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:513:9: 513:47
        _2 = &((*_1).2: EventDecoder<L>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:513:9: 513:47
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:513:9: 513:47
        _0 = EventDecoder::<L>::get_ctrl_handling(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:513:9: 513:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:513:28: 513:45
                                         // + literal: Const { ty: for<'a> fn(&'a EventDecoder<L>) -> HandleControl {EventDecoder::<L>::get_ctrl_handling}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:513:46: 513:47
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:514:6: 514:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 492:26>::clear(_1: &mut Keyboard<L, S>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:519:18: 519:27
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:519:29: 519:29
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:520:9: 520:33
    let mut _3: &mut Ps2Decoder;         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:520:9: 520:33

    bb0: {
        _3 = &mut ((*_1).0: Ps2Decoder); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:520:9: 520:33
        _2 = Ps2Decoder::clear(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:520:9: 520:33
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:520:26: 520:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut Ps2Decoder) {Ps2Decoder::clear}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:521:6: 521:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 492:26>::add_word(_1: &mut Keyboard<L, S>, _2: u16) -> Result<Option<KeyEvent>, Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:530:21: 530:30
    debug word => _2;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:530:32: 530:36
    let mut _0: core::result::Result<core::option::Option<KeyEvent>, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:530:46: 530:77
    let mut _3: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:52
    let mut _4: core::result::Result<u8, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:51
    let mut _5: &Ps2Decoder;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:51
    let mut _6: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:51: 531:52
    let _7: core::result::Result<core::convert::Infallible, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:51: 531:52
    let _8: u8;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:52
    scope 1 {
        debug byte => _8;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:13: 531:17
    }
    scope 2 {
        debug residual => _7;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:51: 531:52
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;                 // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:52
        scope 5 {
        }
    }

    bb0: {
        _5 = &((*_1).0: Ps2Decoder);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:51
        _4 = Ps2Decoder::add_word(move _5, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:37: 531:45
                                         // + literal: Const { ty: for<'a> fn(&'a Ps2Decoder, u16) -> Result<u8, Error> {Ps2Decoder::add_word}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Result<u8, Error> as Try>::branch(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:52
                                         // + literal: Const { ty: fn(Result<u8, Error>) -> ControlFlow<<Result<u8, Error> as Try>::Residual, <Result<u8, Error> as Try>::Output> {<Result<u8, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:52
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:52
    }

    bb3: {
        _8 = ((_3 as Continue).0: u8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:52
        _0 = Keyboard::<L, S>::add_byte(_1, _8) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:532:9: 532:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:532:14: 532:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut Keyboard<L, S>, u8) -> Result<Option<KeyEvent>, Error> {Keyboard::<L, S>::add_byte}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:52
    }

    bb5: {
        _7 = ((_3 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:51: 531:52
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_7) -> [return: bb6, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:20: 531:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:531:51: 531:52
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:533:6: 533:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 492:26>::add_byte(_1: &mut Keyboard<L, S>, _2: u8) -> Result<Option<KeyEvent>, Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:539:21: 539:30
    debug byte => _2;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:539:32: 539:36
    let mut _0: core::result::Result<core::option::Option<KeyEvent>, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:539:45: 539:76
    let mut _3: &mut S;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:540:9: 540:46

    bb0: {
        _3 = &mut ((*_1).1: S);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:540:9: 540:46
        _0 = <S as ScancodeSet>::advance_state(move _3, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:540:9: 540:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:540:27: 540:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut S, u8) -> Result<Option<KeyEvent>, Error> {<S as ScancodeSet>::advance_state}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:541:6: 541:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 492:26>::add_bit(_1: &mut Keyboard<L, S>, _2: bool) -> Result<Option<KeyEvent>, Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:547:20: 547:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:547:31: 547:34
    let mut _0: core::result::Result<core::option::Option<KeyEvent>, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:547:45: 547:76
    let mut _3: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, core::option::Option<u8>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:59
    let mut _4: core::result::Result<core::option::Option<u8>, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:58
    let mut _5: &mut Ps2Decoder;         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:58
    let mut _6: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:58: 548:59
    let mut _9: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:16: 548:26
    let mut _11: &mut S;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:549:13: 549:50
    let mut _12: core::option::Option<KeyEvent>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:551:16: 551:20
    scope 1 {
        debug byte => _10;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:21: 548:25
        let _7: core::result::Result<core::convert::Infallible, Error>; // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:58: 548:59
        let _8: core::option::Option<u8>; // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:59
        let _10: u8;                     // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:21: 548:25
        scope 2 {
            debug residual => _7;        // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:58: 548:59
            scope 3 {
            }
        }
        scope 4 {
            debug val => _8;             // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:59
            scope 5 {
            }
        }
    }

    bb0: {
        _5 = &mut ((*_1).0: Ps2Decoder); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:58
        _4 = Ps2Decoder::add_bit(move _5, _2) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:46: 548:53
                                         // + literal: Const { ty: for<'a> fn(&'a mut Ps2Decoder, bool) -> Result<Option<u8>, Error> {Ps2Decoder::add_bit}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Result<Option<u8>, Error> as Try>::branch(move _4) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:59
                                         // + literal: Const { ty: fn(Result<Option<u8>, Error>) -> ControlFlow<<Result<Option<u8>, Error> as Try>::Residual, <Result<Option<u8>, Error> as Try>::Output> {<Result<Option<u8>, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_3);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:59
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:59
    }

    bb3: {
        _8 = ((_3 as Continue).0: core::option::Option<u8>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:59
        _9 = discriminant(_8);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:16: 548:26
        switchInt(move _9) -> [1: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:16: 548:26
    }

    bb4: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:59
    }

    bb5: {
        _7 = ((_3 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:58: 548:59
        _0 = <Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_7) -> [return: bb8, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:29: 548:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:58: 548:59
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<KeyEvent>, Error> {<Result<Option<KeyEvent>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = Option::<KeyEvent>::None;  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:551:16: 551:20
        _0 = Result::<Option<KeyEvent>, Error>::Ok(move _12); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:551:13: 551:21
        goto -> bb8;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:9: 552:10
    }

    bb7: {
        _10 = ((_8 as Some).0: u8);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:548:21: 548:25
        _11 = &mut ((*_1).1: S);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:549:13: 549:50
        _0 = <S as ScancodeSet>::advance_state(move _11, _10) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:549:13: 549:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:549:31: 549:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut S, u8) -> Result<Option<KeyEvent>, Error> {<S as ScancodeSet>::advance_state}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:553:6: 553:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:492:1: 492:26>::process_keyevent(_1: &mut Keyboard<L, S>, _2: KeyEvent) -> Option<DecodedKey> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:561:29: 561:38
    debug ev => _2;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:561:40: 561:42
    let mut _0: core::option::Option<DecodedKey>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:561:57: 561:75
    let mut _3: &mut EventDecoder<L>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:562:9: 562:48

    bb0: {
        _3 = &mut ((*_1).2: EventDecoder<L>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:562:9: 562:48
        _0 = EventDecoder::<L>::process_keyevent(move _3, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:562:9: 562:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:562:28: 562:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut EventDecoder<L>, KeyEvent) -> Option<DecodedKey> {EventDecoder::<L>::process_keyevent}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:563:6: 563:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::new() -> Ps2Decoder {
    let mut _0: Ps2Decoder;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:568:27: 568:37

    bb0: {
        _0 = Ps2Decoder { register: const 0_u16, num_bits: const 0_u8 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:569:9: 572:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:573:6: 573:6
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::new() -> Ps2Decoder {
    let mut _0: Ps2Decoder;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:568:27: 568:37

    bb0: {
        _0 = Ps2Decoder { register: const 0_u16, num_bits: const 0_u8 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:569:9: 572:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:573:6: 573:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::clear(_1: &mut Ps2Decoder) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:578:18: 578:27
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:578:29: 578:29

    bb0: {
        ((*_1).0: u16) = const 0_u16;    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:579:9: 579:26
        ((*_1).1: u8) = const 0_u8;      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:580:9: 580:26
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:581:6: 581:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::add_bit(_1: &mut Ps2Decoder, _2: bool) -> Result<Option<u8>, Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:586:20: 586:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:586:31: 586:34
    let mut _0: core::result::Result<core::option::Option<u8>, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:586:45: 586:70
    let mut _3: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:587:26: 587:55
    let mut _4: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:587:26: 587:38
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:587:42: 587:55
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:587:26: 587:55
    let mut _7: (u8, bool);              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:588:9: 588:27
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:589:12: 589:41
    let mut _9: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:589:12: 589:25
    let _10: u16;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:590:17: 590:21
    let mut _11: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Error>, u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:24: 593:47
    let mut _12: core::result::Result<u8, Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:24: 593:46
    let mut _13: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:46: 593:47
    let mut _16: core::option::Option<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:594:16: 594:26
    let mut _17: core::option::Option<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:596:16: 596:20
    scope 1 {
        debug word => _10;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:590:17: 590:21
        let _14: core::result::Result<core::convert::Infallible, Error>; // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:46: 593:47
        let _15: u8;                     // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:24: 593:47
        scope 2 {
            debug byte => _15;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:17: 593:21
        }
        scope 3 {
            debug residual => _14;       // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:46: 593:47
            scope 4 {
            }
        }
        scope 5 {
            debug val => _15;            // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:24: 593:47
            scope 6 {
            }
        }
    }

    bb0: {
        _4 = _2 as u16 (IntToInt);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:587:26: 587:38
        _5 = ((*_1).1: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:587:42: 587:55
        _6 = Lt(_5, const 16_u8);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:587:26: 587:55
        assert(move _6, "attempt to shift left by `{}`, which would overflow", _5) -> [success: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:587:26: 587:55
    }

    bb1: {
        _3 = Shl(move _4, move _5);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:587:26: 587:55
        ((*_1).0: u16) = BitOr(((*_1).0: u16), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:587:9: 587:55
        _7 = CheckedAdd(((*_1).1: u8), const 1_u8); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:588:9: 588:27
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: u8), const 1_u8) -> [success: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:588:9: 588:27
    }

    bb2: {
        ((*_1).1: u8) = move (_7.0: u8); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:588:9: 588:27
        _9 = ((*_1).1: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:589:12: 589:25
        _8 = Eq(move _9, const _);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:589:12: 589:41
        switchInt(move _8) -> [0: bb9, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:589:12: 589:41
    }

    bb3: {
        _10 = ((*_1).0: u16);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:590:24: 590:37
        ((*_1).0: u16) = const 0_u16;    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:591:13: 591:30
        ((*_1).1: u8) = const 0_u8;      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:592:13: 592:30
        _12 = Ps2Decoder::check_word(_10) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:24: 593:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:24: 593:40
                                         // + literal: Const { ty: fn(u16) -> Result<u8, Error> {Ps2Decoder::check_word}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = <Result<u8, Error> as Try>::branch(move _12) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:24: 593:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:24: 593:47
                                         // + literal: Const { ty: fn(Result<u8, Error>) -> ControlFlow<<Result<u8, Error> as Try>::Residual, <Result<u8, Error> as Try>::Output> {<Result<u8, Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = discriminant(_11);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:24: 593:47
        switchInt(move _13) -> [0: bb6, 1: bb8, otherwise: bb7]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:24: 593:47
    }

    bb6: {
        _15 = ((_11 as Continue).0: u8); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:24: 593:47
        _16 = Option::<u8>::Some(_15);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:594:16: 594:26
        _0 = Result::<Option<u8>, Error>::Ok(move _16); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:594:13: 594:27
        goto -> bb10;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:589:9: 597:10
    }

    bb7: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:24: 593:47
    }

    bb8: {
        _14 = ((_11 as Break).0: core::result::Result<core::convert::Infallible, Error>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:46: 593:47
        _0 = <Result<Option<u8>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual(_14) -> [return: bb10, unwind unreachable]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:24: 593:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:593:46: 593:47
                                         // + literal: Const { ty: fn(Result<Infallible, Error>) -> Result<Option<u8>, Error> {<Result<Option<u8>, Error> as FromResidual<Result<Infallible, Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb9: {
        _17 = Option::<u8>::None;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:596:16: 596:20
        _0 = Result::<Option<u8>, Error>::Ok(move _17); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:596:13: 596:21
        goto -> bb10;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:589:9: 597:10
    }

    bb10: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:598:6: 598:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::add_word(_1: &Ps2Decoder, _2: u16) -> Result<u8, Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:603:21: 603:26
    debug word => _2;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:603:28: 603:32
    let mut _0: core::result::Result<u8, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:603:42: 603:59

    bb0: {
        _0 = Ps2Decoder::check_word(_2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:604:9: 604:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:604:9: 604:25
                                         // + literal: Const { ty: fn(u16) -> Result<u8, Error> {Ps2Decoder::check_word}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:605:6: 605:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::check_word(_1: u16) -> Result<u8, Error> {
    debug word => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:608:25: 608:29
    let mut _0: core::result::Result<u8, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:608:39: 608:56
    let _2: bool;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:13: 609:22
    let mut _6: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:20: 612:40
    let mut _7: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
    let mut _8: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:614:12: 614:21
    let mut _11: Error;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:615:24: 615:42
    let mut _12: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:12: 618:21
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:13: 618:21
    let mut _14: Error;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:619:24: 619:41
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:12: 626:37
    let mut _17: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:12: 626:23
    let mut _18: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:27: 626:37
    let mut _19: Error;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:627:24: 627:42
    scope 1 {
        debug start_bit => _2;           // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:13: 609:22
        let _3: bool;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:13: 610:23
        scope 2 {
            debug parity_bit => _3;      // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:13: 610:23
            let _4: bool;                // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:13: 611:21
            scope 3 {
                debug stop_bit => _4;    // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:13: 611:21
                let _5: u8;              // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:13: 612:17
                scope 4 {
                    debug data => _5;    // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:13: 612:17
                    let _15: bool;       // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:13: 624:24
                    scope 5 {
                        debug need_parity => _15; // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:13: 624:24
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Ps2Decoder::get_bit(_1, const 0_usize) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:25: 609:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:25: 609:38
                                         // + literal: Const { ty: fn(u16, usize) -> bool {Ps2Decoder::get_bit}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Ps2Decoder::get_bit(_1, const 9_usize) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:26: 610:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:26: 610:39
                                         // + literal: Const { ty: fn(u16, usize) -> bool {Ps2Decoder::get_bit}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = Ps2Decoder::get_bit(_1, const 10_usize) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:24: 611:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:24: 611:37
                                         // + literal: Const { ty: fn(u16, usize) -> bool {Ps2Decoder::get_bit}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = const 1_i32 as u32 (IntToInt); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
        _9 = Lt(move _8, const 16_u32);  // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
        assert(move _9, "attempt to shift right by `{}`, which would overflow", const 1_i32) -> [success: bb4, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
    }

    bb4: {
        _7 = Shr(_1, const 1_i32);       // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
        _6 = BitAnd(move _7, const 255_u16); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:20: 612:40
        _5 = move _6 as u8 (IntToInt);   // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:20: 612:46
        _10 = _2;                        // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:614:12: 614:21
        switchInt(move _10) -> [0: bb6, otherwise: bb5]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:614:12: 614:21
    }

    bb5: {
        _11 = Error::BadStartBit;        // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:615:24: 615:42
        _0 = Result::<u8, Error>::Err(move _11); // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:615:20: 615:43
        goto -> bb12;                    // scope 4 at no-location
    }

    bb6: {
        _13 = _4;                        // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:13: 618:21
        _12 = Not(move _13);             // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:12: 618:21
        switchInt(move _12) -> [0: bb8, otherwise: bb7]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:12: 618:21
    }

    bb7: {
        _14 = Error::BadStopBit;         // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:619:24: 619:41
        _0 = Result::<u8, Error>::Err(move _14); // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:619:20: 619:42
        goto -> bb12;                    // scope 4 at no-location
    }

    bb8: {
        _15 = Ps2Decoder::has_even_number_bits(_5) -> [return: bb9, unwind unreachable]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:27: 624:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:27: 624:53
                                         // + literal: Const { ty: fn(u8) -> bool {Ps2Decoder::has_even_number_bits}, val: Value(<ZST>) }
    }

    bb9: {
        _17 = _15;                       // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:12: 626:23
        _18 = _3;                        // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:27: 626:37
        _16 = Ne(move _17, move _18);    // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:12: 626:37
        switchInt(move _16) -> [0: bb11, otherwise: bb10]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:12: 626:37
    }

    bb10: {
        _19 = Error::ParityError;        // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:627:24: 627:42
        _0 = Result::<u8, Error>::Err(move _19); // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:627:20: 627:43
        goto -> bb12;                    // scope 4 at no-location
    }

    bb11: {
        _0 = Result::<u8, Error>::Ok(_5); // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:630:9: 630:17
        goto -> bb12;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:6: 631:6
    }

    bb12: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:6: 631:6
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::check_word(_1: u16) -> Result<u8, Error> {
    debug word => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:608:25: 608:29
    let mut _0: core::result::Result<u8, Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:608:39: 608:56
    let _2: bool;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:13: 609:22
    let mut _3: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:39: 609:43
    let mut _5: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:40: 610:44
    let mut _7: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:38: 611:42
    let mut _9: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:20: 612:40
    let mut _10: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
    let mut _11: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:22: 612:26
    let mut _12: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
    let _14: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:614:9: 616:10
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:614:12: 614:21
    let mut _16: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:614:22: 616:10
    let mut _17: Error;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:615:24: 615:42
    let _18: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:9: 620:10
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:12: 618:21
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:13: 618:21
    let mut _21: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:22: 620:10
    let mut _22: Error;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:619:24: 619:41
    let mut _24: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:54: 624:58
    let _25: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:9: 628:10
    let mut _26: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:12: 626:37
    let mut _27: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:12: 626:23
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:27: 626:37
    let mut _29: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:38: 628:10
    let mut _30: Error;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:627:24: 627:42
    let mut _31: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:630:12: 630:16
    scope 1 {
        debug start_bit => _2;           // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:13: 609:22
        let _4: bool;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:13: 610:23
        scope 2 {
            debug parity_bit => _4;      // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:13: 610:23
            let _6: bool;                // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:13: 611:21
            scope 3 {
                debug stop_bit => _6;    // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:13: 611:21
                let _8: u8;              // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:13: 612:17
                scope 4 {
                    debug data => _8;    // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:13: 612:17
                    let _23: bool;       // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:13: 624:24
                    scope 5 {
                        debug need_parity => _23; // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:13: 624:24
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:13: 609:22
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:39: 609:43
        _3 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:39: 609:43
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:25: 609:47
        _2 = Ps2Decoder::get_bit(move _3, const 0_usize) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:25: 609:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:25: 609:38
                                         // + literal: Const { ty: fn(u16, usize) -> bool {Ps2Decoder::get_bit}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:609:46: 609:47
        StorageLive(_4);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:13: 610:23
        StorageLive(_5);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:40: 610:44
        _5 = _1;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:40: 610:44
        ConstEvalCounter;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:26: 610:48
        _4 = Ps2Decoder::get_bit(move _5, const 9_usize) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:26: 610:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:26: 610:39
                                         // + literal: Const { ty: fn(u16, usize) -> bool {Ps2Decoder::get_bit}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_5);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:610:47: 610:48
        StorageLive(_6);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:13: 611:21
        StorageLive(_7);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:38: 611:42
        _7 = _1;                         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:38: 611:42
        ConstEvalCounter;                // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:24: 611:47
        _6 = Ps2Decoder::get_bit(move _7, const 10_usize) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:24: 611:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:24: 611:37
                                         // + literal: Const { ty: fn(u16, usize) -> bool {Ps2Decoder::get_bit}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_7);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:611:46: 611:47
        StorageLive(_8);                 // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:13: 612:17
        StorageLive(_9);                 // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:20: 612:40
        StorageLive(_10);                // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
        StorageLive(_11);                // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:22: 612:26
        _11 = _1;                        // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:22: 612:26
        _12 = const 1_i32 as u32 (IntToInt); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
        _13 = Lt(move _12, const 16_u32); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
        assert(move _13, "attempt to shift right by `{}`, which would overflow", const 1_i32) -> [success: bb4, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
    }

    bb4: {
        _10 = Shr(move _11, const 1_i32); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:21: 612:32
        StorageDead(_11);                // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:31: 612:32
        _9 = BitAnd(move _10, const 255_u16); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:20: 612:40
        StorageDead(_10);                // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:39: 612:40
        _8 = move _9 as u8 (IntToInt);   // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:20: 612:46
        StorageDead(_9);                 // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:612:45: 612:46
        StorageLive(_14);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:614:9: 616:10
        StorageLive(_15);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:614:12: 614:21
        _15 = _2;                        // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:614:12: 614:21
        switchInt(move _15) -> [0: bb6, otherwise: bb5]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:614:12: 614:21
    }

    bb5: {
        StorageLive(_17);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:615:24: 615:42
        _17 = Error::BadStartBit;        // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:615:24: 615:42
        _0 = Result::<u8, Error>::Err(move _17); // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:615:20: 615:43
        StorageDead(_17);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:615:42: 615:43
        StorageDead(_15);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:616:9: 616:10
        StorageDead(_14);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:616:9: 616:10
        goto -> bb12;                    // scope 4 at no-location
    }

    bb6: {
        _14 = const ();                  // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:616:10: 616:10
        StorageDead(_15);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:616:9: 616:10
        StorageDead(_14);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:616:9: 616:10
        StorageLive(_18);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:9: 620:10
        StorageLive(_19);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:12: 618:21
        StorageLive(_20);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:13: 618:21
        _20 = _6;                        // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:13: 618:21
        _19 = Not(move _20);             // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:12: 618:21
        StorageDead(_20);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:20: 618:21
        switchInt(move _19) -> [0: bb8, otherwise: bb7]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:618:12: 618:21
    }

    bb7: {
        StorageLive(_22);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:619:24: 619:41
        _22 = Error::BadStopBit;         // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:619:24: 619:41
        _0 = Result::<u8, Error>::Err(move _22); // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:619:20: 619:42
        StorageDead(_22);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:619:41: 619:42
        StorageDead(_19);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:620:9: 620:10
        StorageDead(_18);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:620:9: 620:10
        goto -> bb12;                    // scope 4 at no-location
    }

    bb8: {
        _18 = const ();                  // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:620:10: 620:10
        StorageDead(_19);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:620:9: 620:10
        StorageDead(_18);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:620:9: 620:10
        StorageLive(_23);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:13: 624:24
        StorageLive(_24);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:54: 624:58
        _24 = _8;                        // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:54: 624:58
        ConstEvalCounter;                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:27: 624:59
        _23 = Ps2Decoder::has_even_number_bits(move _24) -> [return: bb9, unwind unreachable]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:27: 624:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:27: 624:53
                                         // + literal: Const { ty: fn(u8) -> bool {Ps2Decoder::has_even_number_bits}, val: Value(<ZST>) }
    }

    bb9: {
        StorageDead(_24);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:624:58: 624:59
        StorageLive(_25);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:9: 628:10
        StorageLive(_26);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:12: 626:37
        StorageLive(_27);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:12: 626:23
        _27 = _23;                       // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:12: 626:23
        StorageLive(_28);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:27: 626:37
        _28 = _4;                        // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:27: 626:37
        _26 = Ne(move _27, move _28);    // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:12: 626:37
        StorageDead(_28);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:36: 626:37
        StorageDead(_27);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:36: 626:37
        switchInt(move _26) -> [0: bb11, otherwise: bb10]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:626:12: 626:37
    }

    bb10: {
        StorageLive(_30);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:627:24: 627:42
        _30 = Error::ParityError;        // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:627:24: 627:42
        _0 = Result::<u8, Error>::Err(move _30); // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:627:20: 627:43
        StorageDead(_30);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:627:42: 627:43
        StorageDead(_26);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:628:9: 628:10
        StorageDead(_25);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:628:9: 628:10
        StorageDead(_23);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:5: 631:6
        goto -> bb12;                    // scope 4 at no-location
    }

    bb11: {
        _25 = const ();                  // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:628:10: 628:10
        StorageDead(_26);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:628:9: 628:10
        StorageDead(_25);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:628:9: 628:10
        StorageLive(_31);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:630:12: 630:16
        _31 = _8;                        // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:630:12: 630:16
        _0 = Result::<u8, Error>::Ok(move _31); // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:630:9: 630:17
        StorageDead(_31);                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:630:16: 630:17
        StorageDead(_23);                // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:5: 631:6
        StorageDead(_8);                 // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:5: 631:6
        StorageDead(_6);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:5: 631:6
        StorageDead(_4);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:5: 631:6
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:5: 631:6
        goto -> bb13;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:6: 631:6
    }

    bb12: {
        StorageDead(_8);                 // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:5: 631:6
        StorageDead(_6);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:5: 631:6
        StorageDead(_4);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:5: 631:6
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:5: 631:6
        goto -> bb13;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:6: 631:6
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:631:6: 631:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::get_bit(_1: u16, _2: usize) -> bool {
    debug word => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:633:22: 633:26
    debug offset => _2;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:633:33: 633:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:633:51: 633:55
    let mut _3: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:9: 634:36
    let mut _4: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:10: 634:26
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:10: 634:26

    bb0: {
        _5 = Lt(_2, const 16_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:10: 634:26
        assert(move _5, "attempt to shift right by `{}`, which would overflow", _2) -> [success: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:10: 634:26
    }

    bb1: {
        _4 = Shr(_1, _2);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:10: 634:26
        _3 = BitAnd(move _4, const 1_u16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:9: 634:36
        _0 = Ne(move _3, const 0_u16);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:9: 634:41
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:635:6: 635:6
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::get_bit(_1: u16, _2: usize) -> bool {
    debug word => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:633:22: 633:26
    debug offset => _2;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:633:33: 633:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:633:51: 633:55
    let mut _3: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:9: 634:36
    let mut _4: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:10: 634:26
    let mut _5: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:11: 634:15
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:19: 634:25
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:10: 634:26

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:9: 634:36
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:10: 634:26
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:11: 634:15
        _5 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:11: 634:15
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:19: 634:25
        _6 = _2;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:19: 634:25
        _7 = Lt(_6, const 16_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:10: 634:26
        assert(move _7, "attempt to shift right by `{}`, which would overflow", _6) -> [success: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:10: 634:26
    }

    bb1: {
        _4 = Shr(move _5, move _6);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:10: 634:26
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:25: 634:26
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:25: 634:26
        _3 = BitAnd(move _4, const 1_u16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:9: 634:36
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:35: 634:36
        _0 = Ne(move _3, const 0_u16);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:9: 634:41
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:634:40: 634:41
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:635:6: 635:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::has_even_number_bits(_1: u8) -> bool {
    debug data => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:637:35: 637:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:637:48: 637:52
    let mut _2: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:9: 638:32
    let mut _3: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:10: 638:27
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:9: 638:32

    bb0: {
        _3 = num::<impl u8>::count_ones(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:10: 638:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:15: 638:25
                                         // + literal: Const { ty: fn(u8) -> u32 {num::<impl u8>::count_ones}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Eq(const 2_u32, const 0_u32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:9: 638:32
        assert(!move _4, "attempt to calculate the remainder of `{}` with a divisor of zero", _3) -> [success: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:9: 638:32
    }

    bb2: {
        _2 = Rem(move _3, const 2_u32);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:9: 638:32
        _0 = Eq(move _2, const 0_u32);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:9: 638:37
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:639:6: 639:6
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:566:1: 566:16>::has_even_number_bits(_1: u8) -> bool {
    debug data => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:637:35: 637:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:637:48: 637:52
    let mut _2: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:9: 638:32
    let mut _3: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:10: 638:27
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:10: 638:14
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:9: 638:32

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:9: 638:32
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:10: 638:27
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:10: 638:14
        _4 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:10: 638:14
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:10: 638:27
        _3 = num::<impl u8>::count_ones(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:10: 638:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:15: 638:25
                                         // + literal: Const { ty: fn(u8) -> u32 {num::<impl u8>::count_ones}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:26: 638:27
        _5 = Eq(const 2_u32, const 0_u32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:9: 638:32
        assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", _3) -> [success: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:9: 638:32
    }

    bb2: {
        _2 = Rem(move _3, const 2_u32);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:9: 638:32
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:31: 638:32
        _0 = Eq(move _2, const 0_u32);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:9: 638:37
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:638:36: 638:37
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:639:6: 639:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 642:24>::new(_1: L, _2: HandleControl) -> EventDecoder<L> {
    debug layout => _1;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:647:22: 647:28
    debug handle_ctrl => _2;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:647:33: 647:44
    let mut _0: EventDecoder<L>;         // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:647:64: 647:79
    let mut _3: Modifiers;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:650:24: 659:14

    bb0: {
        _3 = Modifiers { lshift: const false, rshift: const false, lctrl: const false, rctrl: const false, numlock: const true, capslock: const false, alt_gr: const false, rctrl2: const false }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:650:24: 659:14
        _0 = EventDecoder::<L> { handle_ctrl: _2, modifiers: move _3, layout: move _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:648:9: 661:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:662:6: 662:6
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 642:24>::new(_1: L, _2: HandleControl) -> EventDecoder<L> {
    debug layout => _1;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:647:22: 647:28
    debug handle_ctrl => _2;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:647:33: 647:44
    let mut _0: EventDecoder<L>;         // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:647:64: 647:79
    let mut _3: HandleControl;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:649:13: 649:24
    let mut _4: Modifiers;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:650:24: 659:14
    let mut _5: L;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:660:13: 660:19

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:649:13: 649:24
        _3 = _2;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:649:13: 649:24
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:650:24: 659:14
        _4 = Modifiers { lshift: const false, rshift: const false, lctrl: const false, rctrl: const false, numlock: const true, capslock: const false, alt_gr: const false, rctrl2: const false }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:650:24: 659:14
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:660:13: 660:19
        _5 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:660:13: 660:19
        _0 = EventDecoder::<L> { handle_ctrl: move _3, modifiers: move _4, layout: move _5 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:648:9: 661:10
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:661:9: 661:10
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:661:9: 661:10
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:661:9: 661:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:662:6: 662:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 642:24>::set_ctrl_handling(_1: &mut EventDecoder<L>, _2: HandleControl) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:665:30: 665:39
    debug new_value => _2;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:665:41: 665:50
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:665:67: 665:67

    bb0: {
        ((*_1).0: HandleControl) = _2;   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:666:9: 666:37
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:667:6: 667:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 642:24>::get_ctrl_handling(_1: &EventDecoder<L>) -> HandleControl {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:670:36: 670:41
    let mut _0: HandleControl;           // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:670:46: 670:59

    bb0: {
        _0 = ((*_1).0: HandleControl);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:671:9: 671:25
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:672:6: 672:6
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 642:24>::get_ctrl_handling(_1: &EventDecoder<L>) -> HandleControl {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:670:36: 670:41
    let mut _0: HandleControl;           // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:670:46: 670:59

    bb0: {
        _0 = ((*_1).0: HandleControl);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:671:9: 671:25
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:672:6: 672:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 642:24>::process_keyevent(_1: &mut EventDecoder<L>, _2: KeyEvent) -> Option<DecodedKey> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:680:29: 680:38
    debug ev => _2;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:680:40: 680:42
    let mut _0: core::option::Option<DecodedKey>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:680:57: 680:75
    let mut _3: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:719:24: 719:38
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:712:24: 712:38
    let mut _5: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:684:24: 684:38
    let mut _6: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:691:24: 691:38
    let mut _7: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:733:24: 733:38
    let mut _8: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:761:24: 761:38
    let mut _9: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:747:24: 747:38
    let mut _10: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:775:24: 775:38
    let mut _11: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:789:24: 789:38
    let mut _12: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:683:23: 683:38
    let mut _13: DecodedKey;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:687:22: 687:57
    let mut _14: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:687:41: 687:56
    let mut _15: DecodedKey;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:694:22: 694:57
    let mut _16: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:694:41: 694:56
    let mut _17: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:714:44: 714:67
    let mut _18: DecodedKey;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:715:22: 715:59
    let mut _19: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:715:41: 715:58
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:721:20: 721:41
    let mut _21: DecodedKey;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:724:26: 724:65
    let mut _22: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:724:45: 724:64
    let mut _23: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:727:47: 727:69
    let mut _24: DecodedKey;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:728:26: 728:65
    let mut _25: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:728:45: 728:64
    let mut _26: DecodedKey;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:736:22: 736:59
    let mut _27: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:736:41: 736:58
    let mut _28: DecodedKey;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:750:22: 750:59
    let mut _29: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:750:41: 750:58
    let mut _30: DecodedKey;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:764:22: 764:57
    let mut _31: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:764:41: 764:56
    let mut _32: DecodedKey;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:778:22: 778:60
    let mut _33: KeyCode;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:778:41: 778:59
    let _34: KeyCode;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:788:23: 788:24
    let mut _35: DecodedKey;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:791:17: 792:71
    let mut _36: &L;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:791:17: 792:71
    let _37: &Modifiers;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:792:37: 792:52
    let mut _38: HandleControl;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:792:54: 792:70
    scope 1 {
        debug c => _34;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:788:23: 788:24
    }

    bb0: {
        _12 = discriminant((_2.0: KeyCode)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:15: 681:17
        switchInt(move _12) -> [34: bb2, 60: bb3, 76: bb4, 87: bb5, 93: bb6, 97: bb7, 100: bb8, 122: bb9, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:9: 681:17
    }

    bb1: {
        _11 = discriminant((_2.1: KeyState)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:15: 681:17
        switchInt(move _11) -> [1: bb27, otherwise: bb10]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:9: 681:17
    }

    bb2: {
        _3 = discriminant((_2.1: KeyState)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:15: 681:17
        switchInt(move _3) -> [1: bb16, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:9: 681:17
    }

    bb3: {
        _4 = discriminant((_2.1: KeyState)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:15: 681:17
        switchInt(move _4) -> [1: bb15, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:9: 681:17
    }

    bb4: {
        _5 = discriminant((_2.1: KeyState)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:15: 681:17
        switchInt(move _5) -> [0: bb13, 1: bb11, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:9: 681:17
    }

    bb5: {
        _6 = discriminant((_2.1: KeyState)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:15: 681:17
        switchInt(move _6) -> [0: bb14, 1: bb12, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:9: 681:17
    }

    bb6: {
        _7 = discriminant((_2.1: KeyState)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:15: 681:17
        switchInt(move _7) -> [0: bb20, 1: bb19, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:9: 681:17
    }

    bb7: {
        _8 = discriminant((_2.1: KeyState)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:15: 681:17
        switchInt(move _8) -> [0: bb24, 1: bb23, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:9: 681:17
    }

    bb8: {
        _9 = discriminant((_2.1: KeyState)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:15: 681:17
        switchInt(move _9) -> [0: bb22, 1: bb21, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:9: 681:17
    }

    bb9: {
        _10 = discriminant((_2.1: KeyState)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:15: 681:17
        switchInt(move _10) -> [0: bb26, 1: bb25, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:681:9: 681:17
    }

    bb10: {
        _0 = Option::<DecodedKey>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:794:18: 794:22
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:794:18: 794:22
    }

    bb11: {
        (((*_1).1: Modifiers).0: bool) = const true; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:686:17: 686:45
        _14 = KeyCode::LShift;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:687:41: 687:56
        _13 = DecodedKey::RawKey(move _14); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:687:22: 687:57
        _0 = Option::<DecodedKey>::Some(move _13); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:687:17: 687:58
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:687:57: 687:58
    }

    bb12: {
        (((*_1).1: Modifiers).1: bool) = const true; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:693:17: 693:45
        _16 = KeyCode::RShift;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:694:41: 694:56
        _15 = DecodedKey::RawKey(move _16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:694:22: 694:57
        _0 = Option::<DecodedKey>::Some(move _15); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:694:17: 694:58
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:694:57: 694:58
    }

    bb13: {
        (((*_1).1: Modifiers).0: bool) = const false; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:700:17: 700:46
        _0 = Option::<DecodedKey>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:701:17: 701:21
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:701:17: 701:21
    }

    bb14: {
        (((*_1).1: Modifiers).1: bool) = const false; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:707:17: 707:46
        _0 = Option::<DecodedKey>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:708:17: 708:21
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:708:17: 708:21
    }

    bb15: {
        _17 = (((*_1).1: Modifiers).5: bool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:714:44: 714:67
        (((*_1).1: Modifiers).5: bool) = Not(move _17); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:714:17: 714:67
        _19 = KeyCode::CapsLock;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:715:41: 715:58
        _18 = DecodedKey::RawKey(move _19); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:715:22: 715:59
        _0 = Option::<DecodedKey>::Some(move _18); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:715:17: 715:60
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:715:59: 715:60
    }

    bb16: {
        _20 = (((*_1).1: Modifiers).7: bool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:721:20: 721:41
        switchInt(move _20) -> [0: bb18, otherwise: bb17]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:721:20: 721:41
    }

    bb17: {
        _22 = KeyCode::PauseBreak;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:724:45: 724:64
        _21 = DecodedKey::RawKey(move _22); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:724:26: 724:65
        _0 = Option::<DecodedKey>::Some(move _21); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:724:21: 724:66
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:721:17: 729:18
    }

    bb18: {
        _23 = (((*_1).1: Modifiers).4: bool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:727:47: 727:69
        (((*_1).1: Modifiers).4: bool) = Not(move _23); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:727:21: 727:69
        _25 = KeyCode::NumpadLock;       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:728:45: 728:64
        _24 = DecodedKey::RawKey(move _25); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:728:26: 728:65
        _0 = Option::<DecodedKey>::Some(move _24); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:728:21: 728:66
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:721:17: 729:18
    }

    bb19: {
        (((*_1).1: Modifiers).2: bool) = const true; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:735:17: 735:44
        _27 = KeyCode::LControl;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:736:41: 736:58
        _26 = DecodedKey::RawKey(move _27); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:736:22: 736:59
        _0 = Option::<DecodedKey>::Some(move _26); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:736:17: 736:60
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:736:59: 736:60
    }

    bb20: {
        (((*_1).1: Modifiers).2: bool) = const false; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:742:17: 742:45
        _0 = Option::<DecodedKey>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:743:17: 743:21
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:743:17: 743:21
    }

    bb21: {
        (((*_1).1: Modifiers).3: bool) = const true; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:749:17: 749:44
        _29 = KeyCode::RControl;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:750:41: 750:58
        _28 = DecodedKey::RawKey(move _29); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:750:22: 750:59
        _0 = Option::<DecodedKey>::Some(move _28); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:750:17: 750:60
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:750:59: 750:60
    }

    bb22: {
        (((*_1).1: Modifiers).3: bool) = const false; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:756:17: 756:45
        _0 = Option::<DecodedKey>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:757:17: 757:21
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:757:17: 757:21
    }

    bb23: {
        (((*_1).1: Modifiers).6: bool) = const true; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:763:17: 763:45
        _31 = KeyCode::RAltGr;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:764:41: 764:56
        _30 = DecodedKey::RawKey(move _31); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:764:22: 764:57
        _0 = Option::<DecodedKey>::Some(move _30); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:764:17: 764:58
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:764:57: 764:58
    }

    bb24: {
        (((*_1).1: Modifiers).6: bool) = const false; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:770:17: 770:46
        _0 = Option::<DecodedKey>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:771:17: 771:21
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:771:17: 771:21
    }

    bb25: {
        (((*_1).1: Modifiers).7: bool) = const true; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:777:17: 777:45
        _33 = KeyCode::RControl2;        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:778:41: 778:59
        _32 = DecodedKey::RawKey(move _33); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:778:22: 778:60
        _0 = Option::<DecodedKey>::Some(move _32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:778:17: 778:61
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:778:60: 778:61
    }

    bb26: {
        (((*_1).1: Modifiers).7: bool) = const false; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:784:17: 784:46
        _0 = Option::<DecodedKey>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:785:17: 785:21
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:785:17: 785:21
    }

    bb27: {
        _34 = (_2.0: KeyCode);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:788:23: 788:24
        _36 = &((*_1).2: L);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:791:17: 792:71
        _37 = &((*_1).1: Modifiers);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:792:37: 792:52
        _38 = ((*_1).0: HandleControl);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:792:54: 792:70
        _35 = <L as KeyboardLayout>::map_keycode(move _36, _34, _37, move _38) -> [return: bb28, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:791:17: 792:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:792:22: 792:33
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a L, KeyCode, &'b Modifiers, HandleControl) -> DecodedKey {<L as KeyboardLayout>::map_keycode}, val: Value(<ZST>) }
    }

    bb28: {
        _0 = Option::<DecodedKey>::Some(move _35); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:790:18: 793:14
        goto -> bb29;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:793:13: 793:14
    }

    bb29: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:796:6: 796:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:642:1: 642:24>::change_layout(_1: &mut EventDecoder<L>, _2: L) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:802:26: 802:35
    debug new_layout => _2;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:802:37: 802:47
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:802:52: 802:52

    bb0: {
        drop(((*_1).2: L)) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:803:9: 803:20
    }

    bb1: {
        ((*_1).2: L) = move _2;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:803:9: 803:20
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:804:6: 804:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:807:1: 807:14>::new(_1: KeyCode, _2: KeyState) -> KeyEvent {
    debug code => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:808:22: 808:26
    debug state => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:808:37: 808:42
    let mut _0: KeyEvent;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:808:57: 808:65

    bb0: {
        _0 = KeyEvent { code: _1, state: _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:809:9: 809:33
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:810:6: 810:6
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:807:1: 807:14>::new(_1: KeyCode, _2: KeyState) -> KeyEvent {
    debug code => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:808:22: 808:26
    debug state => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:808:37: 808:42
    let mut _0: KeyEvent;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:808:57: 808:65
    let mut _3: KeyCode;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:809:20: 809:24
    let mut _4: KeyState;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:809:26: 809:31

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:809:20: 809:24
        _3 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:809:20: 809:24
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:809:26: 809:31
        _4 = _2;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:809:26: 809:31
        _0 = KeyEvent { code: move _3, state: move _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:809:9: 809:33
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:809:32: 809:33
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:809:32: 809:33
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:810:6: 810:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:819:1: 819:15>::is_shifted(_1: &Modifiers) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:820:29: 820:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:820:39: 820:43
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:9: 821:20
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:23: 821:34

    bb0: {
        _2 = ((*_1).0: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:9: 821:20
        _3 = ((*_1).1: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:23: 821:34
        _0 = BitOr(move _2, move _3);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:9: 821:34
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:822:6: 822:6
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:819:1: 819:15>::is_shifted(_1: &Modifiers) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:820:29: 820:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:820:39: 820:43
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:9: 821:20
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:23: 821:34

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:9: 821:20
        _2 = ((*_1).0: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:9: 821:20
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:23: 821:34
        _3 = ((*_1).1: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:23: 821:34
        _0 = BitOr(move _2, move _3);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:9: 821:34
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:33: 821:34
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:821:33: 821:34
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:822:6: 822:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:819:1: 819:15>::is_ctrl(_1: &Modifiers) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:824:26: 824:31
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:824:36: 824:40
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:9: 825:19
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:22: 825:32

    bb0: {
        _2 = ((*_1).2: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:9: 825:19
        _3 = ((*_1).3: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:22: 825:32
        _0 = BitOr(move _2, move _3);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:9: 825:32
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:826:6: 826:6
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:819:1: 819:15>::is_ctrl(_1: &Modifiers) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:824:26: 824:31
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:824:36: 824:40
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:9: 825:19
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:22: 825:32

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:9: 825:19
        _2 = ((*_1).2: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:9: 825:19
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:22: 825:32
        _3 = ((*_1).3: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:22: 825:32
        _0 = BitOr(move _2, move _3);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:9: 825:32
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:31: 825:32
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:825:31: 825:32
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:826:6: 826:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:819:1: 819:15>::is_caps(_1: &Modifiers) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:828:26: 828:31
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:828:36: 828:40
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:9: 829:36
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:10: 829:21
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:24: 829:35
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:39: 829:52

    bb0: {
        _3 = ((*_1).0: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:10: 829:21
        _4 = ((*_1).1: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:24: 829:35
        _2 = BitOr(move _3, move _4);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:9: 829:36
        _5 = ((*_1).5: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:39: 829:52
        _0 = BitXor(move _2, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:9: 829:52
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:830:6: 830:6
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:819:1: 819:15>::is_caps(_1: &Modifiers) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:828:26: 828:31
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:828:36: 828:40
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:9: 829:36
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:10: 829:21
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:24: 829:35
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:39: 829:52

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:9: 829:36
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:10: 829:21
        _3 = ((*_1).0: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:10: 829:21
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:24: 829:35
        _4 = ((*_1).1: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:24: 829:35
        _2 = BitOr(move _3, move _4);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:9: 829:36
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:35: 829:36
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:35: 829:36
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:39: 829:52
        _5 = ((*_1).5: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:39: 829:52
        _0 = BitXor(move _2, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:9: 829:52
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:51: 829:52
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:829:51: 829:52
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:830:6: 830:6
    }
}

fn AnyLayout::DVP104Key(_1: DVP104Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:33:5: 33:14

    bb0: {
        _0 = AnyLayout::DVP104Key(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:33:5: 33:14
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:33:5: 33:14
    }
}

// MIR FOR CTFE
fn AnyLayout::DVP104Key(_1: DVP104Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:33:5: 33:14

    bb0: {
        _0 = AnyLayout::DVP104Key(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:33:5: 33:14
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:33:5: 33:14
    }
}

fn AnyLayout::Dvorak104Key(_1: Dvorak104Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:34:5: 34:17

    bb0: {
        _0 = AnyLayout::Dvorak104Key(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:34:5: 34:17
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:34:5: 34:17
    }
}

// MIR FOR CTFE
fn AnyLayout::Dvorak104Key(_1: Dvorak104Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:34:5: 34:17

    bb0: {
        _0 = AnyLayout::Dvorak104Key(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:34:5: 34:17
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:34:5: 34:17
    }
}

fn AnyLayout::Us104Key(_1: Us104Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:35:5: 35:13

    bb0: {
        _0 = AnyLayout::Us104Key(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:35:5: 35:13
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:35:5: 35:13
    }
}

// MIR FOR CTFE
fn AnyLayout::Us104Key(_1: Us104Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:35:5: 35:13

    bb0: {
        _0 = AnyLayout::Us104Key(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:35:5: 35:13
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:35:5: 35:13
    }
}

fn AnyLayout::Uk105Key(_1: Uk105Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:36:5: 36:13

    bb0: {
        _0 = AnyLayout::Uk105Key(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:36:5: 36:13
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:36:5: 36:13
    }
}

// MIR FOR CTFE
fn AnyLayout::Uk105Key(_1: Uk105Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:36:5: 36:13

    bb0: {
        _0 = AnyLayout::Uk105Key(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:36:5: 36:13
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:36:5: 36:13
    }
}

fn AnyLayout::Jis109Key(_1: Jis109Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:37:5: 37:14

    bb0: {
        _0 = AnyLayout::Jis109Key(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:37:5: 37:14
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:37:5: 37:14
    }
}

// MIR FOR CTFE
fn AnyLayout::Jis109Key(_1: Jis109Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:37:5: 37:14

    bb0: {
        _0 = AnyLayout::Jis109Key(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:37:5: 37:14
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:37:5: 37:14
    }
}

fn AnyLayout::Azerty(_1: Azerty) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:38:5: 38:11

    bb0: {
        _0 = AnyLayout::Azerty(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:38:5: 38:11
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:38:5: 38:11
    }
}

// MIR FOR CTFE
fn AnyLayout::Azerty(_1: Azerty) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:38:5: 38:11

    bb0: {
        _0 = AnyLayout::Azerty(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:38:5: 38:11
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:38:5: 38:11
    }
}

fn AnyLayout::Colemak(_1: Colemak) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:39:5: 39:12

    bb0: {
        _0 = AnyLayout::Colemak(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:39:5: 39:12
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:39:5: 39:12
    }
}

// MIR FOR CTFE
fn AnyLayout::Colemak(_1: Colemak) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:39:5: 39:12

    bb0: {
        _0 = AnyLayout::Colemak(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:39:5: 39:12
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:39:5: 39:12
    }
}

fn AnyLayout::De105Key(_1: De105Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:40:5: 40:13

    bb0: {
        _0 = AnyLayout::De105Key(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:40:5: 40:13
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:40:5: 40:13
    }
}

// MIR FOR CTFE
fn AnyLayout::De105Key(_1: De105Key) -> AnyLayout {
    let mut _0: layouts::AnyLayout;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:40:5: 40:13

    bb0: {
        _0 = AnyLayout::De105Key(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:40:5: 40:13
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/layouts/mod.rs:40:5: 40:13
    }
}

fn DecodedKey::RawKey(_1: KeyCode) -> DecodedKey {
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:5: 446:11

    bb0: {
        _0 = DecodedKey::RawKey(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:5: 446:11
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:5: 446:11
    }
}

// MIR FOR CTFE
fn DecodedKey::RawKey(_1: KeyCode) -> DecodedKey {
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:5: 446:11

    bb0: {
        _0 = DecodedKey::RawKey(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:5: 446:11
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:446:5: 446:11
    }
}

fn DecodedKey::Unicode(_1: char) -> DecodedKey {
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:5: 447:12

    bb0: {
        _0 = DecodedKey::Unicode(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:5: 447:12
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:5: 447:12
    }
}

// MIR FOR CTFE
fn DecodedKey::Unicode(_1: char) -> DecodedKey {
    let mut _0: DecodedKey;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:5: 447:12

    bb0: {
        _0 = DecodedKey::Unicode(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:5: 447:12
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pc-keyboard-0.7.0/src/lib.rs:447:5: 447:12
    }
}
