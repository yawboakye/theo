// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:212:10: 212:15>::fmt(_1: &Always, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:212:10: 212:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:212:10: 212:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:212:10: 212:15
    scope 1 {
    }

    bb0: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:212:10: 212:15
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:229:1: 229:25>::should_run() -> bool {
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:231:24: 231:28

    bb0: {
        _0 = const true;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:231:31: 231:35
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:231:37: 231:37
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:308:1: 308:34>::with_strategy(_1: T, _2: F) -> ScopeGuard<T, F, S> {
    debug v => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:317:26: 317:27
    debug dropfn => _2;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:317:32: 317:38
    let mut _0: ScopeGuard<T, F, S>;     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:317:46: 317:65
    let mut _3: core::mem::ManuallyDrop<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:319:20: 319:40
    let mut _4: core::mem::ManuallyDrop<F>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:320:21: 320:46

    bb0: {
        _3 = ManuallyDrop::<T>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:319:20: 319:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:319:20: 319:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> ManuallyDrop<T> {ManuallyDrop::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = ManuallyDrop::<F>::new(move _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:320:21: 320:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:320:21: 320:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(F) -> ManuallyDrop<F> {ManuallyDrop::<F>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = ScopeGuard::<T, F, S> { value: move _3, dropfn: move _4, strategy: const ZeroSized: PhantomData<fn(S) -> S> }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:318:9: 322:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<fn(S) -> S>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:323:6: 323:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:308:1: 308:34>::into_inner(_1: ScopeGuard<T, F, S>) -> T {
    debug guard => _1;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:348:23: 348:28
    let mut _0: T;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:348:39: 348:40
    let mut _3: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:352:35: 352:48
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:352:35: 352:48
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:352:36: 352:48
    let mut _6: &core::mem::ManuallyDrop<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:352:37: 352:48
    let mut _8: *const F;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:357:37: 357:51
    let _9: &F;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:357:37: 357:51
    let _10: &F;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:357:38: 357:51
    let mut _11: &core::mem::ManuallyDrop<F>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:357:39: 357:51
    let _12: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:358:13: 358:31
    let mut _13: ScopeGuard<T, F, S>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:358:25: 358:30
    scope 1 {
        let _2: T;                       // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:352:17: 352:22
        scope 2 {
            debug value => _2;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:352:17: 352:22
            let _7: F;                   // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:357:17: 357:24
            scope 3 {
                debug _dropfn => _7;     // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:357:17: 357:24
            }
        }
    }

    bb0: {
        _6 = &(_1.0: core::mem::ManuallyDrop<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:352:37: 352:48
        _5 = <ManuallyDrop<T> as Deref>::deref(move _6) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:352:36: 352:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:352:36: 352:48
                                         // + literal: Const { ty: for<'a> fn(&'a ManuallyDrop<T>) -> &'a <ManuallyDrop<T> as Deref>::Target {<ManuallyDrop<T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:352:35: 352:48
        _3 = &raw const (*_4);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:352:35: 352:48
        _2 = read::<T>(move _3) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:352:25: 352:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:352:25: 352:34
                                         // + literal: Const { ty: unsafe fn(*const T) -> T {read::<T>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &(_1.1: core::mem::ManuallyDrop<F>); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:357:39: 357:51
        _10 = <ManuallyDrop<F> as Deref>::deref(move _11) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:357:38: 357:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:357:38: 357:51
                                         // + literal: Const { ty: for<'a> fn(&'a ManuallyDrop<F>) -> &'a <ManuallyDrop<F> as Deref>::Target {<ManuallyDrop<F> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _10;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:357:37: 357:51
        _8 = &raw const (*_9);           // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:357:37: 357:51
        _7 = read::<F>(move _8) -> [return: bb4, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:357:27: 357:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:357:27: 357:36
                                         // + literal: Const { ty: unsafe fn(*const F) -> F {read::<F>}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = move _1;                   // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:358:25: 358:30
        _12 = core::mem::forget::<ScopeGuard<T, F, S>>(move _13) -> [return: bb5, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:358:13: 358:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:358:13: 358:24
                                         // + literal: Const { ty: fn(ScopeGuard<T, F, S>) {core::mem::forget::<ScopeGuard<T, F, S>>}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = move _2;                    // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:359:13: 359:18
        drop(_7) -> [return: bb6, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:360:9: 360:10
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:361:6: 361:6
    }
}

fn guard(_1: T, _2: F) -> ScopeGuard<T, F> {
    debug v => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:367:20: 367:21
    debug dropfn => _2;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:367:26: 367:32
    let mut _0: ScopeGuard<T, F>;        // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:367:40: 367:64

    bb0: {
        _0 = ScopeGuard::<T, F>::with_strategy(move _1, move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:370:5: 370:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:370:5: 370:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T, F) -> ScopeGuard<T, F> {ScopeGuard::<T, F>::with_strategy}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:371:2: 371:2
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:428:1: 428:44>::deref(_1: &ScopeGuard<T, F, S>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:434:14: 434:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:434:24: 434:26
    let _2: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:435:10: 435:21
    let mut _3: &core::mem::ManuallyDrop<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:435:11: 435:21

    bb0: {
        _3 = &((*_1).0: core::mem::ManuallyDrop<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:435:11: 435:21
        _2 = <ManuallyDrop<T> as Deref>::deref(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:435:10: 435:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:435:10: 435:21
                                         // + literal: Const { ty: for<'a> fn(&'a ManuallyDrop<T>) -> &'a <ManuallyDrop<T> as Deref>::Target {<ManuallyDrop<T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = _2;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:435:9: 435:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:436:6: 436:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:439:1: 439:47>::deref_mut(_1: &mut ScopeGuard<T, F, S>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:443:18: 443:27
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:443:32: 443:38
    let mut _2: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:444:14: 444:25
    let mut _3: &mut core::mem::ManuallyDrop<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:444:15: 444:25

    bb0: {
        _3 = &mut ((*_1).0: core::mem::ManuallyDrop<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:444:15: 444:25
        _2 = <ManuallyDrop<T> as DerefMut>::deref_mut(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:444:14: 444:25
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:444:14: 444:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut ManuallyDrop<T>) -> &'a mut <ManuallyDrop<T> as Deref>::Target {<ManuallyDrop<T> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = _2;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:444:9: 444:25
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:445:6: 445:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:448:1: 448:43>::drop(_1: &mut ScopeGuard<T, F, S>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:452:13: 452:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:452:24: 452:24
    let _2: T;                           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:455:14: 455:19
    let _3: F;                           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:455:21: 455:27
    let mut _4: (T, F);                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:455:31: 457:10
    let mut _5: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:14: 456:37
    let mut _6: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:24: 456:36
    let _7: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:24: 456:36
    let _8: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:25: 456:36
    let mut _9: &core::mem::ManuallyDrop<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:26: 456:36
    let mut _10: F;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:39: 456:63
    let mut _11: *const F;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:49: 456:62
    let _12: &F;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:49: 456:62
    let _13: &F;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:50: 456:62
    let mut _14: &core::mem::ManuallyDrop<F>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:51: 456:62
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:458:12: 458:27
    let _16: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:459:13: 459:26
    let mut _17: F;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:459:13: 459:19
    let mut _18: (T,);                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:459:13: 459:26
    let mut _19: T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:459:20: 459:25
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:461:5: 461:6
    let mut _21: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:461:5: 461:6
    scope 1 {
        debug value => _2;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:455:14: 455:19
        debug dropfn => _3;              // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:455:21: 455:27
    }
    scope 2 {
    }

    bb0: {
        _21 = const false;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:455:31: 457:10
        _20 = const false;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:455:31: 457:10
        _9 = &((*_1).0: core::mem::ManuallyDrop<T>); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:26: 456:36
        _8 = <ManuallyDrop<T> as Deref>::deref(move _9) -> [return: bb1, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:25: 456:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:25: 456:36
                                         // + literal: Const { ty: for<'a> fn(&'a ManuallyDrop<T>) -> &'a <ManuallyDrop<T> as Deref>::Target {<ManuallyDrop<T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _8;                         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:24: 456:36
        _6 = &raw const (*_7);           // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:24: 456:36
        _5 = read::<T>(move _6) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:14: 456:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:14: 456:23
                                         // + literal: Const { ty: unsafe fn(*const T) -> T {read::<T>}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = &((*_1).1: core::mem::ManuallyDrop<F>); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:51: 456:62
        _13 = <ManuallyDrop<F> as Deref>::deref(move _14) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:50: 456:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:50: 456:62
                                         // + literal: Const { ty: for<'a> fn(&'a ManuallyDrop<F>) -> &'a <ManuallyDrop<F> as Deref>::Target {<ManuallyDrop<F> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _13;                       // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:49: 456:62
        _11 = &raw const (*_12);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:49: 456:62
        _10 = read::<F>(move _11) -> [return: bb4, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:39: 456:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:39: 456:48
                                         // + literal: Const { ty: unsafe fn(*const F) -> F {read::<F>}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = (move _5, move _10);        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:456:13: 456:64
        _21 = const true;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:455:14: 455:19
        _2 = move (_4.0: T);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:455:14: 455:19
        _20 = const true;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:455:21: 455:27
        _3 = move (_4.1: F);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:455:21: 455:27
        _15 = <S as Strategy>::should_run() -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:458:12: 458:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:458:12: 458:25
                                         // + literal: Const { ty: fn() -> bool {<S as Strategy>::should_run}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _15) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:458:12: 458:27
    }

    bb6: {
        _20 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:459:13: 459:19
        _17 = move _3;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:459:13: 459:19
        _21 = const false;               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:459:20: 459:25
        _19 = move _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:459:20: 459:25
        _18 = (move _19,);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:459:13: 459:26
        _16 = <F as FnOnce<(T,)>>::call_once(move _17, move _18) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:459:13: 459:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:459:13: 459:19
                                         // + literal: Const { ty: extern "rust-call" fn(F, (T,)) -> <F as FnOnce<(T,)>>::Output {<F as FnOnce<(T,)>>::call_once}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(_20) -> [0: bb8, otherwise: bb10]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:461:5: 461:6
    }

    bb8: {
        _20 = const false;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:461:5: 461:6
        switchInt(_21) -> [0: bb9, otherwise: bb11]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:461:5: 461:6
    }

    bb9: {
        _21 = const false;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:461:5: 461:6
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:461:6: 461:6
    }

    bb10: {
        drop(_3) -> [return: bb8, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:461:5: 461:6
    }

    bb11: {
        drop(_2) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:461:5: 461:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:464:1: 464:49>::fmt(_1: &ScopeGuard<T, F, S>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:469:12: 469:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:469:19: 469:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:469:46: 469:57
    let mut _3: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:470:9: 472:19
    let mut _4: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:470:9: 471:39
    let mut _5: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:470:9: 471:39
    let mut _6: core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:470:9: 470:47
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:470:24: 470:46
    let _8: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:471:17: 471:24
    let mut _9: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:471:26: 471:38
    let _10: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:471:26: 471:38
    let _11: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:471:27: 471:38
    let mut _12: &core::mem::ManuallyDrop<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:471:28: 471:38

    bb0: {
        _7 = const "ScopeGuard";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:470:24: 470:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:470:24: 470:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = Formatter::<'_>::debug_struct(_2, _7) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:470:9: 470:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:470:11: 470:23
                                         // + literal: Const { ty: for<'b, 'a> fn(&'b mut Formatter<'_>, &'a str) -> DebugStruct<'b, '_> {Formatter::<'_>::debug_struct}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _6;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:470:9: 471:39
        _8 = const "value";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:471:17: 471:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:471:17: 471:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &((*_1).0: core::mem::ManuallyDrop<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:471:28: 471:38
        _11 = <ManuallyDrop<T> as Deref>::deref(move _12) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:471:27: 471:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:471:27: 471:38
                                         // + literal: Const { ty: for<'a> fn(&'a ManuallyDrop<T>) -> &'a <ManuallyDrop<T> as Deref>::Target {<ManuallyDrop<T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = _11;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:471:26: 471:38
        _9 = _10 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:471:26: 471:38
        _4 = DebugStruct::<'_, '_>::field(move _5, _8, move _9) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:470:9: 471:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:471:11: 471:16
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:470:9: 472:19
        _0 = DebugStruct::<'_, '_>::finish(move _3) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:470:9: 472:19
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:472:11: 472:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugStruct<'_, '_>) -> Result<(), core::fmt::Error> {DebugStruct::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.1.0/src/lib.rs:473:6: 473:6
    }
}
