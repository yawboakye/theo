// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:81:10: 81:15>::fmt(_1: &MutexGuard<'_, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:81:10: 81:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:81:10: 81:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:81:10: 81:15
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:81:10: 81:15
    let _4: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:84:5: 84:25
    let mut _5: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:84:5: 84:25
    let _6: &&core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:84:5: 84:25
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:85:5: 85:20
    let mut _8: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:85:5: 85:20
    let _9: &&&mut T;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:85:5: 85:20
    let _10: &&mut T;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:85:5: 85:20

    bb0: {
        _3 = const "MutexGuard";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:81:10: 81:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:81:10: 81:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "lock";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:84:5: 84:25
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:84:5: 84:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: &core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:84:5: 84:25
        _5 = _6 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:84:5: 84:25
        _7 = const "data";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:85:5: 85:20
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:85:5: 85:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &((*_1).1: &mut T);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:85:5: 85:20
        _9 = &_10;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:85:5: 85:20
        _8 = _9 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:85:5: 85:20
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:81:10: 81:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:81:10: 81:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:81:15: 81:15
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:92:1: 92:17>::new(_1: T) -> Mutex<T> {
    debug user_data => _1;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:109:22: 109:31
    let mut _0: mutex::Mutex<T>;         // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:109:39: 109:47
    let mut _2: core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:113:19: 113:41
    let mut _3: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:114:19: 114:45

    bb0: {
        _2 = AtomicBool::new(const false) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:113:19: 113:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:113:19: 113:34
                                         // + literal: Const { ty: fn(bool) -> AtomicBool {AtomicBool::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = UnsafeCell::<T>::new(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:114:19: 114:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:114:19: 114:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Mutex::<T> { lock: move _2, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:111:9: 115:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:116:6: 116:6
    }
}

// MIR FOR CTFE
fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:92:1: 92:17>::new(_1: T) -> Mutex<T> {
    debug user_data => _1;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:109:22: 109:31
    let mut _0: mutex::Mutex<T>;         // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:109:39: 109:47
    let mut _2: core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:113:19: 113:41
    let mut _3: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:114:19: 114:45
    let mut _4: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:114:35: 114:44
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:116:5: 116:6

    bb0: {
        _5 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:113:19: 113:41
        _5 = const true;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:113:19: 113:41
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:113:19: 113:41
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:113:19: 113:41
        _2 = AtomicBool::new(const false) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:113:19: 113:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:113:19: 113:34
                                         // + literal: Const { ty: fn(bool) -> AtomicBool {AtomicBool::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:114:19: 114:45
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:114:35: 114:44
        _5 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:114:35: 114:44
        _4 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:114:35: 114:44
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:114:19: 114:45
        _3 = UnsafeCell::<T>::new(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:114:19: 114:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:114:19: 114:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:114:44: 114:45
        _0 = Mutex::<T> { lock: move _2, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:111:9: 115:10
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:115:9: 115:10
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:115:9: 115:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:116:6: 116:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:92:1: 92:17>::into_inner(_1: Mutex<T>) -> T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:119:23: 119:27
    let mut _0: T;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:119:32: 119:33
    let _2: core::cell::UnsafeCell<T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:122:21: 122:25
    scope 1 {
        debug data => _2;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:122:21: 122:25
    }

    bb0: {
        _2 = move (_1.1: core::cell::UnsafeCell<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:122:21: 122:25
        _0 = UnsafeCell::<T>::into_inner(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:123:9: 123:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:123:14: 123:24
                                         // + literal: Const { ty: fn(UnsafeCell<T>) -> T {UnsafeCell::<T>::into_inner}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:124:6: 124:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:127:1: 127:25>::obtain_lock(_1: &Mutex<T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:129:20: 129:25
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:130:5: 130:5
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:131:15: 131:82
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:131:15: 131:73
    let mut _4: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:131:15: 131:73
    let mut _5: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:131:55: 131:72
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:134:19: 134:52
    let mut _7: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:134:19: 134:52
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:134:34: 134:51
    let _9: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:136:17: 136:28

    bb0: {
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:131:9: 138:10
    }

    bb1: {
        _4 = &((*_1).0: core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:131:15: 131:73
        _5 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:131:55: 131:72
        _3 = AtomicBool::compare_and_swap(move _4, const false, const true, move _5) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:131:15: 131:73
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:131:25: 131:41
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, bool, bool, core::sync::atomic::Ordering) -> bool {AtomicBool::compare_and_swap}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = move _3;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:131:15: 131:82
        switchInt(move _2) -> [0: bb6, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:131:15: 131:82
    }

    bb3: {
        _7 = &((*_1).0: core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:134:19: 134:52
        _8 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:134:34: 134:51
        _6 = AtomicBool::load(move _7, move _8) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:134:19: 134:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:134:29: 134:33
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, core::sync::atomic::Ordering) -> bool {AtomicBool::load}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt(move _6) -> [0: bb1, otherwise: bb5]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:134:19: 134:52
    }

    bb5: {
        _9 = spin_loop_hint() -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:136:17: 136:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:136:17: 136:26
                                         // + literal: Const { ty: fn() {spin_loop_hint}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:139:6: 139:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:127:1: 127:25>::lock(_1: &Mutex<T>) -> MutexGuard<'_, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:156:17: 156:22
    let mut _0: mutex::MutexGuard<'_, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:156:27: 156:40
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:158:9: 158:27
    let _3: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:161:19: 161:29
    let mut _4: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:162:28: 162:49
    let mut _5: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:162:34: 162:49
    let mut _6: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:162:34: 162:49
    scope 1 {
    }

    bb0: {
        _2 = Mutex::<T>::obtain_lock(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:158:9: 158:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:158:14: 158:25
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<T>) {Mutex::<T>::obtain_lock}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &((*_1).0: core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:161:19: 161:29
        _6 = &((*_1).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:162:34: 162:49
        _5 = UnsafeCell::<T>::get(move _6) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:162:34: 162:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:162:44: 162:47
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &mut (*_5);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:162:28: 162:49
        _0 = MutexGuard::<'_, T> { lock: _3, data: _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:159:9: 163:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:164:6: 164:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:127:1: 127:25>::force_unlock(_1: &Mutex<T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:173:32: 173:37
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:173:39: 173:39
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:174:9: 174:50
    let mut _3: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:174:9: 174:50
    let mut _4: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:174:32: 174:49

    bb0: {
        _3 = &((*_1).0: core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:174:9: 174:50
        _4 = Release;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:174:32: 174:49
        _2 = AtomicBool::store(move _3, const false, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:174:9: 174:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:174:19: 174:24
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, bool, core::sync::atomic::Ordering) {AtomicBool::store}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:175:6: 175:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:127:1: 127:25>::try_lock(_1: &Mutex<T>) -> Option<MutexGuard<'_, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:179:21: 179:26
    let mut _0: core::option::Option<mutex::MutexGuard<'_, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:179:31: 179:52
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:181:12: 181:79
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:181:12: 181:70
    let mut _4: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:181:12: 181:70
    let mut _5: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:181:52: 181:69
    let mut _6: mutex::MutexGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:184:17: 187:18
    let _7: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:185:27: 185:37
    let mut _8: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:186:36: 186:57
    let mut _9: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:186:42: 186:57
    let mut _10: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:186:42: 186:57
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:181:12: 181:70
        _5 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:181:52: 181:69
        _3 = AtomicBool::compare_and_swap(move _4, const false, const true, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:181:12: 181:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:181:22: 181:38
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, bool, bool, core::sync::atomic::Ordering) -> bool {AtomicBool::compare_and_swap}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Not(move _3);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:181:12: 181:79
        switchInt(move _2) -> [0: bb4, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:181:12: 181:79
    }

    bb2: {
        _7 = &((*_1).0: core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:185:27: 185:37
        _10 = &((*_1).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:186:42: 186:57
        _9 = UnsafeCell::<T>::get(move _10) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:186:42: 186:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:186:52: 186:55
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = &mut (*_9);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:186:36: 186:57
        _6 = MutexGuard::<'_, T> { lock: _7, data: _8 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:184:17: 187:18
        _0 = Option::<MutexGuard<'_, T>>::Some(move _6); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:183:13: 188:14
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:181:9: 193:10
    }

    bb4: {
        _0 = Option::<MutexGuard<'_, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:192:13: 192:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:181:9: 193:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:194:6: 194:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:197:1: 197:53>::fmt(_1: &Mutex<T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:199:12: 199:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:199:19: 199:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:199:46: 199:57
    let mut _3: core::option::Option<mutex::MutexGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:201:15: 201:30
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:13: 203:24
    let _5: mutex::MutexGuard<'_, T>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:18: 203:23
    let mut _6: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:28: 204:37
    let mut _7: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _8: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _9: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _10: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:38: 203:55
    let mut _11: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:19]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:36
    let mut _12: &mutex::MutexGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:36
    let mut _13: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:36
    let mut _14: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:15: 205:19]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:15: 205:35
    let mut _15: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:15: 205:35
    let mut _16: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _17: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _18: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:206:31: 206:53
    let mut _19: &[&str; 1];             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:206:31: 206:53
    scope 1 {
        debug guard => _5;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:18: 203:23
        let mut _20: &[&str; 1];         // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:38: 203:55
    }

    bb0: {
        _3 = Mutex::<T>::try_lock(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:201:15: 201:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:201:20: 201:28
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<T>) -> Option<MutexGuard<'a, T>> {Mutex::<T>::try_lock}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:201:15: 201:30
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:201:9: 201:30
    }

    bb2: {
        _16 = _2;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _19 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:206:31: 206:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:206:31: 206:53
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Mutex<T> as Debug>::fmt, [T], Some(promoted[0])) }
        _18 = _19 as &[&str] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:206:31: 206:53
        _17 = Arguments::<'_>::new_const(move _18) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:201:15: 201:30
    }

    bb4: {
        _5 = move ((_3 as Some).0: mutex::MutexGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:18: 203:23
        _8 = _2;                         // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _20 = const _;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:38: 203:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:38: 203:55
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Mutex<T> as Debug>::fmt, [T], Some(promoted[1])) }
        _10 = _20 as &[&str] (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:38: 203:55
        _9 = Arguments::<'_>::new_const(move _10) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = Formatter::<'_>::write_fmt(move _8, move _9) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = &_5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:36
        _13 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:36
        _11 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:19] { guard: move _12, f: move _13 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:36
                                         // closure
                                         // + def_id: DefId(0:45 ~ spin[5356]::mutex::{impl#4}::fmt::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)) -> core::result::Result<(), core::fmt::Error>,
                                         //     (&mutex::MutexGuard<'_, T>, &mut &mut core::fmt::Formatter<'_>),
                                         // ]
        _6 = Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:19]>(move _7, move _11) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:28: 204:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:6: 204:14
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:19]) -> Result<(), core::fmt::Error> {Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:19]>}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:15: 205:35
        _14 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:15: 205:19] { f: move _15 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:15: 205:35
                                         // closure
                                         // + def_id: DefId(0:46 ~ spin[5356]::mutex::{impl#4}::fmt::{closure#1})
                                         // + substs: [
                                         //     T,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)) -> core::result::Result<(), core::fmt::Error>,
                                         //     (&mut &mut core::fmt::Formatter<'_>,),
                                         // ]
        _0 = Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:15: 205:19]>(move _6, move _14) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:28: 205:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:6: 205:14
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:15: 205:19]) -> Result<(), core::fmt::Error> {Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:15: 205:19]>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_5) -> [return: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:35: 205:36
    }

    bb9: {
        _0 = Formatter::<'_>::write_fmt(move _16, move _17) -> [return: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:208:6: 208:6
    }
}

promoted[0] in mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:197:1: 197:53>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:206:31: 206:53
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:206:31: 206:53

    bb0: {
        _1 = [const "Mutex { <locked> }"]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:206:31: 206:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:206:31: 206:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:206:31: 206:53
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:206:31: 206:53
    }
}

promoted[1] in mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:197:1: 197:53>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:38: 203:55
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:38: 203:55

    bb0: {
        _1 = [const "Mutex { data: "];   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:38: 203:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:38: 203:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:38: 203:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:38: 203:55
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:197:1: 197:53>::fmt::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:19], _2: ()) -> Result<(), core::fmt::Error> {
    debug guard => (*(_1.0: &mutex::MutexGuard<'_, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:203:18: 203:23
    debug f => (*(_1.1: &mut &mut core::fmt::Formatter<'_>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:199:19: 199:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:20: 204:20
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:20: 204:29
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:22: 204:28
    let mut _5: &mutex::MutexGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:36
    let mut _6: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:36
    let mut _7: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:15: 204:36

    bb0: {
        _5 = deref_copy (_1.0: &mutex::MutexGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:23: 204:28
        _4 = <MutexGuard<'_, T> as Deref>::deref(_5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:22: 204:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:22: 204:28
                                         // + literal: Const { ty: for<'a> fn(&'a MutexGuard<'_, T>) -> &'a <MutexGuard<'_, T> as Deref>::Target {<MutexGuard<'_, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:20: 204:29
        _6 = deref_copy (_1.1: &mut &mut core::fmt::Formatter<'_>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:34: 204:35
        _7 = deref_copy (*_6);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:34: 204:35
        _0 = <T as Debug>::fmt(_3, _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:20: 204:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:30: 204:33
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:204:36: 204:36
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:197:1: 197:53>::fmt::{closure#1}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:15: 205:19], _2: ()) -> Result<(), core::fmt::Error> {
    debug f => (*(_1.0: &mut &mut core::fmt::Formatter<'_>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:199:19: 199:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:20: 205:20
    let mut _3: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _4: &[&str];                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:30: 205:34
    let mut _5: &[&str; 1];              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:30: 205:34
    let mut _6: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:15: 205:35
    let mut _7: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:15: 205:35

    bb0: {
        _6 = deref_copy (_1.0: &mut &mut core::fmt::Formatter<'_>); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _7 = deref_copy (*_6);           // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _5 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:30: 205:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:30: 205:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Mutex<T> as Debug>::fmt::{closure#1}, [T, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _4 = _5 as &[&str] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:30: 205:34
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Formatter::<'_>::write_fmt(_7, move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:35: 205:35
    }
}

promoted[0] in mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:197:1: 197:53>::fmt::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:30: 205:34
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:30: 205:34

    bb0: {
        _1 = [const "}"];                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:30: 205:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:30: 205:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:30: 205:34
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:205:30: 205:34
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:211:1: 211:47>::default() -> Mutex<T> {
    let mut _0: mutex::Mutex<T>;         // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:212:21: 212:29
    let mut _1: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:213:20: 213:38

    bb0: {
        _1 = <T as Default>::default() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:213:20: 213:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:213:20: 213:36
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Mutex::<T>::new(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:213:9: 213:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:213:9: 213:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> Mutex<T> {Mutex::<T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:214:6: 214:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:217:1: 217:48>::deref(_1: &MutexGuard<'_, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:220:18: 220:26
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:220:31: 220:36
    let mut _2: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:220:18: 220:26

    bb0: {
        _2 = deref_copy ((*_1).1: &mut T); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:220:39: 220:50
        _0 = &(*_2);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:220:39: 220:50
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:220:52: 220:52
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:223:1: 223:51>::deref_mut(_1: &mut MutexGuard<'_, T>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:225:22: 225:34
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:225:39: 225:48

    bb0: {
        _0 = deref_copy ((*_1).1: &mut T); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:225:51: 225:66
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:225:68: 225:68
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:228:1: 228:47>::drop(_1: &mut MutexGuard<'_, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:231:13: 231:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:232:5: 232:5
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:233:9: 233:50
    let mut _3: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:233:32: 233:49
    let mut _4: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:231:13: 231:22

    bb0: {
        _4 = deref_copy ((*_1).0: &core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:233:9: 233:50
        _3 = Release;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:233:32: 233:49
        _2 = AtomicBool::store(_4, const false, move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:233:9: 233:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:233:19: 233:24
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, bool, core::sync::atomic::Ordering) {AtomicBool::store}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/mutex.rs:234:6: 234:6
    }
}

const READER: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:64:15: 64:20
    let mut _1: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:64:23: 64:29
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:64:23: 64:29

    bb0: {
        _1 = const 2_i32 as u32 (IntToInt); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:64:23: 64:29
        _2 = Lt(move _1, const 64_u32);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:64:23: 64:29
        assert(move _2, "attempt to shift left by `{}`, which would overflow", const 2_i32) -> [success: bb1, unwind: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:64:23: 64:29
    }

    bb1: {
        _0 = Shl(const 1_usize, const 2_i32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:64:23: 64:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:64:1: 64:30
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:64:1: 64:30
    }
}

const UPGRADED: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:65:17: 65:22
    let mut _1: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:65:25: 65:31
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:65:25: 65:31

    bb0: {
        _1 = const 1_i32 as u32 (IntToInt); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:65:25: 65:31
        _2 = Lt(move _1, const 64_u32);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:65:25: 65:31
        assert(move _2, "attempt to shift left by `{}`, which would overflow", const 1_i32) -> [success: bb1, unwind: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:65:25: 65:31
    }

    bb1: {
        _0 = Shl(const 1_usize, const 1_i32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:65:25: 65:31
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:65:1: 65:32
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:65:1: 65:32
    }
}

const WRITER: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:66:15: 66:20

    bb0: {
        _0 = const 1_usize;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:66:23: 66:24
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:66:1: 66:25
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:72:10: 72:15>::fmt(_1: &RwLockReadGuard<'_, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:72:10: 72:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:72:10: 72:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:72:10: 72:15
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:72:10: 72:15
    let _4: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:74:5: 74:26
    let mut _5: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:74:5: 74:26
    let _6: &&core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:74:5: 74:26
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:75:5: 75:21
    let mut _8: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:75:5: 75:21
    let _9: &&core::ptr::NonNull<T>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:75:5: 75:21
    let _10: &core::ptr::NonNull<T>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:75:5: 75:21

    bb0: {
        _3 = const "RwLockReadGuard";    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:72:10: 72:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:72:10: 72:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "lock";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:74:5: 74:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:74:5: 74:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:74:5: 74:26
        _5 = _6 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:74:5: 74:26
        _7 = const "data";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:75:5: 75:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:75:5: 75:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &((*_1).1: core::ptr::NonNull<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:75:5: 75:21
        _9 = &_10;                       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:75:5: 75:21
        _8 = _9 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:75:5: 75:21
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:72:10: 72:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:72:10: 72:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:72:15: 72:15
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:81:10: 81:15>::fmt(_1: &RwLockWriteGuard<'_, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:81:10: 81:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:81:10: 81:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:81:10: 81:15
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:81:10: 81:15
    let _4: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:83:5: 83:26
    let mut _5: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:83:5: 83:26
    let _6: &&core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:83:5: 83:26
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:84:5: 84:21
    let mut _8: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:84:5: 84:21
    let _9: &core::ptr::NonNull<T>;      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:84:5: 84:21
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:86:5: 86:39
    let mut _11: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:86:5: 86:39
    let _12: &&core::marker::PhantomData<&mut T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:86:5: 86:39
    let _13: &core::marker::PhantomData<&mut T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:86:5: 86:39

    bb0: {
        _3 = const "RwLockWriteGuard";   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:81:10: 81:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:81:10: 81:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "lock";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:83:5: 83:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:83:5: 83:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:83:5: 83:26
        _5 = _6 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:83:5: 83:26
        _7 = const "data";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:84:5: 84:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:84:5: 84:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: core::ptr::NonNull<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:84:5: 84:21
        _8 = _9 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:84:5: 84:21
        _10 = const "_invariant";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:86:5: 86:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:86:5: 86:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = &((*_1).2: core::marker::PhantomData<&mut T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:86:5: 86:39
        _12 = &_13;                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:86:5: 86:39
        _11 = _12 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:86:5: 86:39
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:81:10: 81:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:81:10: 81:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:81:15: 81:15
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:97:10: 97:15>::fmt(_1: &RwLockUpgradeableGuard<'_, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:97:10: 97:15
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:97:10: 97:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:97:10: 97:15
    let _3: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:97:10: 97:15
    let _4: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:99:5: 99:26
    let mut _5: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:99:5: 99:26
    let _6: &&core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:99:5: 99:26
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:100:5: 100:21
    let mut _8: &dyn core::fmt::Debug;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:100:5: 100:21
    let _9: &core::ptr::NonNull<T>;      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:100:5: 100:21
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:102:5: 102:39
    let mut _11: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:102:5: 102:39
    let _12: &&core::marker::PhantomData<&mut T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:102:5: 102:39
    let _13: &core::marker::PhantomData<&mut T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:102:5: 102:39

    bb0: {
        _3 = const "RwLockUpgradeableGuard"; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:97:10: 97:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:97:10: 97:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "lock";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:99:5: 99:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:99:5: 99:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:99:5: 99:26
        _5 = _6 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:99:5: 99:26
        _7 = const "data";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:100:5: 100:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:100:5: 100:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: core::ptr::NonNull<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:100:5: 100:21
        _8 = _9 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:100:5: 100:21
        _10 = const "_invariant";        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:102:5: 102:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:102:5: 102:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = &((*_1).2: core::marker::PhantomData<&mut T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:102:5: 102:39
        _12 = &_13;                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:102:5: 102:39
        _11 = _12 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:102:5: 102:39
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:97:10: 97:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:97:10: 97:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), core::fmt::Error> {Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:97:15: 97:15
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:109:1: 109:18>::new(_1: T) -> RwLock<T> {
    debug user_data => _1;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:126:22: 126:31
    let mut _0: rw_lock::RwLock<T>;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:126:39: 126:48
    let mut _2: core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:128:19: 128:38
    let mut _3: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:129:19: 129:45

    bb0: {
        _2 = AtomicUsize::new(const 0_usize) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:128:19: 128:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:128:19: 128:35
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = UnsafeCell::<T>::new(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:129:19: 129:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:129:19: 129:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = RwLock::<T> { lock: move _2, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:127:9: 130:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:131:6: 131:6
    }
}

// MIR FOR CTFE
fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:109:1: 109:18>::new(_1: T) -> RwLock<T> {
    debug user_data => _1;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:126:22: 126:31
    let mut _0: rw_lock::RwLock<T>;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:126:39: 126:48
    let mut _2: core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:128:19: 128:38
    let mut _3: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:129:19: 129:45
    let mut _4: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:129:35: 129:44
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:131:5: 131:6

    bb0: {
        _5 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:128:19: 128:38
        _5 = const true;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:128:19: 128:38
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:128:19: 128:38
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:128:19: 128:38
        _2 = AtomicUsize::new(const 0_usize) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:128:19: 128:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:128:19: 128:35
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:129:19: 129:45
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:129:35: 129:44
        _5 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:129:35: 129:44
        _4 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:129:35: 129:44
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:129:19: 129:45
        _3 = UnsafeCell::<T>::new(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:129:19: 129:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:129:19: 129:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:129:44: 129:45
        _0 = RwLock::<T> { lock: move _2, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:127:9: 130:10
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:130:9: 130:10
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:130:9: 130:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:131:6: 131:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:109:1: 109:18>::into_inner(_1: RwLock<T>) -> T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:135:23: 135:27
    let mut _0: T;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:135:32: 135:33
    let _2: core::cell::UnsafeCell<T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:138:22: 138:26
    scope 1 {
        debug data => _2;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:138:22: 138:26
    }

    bb0: {
        _2 = move (_1.1: core::cell::UnsafeCell<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:138:22: 138:26
        _0 = UnsafeCell::<T>::into_inner(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:139:9: 139:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:139:14: 139:24
                                         // + literal: Const { ty: fn(UnsafeCell<T>) -> T {UnsafeCell::<T>::into_inner}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:140:6: 140:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:143:1: 143:26>::read(_1: &RwLock<T>) -> RwLockReadGuard<'_, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:166:17: 166:22
    let mut _0: rw_lock::RwLockReadGuard<'_, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:166:27: 166:45
    let mut _2: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:166:5: 173:6
    let mut _3: core::option::Option<rw_lock::RwLockReadGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:168:19: 168:34
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:169:17: 169:28
    scope 1 {
        debug guard => _0;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:169:22: 169:27
    }

    bb0: {
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:167:9: 172:10
    }

    bb1: {
        _3 = RwLock::<T>::try_read(_1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:168:19: 168:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:168:24: 168:32
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<T>) -> Option<RwLockReadGuard<'a, T>> {RwLock::<T>::try_read}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:168:19: 168:34
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:168:13: 168:34
    }

    bb3: {
        _2 = spin_loop_hint() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:170:25: 170:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:170:25: 170:34
                                         // + literal: Const { ty: fn() {spin_loop_hint}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:168:19: 168:34
    }

    bb5: {
        _0 = move ((_3 as Some).0: rw_lock::RwLockReadGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:169:22: 169:27
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:173:6: 173:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:143:1: 143:26>::try_read(_1: &RwLock<T>) -> Option<RwLockReadGuard<'_, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:198:21: 198:26
    let mut _0: core::option::Option<rw_lock::RwLockReadGuard<'_, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:198:31: 198:57
    let _2: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:199:13: 199:18
    let mut _3: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:199:21: 199:67
    let mut _4: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:199:49: 199:66
    let mut _5: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:203:12: 203:39
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:203:12: 203:17
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:203:20: 203:39
    let _8: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:205:13: 205:59
    let mut _9: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:205:13: 205:59
    let mut _10: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:205:41: 205:58
    let mut _11: rw_lock::RwLockReadGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:208:18: 211:14
    let _12: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:209:23: 209:33
    let mut _13: core::ptr::NonNull<T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:210:23: 210:73
    let mut _14: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:210:55: 210:70
    let mut _15: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:210:55: 210:70
    scope 1 {
        debug value => _2;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:199:13: 199:18
        scope 2 {
        }
    }

    bb0: {
        _3 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:199:21: 199:67
        _4 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:199:49: 199:66
        _2 = AtomicUsize::fetch_add(move _3, const _, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:199:21: 199:67
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:199:31: 199:40
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:203:12: 203:17
        _7 = BitOr(const _, const _);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:203:20: 203:39
        _5 = BitAnd(move _6, move _7);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:203:12: 203:39
        switchInt(move _5) -> [0: bb4, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:203:12: 203:44
    }

    bb2: {
        _9 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:205:13: 205:59
        _10 = Release;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:205:41: 205:58
        _8 = AtomicUsize::fetch_sub(move _9, const _, move _10) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:205:13: 205:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:205:23: 205:32
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_sub}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<RwLockReadGuard<'_, T>>::None; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:206:13: 206:17
        goto -> bb7;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:203:9: 212:10
    }

    bb4: {
        _12 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:209:23: 209:33
        _15 = &((*_1).1: core::cell::UnsafeCell<T>); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:210:55: 210:70
        _14 = UnsafeCell::<T>::get(move _15) -> [return: bb5, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:210:55: 210:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:210:65: 210:68
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = NonNull::<T>::new_unchecked(move _14) -> [return: bb6, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:210:32: 210:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:210:32: 210:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: unsafe fn(*mut T) -> NonNull<T> {NonNull::<T>::new_unchecked}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = RwLockReadGuard::<'_, T> { lock: _12, data: move _13 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:208:18: 211:14
        _0 = Option::<RwLockReadGuard<'_, T>>::Some(move _11); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:208:13: 211:15
        goto -> bb7;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:203:9: 212:10
    }

    bb7: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:213:6: 213:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:143:1: 143:26>::force_read_decrement(_1: &RwLock<T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:222:40: 222:45
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:222:47: 222:47
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:218:12: 218:42
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:223:23: 223:70
    let mut _5: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:223:23: 223:66
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:223:23: 223:56
    let mut _7: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:223:23: 223:56
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:223:38: 223:55
    let mut _9: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:223:59: 223:66
    let mut _10: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
    let _11: usize;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:224:9: 224:55
    let mut _12: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:224:9: 224:55
    let mut _13: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:224:37: 224:54

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:218:12: 218:42
        switchInt(move _2) -> [0: bb4, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:218:12: 218:42
    }

    bb1: {
        _7 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:223:23: 223:56
        _8 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:223:38: 223:55
        _6 = AtomicUsize::load(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:223:23: 223:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:223:33: 223:37
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = Not(const _);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:223:59: 223:66
        _5 = BitAnd(move _6, move _9);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:223:23: 223:66
        _4 = Gt(move _5, const 0_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:223:23: 223:70
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
    }

    bb3: {
        _10 = panic(const "assertion failed: self.lock.load(Ordering::Relaxed) & !WRITER > 0") -> unwind unreachable; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _12 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:224:9: 224:55
        _13 = Release;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:224:37: 224:54
        _11 = AtomicUsize::fetch_sub(move _12, const _, move _13) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:224:9: 224:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:224:19: 224:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_sub}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:225:6: 225:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:143:1: 143:26>::force_write_unlock(_1: &RwLock<T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:234:38: 234:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:234:45: 234:45
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    let mut _3: (&usize, &usize);        // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:26: 235:82
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:26: 235:59
    let mut _7: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:26: 235:59
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:41: 235:58
    let mut _9: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:62: 235:82
    let mut _10: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:63: 235:82
    let _11: &usize;                     // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
    let _12: &usize;                     // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
    let _20: usize;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:236:9: 236:69
    let mut _21: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:236:9: 236:69
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:236:29: 236:49
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:236:30: 236:49
    let mut _24: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:236:51: 236:68
    let mut _25: &usize;                 // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _11;           // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _12;          // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        let _17: core::panicking::AssertKind; // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _17;           // in scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
        switchInt(move _2) -> [0: bb4, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    }

    bb1: {
        _7 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:26: 235:59
        _8 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:41: 235:58
        _6 = AtomicUsize::load(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:26: 235:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:36: 235:40
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = BitOr(const _, const _);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:63: 235:82
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:62: 235:82
        _5 = BitAnd(move _6, move _9);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:26: 235:82
        _4 = &_5;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = const _;                   // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(RwLock::<T>::force_write_unlock, [T], Some(promoted[0])) }
        _3 = (move _4, _25);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_3.0: &usize);            // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_3.1: &usize);            // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = (*_11);                    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = (*_12);                    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb4, otherwise: bb3]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = assert_failed::<usize, usize>(move _17, _11, _12, move _19) -> unwind unreachable; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:236:9: 236:69
        _23 = BitOr(const _, const _);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:236:30: 236:49
        _22 = Not(move _23);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:236:29: 236:49
        _24 = Release;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:236:51: 236:68
        _20 = AtomicUsize::fetch_and(move _21, move _22, move _24) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:236:9: 236:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:236:19: 236:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_and}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:237:6: 237:6
    }
}

promoted[0] in rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:143:1: 143:26>::force_write_unlock: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:84: 235:85

    bb0: {
        _1 = const 0_usize;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:235:84: 235:85
        _0 = &_1;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:143:1: 143:26>::try_write_internal(_1: &RwLock<T>, _2: bool) -> Option<RwLockWriteGuard<'_, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:240:27: 240:32
    debug strong => _2;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:240:34: 240:40
    let mut _0: core::option::Option<rw_lock::RwLockWriteGuard<'_, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:240:51: 240:78
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:241:12: 249:17
    let mut _4: &core::result::Result<usize, usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:241:12: 249:17
    let _5: core::result::Result<usize, usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:241:12: 248:10
    let _6: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:242:13: 242:23
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:245:13: 245:30
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:246:13: 246:30
    let mut _9: rw_lock::RwLockWriteGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:251:18: 255:14
    let _10: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:252:23: 252:33
    let mut _11: core::ptr::NonNull<T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:253:23: 253:73
    let mut _12: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:253:55: 253:70
    let mut _13: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:253:55: 253:70
    scope 1 {
    }

    bb0: {
        _6 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:242:13: 242:23
        _7 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:245:13: 245:30
        _8 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:246:13: 246:30
        _5 = compare_exchange(_6, const 0_usize, const _, move _7, move _8, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:241:12: 248:10
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:241:12: 241:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, usize, core::sync::atomic::Ordering, core::sync::atomic::Ordering, bool) -> Result<usize, usize> {compare_exchange}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:241:12: 249:17
        _3 = Result::<usize, usize>::is_ok(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:241:12: 249:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:249:10: 249:15
                                         // + literal: Const { ty: for<'a> fn(&'a Result<usize, usize>) -> bool {Result::<usize, usize>::is_ok}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _3) -> [0: bb6, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:241:12: 249:17
    }

    bb3: {
        _10 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:252:23: 252:33
        _13 = &((*_1).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:253:55: 253:70
        _12 = UnsafeCell::<T>::get(move _13) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:253:55: 253:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:253:65: 253:68
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = NonNull::<T>::new_unchecked(move _12) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:253:32: 253:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:253:32: 253:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: unsafe fn(*mut T) -> NonNull<T> {NonNull::<T>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = RwLockWriteGuard::<'_, T> { lock: _10, data: move _11, _invariant: const ZeroSized: PhantomData<&mut T> }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:251:18: 255:14
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&mut T>, val: Value(<ZST>) }
        _0 = Option::<RwLockWriteGuard<'_, T>>::Some(move _9); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:251:13: 255:15
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:241:9: 258:10
    }

    bb6: {
        _0 = Option::<RwLockWriteGuard<'_, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:257:13: 257:17
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:241:9: 258:10
    }

    bb7: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:259:6: 259:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:143:1: 143:26>::write(_1: &RwLock<T>) -> RwLockWriteGuard<'_, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:280:18: 280:23
    let mut _0: rw_lock::RwLockWriteGuard<'_, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:280:28: 280:47
    let mut _2: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:280:5: 287:6
    let mut _3: core::option::Option<rw_lock::RwLockWriteGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:282:19: 282:49
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:283:17: 283:28
    scope 1 {
        debug guard => _0;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:283:22: 283:27
    }

    bb0: {
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:281:9: 286:10
    }

    bb1: {
        _3 = RwLock::<T>::try_write_internal(_1, const false) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:282:19: 282:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:282:24: 282:42
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<T>, bool) -> Option<RwLockWriteGuard<'a, T>> {RwLock::<T>::try_write_internal}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:282:19: 282:49
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:282:13: 282:49
    }

    bb3: {
        _2 = spin_loop_hint() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:284:25: 284:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:284:25: 284:34
                                         // + literal: Const { ty: fn() {spin_loop_hint}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:282:19: 282:49
    }

    bb5: {
        _0 = move ((_3 as Some).0: rw_lock::RwLockWriteGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:283:22: 283:27
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:287:6: 287:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:143:1: 143:26>::try_write(_1: &RwLock<T>) -> Option<RwLockWriteGuard<'_, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:309:22: 309:27
    let mut _0: core::option::Option<rw_lock::RwLockWriteGuard<'_, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:309:32: 309:59

    bb0: {
        _0 = RwLock::<T>::try_write_internal(_1, const true) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:310:9: 310:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:310:14: 310:32
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<T>, bool) -> Option<RwLockWriteGuard<'a, T>> {RwLock::<T>::try_write_internal}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:311:6: 311:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:143:1: 143:26>::upgradeable_read(_1: &RwLock<T>) -> RwLockUpgradeableGuard<'_, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:316:29: 316:34
    let mut _0: rw_lock::RwLockUpgradeableGuard<'_, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:316:39: 316:64
    let mut _2: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:316:5: 323:6
    let mut _3: core::option::Option<rw_lock::RwLockUpgradeableGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:318:19: 318:46
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:319:17: 319:28
    scope 1 {
        debug guard => _0;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:319:22: 319:27
    }

    bb0: {
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:317:9: 322:10
    }

    bb1: {
        _3 = RwLock::<T>::try_upgradeable_read(_1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:318:19: 318:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:318:24: 318:44
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<T>) -> Option<RwLockUpgradeableGuard<'a, T>> {RwLock::<T>::try_upgradeable_read}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:318:19: 318:46
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:318:13: 318:46
    }

    bb3: {
        _2 = spin_loop_hint() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:320:25: 320:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:320:25: 320:34
                                         // + literal: Const { ty: fn() {spin_loop_hint}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:318:19: 318:46
    }

    bb5: {
        _0 = move ((_3 as Some).0: rw_lock::RwLockUpgradeableGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:319:22: 319:27
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:323:6: 323:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:143:1: 143:26>::try_upgradeable_read(_1: &RwLock<T>) -> Option<RwLockUpgradeableGuard<'_, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:327:33: 327:38
    let mut _0: core::option::Option<rw_lock::RwLockUpgradeableGuard<'_, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:327:43: 327:76
    let mut _2: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:12: 328:81
    let mut _3: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:12: 328:59
    let mut _4: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:12: 328:59
    let mut _5: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:41: 328:58
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:62: 328:81
    let mut _7: rw_lock::RwLockUpgradeableGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:329:18: 333:14
    let _8: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:330:23: 330:33
    let mut _9: core::ptr::NonNull<T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:331:23: 331:73
    let mut _10: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:331:55: 331:70
    let mut _11: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:331:55: 331:70
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:12: 328:59
        _5 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:41: 328:58
        _3 = AtomicUsize::fetch_or(move _4, const _, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:12: 328:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:22: 328:30
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_or}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = BitOr(const _, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:62: 328:81
        _2 = BitAnd(move _3, move _6);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:12: 328:81
        switchInt(move _2) -> [0: bb2, otherwise: bb5]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:12: 328:86
    }

    bb2: {
        _8 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:330:23: 330:33
        _11 = &((*_1).1: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:331:55: 331:70
        _10 = UnsafeCell::<T>::get(move _11) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:331:55: 331:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:331:65: 331:68
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = NonNull::<T>::new_unchecked(move _10) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:331:32: 331:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:331:32: 331:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: unsafe fn(*mut T) -> NonNull<T> {NonNull::<T>::new_unchecked}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = RwLockUpgradeableGuard::<'_, T> { lock: _8, data: move _9, _invariant: const ZeroSized: PhantomData<&mut T> }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:329:18: 333:14
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&mut T>, val: Value(<ZST>) }
        _0 = Option::<RwLockUpgradeableGuard<'_, T>>::Some(move _7); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:329:13: 333:15
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:9: 338:10
    }

    bb5: {
        _0 = Option::<RwLockUpgradeableGuard<'_, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:337:13: 337:17
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:328:9: 338:10
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:339:6: 339:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:342:1: 342:54>::fmt(_1: &RwLock<T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:343:12: 343:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:343:19: 343:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:343:46: 343:57
    let mut _3: core::option::Option<rw_lock::RwLockReadGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:344:15: 344:30
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:13: 345:24
    let _5: rw_lock::RwLockReadGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:18: 345:23
    let mut _6: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:28: 346:49
    let mut _7: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _8: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _9: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _10: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:38: 345:56
    let mut _11: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:31]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:48
    let mut _12: &rw_lock::RwLockReadGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:48
    let mut _13: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:48
    let mut _14: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:27: 347:31]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:27: 347:47
    let mut _15: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:27: 347:47
    let mut _16: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _17: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _18: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:348:31: 348:54
    let mut _19: &[&str; 1];             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:348:31: 348:54
    scope 1 {
        debug guard => _5;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:18: 345:23
        let mut _20: &[&str; 1];         // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:38: 345:56
    }

    bb0: {
        _3 = RwLock::<T>::try_read(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:344:15: 344:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:344:20: 344:28
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<T>) -> Option<RwLockReadGuard<'a, T>> {RwLock::<T>::try_read}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:344:15: 344:30
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:344:9: 344:30
    }

    bb2: {
        _16 = _2;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _19 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:348:31: 348:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:348:31: 348:54
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<RwLock<T> as Debug>::fmt, [T], Some(promoted[0])) }
        _18 = _19 as &[&str] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:348:31: 348:54
        _17 = Arguments::<'_>::new_const(move _18) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:344:15: 344:30
    }

    bb4: {
        _5 = move ((_3 as Some).0: rw_lock::RwLockReadGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:18: 345:23
        _8 = _2;                         // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _20 = const _;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:38: 345:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:38: 345:56
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<RwLock<T> as Debug>::fmt, [T], Some(promoted[1])) }
        _10 = _20 as &[&str] (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:38: 345:56
        _9 = Arguments::<'_>::new_const(move _10) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = Formatter::<'_>::write_fmt(move _8, move _9) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = &_5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:48
        _13 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:48
        _11 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:31] { guard: move _12, f: move _13 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:48
                                         // closure
                                         // + def_id: DefId(0:108 ~ spin[5356]::rw_lock::{impl#4}::fmt::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)) -> core::result::Result<(), core::fmt::Error>,
                                         //     (&rw_lock::RwLockReadGuard<'_, T>, &mut &mut core::fmt::Formatter<'_>),
                                         // ]
        _6 = Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:31]>(move _7, move _11) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:28: 346:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:18: 346:26
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:31]) -> Result<(), core::fmt::Error> {Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:31]>}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:27: 347:47
        _14 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:27: 347:31] { f: move _15 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:27: 347:47
                                         // closure
                                         // + def_id: DefId(0:109 ~ spin[5356]::rw_lock::{impl#4}::fmt::{closure#1})
                                         // + substs: [
                                         //     T,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)) -> core::result::Result<(), core::fmt::Error>,
                                         //     (&mut &mut core::fmt::Formatter<'_>,),
                                         // ]
        _0 = Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:27: 347:31]>(move _6, move _14) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:28: 347:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:18: 347:26
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:27: 347:31]) -> Result<(), core::fmt::Error> {Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:27: 347:31]>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_5) -> [return: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:47: 347:48
    }

    bb9: {
        _0 = Formatter::<'_>::write_fmt(move _16, move _17) -> [return: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:350:6: 350:6
    }
}

promoted[0] in rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:342:1: 342:54>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:348:31: 348:54
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:348:31: 348:54

    bb0: {
        _1 = [const "RwLock { <locked> }"]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:348:31: 348:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:348:31: 348:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:348:31: 348:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:348:31: 348:54
    }
}

promoted[1] in rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:342:1: 342:54>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:38: 345:56
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:38: 345:56

    bb0: {
        _1 = [const "RwLock { data: "];  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:38: 345:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:38: 345:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:38: 345:56
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:38: 345:56
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:342:1: 342:54>::fmt::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:31], _2: ()) -> Result<(), core::fmt::Error> {
    debug guard => (*(_1.0: &rw_lock::RwLockReadGuard<'_, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:345:18: 345:23
    debug f => (*(_1.1: &mut &mut core::fmt::Formatter<'_>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:343:19: 343:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:32: 346:32
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:32: 346:41
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:34: 346:40
    let mut _5: &rw_lock::RwLockReadGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:48
    let mut _6: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:48
    let mut _7: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:27: 346:48

    bb0: {
        _5 = deref_copy (_1.0: &rw_lock::RwLockReadGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:35: 346:40
        _4 = <RwLockReadGuard<'_, T> as Deref>::deref(_5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:34: 346:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:34: 346:40
                                         // + literal: Const { ty: for<'a> fn(&'a RwLockReadGuard<'_, T>) -> &'a <RwLockReadGuard<'_, T> as Deref>::Target {<RwLockReadGuard<'_, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:32: 346:41
        _6 = deref_copy (_1.1: &mut &mut core::fmt::Formatter<'_>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:46: 346:47
        _7 = deref_copy (*_6);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:46: 346:47
        _0 = <T as Debug>::fmt(_3, _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:32: 346:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:42: 346:45
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:346:48: 346:48
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:342:1: 342:54>::fmt::{closure#1}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:27: 347:31], _2: ()) -> Result<(), core::fmt::Error> {
    debug f => (*(_1.0: &mut &mut core::fmt::Formatter<'_>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:343:19: 343:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:32: 347:32
    let mut _3: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _4: &[&str];                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:42: 347:46
    let mut _5: &[&str; 1];              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:42: 347:46
    let mut _6: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:27: 347:47
    let mut _7: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:27: 347:47

    bb0: {
        _6 = deref_copy (_1.0: &mut &mut core::fmt::Formatter<'_>); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _7 = deref_copy (*_6);           // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _5 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:42: 347:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:42: 347:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<RwLock<T> as Debug>::fmt::{closure#1}, [T, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _4 = _5 as &[&str] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:42: 347:46
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Formatter::<'_>::write_fmt(_7, move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:47: 347:47
    }
}

promoted[0] in rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:342:1: 342:54>::fmt::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:42: 347:46
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:42: 347:46

    bb0: {
        _1 = [const "}"];                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:42: 347:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:42: 347:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:42: 347:46
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:347:42: 347:46
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:353:1: 353:48>::default() -> RwLock<T> {
    let mut _0: rw_lock::RwLock<T>;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:354:21: 354:30
    let mut _1: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:355:21: 355:39

    bb0: {
        _1 = <T as Default>::default() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:355:21: 355:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:355:21: 355:37
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = RwLock::<T>::new(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:355:9: 355:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:355:9: 355:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> RwLock<T> {RwLock::<T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:356:6: 356:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:359:1: 359:60>::try_upgrade_internal(_1: RwLockUpgradeableGuard<'_, T>, _2: bool) -> Result<RwLockWriteGuard<'_, T>, RwLockUpgradeableGuard<'_, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:361:29: 361:33
    debug strong => _2;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:361:35: 361:41
    let mut _0: core::result::Result<rw_lock::RwLockWriteGuard<'_, T>, rw_lock::RwLockUpgradeableGuard<'_, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:361:52: 361:94
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:362:12: 370:17
    let mut _4: &core::result::Result<usize, usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:362:12: 370:17
    let _5: core::result::Result<usize, usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:362:12: 369:10
    let _6: &&core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:363:13: 363:23
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:366:13: 366:30
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:367:13: 367:30
    let _9: core::result::Result<rw_lock::RwLockWriteGuard<'_, T>, rw_lock::RwLockUpgradeableGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:373:17: 373:20
    let mut _10: rw_lock::RwLockWriteGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:373:26: 377:14
    let _11: &&core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:374:23: 374:33
    let mut _12: core::ptr::NonNull<T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:375:23: 375:32
    let _13: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:380:13: 380:30
    let mut _14: rw_lock::RwLockUpgradeableGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:380:25: 380:29
    let mut _15: rw_lock::RwLockUpgradeableGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:384:17: 384:21
    let mut _16: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:363:13: 363:23
    let mut _17: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:374:23: 374:33
    scope 1 {
        debug out => _9;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:373:17: 373:20
    }

    bb0: {
        _6 = &(_1.0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:363:13: 363:23
        _16 = deref_copy (*_6);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:363:13: 363:23
        _7 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:366:13: 366:30
        _8 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:367:13: 367:30
        _5 = compare_exchange(_16, const _, const _, move _7, move _8, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:362:12: 369:10
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:362:12: 362:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, usize, core::sync::atomic::Ordering, core::sync::atomic::Ordering, bool) -> Result<usize, usize> {compare_exchange}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:362:12: 370:17
        _3 = Result::<usize, usize>::is_ok(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:362:12: 370:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:370:10: 370:15
                                         // + literal: Const { ty: for<'a> fn(&'a Result<usize, usize>) -> bool {Result::<usize, usize>::is_ok}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _3) -> [0: bb5, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:362:12: 370:17
    }

    bb3: {
        _11 = &(_1.0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:374:23: 374:33
        _17 = deref_copy (*_11);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:374:23: 374:33
        _12 = (_1.1: core::ptr::NonNull<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:375:23: 375:32
        _10 = RwLockWriteGuard::<'_, T> { lock: _17, data: move _12, _invariant: const ZeroSized: PhantomData<&mut T> }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:373:26: 377:14
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<&mut T>, val: Value(<ZST>) }
        _9 = Result::<RwLockWriteGuard<'_, T>, RwLockUpgradeableGuard<'_, T>>::Ok(move _10); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:373:23: 377:15
        _14 = move _1;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:380:25: 380:29
        _13 = core::mem::forget::<RwLockUpgradeableGuard<'_, T>>(move _14) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:380:13: 380:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:380:13: 380:24
                                         // + literal: Const { ty: fn(RwLockUpgradeableGuard<'_, T>) {core::mem::forget::<RwLockUpgradeableGuard<'_, T>>}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = move _9;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:382:13: 382:16
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:362:9: 385:10
    }

    bb5: {
        _15 = move _1;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:384:17: 384:21
        _0 = Result::<RwLockWriteGuard<'_, T>, RwLockUpgradeableGuard<'_, T>>::Err(move _15); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:384:13: 384:22
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:362:9: 385:10
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:386:6: 386:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:359:1: 359:60>::upgrade(_1: RwLockUpgradeableGuard<'_, T>) -> RwLockWriteGuard<'_, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:397:20: 397:28
    let mut _0: rw_lock::RwLockWriteGuard<'_, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:397:33: 397:61
    let mut _2: core::result::Result<rw_lock::RwLockWriteGuard<'_, T>, rw_lock::RwLockUpgradeableGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:399:26: 399:58
    let mut _3: rw_lock::RwLockUpgradeableGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:399:26: 399:30
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:400:17: 400:26
    let _5: rw_lock::RwLockUpgradeableGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:401:21: 401:22
    let _6: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:404:13: 404:24
    scope 1 {
        debug guard => _0;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:400:20: 400:25
    }
    scope 2 {
        debug e => _5;                   // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:401:21: 401:22
    }

    bb0: {
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:398:9: 405:10
    }

    bb1: {
        _3 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:399:26: 399:30
        _2 = RwLockUpgradeableGuard::<'_, T>::try_upgrade_internal(move _3, const false) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:399:26: 399:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:399:31: 399:51
                                         // + literal: Const { ty: fn(RwLockUpgradeableGuard<'_, T>, bool) -> Result<RwLockWriteGuard<'_, T>, RwLockUpgradeableGuard<'_, T>> {RwLockUpgradeableGuard::<'_, T>::try_upgrade_internal}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_2);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:399:26: 399:58
        switchInt(move _4) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:399:20: 399:58
    }

    bb3: {
        _5 = move ((_2 as Err).0: rw_lock::RwLockUpgradeableGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:401:21: 401:22
        _1 = move _5;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:399:13: 399:17
        _6 = spin_loop_hint() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:404:13: 404:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:404:13: 404:22
                                         // + literal: Const { ty: fn() {spin_loop_hint}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:399:26: 399:58
    }

    bb5: {
        _0 = move ((_2 as Ok).0: rw_lock::RwLockWriteGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:400:20: 400:25
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:406:6: 406:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:359:1: 359:60>::try_upgrade(_1: RwLockUpgradeableGuard<'_, T>) -> Result<RwLockWriteGuard<'_, T>, RwLockUpgradeableGuard<'_, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:420:24: 420:28
    let mut _0: core::result::Result<rw_lock::RwLockWriteGuard<'_, T>, rw_lock::RwLockUpgradeableGuard<'_, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:420:33: 420:75

    bb0: {
        _0 = RwLockUpgradeableGuard::<'_, T>::try_upgrade_internal(move _1, const true) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:421:9: 421:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:421:14: 421:34
                                         // + literal: Const { ty: fn(RwLockUpgradeableGuard<'_, T>, bool) -> Result<RwLockWriteGuard<'_, T>, RwLockUpgradeableGuard<'_, T>> {RwLockUpgradeableGuard::<'_, T>::try_upgrade_internal}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:422:6: 422:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:359:1: 359:60>::downgrade(_1: RwLockUpgradeableGuard<'_, T>) -> RwLockReadGuard<'_, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:438:22: 438:26
    let mut _0: rw_lock::RwLockReadGuard<'_, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:438:31: 438:58
    let _2: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:440:9: 440:55
    let mut _3: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:440:37: 440:54
    let _4: &&core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:443:19: 443:29
    let mut _5: core::ptr::NonNull<T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:444:19: 444:28
    let mut _6: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:438:22: 438:26
    let mut _7: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:443:19: 443:29

    bb0: {
        _6 = deref_copy (_1.0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:440:9: 440:55
        _3 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:440:37: 440:54
        _2 = AtomicUsize::fetch_add(_6, const _, move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:440:9: 440:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:440:19: 440:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &(_1.0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:443:19: 443:29
        _7 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:443:19: 443:29
        _5 = (_1.1: core::ptr::NonNull<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:444:19: 444:28
        _0 = RwLockReadGuard::<'_, T> { lock: _7, data: move _5 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:442:9: 445:10
        drop(_1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:448:5: 448:6
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:448:6: 448:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:451:1: 451:54>::downgrade(_1: RwLockWriteGuard<'_, T>) -> RwLockReadGuard<'_, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:465:22: 465:26
    let mut _0: rw_lock::RwLockReadGuard<'_, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:465:31: 465:58
    let _2: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:467:9: 467:55
    let mut _3: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:467:37: 467:54
    let _4: &&core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:470:19: 470:29
    let mut _5: core::ptr::NonNull<T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:471:19: 471:28
    let mut _6: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:465:22: 465:26
    let mut _7: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:470:19: 470:29

    bb0: {
        _6 = deref_copy (_1.0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:467:9: 467:55
        _3 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:467:37: 467:54
        _2 = AtomicUsize::fetch_add(_6, const _, move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:467:9: 467:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:467:19: 467:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &(_1.0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:470:19: 470:29
        _7 = deref_copy (*_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:470:19: 470:29
        _5 = (_1.1: core::ptr::NonNull<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:471:19: 471:28
        _0 = RwLockReadGuard::<'_, T> { lock: _7, data: move _5 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:469:9: 472:10
        drop(_1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:475:5: 475:6
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:475:6: 475:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:478:1: 478:63>::deref(_1: &RwLockReadGuard<'_, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:481:14: 481:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:481:24: 481:26
    let _2: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:482:18: 482:36
    let mut _3: &core::ptr::NonNull<T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:482:18: 482:36
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).1: core::ptr::NonNull<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:482:18: 482:36
        _2 = NonNull::<T>::as_ref::<'_>(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:482:18: 482:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:482:28: 482:34
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a NonNull<T>) -> &T {NonNull::<T>::as_ref::<'_>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:482:18: 482:36
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:483:6: 483:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:486:1: 486:70>::deref(_1: &RwLockUpgradeableGuard<'_, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:489:14: 489:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:489:24: 489:26
    let _2: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:490:18: 490:36
    let mut _3: &core::ptr::NonNull<T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:490:18: 490:36
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).1: core::ptr::NonNull<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:490:18: 490:36
        _2 = NonNull::<T>::as_ref::<'_>(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:490:18: 490:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:490:28: 490:34
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a NonNull<T>) -> &T {NonNull::<T>::as_ref::<'_>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:490:18: 490:36
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:491:6: 491:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:494:1: 494:64>::deref(_1: &RwLockWriteGuard<'_, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:497:14: 497:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:497:24: 497:26
    let _2: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:498:18: 498:36
    let mut _3: &core::ptr::NonNull<T>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:498:18: 498:36
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).1: core::ptr::NonNull<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:498:18: 498:36
        _2 = NonNull::<T>::as_ref::<'_>(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:498:18: 498:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:498:28: 498:34
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a NonNull<T>) -> &T {NonNull::<T>::as_ref::<'_>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:498:18: 498:36
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:499:6: 499:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:502:1: 502:67>::deref_mut(_1: &mut RwLockWriteGuard<'_, T>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:503:18: 503:27
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:503:32: 503:38
    let mut _2: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:504:18: 504:36
    let mut _3: &mut core::ptr::NonNull<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:504:18: 504:36
    scope 1 {
    }

    bb0: {
        _3 = &mut ((*_1).1: core::ptr::NonNull<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:504:18: 504:36
        _2 = NonNull::<T>::as_mut::<'_>(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:504:18: 504:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:504:28: 504:34
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut NonNull<T>) -> &mut T {NonNull::<T>::as_mut::<'_>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:504:18: 504:36
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:505:6: 505:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:508:1: 508:62>::drop(_1: &mut RwLockReadGuard<'_, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:509:13: 509:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:509:24: 509:24
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:218:12: 218:42
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:23: 510:83
    let mut _5: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:23: 510:79
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:23: 510:56
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:38: 510:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:59: 510:79
    let mut _9: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:60: 510:79
    let mut _10: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
    let _11: usize;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:511:9: 511:55
    let mut _12: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:511:37: 511:54
    let mut _13: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:509:13: 509:22
    let mut _14: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:509:13: 509:22

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:218:12: 218:42
        switchInt(move _2) -> [0: bb4, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:218:12: 218:42
    }

    bb1: {
        _13 = deref_copy ((*_1).0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:23: 510:56
        _7 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:38: 510:55
        _6 = AtomicUsize::load(_13, move _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:23: 510:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:33: 510:37
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = BitOr(const _, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:60: 510:79
        _8 = Not(move _9);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:59: 510:79
        _5 = BitAnd(move _6, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:23: 510:79
        _4 = Gt(move _5, const 0_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:510:23: 510:83
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
    }

    bb3: {
        _10 = panic(const "assertion failed: self.lock.load(Ordering::Relaxed) & !(WRITER | UPGRADED) > 0") -> unwind unreachable; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _14 = deref_copy ((*_1).0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:511:9: 511:55
        _12 = Release;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:511:37: 511:54
        _11 = AtomicUsize::fetch_sub(_14, const _, move _12) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:511:9: 511:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:511:19: 511:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_sub}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:512:6: 512:6
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:515:1: 515:69>::drop(_1: &mut RwLockUpgradeableGuard<'_, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:516:13: 516:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:516:24: 516:24
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    let mut _3: (&usize, &usize);        // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:518:13: 518:68
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:518:13: 518:46
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:518:28: 518:45
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:518:49: 518:68
    let _9: &usize;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
    let _10: &usize;                     // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
    let _18: usize;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:521:9: 521:56
    let mut _19: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:521:39: 521:55
    let mut _20: &usize;                 // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _21: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:516:13: 516:22
    let mut _22: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:516:13: 516:22
    scope 1 {
        debug left_val => _9;            // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _10;          // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        let _15: core::panicking::AssertKind; // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _15;           // in scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
        switchInt(move _2) -> [0: bb4, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    }

    bb1: {
        _21 = deref_copy ((*_1).0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:518:13: 518:46
        _7 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:518:28: 518:45
        _6 = AtomicUsize::load(_21, move _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:518:13: 518:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:518:23: 518:27
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = BitOr(const _, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:518:49: 518:68
        _5 = BitAnd(move _6, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:518:13: 518:68
        _4 = &_5;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
        _20 = const _;                   // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<RwLockUpgradeableGuard<'rwlock, T> as Drop>::drop, [ReErased, T], Some(promoted[0])) }
        _3 = (move _4, _20);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_3.0: &usize);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_3.1: &usize);            // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = (*_10);                    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb4, otherwise: bb3]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65
        _17 = Option::<Arguments<'_>>::None; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> unwind unreachable; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _22 = deref_copy ((*_1).0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:521:9: 521:56
        _19 = AcqRel;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:521:39: 521:55
        _18 = AtomicUsize::fetch_sub(_22, const _, move _19) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:521:9: 521:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:521:19: 521:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_sub}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:522:6: 522:6
    }
}

promoted[0] in rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:515:1: 515:69>::drop: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:519:13: 519:21

    bb0: {
        _1 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:519:13: 519:21
        _0 = &_1;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:525:1: 525:63>::drop(_1: &mut RwLockWriteGuard<'_, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:526:13: 526:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:526:24: 526:24
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    let mut _3: (&usize, &usize);        // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:527:26: 527:68
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:527:26: 527:59
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:527:41: 527:58
    let _8: &usize;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &usize;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
    let _17: usize;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:531:9: 531:69
    let mut _18: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:531:29: 531:49
    let mut _19: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:531:30: 531:49
    let mut _20: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:531:51: 531:68
    let mut _21: &usize;                 // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _22: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:526:13: 526:22
    let mut _23: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:526:13: 526:22
    scope 1 {
        debug left_val => _8;            // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
        switchInt(move _2) -> [0: bb4, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    }

    bb1: {
        _22 = deref_copy ((*_1).0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:527:26: 527:59
        _7 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:527:41: 527:58
        _6 = AtomicUsize::load(_22, move _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:527:26: 527:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:527:36: 527:40
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = BitAnd(move _6, const _);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:527:26: 527:68
        _4 = &_5;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<RwLockWriteGuard<'rwlock, T> as Drop>::drop, [ReErased, T], Some(promoted[0])) }
        _3 = (move _4, _21);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_3.0: &usize);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_3.1: &usize);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65
        _16 = Option::<Arguments<'_>>::None; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = assert_failed::<usize, usize>(move _14, _8, _9, move _16) -> unwind unreachable; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = deref_copy ((*_1).0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:531:9: 531:69
        _19 = BitOr(const _, const _);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:531:30: 531:49
        _18 = Not(move _19);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:531:29: 531:49
        _20 = Release;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:531:51: 531:68
        _17 = AtomicUsize::fetch_and(_23, move _18, move _20) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:531:9: 531:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:531:19: 531:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_and}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:532:6: 532:6
    }
}

promoted[0] in rw_lock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:525:1: 525:63>::drop: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:527:70: 527:76

    bb0: {
        _1 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:527:70: 527:76
        _0 = &_1;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn compare_exchange(_1: &AtomicUsize, _2: usize, _3: usize, _4: core::sync::atomic::Ordering, _5: core::sync::atomic::Ordering, _6: bool) -> Result<usize, usize> {
    debug atomic => _1;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:537:5: 537:11
    debug current => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:538:5: 538:12
    debug new => _3;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:539:5: 539:8
    debug success => _4;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:540:5: 540:12
    debug failure => _5;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:541:5: 541:12
    debug strong => _6;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:542:5: 542:11
    let mut _0: core::result::Result<usize, usize>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:543:6: 543:26

    bb0: {
        switchInt(_6) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:544:8: 544:14
    }

    bb1: {
        _0 = AtomicUsize::compare_exchange(_1, _2, _3, _4, _5) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:545:9: 545:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:545:16: 545:32
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, usize, core::sync::atomic::Ordering, core::sync::atomic::Ordering) -> Result<usize, usize> {AtomicUsize::compare_exchange}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = AtomicUsize::compare_exchange_weak(_1, _2, _3, _4, _5) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:547:9: 547:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:547:16: 547:37
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, usize, core::sync::atomic::Ordering, core::sync::atomic::Ordering) -> Result<usize, usize> {AtomicUsize::compare_exchange_weak}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/rw_lock.rs:549:2: 549:2
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:26:1: 26:43>::fmt(_1: &once::Once<T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:27:12: 27:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:27:19: 27:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:27:46: 27:57
    let mut _3: core::option::Option<&T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:28:15: 28:25
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:13: 29:20
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:18: 29:19
    let mut _6: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:24: 30:29
    let mut _7: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _8: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _9: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _10: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:34: 29:50
    let mut _11: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:19]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:28
    let mut _12: &&T;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:28
    let mut _13: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:28
    let mut _14: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:15: 31:19]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:15: 31:35
    let mut _15: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:15: 31:35
    let mut _16: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _17: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _18: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:32:31: 32:59
    let mut _19: &[&str; 1];             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:32:31: 32:59
    scope 1 {
        debug s => _5;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:18: 29:19
        let mut _20: &[&str; 1];         // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:34: 29:50
    }

    bb0: {
        _3 = once::Once::<T>::try(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:28:15: 28:25
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:28:20: 28:23
                                         // + literal: Const { ty: for<'a> fn(&'a once::Once<T>) -> Option<&'a T> {once::Once::<T>::try}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:28:15: 28:25
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:28:9: 28:25
    }

    bb2: {
        _16 = _2;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _19 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:32:31: 32:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:32:31: 32:59
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<once::Once<T> as Debug>::fmt, [T], Some(promoted[0])) }
        _18 = _19 as &[&str] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:32:31: 32:59
        _17 = Arguments::<'_>::new_const(move _18) -> [return: bb8, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:28:15: 28:25
    }

    bb4: {
        _5 = ((_3 as Some).0: &T);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:18: 29:19
        _8 = _2;                         // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _20 = const _;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:34: 29:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:34: 29:50
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<once::Once<T> as Debug>::fmt, [T], Some(promoted[1])) }
        _10 = _20 as &[&str] (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:34: 29:50
        _9 = Arguments::<'_>::new_const(move _10) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = Formatter::<'_>::write_fmt(move _8, move _9) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = &_5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:28
        _13 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:28
        _11 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:19] { s: move _12, f: move _13 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:28
                                         // closure
                                         // + def_id: DefId(0:170 ~ spin[5356]::once::{impl#0}::fmt::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)) -> core::result::Result<(), core::fmt::Error>,
                                         //     (&&T, &mut &mut core::fmt::Formatter<'_>),
                                         // ]
        _6 = Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:19]>(move _7, move _11) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:24: 30:29
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:6: 30:14
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:19]) -> Result<(), core::fmt::Error> {Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:19]>}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:15: 31:35
        _14 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:15: 31:19] { f: move _15 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:15: 31:35
                                         // closure
                                         // + def_id: DefId(0:171 ~ spin[5356]::once::{impl#0}::fmt::{closure#1})
                                         // + substs: [
                                         //     T,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)) -> core::result::Result<(), core::fmt::Error>,
                                         //     (&mut &mut core::fmt::Formatter<'_>,),
                                         // ]
        _0 = Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:15: 31:19]>(move _6, move _14) -> [return: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:24: 31:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:6: 31:14
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:15: 31:19]) -> Result<(), core::fmt::Error> {Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:15: 31:19]>}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Formatter::<'_>::write_fmt(move _16, move _17) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:34:6: 34:6
    }
}

promoted[0] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:26:1: 26:43>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:32:31: 32:59
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:32:31: 32:59

    bb0: {
        _1 = [const "Once { <uninitialized> }"]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:32:31: 32:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:32:31: 32:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:32:31: 32:59
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:32:31: 32:59
    }
}

promoted[1] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:26:1: 26:43>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:34: 29:50
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:34: 29:50

    bb0: {
        _1 = [const "Once { data: "];    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:34: 29:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:34: 29:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:34: 29:50
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:34: 29:50
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:26:1: 26:43>::fmt::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:19], _2: ()) -> Result<(), core::fmt::Error> {
    debug s => (*(_1.0: &&T));           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:29:18: 29:19
    debug f => (*(_1.1: &mut &mut core::fmt::Formatter<'_>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:27:19: 27:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:20: 30:20
    let mut _3: &&T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:28
    let mut _4: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:28
    let mut _5: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:28
    let mut _6: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:15: 30:28

    bb0: {
        _3 = deref_copy (_1.0: &&T);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:20: 30:28
        _4 = deref_copy (*_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:20: 30:28
        _5 = deref_copy (_1.1: &mut &mut core::fmt::Formatter<'_>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:26: 30:27
        _6 = deref_copy (*_5);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:26: 30:27
        _0 = <T as Debug>::fmt(_4, _6) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:20: 30:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:22: 30:25
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:30:28: 30:28
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:26:1: 26:43>::fmt::{closure#1}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:15: 31:19], _2: ()) -> Result<(), core::fmt::Error> {
    debug f => (*(_1.0: &mut &mut core::fmt::Formatter<'_>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:27:19: 27:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:20: 31:20
    let mut _3: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _4: &[&str];                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:30: 31:34
    let mut _5: &[&str; 1];              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:30: 31:34
    let mut _6: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:15: 31:35
    let mut _7: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:15: 31:35

    bb0: {
        _6 = deref_copy (_1.0: &mut &mut core::fmt::Formatter<'_>); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _7 = deref_copy (*_6);           // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _5 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:30: 31:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:30: 31:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<once::Once<T> as Debug>::fmt::{closure#1}, [T, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _4 = _5 as &[&str] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:30: 31:34
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Formatter::<'_>::write_fmt(_7, move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:35: 31:35
    }
}

promoted[0] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:26:1: 26:43>::fmt::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:30: 31:34
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:30: 31:34

    bb0: {
        _1 = [const "}"];                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:30: 31:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:30: 31:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:30: 31:34
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:31:30: 31:34
    }
}

const INCOMPLETE: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:44:19: 44:24

    bb0: {
        _0 = const 0_usize;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:44:27: 44:30
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:44:1: 44:31
    }
}

const RUNNING: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:45:16: 45:21

    bb0: {
        _0 = const 1_usize;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:45:24: 45:27
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:45:1: 45:28
    }
}

const COMPLETE: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:46:17: 46:22

    bb0: {
        _0 = const 2_usize;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:46:25: 46:28
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:46:1: 46:29
    }
}

const PANICKED: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:47:17: 47:22

    bb0: {
        _0 = const 3_usize;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:47:25: 47:28
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:47:1: 47:29
    }
}

const once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:51:1: 51:16>::INIT: once::Once<T> = {
    let mut _0: once::Once<T>;           // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:53:21: 53:25
    let mut _1: core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:54:16: 54:44
    let mut _2: core::cell::UnsafeCell<core::option::Option<T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:55:15: 55:36
    let mut _3: core::option::Option<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:55:31: 55:35

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:54:16: 54:44
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:54:16: 54:44
        _1 = AtomicUsize::new(const _) -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:54:16: 54:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:54:16: 54:32
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:55:15: 55:36
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:55:31: 55:35
        _3 = Option::<T>::None;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:55:31: 55:35
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:55:15: 55:36
        _2 = UnsafeCell::<Option<T>>::new(move _3) -> [return: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:55:15: 55:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:55:15: 55:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Option<T>) -> UnsafeCell<Option<T>> {UnsafeCell::<Option<T>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:55:35: 55:36
        _0 = once::Once::<T> { state: move _1, data: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:53:28: 56:6
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:56:5: 56:6
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:56:5: 56:6
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:53:5: 56:7
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:53:5: 56:7
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:51:1: 51:16>::new() -> once::Once<T> {
    let mut _0: once::Once<T>;           // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:59:27: 59:34

    bb0: {
        _0 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:60:9: 60:19
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:60:9: 60:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: once::Once<T>, val: Unevaluated(once::Once::<T>::INIT, [T], None) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:61:6: 61:6
    }
}

// MIR FOR CTFE
fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:51:1: 51:16>::new() -> once::Once<T> {
    let mut _0: once::Once<T>;           // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:59:27: 59:34

    bb0: {
        _0 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:60:9: 60:19
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:60:9: 60:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: once::Once<T>, val: Unevaluated(once::Once::<T>::INIT, [T], None) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:61:6: 61:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:51:1: 51:16>::force_get(_1: &once::Once<T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:63:22: 63:30
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:63:35: 63:40
    let mut _2: core::option::Option<&T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:64:15: 64:52
    let _3: &core::option::Option<T>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:64:24: 64:41
    let _4: *mut core::option::Option<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:64:26: 64:41
    let mut _5: &core::cell::UnsafeCell<core::option::Option<T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:64:26: 64:41
    let mut _6: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:65:13: 65:17
    let mut _7: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:65:33: 65:46
    scope 1 {
    }
    scope 2 {
    }
    scope 3 {
        debug p => _0;                   // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:66:18: 66:19
    }

    bb0: {
        _5 = &((*_1).1: core::cell::UnsafeCell<core::option::Option<T>>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:64:26: 64:41
        _4 = UnsafeCell::<Option<T>>::get(move _5) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:64:26: 64:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:64:36: 64:39
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<Option<T>>) -> *mut Option<T> {UnsafeCell::<Option<T>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &(*_4);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:64:24: 64:41
        _2 = Option::<T>::as_ref(_3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:64:15: 64:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:64:44: 64:50
                                         // + literal: Const { ty: for<'a> fn(&'a Option<T>) -> Option<&'a T> {Option::<T>::as_ref}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_2);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:64:15: 64:52
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:64:9: 64:52
    }

    bb3: {
        _0 = ((_2 as Some).0: &T);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:66:18: 66:19
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:68:6: 68:6
    }

    bb4: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:64:15: 64:52
    }

    bb5: {
        _7 = unreachable_unchecked() -> unwind unreachable; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:65:33: 65:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:65:33: 65:44
                                         // + literal: Const { ty: unsafe fn() -> ! {unreachable_unchecked}, val: Value(<ZST>) }
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:51:1: 51:16>::call_once(_1: &once::Once<T>, _2: F) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:98:29: 98:37
    debug builder => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:98:39: 98:46
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:98:54: 98:59
    let mut _3: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:101:13: 101:23
    let mut _4: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:101:26: 101:59
    let mut _5: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:101:42: 101:58
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:103:12: 103:32
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:103:12: 103:18
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:104:22: 106:67
    let mut _9: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:104:22: 106:67
    let mut _10: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:106:50: 106:66
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:107:16: 107:36
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:107:16: 107:22
    let _14: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:109:50: 109:61
    let mut _15: core::option::Option<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:45: 110:60
    let mut _16: T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:50: 110:59
    let mut _17: F;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:50: 110:57
    let mut _18: *mut core::option::Option<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:27: 110:42
    let mut _19: &core::cell::UnsafeCell<core::option::Option<T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:27: 110:42
    let _20: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:114:17: 114:59
    let mut _21: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:114:17: 114:59
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:114:34: 114:40
    let mut _23: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:114:42: 114:58
    let _24: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:117:24: 117:40
    let mut _25: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:72:9: 72:77
    let _26: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:125:21: 125:32
    let mut _27: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:126:30: 126:63
    let mut _28: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:126:30: 126:63
    let mut _29: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:126:46: 126:62
    let mut _30: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let _31: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:129:36: 129:52
    let mut _32: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:130:31: 130:44
    let mut _33: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:133:5: 133:6
    scope 1 {
        debug status => _3;              // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:101:13: 101:23
        let mut _13: once::Finish<'_>;   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:109:21: 109:31
        scope 2 {
            debug finish => _13;         // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:109:21: 109:31
            scope 3 {
            }
        }
        scope 4 {
        }
    }

    bb0: {
        _33 = const false;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:121:9: 132:10
        _33 = const true;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:121:9: 132:10
        _4 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:101:26: 101:59
        _5 = SeqCst;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:101:42: 101:58
        _3 = AtomicUsize::load(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:101:26: 101:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:101:37: 101:41
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _3;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:103:12: 103:18
        _6 = Eq(move _7, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:103:12: 103:32
        switchInt(move _6) -> [0: bb10, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:103:12: 103:32
    }

    bb2: {
        _9 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:104:22: 106:67
        _10 = SeqCst;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:106:50: 106:66
        _8 = AtomicUsize::compare_and_swap(move _9, const _, const _, move _10) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:104:22: 106:67
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:104:33: 104:49
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::compare_and_swap}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = move _8;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:104:13: 106:67
        _12 = _3;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:107:16: 107:22
        _11 = Eq(move _12, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:107:16: 107:36
        switchInt(move _11) -> [0: bb10, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:107:16: 107:36
    }

    bb4: {
        _14 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:109:50: 109:61
        _13 = Finish::<'_> { state: _14, panicked: const true }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:109:34: 109:79
        _33 = const false;               // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:50: 110:57
        _17 = move _2;                   // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:50: 110:57
        _16 = <F as FnOnce<()>>::call_once(move _17, const ()) -> [return: bb5, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:50: 110:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:50: 110:57
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = Option::<T>::Some(move _16); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:45: 110:60
        _19 = &((*_1).1: core::cell::UnsafeCell<core::option::Option<T>>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:27: 110:42
        _18 = UnsafeCell::<Option<T>>::get(move _19) -> [return: bb6, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:27: 110:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:37: 110:40
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<Option<T>>) -> *mut Option<T> {UnsafeCell::<Option<T>>::get}, val: Value(<ZST>) }
    }

    bb6: {
        drop((*_18)) -> [return: bb7, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:26: 110:42
    }

    bb7: {
        (*_18) = move _15;               // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:110:26: 110:42
        (_13.1: bool) = const false;     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:111:17: 111:40
        _3 = const _;                    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:113:17: 113:34
        _21 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:114:17: 114:59
        _22 = _3;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:114:34: 114:40
        _23 = SeqCst;                    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:114:42: 114:58
        _20 = AtomicUsize::store(move _21, move _22, move _23) -> [return: bb8, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:114:17: 114:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:114:28: 114:33
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb8: {
        _24 = once::Once::<T>::force_get(_1) -> [return: bb9, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:117:24: 117:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:117:29: 117:38
                                         // + literal: Const { ty: for<'a> fn(&'a once::Once<T>) -> &'a T {once::Once::<T>::force_get}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = _24;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:117:24: 117:40
        drop(_13) -> [return: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:118:13: 118:14
    }

    bb10: {
        switchInt(_3) -> [0: bb12, 1: bb13, 3: bb16, 2: bb17, otherwise: bb11]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:122:13: 122:25
    }

    bb11: {
        _32 = unreachable_unchecked() -> unwind unreachable; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:130:31: 130:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:130:31: 130:42
                                         // + literal: Const { ty: unsafe fn() -> ! {unreachable_unchecked}, val: Value(<ZST>) }
    }

    bb12: {
        _25 = panic(const "internal error: entered unreachable code") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:72:9: 72:77
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:72:9: 72:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:72:34: 72:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _26 = spin_loop_hint() -> [return: bb14, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:125:21: 125:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:125:21: 125:30
                                         // + literal: Const { ty: fn() {spin_loop_hint}, val: Value(<ZST>) }
    }

    bb14: {
        _28 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:126:30: 126:63
        _29 = SeqCst;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:126:46: 126:62
        _27 = AtomicUsize::load(move _28, move _29) -> [return: bb15, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:126:30: 126:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:126:41: 126:45
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb15: {
        _3 = move _27;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:126:21: 126:63
        goto -> bb10;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:126:62: 126:63
    }

    bb16: {
        _30 = panic(const "Once has panicked") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:128:36: 128:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _31 = once::Once::<T>::force_get(_1) -> [return: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:129:36: 129:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:129:41: 129:50
                                         // + literal: Const { ty: for<'a> fn(&'a once::Once<T>) -> &'a T {once::Once::<T>::force_get}, val: Value(<ZST>) }
    }

    bb18: {
        _0 = _31;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:129:36: 129:52
        goto -> bb19;                    // scope 1 at no-location
    }

    bb19: {
        switchInt(_33) -> [0: bb20, otherwise: bb21]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:133:5: 133:6
    }

    bb20: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:133:6: 133:6
    }

    bb21: {
        drop(_2) -> [return: bb20, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:133:5: 133:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:51:1: 51:16>::try(_1: &once::Once<T>) -> Option<&T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:136:20: 136:28
    let mut _0: core::option::Option<&T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:136:33: 136:46
    let mut _2: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:137:15: 137:48
    let mut _3: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:137:15: 137:48
    let mut _4: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:137:31: 137:47
    let mut _5: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:138:30: 138:46
    let _6: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:138:30: 138:46

    bb0: {
        _3 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:137:15: 137:48
        _4 = SeqCst;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:137:31: 137:47
        _2 = AtomicUsize::load(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:137:15: 137:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:137:26: 137:30
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(_2) -> [2: bb3, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:137:9: 137:48
    }

    bb2: {
        _0 = Option::<&T>::None;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:139:25: 139:29
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:139:25: 139:29
    }

    bb3: {
        _6 = once::Once::<T>::force_get(_1) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:138:30: 138:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:138:35: 138:44
                                         // + literal: Const { ty: for<'a> fn(&'a once::Once<T>) -> &'a T {once::Once::<T>::force_get}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = _6;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:138:30: 138:46
        _0 = Option::<&T>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:138:25: 138:47
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:138:46: 138:47
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:141:6: 141:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:51:1: 51:16>::wait(_1: &once::Once<T>) -> Option<&T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:145:21: 145:29
    let mut _0: core::option::Option<&T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:145:34: 145:47
    let mut _2: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:145:5: 155:6
    let mut _3: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:147:19: 147:52
    let mut _4: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:147:19: 147:52
    let mut _5: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:147:35: 147:51
    let mut _6: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:150:43: 150:59
    let _7: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:150:43: 150:59
    let mut _8: !;                       // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _9: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:152:31: 152:44
    scope 1 {
    }

    bb0: {
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:146:9: 154:10
    }

    bb1: {
        _4 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:147:19: 147:52
        _5 = SeqCst;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:147:35: 147:51
        _3 = AtomicUsize::load(move _4, move _5) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:147:19: 147:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:147:30: 147:34
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(_3) -> [0: bb4, 1: bb5, 2: bb6, 3: bb8, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:147:13: 147:52
    }

    bb3: {
        _9 = unreachable_unchecked() -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:152:31: 152:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:152:31: 152:42
                                         // + literal: Const { ty: unsafe fn() -> ! {unreachable_unchecked}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = Option::<&T>::None;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:148:38: 148:42
        goto -> bb9;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:148:31: 148:42
    }

    bb5: {
        _2 = spin_loop_hint() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:149:31: 149:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:149:31: 149:40
                                         // + literal: Const { ty: fn() {spin_loop_hint}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = once::Once::<T>::force_get(_1) -> [return: bb7, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:150:43: 150:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:150:48: 150:57
                                         // + literal: Const { ty: for<'a> fn(&'a once::Once<T>) -> &'a T {once::Once::<T>::force_get}, val: Value(<ZST>) }
    }

    bb7: {
        _6 = _7;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:150:43: 150:59
        _0 = Option::<&T>::Some(move _6); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:150:38: 150:60
        goto -> bb9;                     // scope 0 at no-location
    }

    bb8: {
        _8 = panic(const "Once has panicked") -> unwind unreachable; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:151:38: 151:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:155:6: 155:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:163:1: 163:29>::drop(_1: &mut Finish<'_>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:164:13: 164:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:164:24: 164:24
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:165:12: 165:25
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:166:13: 166:57
    let mut _4: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:166:40: 166:56
    let mut _5: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:164:13: 164:22

    bb0: {
        _2 = ((*_1).1: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:165:12: 165:25
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:165:12: 165:25
    }

    bb1: {
        _5 = deref_copy ((*_1).0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:166:13: 166:57
        _4 = SeqCst;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:166:40: 166:56
        _3 = AtomicUsize::store(_5, const _, move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:166:13: 166:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:166:24: 166:29
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.5.2/src/once.rs:168:6: 168:6
    }
}
