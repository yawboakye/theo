// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mmio::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:18:1: 18:20>::new(_1: usize) -> MmioSerialPort {
    debug base => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:24:23: 24:27
    let mut _0: mmio::MmioSerialPort;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:24:39: 24:43
    let _2: *mut u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:25:13: 25:25
    let mut _3: core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:27:19: 27:47
    let mut _4: core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:21: 28:56
    let mut _5: *mut u8;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:36: 28:55
    let mut _6: core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:24: 29:59
    let mut _7: *mut u8;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:39: 29:58
    let mut _8: core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:24: 30:59
    let mut _9: *mut u8;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:39: 30:58
    let mut _10: core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:25: 31:60
    let mut _11: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:40: 31:59
    let mut _12: core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:23: 32:58
    let mut _13: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:38: 32:57
    scope 1 {
        debug base_pointer => _2;        // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:25:13: 25:25
    }

    bb0: {
        _2 = _1 as *mut u8 (PointerFromExposedAddress); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:25:28: 25:43
        _3 = AtomicPtr::<u8>::new(_2) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:27:19: 27:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:27:19: 27:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(*mut u8) -> AtomicPtr<u8> {AtomicPtr::<u8>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = ptr::mut_ptr::<impl *mut u8>::add(_2, const 1_usize) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:36: 28:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:49: 28:52
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = AtomicPtr::<u8>::new(move _5) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:21: 28:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:21: 28:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(*mut u8) -> AtomicPtr<u8> {AtomicPtr::<u8>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = ptr::mut_ptr::<impl *mut u8>::add(_2, const 2_usize) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:39: 29:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:52: 29:55
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = AtomicPtr::<u8>::new(move _7) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:24: 29:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:24: 29:38
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(*mut u8) -> AtomicPtr<u8> {AtomicPtr::<u8>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = ptr::mut_ptr::<impl *mut u8>::add(_2, const 3_usize) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:39: 30:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:52: 30:55
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = AtomicPtr::<u8>::new(move _9) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:24: 30:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:24: 30:38
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(*mut u8) -> AtomicPtr<u8> {AtomicPtr::<u8>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = ptr::mut_ptr::<impl *mut u8>::add(_2, const 4_usize) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:40: 31:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:53: 31:56
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb8: {
        _10 = AtomicPtr::<u8>::new(move _11) -> [return: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:25: 31:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:25: 31:39
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(*mut u8) -> AtomicPtr<u8> {AtomicPtr::<u8>::new}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = ptr::mut_ptr::<impl *mut u8>::add(_2, const 5_usize) -> [return: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:38: 32:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:51: 32:54
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb10: {
        _12 = AtomicPtr::<u8>::new(move _13) -> [return: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:23: 32:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:23: 32:37
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(*mut u8) -> AtomicPtr<u8> {AtomicPtr::<u8>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = MmioSerialPort { data: move _3, int_en: move _4, fifo_ctrl: move _6, line_ctrl: move _8, modem_ctrl: move _10, line_sts: move _12 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:26:9: 33:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:34:6: 34:6
    }
}

// MIR FOR CTFE
fn mmio::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:18:1: 18:20>::new(_1: usize) -> MmioSerialPort {
    debug base => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:24:23: 24:27
    let mut _0: mmio::MmioSerialPort;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:24:39: 24:43
    let _2: *mut u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:25:13: 25:25
    let mut _3: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:25:28: 25:32
    let mut _4: core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:27:19: 27:47
    let mut _5: *mut u8;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:27:34: 27:46
    let mut _6: core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:21: 28:56
    let mut _7: *mut u8;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:36: 28:55
    let mut _8: *mut u8;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:36: 28:48
    let mut _9: core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:24: 29:59
    let mut _10: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:39: 29:58
    let mut _11: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:39: 29:51
    let mut _12: core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:24: 30:59
    let mut _13: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:39: 30:58
    let mut _14: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:39: 30:51
    let mut _15: core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:25: 31:60
    let mut _16: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:40: 31:59
    let mut _17: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:40: 31:52
    let mut _18: core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:23: 32:58
    let mut _19: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:38: 32:57
    let mut _20: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:38: 32:50
    scope 1 {
        debug base_pointer => _2;        // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:25:13: 25:25
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:25:13: 25:25
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:25:28: 25:32
        _3 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:25:28: 25:32
        _2 = move _3 as *mut u8 (PointerFromExposedAddress); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:25:28: 25:43
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:25:42: 25:43
        StorageLive(_4);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:27:19: 27:47
        StorageLive(_5);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:27:34: 27:46
        _5 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:27:34: 27:46
        ConstEvalCounter;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:27:19: 27:47
        _4 = AtomicPtr::<u8>::new(move _5) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:27:19: 27:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:27:19: 27:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(*mut u8) -> AtomicPtr<u8> {AtomicPtr::<u8>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_5);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:27:46: 27:47
        StorageLive(_6);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:21: 28:56
        StorageLive(_7);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:36: 28:55
        StorageLive(_8);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:36: 28:48
        _8 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:36: 28:48
        ConstEvalCounter;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:36: 28:55
        _7 = ptr::mut_ptr::<impl *mut u8>::add(move _8, const 1_usize) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:36: 28:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:49: 28:52
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_8);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:54: 28:55
        ConstEvalCounter;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:21: 28:56
        _6 = AtomicPtr::<u8>::new(move _7) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:21: 28:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:21: 28:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(*mut u8) -> AtomicPtr<u8> {AtomicPtr::<u8>::new}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_7);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:28:55: 28:56
        StorageLive(_9);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:24: 29:59
        StorageLive(_10);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:39: 29:58
        StorageLive(_11);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:39: 29:51
        _11 = _2;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:39: 29:51
        ConstEvalCounter;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:39: 29:58
        _10 = ptr::mut_ptr::<impl *mut u8>::add(move _11, const 2_usize) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:39: 29:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:52: 29:55
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb4: {
        StorageDead(_11);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:57: 29:58
        ConstEvalCounter;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:24: 29:59
        _9 = AtomicPtr::<u8>::new(move _10) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:24: 29:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:24: 29:38
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(*mut u8) -> AtomicPtr<u8> {AtomicPtr::<u8>::new}, val: Value(<ZST>) }
    }

    bb5: {
        StorageDead(_10);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:29:58: 29:59
        StorageLive(_12);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:24: 30:59
        StorageLive(_13);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:39: 30:58
        StorageLive(_14);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:39: 30:51
        _14 = _2;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:39: 30:51
        ConstEvalCounter;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:39: 30:58
        _13 = ptr::mut_ptr::<impl *mut u8>::add(move _14, const 3_usize) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:39: 30:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:52: 30:55
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb6: {
        StorageDead(_14);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:57: 30:58
        ConstEvalCounter;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:24: 30:59
        _12 = AtomicPtr::<u8>::new(move _13) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:24: 30:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:24: 30:38
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(*mut u8) -> AtomicPtr<u8> {AtomicPtr::<u8>::new}, val: Value(<ZST>) }
    }

    bb7: {
        StorageDead(_13);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:30:58: 30:59
        StorageLive(_15);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:25: 31:60
        StorageLive(_16);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:40: 31:59
        StorageLive(_17);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:40: 31:52
        _17 = _2;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:40: 31:52
        ConstEvalCounter;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:40: 31:59
        _16 = ptr::mut_ptr::<impl *mut u8>::add(move _17, const 4_usize) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:40: 31:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:53: 31:56
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb8: {
        StorageDead(_17);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:58: 31:59
        ConstEvalCounter;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:25: 31:60
        _15 = AtomicPtr::<u8>::new(move _16) -> [return: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:25: 31:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:25: 31:39
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(*mut u8) -> AtomicPtr<u8> {AtomicPtr::<u8>::new}, val: Value(<ZST>) }
    }

    bb9: {
        StorageDead(_16);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:31:59: 31:60
        StorageLive(_18);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:23: 32:58
        StorageLive(_19);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:38: 32:57
        StorageLive(_20);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:38: 32:50
        _20 = _2;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:38: 32:50
        ConstEvalCounter;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:38: 32:57
        _19 = ptr::mut_ptr::<impl *mut u8>::add(move _20, const 5_usize) -> [return: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:38: 32:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:51: 32:54
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb10: {
        StorageDead(_20);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:56: 32:57
        ConstEvalCounter;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:23: 32:58
        _18 = AtomicPtr::<u8>::new(move _19) -> [return: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:23: 32:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:23: 32:37
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(*mut u8) -> AtomicPtr<u8> {AtomicPtr::<u8>::new}, val: Value(<ZST>) }
    }

    bb11: {
        StorageDead(_19);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:32:57: 32:58
        _0 = MmioSerialPort { data: move _4, int_en: move _6, fifo_ctrl: move _9, line_ctrl: move _12, modem_ctrl: move _15, line_sts: move _18 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:26:9: 33:10
        StorageDead(_18);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:33:9: 33:10
        StorageDead(_15);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:33:9: 33:10
        StorageDead(_12);                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:33:9: 33:10
        StorageDead(_9);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:33:9: 33:10
        StorageDead(_6);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:33:9: 33:10
        StorageDead(_4);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:33:9: 33:10
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:34:5: 34:6
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:34:6: 34:6
    }
}

fn mmio::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:18:1: 18:20>::init(_1: &mut MmioSerialPort) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:39:17: 39:26
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:39:28: 39:28
    let _2: *mut u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:40:13: 40:24
    let mut _3: &core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:40:27: 40:62
    let mut _4: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:40:44: 40:61
    let mut _6: &core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:41:30: 41:68
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:41:50: 41:67
    let mut _9: &core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:42:25: 42:58
    let mut _10: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:42:40: 42:57
    let mut _12: &core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:43:30: 43:68
    let mut _13: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:43:50: 43:67
    let mut _15: &core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:44:31: 44:70
    let mut _16: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:44:52: 44:69
    let _17: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:47:13: 47:36
    let mut _18: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:47:13: 47:24
    let _19: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:50:13: 50:39
    let mut _20: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:50:13: 50:27
    let _21: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:53:13: 53:34
    let mut _22: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:53:13: 53:22
    let _23: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:54:13: 54:36
    let mut _24: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:54:13: 54:24
    let _25: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:57:13: 57:39
    let mut _26: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:57:13: 57:27
    let _27: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:61:13: 61:39
    let mut _28: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:61:13: 61:27
    let _29: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:65:13: 65:40
    let mut _30: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:65:13: 65:28
    let _31: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:68:13: 68:36
    let mut _32: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:68:13: 68:24
    scope 1 {
        debug self_int_en => _2;         // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:40:13: 40:24
        let _5: *mut u8;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:41:13: 41:27
        scope 2 {
            debug self_line_ctrl => _5;  // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:41:13: 41:27
            let _8: *mut u8;             // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:42:13: 42:22
            scope 3 {
                debug self_data => _8;   // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:42:13: 42:22
                let _11: *mut u8;        // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:43:13: 43:27
                scope 4 {
                    debug self_fifo_ctrl => _11; // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:43:13: 43:27
                    let _14: *mut u8;    // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:44:13: 44:28
                    scope 5 {
                        debug self_modem_ctrl => _14; // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:44:13: 44:28
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = &((*_1).1: core::sync::atomic::AtomicPtr<u8>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:40:27: 40:62
        _4 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:40:44: 40:61
        _2 = AtomicPtr::<u8>::load(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:40:27: 40:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:40:39: 40:43
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicPtr<u8>, core::sync::atomic::Ordering) -> *mut u8 {AtomicPtr::<u8>::load}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &((*_1).3: core::sync::atomic::AtomicPtr<u8>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:41:30: 41:68
        _7 = Relaxed;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:41:50: 41:67
        _5 = AtomicPtr::<u8>::load(move _6, move _7) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:41:30: 41:68
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:41:45: 41:49
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicPtr<u8>, core::sync::atomic::Ordering) -> *mut u8 {AtomicPtr::<u8>::load}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &((*_1).0: core::sync::atomic::AtomicPtr<u8>); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:42:25: 42:58
        _10 = Relaxed;                   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:42:40: 42:57
        _8 = AtomicPtr::<u8>::load(move _9, move _10) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:42:25: 42:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:42:35: 42:39
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicPtr<u8>, core::sync::atomic::Ordering) -> *mut u8 {AtomicPtr::<u8>::load}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = &((*_1).2: core::sync::atomic::AtomicPtr<u8>); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:43:30: 43:68
        _13 = Relaxed;                   // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:43:50: 43:67
        _11 = AtomicPtr::<u8>::load(move _12, move _13) -> [return: bb4, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:43:30: 43:68
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:43:45: 43:49
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicPtr<u8>, core::sync::atomic::Ordering) -> *mut u8 {AtomicPtr::<u8>::load}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = &((*_1).4: core::sync::atomic::AtomicPtr<u8>); // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:44:31: 44:70
        _16 = Relaxed;                   // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:44:52: 44:69
        _14 = AtomicPtr::<u8>::load(move _15, move _16) -> [return: bb5, unwind unreachable]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:44:31: 44:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:44:47: 44:51
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicPtr<u8>, core::sync::atomic::Ordering) -> *mut u8 {AtomicPtr::<u8>::load}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = _2;                        // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:47:13: 47:24
        _17 = ptr::mut_ptr::<impl *mut u8>::write(move _18, const 0_u8) -> [return: bb6, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:47:13: 47:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:47:25: 47:30
                                         // + literal: Const { ty: unsafe fn(*mut u8, u8) {ptr::mut_ptr::<impl *mut u8>::write}, val: Value(<ZST>) }
    }

    bb6: {
        _20 = _5;                        // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:50:13: 50:27
        _19 = ptr::mut_ptr::<impl *mut u8>::write(move _20, const 128_u8) -> [return: bb7, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:50:13: 50:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:50:28: 50:33
                                         // + literal: Const { ty: unsafe fn(*mut u8, u8) {ptr::mut_ptr::<impl *mut u8>::write}, val: Value(<ZST>) }
    }

    bb7: {
        _22 = _8;                        // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:53:13: 53:22
        _21 = ptr::mut_ptr::<impl *mut u8>::write(move _22, const 3_u8) -> [return: bb8, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:53:13: 53:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:53:23: 53:28
                                         // + literal: Const { ty: unsafe fn(*mut u8, u8) {ptr::mut_ptr::<impl *mut u8>::write}, val: Value(<ZST>) }
    }

    bb8: {
        _24 = _2;                        // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:54:13: 54:24
        _23 = ptr::mut_ptr::<impl *mut u8>::write(move _24, const 0_u8) -> [return: bb9, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:54:13: 54:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:54:25: 54:30
                                         // + literal: Const { ty: unsafe fn(*mut u8, u8) {ptr::mut_ptr::<impl *mut u8>::write}, val: Value(<ZST>) }
    }

    bb9: {
        _26 = _5;                        // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:57:13: 57:27
        _25 = ptr::mut_ptr::<impl *mut u8>::write(move _26, const 3_u8) -> [return: bb10, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:57:13: 57:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:57:28: 57:33
                                         // + literal: Const { ty: unsafe fn(*mut u8, u8) {ptr::mut_ptr::<impl *mut u8>::write}, val: Value(<ZST>) }
    }

    bb10: {
        _28 = _11;                       // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:61:13: 61:27
        _27 = ptr::mut_ptr::<impl *mut u8>::write(move _28, const 199_u8) -> [return: bb11, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:61:13: 61:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:61:28: 61:33
                                         // + literal: Const { ty: unsafe fn(*mut u8, u8) {ptr::mut_ptr::<impl *mut u8>::write}, val: Value(<ZST>) }
    }

    bb11: {
        _30 = _14;                       // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:65:13: 65:28
        _29 = ptr::mut_ptr::<impl *mut u8>::write(move _30, const 11_u8) -> [return: bb12, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:65:13: 65:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:65:29: 65:34
                                         // + literal: Const { ty: unsafe fn(*mut u8, u8) {ptr::mut_ptr::<impl *mut u8>::write}, val: Value(<ZST>) }
    }

    bb12: {
        _32 = _2;                        // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:68:13: 68:24
        _31 = ptr::mut_ptr::<impl *mut u8>::write(move _32, const 1_u8) -> [return: bb13, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:68:13: 68:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:68:25: 68:30
                                         // + literal: Const { ty: unsafe fn(*mut u8, u8) {ptr::mut_ptr::<impl *mut u8>::write}, val: Value(<ZST>) }
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:70:6: 70:6
    }
}

fn mmio::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:18:1: 18:20>::line_sts(_1: &mut MmioSerialPort) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:72:17: 72:26
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:72:31: 72:43
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:73:51: 73:89
    let mut _3: *mut u8;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:73:52: 73:89
    let mut _4: &core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:73:52: 73:89
    let mut _5: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:73:71: 73:88
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).5: core::sync::atomic::AtomicPtr<u8>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:73:52: 73:89
        _5 = Relaxed;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:73:71: 73:88
        _3 = AtomicPtr::<u8>::load(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:73:52: 73:89
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:73:66: 73:70
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicPtr<u8>, core::sync::atomic::Ordering) -> *mut u8 {AtomicPtr::<u8>::load}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = (*_3);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:73:51: 73:89
        _0 = LineStsFlags::from_bits_truncate(move _2) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:73:18: 73:90
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:73:18: 73:50
                                         // + literal: Const { ty: fn(u8) -> LineStsFlags {LineStsFlags::from_bits_truncate}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:74:6: 74:6
    }
}

fn mmio::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:18:1: 18:20>::send(_1: &mut MmioSerialPort, _2: u8) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:77:17: 77:26
    debug data => _2;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:77:28: 77:32
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:77:38: 77:38
    let _3: *mut u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:78:13: 78:22
    let mut _4: &core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:78:25: 78:58
    let mut _5: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:78:40: 78:57
    let mut _6: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:77:5: 95:6
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:82:31: 82:83
    let mut _9: &LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:82:31: 82:83
    let _10: LineStsFlags;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:82:31: 82:46
    let _11: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:83:21: 83:39
    let mut _12: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:83:21: 83:30
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:84:31: 84:83
    let mut _15: &LineStsFlags;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:84:31: 84:83
    let _16: LineStsFlags;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:84:31: 84:46
    let _17: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:85:21: 85:42
    let mut _18: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:85:21: 85:30
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:86:31: 86:83
    let mut _21: &LineStsFlags;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:86:31: 86:83
    let _22: LineStsFlags;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:86:31: 86:46
    let mut _23: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:87:21: 87:30
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    let mut _25: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:90:31: 90:83
    let mut _26: &LineStsFlags;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:90:31: 90:83
    let _27: LineStsFlags;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:90:31: 90:46
    let _28: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:91:21: 91:42
    let mut _29: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:91:21: 91:30
    scope 1 {
        debug self_data => _3;           // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:78:13: 78:22
        scope 2 {
        }
    }

    bb0: {
        _4 = &((*_1).0: core::sync::atomic::AtomicPtr<u8>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:78:25: 78:58
        _5 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:78:40: 78:57
        _3 = AtomicPtr::<u8>::load(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:78:25: 78:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:78:35: 78:39
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicPtr<u8>, core::sync::atomic::Ordering) -> *mut u8 {AtomicPtr::<u8>::load}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(_2) -> [8: bb2, 127: bb2, otherwise: bb17]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:80:13: 80:23
    }

    bb2: {
        _10 = MmioSerialPort::line_sts(_1) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:82:31: 82:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:82:36: 82:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut MmioSerialPort) -> LineStsFlags {MmioSerialPort::line_sts}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &_10;                       // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:82:31: 82:83
        _8 = LineStsFlags::contains(move _9, const _) -> [return: bb4, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:82:31: 82:83
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:82:47: 82:55
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags, LineStsFlags) -> bool {LineStsFlags::contains}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:82:56: 82:82
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::OUTPUT_EMPTY, [], None) }
    }

    bb4: {
        _7 = Not(move _8);               // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
        switchInt(move _7) -> [0: bb6, otherwise: bb5]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    }

    bb5: {
        _6 = spin_loop() -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:34
                                         // + literal: Const { ty: fn() {spin_loop}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = _3;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:83:21: 83:30
        _11 = ptr::mut_ptr::<impl *mut u8>::write(move _12, const 8_u8) -> [return: bb7, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:83:21: 83:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:83:31: 83:36
                                         // + literal: Const { ty: unsafe fn(*mut u8, u8) {ptr::mut_ptr::<impl *mut u8>::write}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = MmioSerialPort::line_sts(_1) -> [return: bb8, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:84:31: 84:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:84:36: 84:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut MmioSerialPort) -> LineStsFlags {MmioSerialPort::line_sts}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = &_16;                      // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:84:31: 84:83
        _14 = LineStsFlags::contains(move _15, const _) -> [return: bb9, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:84:31: 84:83
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:84:47: 84:55
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags, LineStsFlags) -> bool {LineStsFlags::contains}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:84:56: 84:82
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::OUTPUT_EMPTY, [], None) }
    }

    bb9: {
        _13 = Not(move _14);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
        switchInt(move _13) -> [0: bb11, otherwise: bb10]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    }

    bb10: {
        _6 = spin_loop() -> [return: bb7, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:34
                                         // + literal: Const { ty: fn() {spin_loop}, val: Value(<ZST>) }
    }

    bb11: {
        _18 = _3;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:85:21: 85:30
        _17 = ptr::mut_ptr::<impl *mut u8>::write(move _18, const 32_u8) -> [return: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:85:21: 85:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:85:31: 85:36
                                         // + literal: Const { ty: unsafe fn(*mut u8, u8) {ptr::mut_ptr::<impl *mut u8>::write}, val: Value(<ZST>) }
    }

    bb12: {
        _22 = MmioSerialPort::line_sts(_1) -> [return: bb13, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:86:31: 86:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:86:36: 86:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut MmioSerialPort) -> LineStsFlags {MmioSerialPort::line_sts}, val: Value(<ZST>) }
    }

    bb13: {
        _21 = &_22;                      // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:86:31: 86:83
        _20 = LineStsFlags::contains(move _21, const _) -> [return: bb14, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:86:31: 86:83
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:86:47: 86:55
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags, LineStsFlags) -> bool {LineStsFlags::contains}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:86:56: 86:82
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::OUTPUT_EMPTY, [], None) }
    }

    bb14: {
        _19 = Not(move _20);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
        switchInt(move _19) -> [0: bb16, otherwise: bb15]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    }

    bb15: {
        _6 = spin_loop() -> [return: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:34
                                         // + literal: Const { ty: fn() {spin_loop}, val: Value(<ZST>) }
    }

    bb16: {
        _23 = _3;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:87:21: 87:30
        _0 = ptr::mut_ptr::<impl *mut u8>::write(move _23, const 8_u8) -> [return: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:87:21: 87:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:87:31: 87:36
                                         // + literal: Const { ty: unsafe fn(*mut u8, u8) {ptr::mut_ptr::<impl *mut u8>::write}, val: Value(<ZST>) }
    }

    bb17: {
        _27 = MmioSerialPort::line_sts(_1) -> [return: bb18, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:90:31: 90:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:90:36: 90:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut MmioSerialPort) -> LineStsFlags {MmioSerialPort::line_sts}, val: Value(<ZST>) }
    }

    bb18: {
        _26 = &_27;                      // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:90:31: 90:83
        _25 = LineStsFlags::contains(move _26, const _) -> [return: bb19, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:90:31: 90:83
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:90:47: 90:55
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags, LineStsFlags) -> bool {LineStsFlags::contains}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:90:56: 90:82
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::OUTPUT_EMPTY, [], None) }
    }

    bb19: {
        _24 = Not(move _25);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
        switchInt(move _24) -> [0: bb21, otherwise: bb20]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    }

    bb20: {
        _6 = spin_loop() -> [return: bb17, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:34
                                         // + literal: Const { ty: fn() {spin_loop}, val: Value(<ZST>) }
    }

    bb21: {
        _29 = _3;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:91:21: 91:30
        _28 = ptr::mut_ptr::<impl *mut u8>::write(move _29, _2) -> [return: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:91:21: 91:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:91:31: 91:36
                                         // + literal: Const { ty: unsafe fn(*mut u8, u8) {ptr::mut_ptr::<impl *mut u8>::write}, val: Value(<ZST>) }
    }

    bb22: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:95:6: 95:6
    }
}

fn mmio::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:18:1: 18:20>::receive(_1: &mut MmioSerialPort) -> u8 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:98:20: 98:29
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:98:34: 98:36
    let _2: *mut u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:99:13: 99:22
    let mut _3: &core::sync::atomic::AtomicPtr<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:99:25: 99:58
    let mut _4: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:99:40: 99:57
    let mut _5: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:98:5: 104:6
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:101:23: 101:73
    let mut _8: &LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:101:23: 101:73
    let _9: LineStsFlags;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:101:23: 101:38
    let mut _10: *mut u8;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:102:13: 102:22
    scope 1 {
        debug self_data => _2;           // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:99:13: 99:22
        scope 2 {
        }
    }

    bb0: {
        _3 = &((*_1).0: core::sync::atomic::AtomicPtr<u8>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:99:25: 99:58
        _4 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:99:40: 99:57
        _2 = AtomicPtr::<u8>::load(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:99:25: 99:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:99:35: 99:39
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicPtr<u8>, core::sync::atomic::Ordering) -> *mut u8 {AtomicPtr::<u8>::load}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = MmioSerialPort::line_sts(_1) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:101:23: 101:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:101:28: 101:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut MmioSerialPort) -> LineStsFlags {MmioSerialPort::line_sts}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_9;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:101:23: 101:73
        _7 = LineStsFlags::contains(move _8, const _) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:101:23: 101:73
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:101:39: 101:47
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags, LineStsFlags) -> bool {LineStsFlags::contains}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:101:48: 101:72
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::INPUT_FULL, [], None) }
    }

    bb3: {
        _6 = Not(move _7);               // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
        switchInt(move _6) -> [0: bb5, otherwise: bb4]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    }

    bb4: {
        _5 = spin_loop() -> [return: bb1, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:34
                                         // + literal: Const { ty: fn() {spin_loop}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = _2;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:102:13: 102:22
        _0 = ptr::mut_ptr::<impl *mut u8>::read(move _10) -> [return: bb6, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:102:13: 102:29
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:102:23: 102:27
                                         // + literal: Const { ty: unsafe fn(*mut u8) -> u8 {ptr::mut_ptr::<impl *mut u8>::read}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:104:6: 104:6
    }
}

fn mmio::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:107:1: 107:35>::write_str(_1: &mut MmioSerialPort, _2: &str) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:108:18: 108:27
    debug s => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:108:29: 108:30
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:108:41: 108:52
    let mut _3: core::str::Bytes<'_>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
    let mut _4: core::str::Bytes<'_>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
    let mut _5: core::str::Bytes<'_>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
    let mut _6: core::option::Option<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
    let mut _7: &mut core::str::Bytes<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
    let mut _8: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:9: 111:10
    let _10: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:110:13: 110:28
    scope 1 {
        debug iter => _5;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
        let _9: u8;                      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:13: 109:17
        scope 2 {
            debug byte => _9;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:13: 109:17
        }
    }

    bb0: {
        _4 = str::<impl str>::bytes(_2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:23: 109:28
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Bytes<'a> {str::<impl str>::bytes}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Bytes<'_> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
                                         // + literal: Const { ty: fn(Bytes<'_>) -> <Bytes<'_> as IntoIterator>::IntoIter {<Bytes<'_> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _3;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
        goto -> bb3;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:9: 111:10
    }

    bb3: {
        _7 = &mut _5;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
        _6 = <Bytes<'_> as Iterator>::next(_7) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut Bytes<'_>) -> Option<<Bytes<'_> as Iterator>::Item> {<Bytes<'_> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = discriminant(_6);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
    }

    bb5: {
        _9 = ((_6 as Some).0: u8);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:13: 109:17
        _10 = MmioSerialPort::send(_1, _9) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:110:13: 110:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:110:18: 110:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut MmioSerialPort, u8) {MmioSerialPort::send}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:109:21: 109:30
    }

    bb7: {
        _0 = Result::<(), core::fmt::Error>::Ok(const ()); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:112:9: 112:15
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/mmio.rs:113:6: 113:6
    }
}

fn port::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:18:1: 18:16>::new(_1: u16) -> SerialPort {
    debug base => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:23:29: 23:33
    let mut _0: port::SerialPort;        // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:23:43: 23:47
    let mut _2: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:25:19: 25:34
    let mut _3: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:21: 26:49
    let mut _4: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:48
    let mut _5: (u16, bool);             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:48
    let mut _6: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:24: 27:52
    let mut _7: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:51
    let mut _8: (u16, bool);             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:51
    let mut _9: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:24: 28:52
    let mut _10: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:51
    let mut _11: (u16, bool);            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:51
    let mut _12: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:25: 29:53
    let mut _13: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:52
    let mut _14: (u16, bool);            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:52
    let mut _15: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:23: 30:50
    let mut _16: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:49
    let mut _17: (u16, bool);            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:49

    bb0: {
        _2 = PortGeneric::<u8, ReadWriteAccess>::new(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:25:19: 25:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:25:19: 25:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u16) -> PortGeneric<u8, ReadWriteAccess> {PortGeneric::<u8, ReadWriteAccess>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = CheckedAdd(_1, const 1_u16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:48
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_u16) -> [success: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:48
    }

    bb2: {
        _4 = move (_5.0: u16);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:48
        _3 = PortGeneric::<u8, WriteOnlyAccess>::new(move _4) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:21: 26:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:21: 26:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(u16) -> PortGeneric<u8, WriteOnlyAccess> {PortGeneric::<u8, WriteOnlyAccess>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = CheckedAdd(_1, const 2_u16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:51
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 2_u16) -> [success: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:51
    }

    bb4: {
        _7 = move (_8.0: u16);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:51
        _6 = PortGeneric::<u8, WriteOnlyAccess>::new(move _7) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:24: 27:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:24: 27:42
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(u16) -> PortGeneric<u8, WriteOnlyAccess> {PortGeneric::<u8, WriteOnlyAccess>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = CheckedAdd(_1, const 3_u16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:51
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 3_u16) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:51
    }

    bb6: {
        _10 = move (_11.0: u16);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:51
        _9 = PortGeneric::<u8, WriteOnlyAccess>::new(move _10) -> [return: bb7, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:24: 28:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:24: 28:42
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(u16) -> PortGeneric<u8, WriteOnlyAccess> {PortGeneric::<u8, WriteOnlyAccess>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = CheckedAdd(_1, const 4_u16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:52
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 4_u16) -> [success: bb8, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:52
    }

    bb8: {
        _13 = move (_14.0: u16);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:52
        _12 = PortGeneric::<u8, WriteOnlyAccess>::new(move _13) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:25: 29:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:25: 29:43
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(u16) -> PortGeneric<u8, WriteOnlyAccess> {PortGeneric::<u8, WriteOnlyAccess>::new}, val: Value(<ZST>) }
    }

    bb9: {
        _17 = CheckedAdd(_1, const 5_u16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:49
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 5_u16) -> [success: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:49
    }

    bb10: {
        _16 = move (_17.0: u16);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:49
        _15 = PortGeneric::<u8, ReadOnlyAccess>::new(move _16) -> [return: bb11, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:23: 30:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:23: 30:40
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(u16) -> PortGeneric<u8, ReadOnlyAccess> {PortGeneric::<u8, ReadOnlyAccess>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = SerialPort { data: move _2, int_en: move _3, fifo_ctrl: move _6, line_ctrl: move _9, modem_ctrl: move _12, line_sts: move _15 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:24:9: 31:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:32:6: 32:6
    }
}

// MIR FOR CTFE
fn port::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:18:1: 18:16>::new(_1: u16) -> SerialPort {
    debug base => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:23:29: 23:33
    let mut _0: port::SerialPort;        // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:23:43: 23:47
    let mut _2: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:25:19: 25:34
    let mut _3: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:25:29: 25:33
    let mut _4: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:21: 26:49
    let mut _5: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:48
    let mut _6: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:44
    let mut _7: (u16, bool);             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:48
    let mut _8: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:24: 27:52
    let mut _9: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:51
    let mut _10: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:47
    let mut _11: (u16, bool);            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:51
    let mut _12: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:24: 28:52
    let mut _13: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:51
    let mut _14: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:47
    let mut _15: (u16, bool);            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:51
    let mut _16: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:25: 29:53
    let mut _17: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:52
    let mut _18: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:48
    let mut _19: (u16, bool);            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:52
    let mut _20: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:23: 30:50
    let mut _21: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:49
    let mut _22: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:45
    let mut _23: (u16, bool);            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:49

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:25:19: 25:34
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:25:29: 25:33
        _3 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:25:29: 25:33
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:25:19: 25:34
        _2 = PortGeneric::<u8, ReadWriteAccess>::new(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:25:19: 25:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:25:19: 25:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u16) -> PortGeneric<u8, ReadWriteAccess> {PortGeneric::<u8, ReadWriteAccess>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:25:33: 25:34
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:21: 26:49
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:48
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:44
        _6 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:44
        _7 = CheckedAdd(_6, const 1_u16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:48
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, const 1_u16) -> [success: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:48
    }

    bb2: {
        _5 = move (_7.0: u16);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:40: 26:48
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:47: 26:48
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:21: 26:49
        _4 = PortGeneric::<u8, WriteOnlyAccess>::new(move _5) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:21: 26:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:21: 26:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(u16) -> PortGeneric<u8, WriteOnlyAccess> {PortGeneric::<u8, WriteOnlyAccess>::new}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:26:48: 26:49
        StorageLive(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:24: 27:52
        StorageLive(_9);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:51
        StorageLive(_10);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:47
        _10 = _1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:47
        _11 = CheckedAdd(_10, const 2_u16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:51
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 2_u16) -> [success: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:51
    }

    bb4: {
        _9 = move (_11.0: u16);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:43: 27:51
        StorageDead(_10);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:50: 27:51
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:24: 27:52
        _8 = PortGeneric::<u8, WriteOnlyAccess>::new(move _9) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:24: 27:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:24: 27:42
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(u16) -> PortGeneric<u8, WriteOnlyAccess> {PortGeneric::<u8, WriteOnlyAccess>::new}, val: Value(<ZST>) }
    }

    bb5: {
        StorageDead(_9);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:27:51: 27:52
        StorageLive(_12);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:24: 28:52
        StorageLive(_13);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:51
        StorageLive(_14);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:47
        _14 = _1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:47
        _15 = CheckedAdd(_14, const 3_u16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:51
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _14, const 3_u16) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:51
    }

    bb6: {
        _13 = move (_15.0: u16);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:43: 28:51
        StorageDead(_14);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:50: 28:51
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:24: 28:52
        _12 = PortGeneric::<u8, WriteOnlyAccess>::new(move _13) -> [return: bb7, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:24: 28:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:24: 28:42
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(u16) -> PortGeneric<u8, WriteOnlyAccess> {PortGeneric::<u8, WriteOnlyAccess>::new}, val: Value(<ZST>) }
    }

    bb7: {
        StorageDead(_13);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:28:51: 28:52
        StorageLive(_16);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:25: 29:53
        StorageLive(_17);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:52
        StorageLive(_18);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:48
        _18 = _1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:48
        _19 = CheckedAdd(_18, const 4_u16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:52
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _18, const 4_u16) -> [success: bb8, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:52
    }

    bb8: {
        _17 = move (_19.0: u16);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:44: 29:52
        StorageDead(_18);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:51: 29:52
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:25: 29:53
        _16 = PortGeneric::<u8, WriteOnlyAccess>::new(move _17) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:25: 29:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:25: 29:43
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(u16) -> PortGeneric<u8, WriteOnlyAccess> {PortGeneric::<u8, WriteOnlyAccess>::new}, val: Value(<ZST>) }
    }

    bb9: {
        StorageDead(_17);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:29:52: 29:53
        StorageLive(_20);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:23: 30:50
        StorageLive(_21);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:49
        StorageLive(_22);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:45
        _22 = _1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:45
        _23 = CheckedAdd(_22, const 5_u16); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:49
        assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", move _22, const 5_u16) -> [success: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:49
    }

    bb10: {
        _21 = move (_23.0: u16);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:41: 30:49
        StorageDead(_22);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:48: 30:49
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:23: 30:50
        _20 = PortGeneric::<u8, ReadOnlyAccess>::new(move _21) -> [return: bb11, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:23: 30:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:23: 30:40
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(u16) -> PortGeneric<u8, ReadOnlyAccess> {PortGeneric::<u8, ReadOnlyAccess>::new}, val: Value(<ZST>) }
    }

    bb11: {
        StorageDead(_21);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:30:49: 30:50
        _0 = SerialPort { data: move _2, int_en: move _4, fifo_ctrl: move _8, line_ctrl: move _12, modem_ctrl: move _16, line_sts: move _20 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:24:9: 31:10
        StorageDead(_20);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:31:9: 31:10
        StorageDead(_16);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:31:9: 31:10
        StorageDead(_12);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:31:9: 31:10
        StorageDead(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:31:9: 31:10
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:31:9: 31:10
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:31:9: 31:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:32:6: 32:6
    }
}

fn port::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:18:1: 18:16>::init(_1: &mut SerialPort) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:37:17: 37:26
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:37:28: 37:28
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:40:13: 40:36
    let mut _3: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:40:13: 40:36
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:43:13: 43:39
    let mut _5: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:43:13: 43:39
    let _6: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:46:13: 46:34
    let mut _7: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:46:13: 46:34
    let _8: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:47:13: 47:36
    let mut _9: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:47:13: 47:36
    let _10: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:50:13: 50:39
    let mut _11: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:50:13: 50:39
    let _12: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:54:13: 54:39
    let mut _13: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:54:13: 54:39
    let _14: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:58:13: 58:40
    let mut _15: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:58:13: 58:40
    let _16: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:61:13: 61:36
    let mut _17: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:61:13: 61:36
    scope 1 {
    }

    bb0: {
        _3 = &mut ((*_1).1: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:40:13: 40:36
        _2 = PortGeneric::<u8, WriteOnlyAccess>::write(move _3, const 0_u8) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:40:13: 40:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:40:25: 40:30
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, WriteOnlyAccess>, u8) {PortGeneric::<u8, WriteOnlyAccess>::write}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut ((*_1).3: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:43:13: 43:39
        _4 = PortGeneric::<u8, WriteOnlyAccess>::write(move _5, const 128_u8) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:43:13: 43:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:43:28: 43:33
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, WriteOnlyAccess>, u8) {PortGeneric::<u8, WriteOnlyAccess>::write}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut ((*_1).0: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:46:13: 46:34
        _6 = PortGeneric::<u8, ReadWriteAccess>::write(move _7, const 3_u8) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:46:13: 46:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:46:23: 46:28
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, ReadWriteAccess>, u8) {PortGeneric::<u8, ReadWriteAccess>::write}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut ((*_1).1: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:47:13: 47:36
        _8 = PortGeneric::<u8, WriteOnlyAccess>::write(move _9, const 0_u8) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:47:13: 47:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:47:25: 47:30
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, WriteOnlyAccess>, u8) {PortGeneric::<u8, WriteOnlyAccess>::write}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &mut ((*_1).3: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:50:13: 50:39
        _10 = PortGeneric::<u8, WriteOnlyAccess>::write(move _11, const 3_u8) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:50:13: 50:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:50:28: 50:33
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, WriteOnlyAccess>, u8) {PortGeneric::<u8, WriteOnlyAccess>::write}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &mut ((*_1).2: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:54:13: 54:39
        _12 = PortGeneric::<u8, WriteOnlyAccess>::write(move _13, const 199_u8) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:54:13: 54:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:54:28: 54:33
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, WriteOnlyAccess>, u8) {PortGeneric::<u8, WriteOnlyAccess>::write}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = &mut ((*_1).4: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:58:13: 58:40
        _14 = PortGeneric::<u8, WriteOnlyAccess>::write(move _15, const 11_u8) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:58:13: 58:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:58:29: 58:34
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, WriteOnlyAccess>, u8) {PortGeneric::<u8, WriteOnlyAccess>::write}, val: Value(<ZST>) }
    }

    bb7: {
        _17 = &mut ((*_1).1: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::WriteOnlyAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:61:13: 61:36
        _16 = PortGeneric::<u8, WriteOnlyAccess>::write(move _17, const 1_u8) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:61:13: 61:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:61:25: 61:30
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, WriteOnlyAccess>, u8) {PortGeneric::<u8, WriteOnlyAccess>::write}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:63:6: 63:6
    }
}

fn port::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:18:1: 18:16>::line_sts(_1: &mut SerialPort) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:65:17: 65:26
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:65:31: 65:43
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:66:51: 66:71
    let mut _3: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadOnlyAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:66:51: 66:71
    scope 1 {
    }

    bb0: {
        _3 = &mut ((*_1).5: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadOnlyAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:66:51: 66:71
        _2 = PortGeneric::<u8, ReadOnlyAccess>::read(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:66:51: 66:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:66:65: 66:69
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, ReadOnlyAccess>) -> u8 {PortGeneric::<u8, ReadOnlyAccess>::read}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = LineStsFlags::from_bits_truncate(move _2) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:66:18: 66:72
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:66:18: 66:50
                                         // + literal: Const { ty: fn(u8) -> LineStsFlags {LineStsFlags::from_bits_truncate}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:67:6: 67:6
    }
}

fn port::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:18:1: 18:16>::send(_1: &mut SerialPort, _2: u8) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:70:17: 70:26
    debug data => _2;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:70:28: 70:32
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:70:38: 70:38
    let mut _3: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:70:5: 87:6
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:74:31: 74:83
    let mut _6: &LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:74:31: 74:83
    let _7: LineStsFlags;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:74:31: 74:46
    let _8: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:75:21: 75:39
    let mut _9: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:75:21: 75:39
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:76:31: 76:83
    let mut _12: &LineStsFlags;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:76:31: 76:83
    let _13: LineStsFlags;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:76:31: 76:46
    let _14: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:77:21: 77:42
    let mut _15: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:77:21: 77:42
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    let mut _17: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:78:31: 78:83
    let mut _18: &LineStsFlags;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:78:31: 78:83
    let _19: LineStsFlags;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:78:31: 78:46
    let mut _20: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:79:21: 79:39
    let mut _21: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    let mut _22: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:82:31: 82:83
    let mut _23: &LineStsFlags;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:82:31: 82:83
    let _24: LineStsFlags;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:82:31: 82:46
    let _25: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:83:21: 83:42
    let mut _26: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:83:21: 83:42
    scope 1 {
    }

    bb0: {
        switchInt(_2) -> [8: bb1, 127: bb1, otherwise: bb16]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:72:13: 72:23
    }

    bb1: {
        _7 = SerialPort::line_sts(_1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:74:31: 74:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:74:36: 74:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut SerialPort) -> LineStsFlags {SerialPort::line_sts}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_7;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:74:31: 74:83
        _5 = LineStsFlags::contains(move _6, const _) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:74:31: 74:83
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:74:47: 74:55
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags, LineStsFlags) -> bool {LineStsFlags::contains}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:74:56: 74:82
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::OUTPUT_EMPTY, [], None) }
    }

    bb3: {
        _4 = Not(move _5);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
        switchInt(move _4) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    }

    bb4: {
        _3 = spin_loop() -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:34
                                         // + literal: Const { ty: fn() {spin_loop}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = &mut ((*_1).0: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:75:21: 75:39
        _8 = PortGeneric::<u8, ReadWriteAccess>::write(move _9, const 8_u8) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:75:21: 75:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:75:31: 75:36
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, ReadWriteAccess>, u8) {PortGeneric::<u8, ReadWriteAccess>::write}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = SerialPort::line_sts(_1) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:76:31: 76:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:76:36: 76:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut SerialPort) -> LineStsFlags {SerialPort::line_sts}, val: Value(<ZST>) }
    }

    bb7: {
        _12 = &_13;                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:76:31: 76:83
        _11 = LineStsFlags::contains(move _12, const _) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:76:31: 76:83
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:76:47: 76:55
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags, LineStsFlags) -> bool {LineStsFlags::contains}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:76:56: 76:82
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::OUTPUT_EMPTY, [], None) }
    }

    bb8: {
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
        switchInt(move _10) -> [0: bb10, otherwise: bb9]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    }

    bb9: {
        _3 = spin_loop() -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:34
                                         // + literal: Const { ty: fn() {spin_loop}, val: Value(<ZST>) }
    }

    bb10: {
        _15 = &mut ((*_1).0: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:77:21: 77:42
        _14 = PortGeneric::<u8, ReadWriteAccess>::write(move _15, const 32_u8) -> [return: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:77:21: 77:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:77:31: 77:36
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, ReadWriteAccess>, u8) {PortGeneric::<u8, ReadWriteAccess>::write}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = SerialPort::line_sts(_1) -> [return: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:78:31: 78:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:78:36: 78:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut SerialPort) -> LineStsFlags {SerialPort::line_sts}, val: Value(<ZST>) }
    }

    bb12: {
        _18 = &_19;                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:78:31: 78:83
        _17 = LineStsFlags::contains(move _18, const _) -> [return: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:78:31: 78:83
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:78:47: 78:55
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags, LineStsFlags) -> bool {LineStsFlags::contains}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:78:56: 78:82
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::OUTPUT_EMPTY, [], None) }
    }

    bb13: {
        _16 = Not(move _17);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
        switchInt(move _16) -> [0: bb15, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    }

    bb14: {
        _3 = spin_loop() -> [return: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:34
                                         // + literal: Const { ty: fn() {spin_loop}, val: Value(<ZST>) }
    }

    bb15: {
        _20 = &mut ((*_1).0: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:79:21: 79:39
        _0 = PortGeneric::<u8, ReadWriteAccess>::write(move _20, const 8_u8) -> [return: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:79:21: 79:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:79:31: 79:36
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, ReadWriteAccess>, u8) {PortGeneric::<u8, ReadWriteAccess>::write}, val: Value(<ZST>) }
    }

    bb16: {
        _24 = SerialPort::line_sts(_1) -> [return: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:82:31: 82:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:82:36: 82:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut SerialPort) -> LineStsFlags {SerialPort::line_sts}, val: Value(<ZST>) }
    }

    bb17: {
        _23 = &_24;                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:82:31: 82:83
        _22 = LineStsFlags::contains(move _23, const _) -> [return: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:82:31: 82:83
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:82:47: 82:55
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags, LineStsFlags) -> bool {LineStsFlags::contains}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:82:56: 82:82
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::OUTPUT_EMPTY, [], None) }
    }

    bb18: {
        _21 = Not(move _22);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
        switchInt(move _21) -> [0: bb20, otherwise: bb19]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    }

    bb19: {
        _3 = spin_loop() -> [return: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:34
                                         // + literal: Const { ty: fn() {spin_loop}, val: Value(<ZST>) }
    }

    bb20: {
        _26 = &mut ((*_1).0: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:83:21: 83:42
        _25 = PortGeneric::<u8, ReadWriteAccess>::write(move _26, _2) -> [return: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:83:21: 83:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:83:31: 83:36
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, ReadWriteAccess>, u8) {PortGeneric::<u8, ReadWriteAccess>::write}, val: Value(<ZST>) }
    }

    bb21: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:87:6: 87:6
    }
}

fn port::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:18:1: 18:16>::send_raw(_1: &mut SerialPort, _2: u8) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:90:21: 90:30
    debug data => _2;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:90:32: 90:36
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:90:42: 90:42
    let mut _3: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:90:5: 95:6
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:92:23: 92:75
    let mut _6: &LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:92:23: 92:75
    let _7: LineStsFlags;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:92:23: 92:38
    let _8: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:93:13: 93:34
    let mut _9: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:93:13: 93:34
    scope 1 {
    }

    bb0: {
        goto -> bb1;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:9: 71:10
    }

    bb1: {
        _7 = SerialPort::line_sts(_1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:92:23: 92:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:92:28: 92:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut SerialPort) -> LineStsFlags {SerialPort::line_sts}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_7;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:92:23: 92:75
        _5 = LineStsFlags::contains(move _6, const _) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:92:23: 92:75
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:92:39: 92:47
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags, LineStsFlags) -> bool {LineStsFlags::contains}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:92:48: 92:74
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::OUTPUT_EMPTY, [], None) }
    }

    bb3: {
        _4 = Not(move _5);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
        switchInt(move _4) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    }

    bb4: {
        _3 = spin_loop() -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:34
                                         // + literal: Const { ty: fn() {spin_loop}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = &mut ((*_1).0: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:93:13: 93:34
        _8 = PortGeneric::<u8, ReadWriteAccess>::write(move _9, _2) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:93:13: 93:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:93:23: 93:28
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, ReadWriteAccess>, u8) {PortGeneric::<u8, ReadWriteAccess>::write}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:95:6: 95:6
    }
}

fn port::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:18:1: 18:16>::receive(_1: &mut SerialPort) -> u8 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:98:20: 98:29
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:98:34: 98:36
    let mut _2: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:98:5: 103:6
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:100:23: 100:73
    let mut _5: &LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:100:23: 100:73
    let _6: LineStsFlags;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:100:23: 100:38
    let mut _7: &mut x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:101:13: 101:29
    scope 1 {
    }

    bb0: {
        goto -> bb1;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:9: 71:10
    }

    bb1: {
        _6 = SerialPort::line_sts(_1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:100:23: 100:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:100:28: 100:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut SerialPort) -> LineStsFlags {SerialPort::line_sts}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:100:23: 100:73
        _4 = LineStsFlags::contains(move _5, const _) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:100:23: 100:73
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:100:39: 100:47
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags, LineStsFlags) -> bool {LineStsFlags::contains}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:100:48: 100:72
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::INPUT_FULL, [], None) }
    }

    bb3: {
        _3 = Not(move _4);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
        switchInt(move _3) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:69:15: 69:21
    }

    bb4: {
        _2 = spin_loop() -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:70:13: 70:34
                                         // + literal: Const { ty: fn() {spin_loop}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = &mut ((*_1).0: x86_64::instructions::port::PortGeneric<u8, x86_64::instructions::port::ReadWriteAccess>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:101:13: 101:29
        _0 = PortGeneric::<u8, ReadWriteAccess>::read(move _7) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:101:13: 101:29
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:101:23: 101:27
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut PortGeneric<u8, ReadWriteAccess>) -> u8 {PortGeneric::<u8, ReadWriteAccess>::read}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:103:6: 103:6
    }
}

fn port::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:106:1: 106:31>::write_str(_1: &mut SerialPort, _2: &str) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:107:18: 107:27
    debug s => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:107:29: 107:30
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:107:41: 107:52
    let mut _3: core::str::Bytes<'_>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
    let mut _4: core::str::Bytes<'_>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
    let mut _5: core::str::Bytes<'_>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
    let mut _6: core::option::Option<u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
    let mut _7: &mut core::str::Bytes<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
    let mut _8: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:9: 110:10
    let _10: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:109:13: 109:28
    scope 1 {
        debug iter => _5;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
        let _9: u8;                      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:13: 108:17
        scope 2 {
            debug byte => _9;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:13: 108:17
        }
    }

    bb0: {
        _4 = str::<impl str>::bytes(_2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:23: 108:28
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Bytes<'a> {str::<impl str>::bytes}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Bytes<'_> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
                                         // + literal: Const { ty: fn(Bytes<'_>) -> <Bytes<'_> as IntoIterator>::IntoIter {<Bytes<'_> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _3;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
        goto -> bb3;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:9: 110:10
    }

    bb3: {
        _7 = &mut _5;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
        _6 = <Bytes<'_> as Iterator>::next(_7) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut Bytes<'_>) -> Option<<Bytes<'_> as Iterator>::Item> {<Bytes<'_> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = discriminant(_6);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
    }

    bb5: {
        _9 = ((_6 as Some).0: u8);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:13: 108:17
        _10 = SerialPort::send(_1, _9) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:109:13: 109:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:109:18: 109:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut SerialPort, u8) {SerialPort::send}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:108:21: 108:30
    }

    bb7: {
        _0 = Result::<(), core::fmt::Error>::Ok(const ()); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:111:9: 111:15
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/port.rs:112:6: 112:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:24: 363:33>::eq(_1: &IntEnFlags, _2: &IntEnFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:24: 363:33
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:24: 363:33
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:24: 363:33
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21

    bb0: {
        _3 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _4 = ((*_2).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _0 = Eq(move _3, move _4);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:33: 363:33
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:35: 363:37>::assert_receiver_is_total_eq(_1: &IntEnFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:35: 363:37
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:35: 363:37
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:37: 363:37
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:39: 363:44>::clone(_1: &IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:39: 363:44
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:39: 363:44
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:39: 363:44
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:44: 363:44
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:46: 363:56>::partial_cmp(_1: &IntEnFlags, _2: &IntEnFlags) -> Option<core::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:46: 363:56
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:46: 363:56
    let mut _0: core::option::Option<core::cmp::Ordering>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:46: 363:56
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
    let _4: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _4 = &((*_2).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _0 = <u8 as PartialOrd>::partial_cmp(_3, _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> Option<core::cmp::Ordering> {<u8 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:56: 363:56
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:58: 363:61>::cmp(_1: &IntEnFlags, _2: &IntEnFlags) -> core::cmp::Ordering {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:58: 363:61
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:58: 363:61
    let mut _0: core::cmp::Ordering;     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:58: 363:61
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
    let _4: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _4 = &((*_2).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _0 = <u8 as Ord>::cmp(_3, _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> core::cmp::Ordering {<u8 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:61: 363:61
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:63: 363:67>::hash(_1: &IntEnFlags, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:63: 363:67
    debug state => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:63: 363:67
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:63: 363:67
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _0 = <u8 as Hash>::hash::<__H>(_3, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b mut __H) {<u8 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:67: 363:67
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt(_1: &IntEnFlags, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:434:20: 434:25
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:434:27: 434:28
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:434:69: 434:95
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:471:21: 471:30
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:29: 474:34
    let mut _7: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    let mut _8: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:47
    let _9: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
    let mut _10: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
    let mut _11: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
    let mut _12: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:70
    let _13: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
    let mut _14: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
    let mut _17: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:29: 474:34
    let mut _18: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    let mut _19: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:47
    let _20: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
    let mut _21: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
    let mut _22: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
    let mut _23: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:70
    let _24: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
    let mut _25: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
    let mut _26: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
    let mut _27: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:29: 474:34
    let mut _29: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    let mut _30: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:47
    let _31: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
    let mut _32: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
    let mut _33: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
    let mut _34: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:70
    let _35: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
    let mut _36: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
    let mut _37: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
    let mut _38: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
    let mut _39: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:29: 474:34
    let mut _40: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    let mut _41: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:47
    let _42: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
    let mut _43: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
    let mut _44: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
    let mut _45: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:70
    let _46: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
    let mut _47: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
    let mut _49: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:34: 481:43
    let mut _50: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:46: 481:65
    let mut _51: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:65
    let mut _52: &IntEnFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:65
    let _53: IntEnFlags;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:58
    let mut _54: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:482:20: 482:30
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:483:24: 483:30
    let mut _56: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:483:25: 483:30
    let mut _57: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
    let mut _58: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:43
    let _59: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:37: 484:42
    let mut _60: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:43: 484:44
    let mut _61: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
    let mut _62: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:38
    let _63: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:33: 487:37
    let mut _64: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:38: 487:39
    let mut _65: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
    let mut _66: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:70
    let _67: &u8;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:55: 488:66
    let mut _68: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:70: 488:71
    let mut _69: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:490:20: 490:25
    let mut _70: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
    let mut _71: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:43
    let _72: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:33: 491:42
    let mut _73: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:43: 491:44
    scope 1 {
        debug first => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:471:21: 471:30
        let _48: u8;                     // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:21: 481:31
        scope 2 {
            debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();       // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
            scope 5 {
            }
        }
        scope 6 {
            debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
            scope 7 {
            }
        }
        scope 8 {
            debug val => const ();       // in scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
            scope 9 {
            }
        }
        scope 10 {
            debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 10 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
            scope 11 {
            }
        }
        scope 12 {
            debug val => const ();       // in scope 12 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
            scope 13 {
            }
        }
        scope 14 {
            debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 14 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
            scope 15 {
            }
        }
        scope 16 {
            debug val => const ();       // in scope 16 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
            scope 17 {
            }
        }
        scope 18 {
            debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
            scope 19 {
            }
        }
        scope 20 {
            debug val => const ();       // in scope 20 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
            scope 21 {
            }
        }
        scope 22 {
            debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 22 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
            scope 23 {
            }
        }
        scope 24 {
            debug val => const ();       // in scope 24 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
            scope 25 {
            }
        }
        scope 26 {
            debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 26 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
            scope 27 {
            }
        }
        scope 28 {
            debug val => const ();       // in scope 28 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
            scope 29 {
            }
        }
        scope 30 {
            debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 30 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
            scope 31 {
            }
        }
        scope 32 {
            debug val => const ();       // in scope 32 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
            scope 33 {
            }
        }
        scope 34 {
            debug extra_bits => _48;     // in scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:21: 481:31
            scope 35 {
                debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 35 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:43: 484:44
                scope 36 {
                }
            }
            scope 37 {
                debug val => const ();   // in scope 37 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
                scope 38 {
                }
            }
            scope 39 {
                debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 39 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:38: 487:39
                scope 40 {
                }
            }
            scope 41 {
                debug val => const ();   // in scope 41 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
                scope 42 {
                }
            }
            scope 43 {
                debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 43 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:70: 488:71
                scope 44 {
                }
            }
            scope 45 {
                debug val => const ();   // in scope 45 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
                scope 46 {
                }
            }
            scope 47 {
                debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 47 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:43: 491:44
                scope 48 {
                }
            }
            scope 49 {
                debug val => const ();   // in scope 49 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
                scope 50 {
                }
            }
        }
    }

    bb0: {
        _3 = const true;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:471:33: 471:37
        _4 = <IntEnFlags as <IntEnFlags as core::fmt::Debug>::fmt::__BitFlags>::RECEIVED(_1) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:24: 473:51
                                         // + literal: Const { ty: for<'a> fn(&'a IntEnFlags) -> bool {<IntEnFlags as <IntEnFlags as core::fmt::Debug>::fmt::__BitFlags>::RECEIVED}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _4) -> [0: bb12, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
    }

    bb2: {
        _6 = _3;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:29: 474:34
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
        switchInt(move _5) -> [0: bb8, otherwise: bb3]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
    }

    bb3: {
        _9 = const " | ";                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = Formatter::<'_>::write_str(_2, _9) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:31: 475:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = <Result<(), core::fmt::Error> as Try>::branch(move _8) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = discriminant(_7);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
        switchInt(move _10) -> [0: bb8, 1: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    }

    bb6: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    }

    bb7: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb67, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb8: {
        _3 = const false;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:477:25: 477:38
        _13 = const "RECEIVED";          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = Formatter::<'_>::write_str(_2, _13) -> [return: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:27: 478:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb9: {
        _11 = <Result<(), core::fmt::Error> as Try>::branch(move _12) -> [return: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb10: {
        _14 = discriminant(_11);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
        switchInt(move _14) -> [0: bb12, 1: bb11, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
    }

    bb11: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb67, unwind unreachable]; // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb12: {
        _15 = <IntEnFlags as <IntEnFlags as core::fmt::Debug>::fmt::__BitFlags>::SENT(_1) -> [return: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:24: 473:51
                                         // + literal: Const { ty: for<'a> fn(&'a IntEnFlags) -> bool {<IntEnFlags as <IntEnFlags as core::fmt::Debug>::fmt::__BitFlags>::SENT}, val: Value(<ZST>) }
    }

    bb13: {
        switchInt(move _15) -> [0: bb23, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
    }

    bb14: {
        _17 = _3;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:29: 474:34
        _16 = Not(move _17);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
        switchInt(move _16) -> [0: bb19, otherwise: bb15]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
    }

    bb15: {
        _20 = const " | ";               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = Formatter::<'_>::write_str(_2, _20) -> [return: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:31: 475:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb16: {
        _18 = <Result<(), core::fmt::Error> as Try>::branch(move _19) -> [return: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb17: {
        _21 = discriminant(_18);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
        switchInt(move _21) -> [0: bb19, 1: bb18, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    }

    bb18: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb67, unwind unreachable]; // scope 11 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb19: {
        _3 = const false;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:477:25: 477:38
        _24 = const "SENT";              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _23 = Formatter::<'_>::write_str(_2, _24) -> [return: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:27: 478:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb20: {
        _22 = <Result<(), core::fmt::Error> as Try>::branch(move _23) -> [return: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb21: {
        _25 = discriminant(_22);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
        switchInt(move _25) -> [0: bb23, 1: bb22, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
    }

    bb22: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb67, unwind unreachable]; // scope 15 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb23: {
        _26 = <IntEnFlags as <IntEnFlags as core::fmt::Debug>::fmt::__BitFlags>::ERRORED(_1) -> [return: bb24, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:24: 473:51
                                         // + literal: Const { ty: for<'a> fn(&'a IntEnFlags) -> bool {<IntEnFlags as <IntEnFlags as core::fmt::Debug>::fmt::__BitFlags>::ERRORED}, val: Value(<ZST>) }
    }

    bb24: {
        switchInt(move _26) -> [0: bb34, otherwise: bb25]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
    }

    bb25: {
        _28 = _3;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:29: 474:34
        _27 = Not(move _28);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
        switchInt(move _27) -> [0: bb30, otherwise: bb26]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
    }

    bb26: {
        _31 = const " | ";               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _30 = Formatter::<'_>::write_str(_2, _31) -> [return: bb27, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:31: 475:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb27: {
        _29 = <Result<(), core::fmt::Error> as Try>::branch(move _30) -> [return: bb28, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb28: {
        _32 = discriminant(_29);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
        switchInt(move _32) -> [0: bb30, 1: bb29, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    }

    bb29: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb67, unwind unreachable]; // scope 19 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb30: {
        _3 = const false;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:477:25: 477:38
        _35 = const "ERRORED";           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _34 = Formatter::<'_>::write_str(_2, _35) -> [return: bb31, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:27: 478:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb31: {
        _33 = <Result<(), core::fmt::Error> as Try>::branch(move _34) -> [return: bb32, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb32: {
        _36 = discriminant(_33);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
        switchInt(move _36) -> [0: bb34, 1: bb33, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
    }

    bb33: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb67, unwind unreachable]; // scope 23 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb34: {
        _37 = <IntEnFlags as <IntEnFlags as core::fmt::Debug>::fmt::__BitFlags>::STATUS_CHANGE(_1) -> [return: bb35, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:24: 473:51
                                         // + literal: Const { ty: for<'a> fn(&'a IntEnFlags) -> bool {<IntEnFlags as <IntEnFlags as core::fmt::Debug>::fmt::__BitFlags>::STATUS_CHANGE}, val: Value(<ZST>) }
    }

    bb35: {
        switchInt(move _37) -> [0: bb45, otherwise: bb36]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
    }

    bb36: {
        _39 = _3;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:29: 474:34
        _38 = Not(move _39);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
        switchInt(move _38) -> [0: bb41, otherwise: bb37]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
    }

    bb37: {
        _42 = const " | ";               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _41 = Formatter::<'_>::write_str(_2, _42) -> [return: bb38, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:31: 475:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb38: {
        _40 = <Result<(), core::fmt::Error> as Try>::branch(move _41) -> [return: bb39, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb39: {
        _43 = discriminant(_40);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
        switchInt(move _43) -> [0: bb41, 1: bb40, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    }

    bb40: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb67, unwind unreachable]; // scope 27 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb41: {
        _3 = const false;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:477:25: 477:38
        _46 = const "STATUS_CHANGE";     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _45 = Formatter::<'_>::write_str(_2, _46) -> [return: bb42, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:27: 478:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb42: {
        _44 = <Result<(), core::fmt::Error> as Try>::branch(move _45) -> [return: bb43, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb43: {
        _47 = discriminant(_44);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
        switchInt(move _47) -> [0: bb45, 1: bb44, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
    }

    bb44: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb67, unwind unreachable]; // scope 31 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb45: {
        _49 = ((*_1).0: u8);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:34: 481:43
        _53 = IntEnFlags::all() -> [return: bb46, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:56
                                         // + literal: Const { ty: fn() -> IntEnFlags {IntEnFlags::all}, val: Value(<ZST>) }
    }

    bb46: {
        _52 = &_53;                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:65
        _51 = IntEnFlags::bits(move _52) -> [return: bb47, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:59: 481:63
                                         // + literal: Const { ty: for<'a> fn(&'a IntEnFlags) -> u8 {IntEnFlags::bits}, val: Value(<ZST>) }
    }

    bb47: {
        _50 = Not(move _51);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:46: 481:65
        _48 = BitAnd(move _49, move _50); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:34: 481:65
        _54 = _48;                       // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:482:20: 482:30
        switchInt(move _54) -> [0: bb61, otherwise: bb48]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:482:20: 482:35
    }

    bb48: {
        _56 = _3;                        // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:483:25: 483:30
        _55 = Not(move _56);             // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:483:24: 483:30
        switchInt(move _55) -> [0: bb53, otherwise: bb49]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:483:24: 483:30
    }

    bb49: {
        _59 = const " | ";               // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:37: 484:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:37: 484:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _58 = Formatter::<'_>::write_str(_2, _59) -> [return: bb50, unwind unreachable]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:27: 484:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb50: {
        _57 = <Result<(), core::fmt::Error> as Try>::branch(move _58) -> [return: bb51, unwind unreachable]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb51: {
        _60 = discriminant(_57);         // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
        switchInt(move _60) -> [0: bb53, 1: bb52, otherwise: bb6]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
    }

    bb52: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb67, unwind unreachable]; // scope 36 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:43: 484:44
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb53: {
        _3 = const false;                // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:486:21: 486:34
        _63 = const "0x";                // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:33: 487:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:33: 487:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _62 = Formatter::<'_>::write_str(_2, _63) -> [return: bb54, unwind unreachable]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:23: 487:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb54: {
        _61 = <Result<(), core::fmt::Error> as Try>::branch(move _62) -> [return: bb55, unwind unreachable]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb55: {
        _64 = discriminant(_61);         // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
        switchInt(move _64) -> [0: bb56, 1: bb57, otherwise: bb6]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
    }

    bb56: {
        _67 = &_48;                      // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:55: 488:66
        _66 = <u8 as LowerHex>::fmt(_67, _2) -> [return: bb58, unwind unreachable]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:54
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<u8 as LowerHex>::fmt}, val: Value(<ZST>) }
    }

    bb57: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb67, unwind unreachable]; // scope 40 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:38: 487:39
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb58: {
        _65 = <Result<(), core::fmt::Error> as Try>::branch(move _66) -> [return: bb59, unwind unreachable]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb59: {
        _68 = discriminant(_65);         // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
        switchInt(move _68) -> [0: bb61, 1: bb60, otherwise: bb6]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
    }

    bb60: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb67, unwind unreachable]; // scope 44 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:70: 488:71
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb61: {
        _69 = _3;                        // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:490:20: 490:25
        switchInt(move _69) -> [0: bb66, otherwise: bb62]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:490:20: 490:25
    }

    bb62: {
        _72 = const "(empty)";           // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:33: 491:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:33: 491:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _71 = Formatter::<'_>::write_str(_2, _72) -> [return: bb63, unwind unreachable]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:23: 491:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb63: {
        _70 = <Result<(), core::fmt::Error> as Try>::branch(move _71) -> [return: bb64, unwind unreachable]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb64: {
        _73 = discriminant(_70);         // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
        switchInt(move _73) -> [0: bb66, 1: bb65, otherwise: bb6]; // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
    }

    bb65: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb67, unwind unreachable]; // scope 48 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:43: 491:44
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb66: {
        _0 = Result::<(), core::fmt::Error>::Ok(const ()); // scope 34 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:493:17: 493:23
        goto -> bb67;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:494:14: 494:14
    }

    bb67: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:494:14: 494:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt::__BitFlags::RECEIVED(_1: &Self) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:34: 447:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:44: 447:48

    bb0: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:51: 447:56
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:58: 447:58
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt::__BitFlags::SENT(_1: &Self) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:34: 447:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:44: 447:48

    bb0: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:51: 447:56
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:58: 447:58
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt::__BitFlags::ERRORED(_1: &Self) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:34: 447:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:44: 447:48

    bb0: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:51: 447:56
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:58: 447:58
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt::__BitFlags::STATUS_CHANGE(_1: &Self) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:34: 447:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:44: 447:48

    bb0: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:51: 447:56
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:58: 447:58
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:454:17: 454:46>::RECEIVED(_1: &IntEnFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:460:38: 460:43
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:460:48: 460:52
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:52
    let mut _4: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:75
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:70
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:65
    let mut _8: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:46
    let mut _9: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:55: 464:65
    let mut _10: IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
    let mut _11: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:75: 464:85
    let mut _12: IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80

    bb0: {
        _4 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::RECEIVED, [], None) }
        _3 = (_4.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:52
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb1: {
        _2 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb2: {
        _6 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:70
        _5 = Ne(move _6, const 0_u8);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:75
        _2 = move _5;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb3: {
        switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb4: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:462:37: 462:42
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:33: 465:34
    }

    bb5: {
        _8 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:46
        _10 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::RECEIVED, [], None) }
        _9 = (_10.0: u8);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:55: 464:65
        _7 = BitAnd(move _8, move _9);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:65
        _12 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::RECEIVED, [], None) }
        _11 = (_12.0: u8);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:75: 464:85
        _0 = Eq(move _7, move _11);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:85
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:33: 465:34
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:875:11: 875:11
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:454:17: 454:46>::SENT(_1: &IntEnFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:460:38: 460:43
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:460:48: 460:52
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:52
    let mut _4: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:75
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:70
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:65
    let mut _8: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:46
    let mut _9: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:55: 464:65
    let mut _10: IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
    let mut _11: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:75: 464:85
    let mut _12: IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80

    bb0: {
        _4 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::SENT, [], None) }
        _3 = (_4.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:52
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb1: {
        _2 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb2: {
        _6 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:70
        _5 = Ne(move _6, const 0_u8);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:75
        _2 = move _5;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb3: {
        switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb4: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:462:37: 462:42
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:33: 465:34
    }

    bb5: {
        _8 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:46
        _10 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::SENT, [], None) }
        _9 = (_10.0: u8);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:55: 464:65
        _7 = BitAnd(move _8, move _9);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:65
        _12 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::SENT, [], None) }
        _11 = (_12.0: u8);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:75: 464:85
        _0 = Eq(move _7, move _11);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:85
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:33: 465:34
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:875:11: 875:11
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:454:17: 454:46>::ERRORED(_1: &IntEnFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:460:38: 460:43
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:460:48: 460:52
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:52
    let mut _4: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:75
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:70
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:65
    let mut _8: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:46
    let mut _9: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:55: 464:65
    let mut _10: IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
    let mut _11: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:75: 464:85
    let mut _12: IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80

    bb0: {
        _4 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::ERRORED, [], None) }
        _3 = (_4.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:52
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb1: {
        _2 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb2: {
        _6 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:70
        _5 = Ne(move _6, const 0_u8);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:75
        _2 = move _5;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb3: {
        switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb4: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:462:37: 462:42
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:33: 465:34
    }

    bb5: {
        _8 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:46
        _10 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::ERRORED, [], None) }
        _9 = (_10.0: u8);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:55: 464:65
        _7 = BitAnd(move _8, move _9);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:65
        _12 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::ERRORED, [], None) }
        _11 = (_12.0: u8);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:75: 464:85
        _0 = Eq(move _7, move _11);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:85
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:33: 465:34
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:875:11: 875:11
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:454:17: 454:46>::STATUS_CHANGE(_1: &IntEnFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:460:38: 460:43
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:460:48: 460:52
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:52
    let mut _4: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:75
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:70
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:65
    let mut _8: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:46
    let mut _9: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:55: 464:65
    let mut _10: IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
    let mut _11: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:75: 464:85
    let mut _12: IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80

    bb0: {
        _4 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::STATUS_CHANGE, [], None) }
        _3 = (_4.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:52
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb1: {
        _2 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb2: {
        _6 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:70
        _5 = Ne(move _6, const 0_u8);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:75
        _2 = move _5;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb3: {
        switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb4: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:462:37: 462:42
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:33: 465:34
    }

    bb5: {
        _8 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:46
        _10 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::STATUS_CHANGE, [], None) }
        _9 = (_10.0: u8);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:55: 464:65
        _7 = BitAnd(move _8, move _9);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:65
        _12 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::STATUS_CHANGE, [], None) }
        _11 = (_12.0: u8);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:75: 464:85
        _0 = Eq(move _7, move _11);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:85
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:33: 465:34
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:875:11: 875:11
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:496:9: 496:54>::fmt(_1: &IntEnFlags, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:497:20: 497:25
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:497:27: 497:28
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:497:69: 497:95
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:498:49: 498:59

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:498:49: 498:59
        _0 = <u8 as Binary>::fmt(_3, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:498:17: 498:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:498:17: 498:48
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<u8 as Binary>::fmt}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:499:14: 499:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:501:9: 501:53>::fmt(_1: &IntEnFlags, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:502:20: 502:25
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:502:27: 502:28
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:502:69: 502:95
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:503:48: 503:58

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:503:48: 503:58
        _0 = <u8 as Octal>::fmt(_3, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:503:17: 503:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:503:17: 503:47
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<u8 as Octal>::fmt}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:504:14: 504:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:506:9: 506:56>::fmt(_1: &IntEnFlags, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:507:20: 507:25
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:507:27: 507:28
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:507:69: 507:95
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:508:51: 508:61

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:508:51: 508:61
        _0 = <u8 as LowerHex>::fmt(_3, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:508:17: 508:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:508:17: 508:50
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<u8 as LowerHex>::fmt}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:509:14: 509:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:511:9: 511:56>::fmt(_1: &IntEnFlags, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:512:20: 512:25
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:512:27: 512:28
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:512:69: 512:95
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:513:51: 513:61

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:513:51: 513:61
        _0 = <u8 as UpperHex>::fmt(_3, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:513:17: 513:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:513:17: 513:50
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<u8 as UpperHex>::fmt}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:514:14: 514:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::RECEIVED: IntEnFlags = {
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:34: 521:38

    bb0: {
        _0 = IntEnFlags { bits: const 1_u8 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:41: 521:62
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:17: 521:63
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::SENT: IntEnFlags = {
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:34: 521:38
    let mut _1: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:89:22: 89:28
    let mut _2: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:89:22: 89:28
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:89:22: 89:28

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:89:22: 89:28
        _2 = const 1_i32 as u32 (IntToInt); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:89:22: 89:28
        _3 = Lt(move _2, const 8_u32);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:89:22: 89:28
        assert(move _3, "attempt to shift left by `{}`, which would overflow", const 1_i32) -> [success: bb1, unwind: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:89:22: 89:28
    }

    bb1: {
        _1 = Shl(const 1_u8, const 1_i32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:89:22: 89:28
        _0 = IntEnFlags { bits: move _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:41: 521:62
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:61: 521:62
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:17: 521:63
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:17: 521:63
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::ERRORED: IntEnFlags = {
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:34: 521:38
    let mut _1: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:90:25: 90:31
    let mut _2: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:90:25: 90:31
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:90:25: 90:31

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:90:25: 90:31
        _2 = const 2_i32 as u32 (IntToInt); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:90:25: 90:31
        _3 = Lt(move _2, const 8_u32);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:90:25: 90:31
        assert(move _3, "attempt to shift left by `{}`, which would overflow", const 2_i32) -> [success: bb1, unwind: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:90:25: 90:31
    }

    bb1: {
        _1 = Shl(const 1_u8, const 2_i32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:90:25: 90:31
        _0 = IntEnFlags { bits: move _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:41: 521:62
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:61: 521:62
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:17: 521:63
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:17: 521:63
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::STATUS_CHANGE: IntEnFlags = {
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:34: 521:38
    let mut _1: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:91:31: 91:37
    let mut _2: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:91:31: 91:37
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:91:31: 91:37

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:91:31: 91:37
        _2 = const 3_i32 as u32 (IntToInt); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:91:31: 91:37
        _3 = Lt(move _2, const 8_u32);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:91:31: 91:37
        assert(move _3, "attempt to shift left by `{}`, which would overflow", const 3_i32) -> [success: bb1, unwind: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:91:31: 91:37
    }

    bb1: {
        _1 = Shl(const 1_u8, const 3_i32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:91:31: 91:37
        _0 = IntEnFlags { bits: move _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:41: 521:62
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:61: 521:62
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:17: 521:63
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:17: 521:63
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::empty() -> IntEnFlags {
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:526:37: 526:41

    bb0: {
        _0 = IntEnFlags { bits: const 0_u8 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:527:17: 527:33
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:528:14: 528:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::empty() -> IntEnFlags {
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:526:37: 526:41

    bb0: {
        _0 = IntEnFlags { bits: const 0_u8 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:527:17: 527:33
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:528:14: 528:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all() -> IntEnFlags {
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:532:35: 532:39
    let mut _1: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51

    bb0: {
        _3 = BitOr(const _, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
        _2 = BitOr(move _3, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
        _1 = BitOr(move _2, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
        _0 = IntEnFlags { bits: move _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:9: 413:56
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:541:14: 541:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all() -> IntEnFlags {
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:532:35: 532:39
    let mut _1: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
        _3 = BitOr(const _, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
        _2 = BitOr(move _3, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:50: 413:51
        _1 = BitOr(move _2, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:50: 413:51
        _0 = IntEnFlags { bits: move _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:9: 413:56
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:55: 413:56
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:541:14: 541:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all::__BitFlags::RECEIVED: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:87:24: 87:26

    bb0: {
        _0 = const 0_u8;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:400:35: 400:36
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:400:17: 400:37
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all::__BitFlags::SENT: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:87:24: 87:26

    bb0: {
        _0 = const 0_u8;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:400:35: 400:36
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:400:17: 400:37
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all::__BitFlags::ERRORED: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:87:24: 87:26

    bb0: {
        _0 = const 0_u8;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:400:35: 400:36
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:400:17: 400:37
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all::__BitFlags::STATUS_CHANGE: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:87:24: 87:26

    bb0: {
        _0 = const 0_u8;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:400:35: 400:36
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:400:17: 400:37
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:404:9: 404:38>::RECEIVED: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:87:24: 87:26
    let mut _1: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
        _1 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::RECEIVED, [], None) }
        _0 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:45: 409:55
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:54: 409:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:55: 930:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:404:9: 404:38>::SENT: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:87:24: 87:26
    let mut _1: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
        _1 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::SENT, [], None) }
        _0 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:45: 409:55
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:54: 409:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:55: 930:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:404:9: 404:38>::ERRORED: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:87:24: 87:26
    let mut _1: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
        _1 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::ERRORED, [], None) }
        _0 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:45: 409:55
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:54: 409:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:55: 930:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:404:9: 404:38>::STATUS_CHANGE: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:87:24: 87:26
    let mut _1: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
        _1 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
                                         // + literal: Const { ty: IntEnFlags, val: Unevaluated(IntEnFlags::STATUS_CHANGE, [], None) }
        _0 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:45: 409:55
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:54: 409:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:55: 930:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::bits(_1: &IntEnFlags) -> u8 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:545:31: 545:36
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:87:24: 87:26

    bb0: {
        _0 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:546:17: 546:26
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:547:14: 547:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::bits(_1: &IntEnFlags) -> u8 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:545:31: 545:36
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:87:24: 87:26

    bb0: {
        _0 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:546:17: 546:26
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:547:14: 547:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::from_bits(_1: u8) -> Option<IntEnFlags> {
    debug bits => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:552:36: 552:40
    let mut _0: core::option::Option<IntEnFlags>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:552:49: 552:84
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:48
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:28: 553:47
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
    let mut _5: &IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
    let _6: IntEnFlags;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:40
    let mut _7: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:57: 554:70

    bb0: {
        _6 = IntEnFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:38
                                         // + literal: Const { ty: fn() -> IntEnFlags {IntEnFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_6;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
        _4 = IntEnFlags::bits(move _5) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:41: 553:45
                                         // + literal: Const { ty: for<'a> fn(&'a IntEnFlags) -> u8 {IntEnFlags::bits}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:28: 553:47
        _2 = BitAnd(_1, move _3);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:48
        switchInt(move _2) -> [0: bb3, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:53
    }

    bb3: {
        _7 = IntEnFlags { bits: _1 };    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:57: 554:70
        _0 = Option::<IntEnFlags>::Some(move _7); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:21: 554:71
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:17: 557:18
    }

    bb4: {
        _0 = Option::<IntEnFlags>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:556:21: 556:56
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:17: 557:18
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:558:14: 558:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::from_bits(_1: u8) -> Option<IntEnFlags> {
    debug bits => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:552:36: 552:40
    let mut _0: core::option::Option<IntEnFlags>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:552:49: 552:84
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:53
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:48
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:21: 553:25
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:28: 553:47
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
    let mut _7: &IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
    let _8: IntEnFlags;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:40
    let mut _9: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:57: 554:70
    let mut _10: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:64: 554:68

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:53
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:48
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:21: 553:25
        _4 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:21: 553:25
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:28: 553:47
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
        StorageLive(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
        StorageLive(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:40
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:40
        _8 = IntEnFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:38
                                         // + literal: Const { ty: fn() -> IntEnFlags {IntEnFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_8;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
        _6 = IntEnFlags::bits(move _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:41: 553:45
                                         // + literal: Const { ty: for<'a> fn(&'a IntEnFlags) -> u8 {IntEnFlags::bits}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:46: 553:47
        _5 = Not(move _6);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:28: 553:47
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:46: 553:47
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:48
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:47: 553:48
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:47: 553:48
        _2 = Eq(move _3, const 0_u8);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:53
        StorageDead(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:52: 553:53
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:52: 553:53
        switchInt(move _2) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:53
    }

    bb3: {
        StorageLive(_9);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:57: 554:70
        StorageLive(_10);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:64: 554:68
        _10 = _1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:64: 554:68
        _9 = IntEnFlags { bits: move _10 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:57: 554:70
        StorageDead(_10);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:69: 554:70
        _0 = Option::<IntEnFlags>::Some(move _9); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:21: 554:71
        StorageDead(_9);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:70: 554:71
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:17: 557:18
    }

    bb4: {
        _0 = Option::<IntEnFlags>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:556:21: 556:56
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:17: 557:18
    }

    bb5: {
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:557:17: 557:18
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:558:14: 558:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::from_bits_truncate(_1: u8) -> IntEnFlags {
    debug bits => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:563:45: 563:49
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:563:58: 563:62
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:53
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:53
    let mut _4: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:48

    bb0: {
        _4 = IntEnFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:46
                                         // + literal: Const { ty: fn() -> IntEnFlags {IntEnFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = (_4.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:53
        _2 = BitAnd(_1, move _3);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:53
        _0 = IntEnFlags { bits: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:17: 564:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:565:14: 565:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::from_bits_truncate(_1: u8) -> IntEnFlags {
    debug bits => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:563:45: 563:49
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:563:58: 563:62
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:53
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:34
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:53
    let mut _5: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:48

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:53
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:34
        _3 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:34
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:53
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:48
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:48
        _5 = IntEnFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:46
                                         // + literal: Const { ty: fn() -> IntEnFlags {IntEnFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = (_5.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:53
        _2 = BitAnd(move _3, move _4);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:53
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:52: 564:53
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:52: 564:53
        _0 = IntEnFlags { bits: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:17: 564:55
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:54: 564:55
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:565:13: 565:14
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:565:14: 565:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::from_bits_unchecked(_1: u8) -> IntEnFlags {
    debug bits => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:579:53: 579:57
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:579:66: 579:70

    bb0: {
        _0 = IntEnFlags { bits: _1 };    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:580:17: 580:30
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:581:14: 581:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::from_bits_unchecked(_1: u8) -> IntEnFlags {
    debug bits => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:579:53: 579:57
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:579:66: 579:70
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:580:24: 580:28

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:580:24: 580:28
        _2 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:580:24: 580:28
        _0 = IntEnFlags { bits: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:580:17: 580:30
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:580:29: 580:30
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:581:14: 581:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::is_empty(_1: &IntEnFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:585:35: 585:40
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:585:45: 585:49
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
    let mut _4: &IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
    let _5: IntEnFlags;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:45

    bb0: {
        _2 = IntEnFlags::bits(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:22: 586:26
                                         // + literal: Const { ty: for<'a> fn(&'a IntEnFlags) -> u8 {IntEnFlags::bits}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = IntEnFlags::empty() -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:43
                                         // + literal: Const { ty: fn() -> IntEnFlags {IntEnFlags::empty}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
        _3 = IntEnFlags::bits(move _4) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:46: 586:50
                                         // + literal: Const { ty: for<'a> fn(&'a IntEnFlags) -> u8 {IntEnFlags::bits}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Eq(move _2, move _3);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:52
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:587:14: 587:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::is_empty(_1: &IntEnFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:585:35: 585:40
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:585:45: 585:49
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
    let mut _3: &IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
    let mut _5: &IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
    let _6: IntEnFlags;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:45

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
        _3 = &(*_1);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
        _2 = IntEnFlags::bits(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:22: 586:26
                                         // + literal: Const { ty: for<'a> fn(&'a IntEnFlags) -> u8 {IntEnFlags::bits}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:27: 586:28
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:45
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:45
        _6 = IntEnFlags::empty() -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:43
                                         // + literal: Const { ty: fn() -> IntEnFlags {IntEnFlags::empty}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
        _4 = IntEnFlags::bits(move _5) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:46: 586:50
                                         // + literal: Const { ty: for<'a> fn(&'a IntEnFlags) -> u8 {IntEnFlags::bits}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:51: 586:52
        _0 = Eq(move _2, move _4);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:52
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:51: 586:52
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:51: 586:52
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:587:13: 587:14
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:587:14: 587:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::is_all(_1: &IntEnFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:591:33: 591:38
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:591:43: 591:47
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:45
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:33
    let mut _4: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:28
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:36: 592:45
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:49: 592:58

    bb0: {
        _4 = IntEnFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:26
                                         // + literal: Const { ty: fn() -> IntEnFlags {IntEnFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = (_4.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:33
        _5 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:36: 592:45
        _2 = BitOr(move _3, move _5);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:45
        _6 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:49: 592:58
        _0 = Eq(move _2, move _6);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:58
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:593:14: 593:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::is_all(_1: &IntEnFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:591:33: 591:38
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:591:43: 591:47
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:45
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:33
    let mut _4: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:28
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:36: 592:45
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:49: 592:58

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:45
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:33
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:28
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:28
        _4 = IntEnFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:26
                                         // + literal: Const { ty: fn() -> IntEnFlags {IntEnFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = (_4.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:33
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:36: 592:45
        _5 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:36: 592:45
        _2 = BitOr(move _3, move _5);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:45
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:44: 592:45
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:44: 592:45
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:49: 592:58
        _6 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:49: 592:58
        _0 = Eq(move _2, move _6);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:58
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:57: 592:58
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:57: 592:58
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:593:13: 593:14
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:593:14: 593:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::intersects(_1: &IntEnFlags, _2: IntEnFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:597:37: 597:42
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:597:44: 597:49
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:597:60: 597:64
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
    let mut _4: &IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
    let _5: IntEnFlags;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:56
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:54
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:41
    let mut _8: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:44: 598:54

    bb0: {
        _7 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:41
        _8 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:44: 598:54
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:54
        _5 = IntEnFlags { bits: move _6 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:56
        _4 = &_5;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
        _3 = IntEnFlags::is_empty(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:57: 598:65
                                         // + literal: Const { ty: for<'a> fn(&'a IntEnFlags) -> bool {IntEnFlags::is_empty}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Not(move _3);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:17: 598:67
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:599:14: 599:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::intersects(_1: &IntEnFlags, _2: IntEnFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:597:37: 597:42
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:597:44: 597:49
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:597:60: 597:64
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
    let mut _4: &IntEnFlags;             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
    let _5: IntEnFlags;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:56
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:54
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:41
    let mut _8: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:44: 598:54

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:56
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:54
        StorageLive(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:41
        _7 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:41
        StorageLive(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:44: 598:54
        _8 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:44: 598:54
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:54
        StorageDead(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:53: 598:54
        StorageDead(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:53: 598:54
        _5 = IntEnFlags { bits: move _6 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:56
        _4 = &_5;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:55: 598:56
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
        _3 = IntEnFlags::is_empty(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:57: 598:65
                                         // + literal: Const { ty: for<'a> fn(&'a IntEnFlags) -> bool {IntEnFlags::is_empty}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:66: 598:67
        _0 = Not(move _3);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:17: 598:67
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:66: 598:67
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:599:13: 599:14
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:599:14: 599:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::contains(_1: &IntEnFlags, _2: IntEnFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:603:35: 603:40
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:603:42: 603:47
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:603:58: 603:62
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:41
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:18: 604:27
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:30: 604:40
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:45: 604:55

    bb0: {
        _4 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:18: 604:27
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:30: 604:40
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:41
        _6 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:45: 604:55
        _0 = Eq(move _3, move _6);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:605:14: 605:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::contains(_1: &IntEnFlags, _2: IntEnFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:603:35: 603:40
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:603:42: 603:47
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:603:58: 603:62
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:41
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:18: 604:27
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:30: 604:40
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:45: 604:55

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:41
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:18: 604:27
        _4 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:18: 604:27
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:30: 604:40
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:30: 604:40
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:41
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:40: 604:41
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:40: 604:41
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:45: 604:55
        _6 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:45: 604:55
        _0 = Eq(move _3, move _6);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:55
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:54: 604:55
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:54: 604:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:605:14: 605:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::insert(_1: &mut IntEnFlags, _2: IntEnFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:609:27: 609:36
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:609:38: 609:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:609:51: 609:51
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:610:30: 610:40

    bb0: {
        _3 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:610:30: 610:40
        ((*_1).0: u8) = BitOr(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:610:17: 610:40
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:611:14: 611:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::remove(_1: &mut IntEnFlags, _2: IntEnFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:615:27: 615:36
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:615:38: 615:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:615:51: 615:51
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:616:30: 616:41
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:616:31: 616:41

    bb0: {
        _4 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:616:31: 616:41
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:616:30: 616:41
        ((*_1).0: u8) = BitAnd(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:616:17: 616:41
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:617:14: 617:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::toggle(_1: &mut IntEnFlags, _2: IntEnFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:621:27: 621:36
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:621:38: 621:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:621:51: 621:51
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:622:30: 622:40

    bb0: {
        _3 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:622:30: 622:40
        ((*_1).0: u8) = BitXor(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:622:17: 622:40
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:623:14: 623:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::set(_1: &mut IntEnFlags, _2: IntEnFlags, _3: bool) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:627:24: 627:33
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:627:35: 627:40
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:627:48: 627:53
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:627:61: 627:61
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:629:21: 629:39
    let _5: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:631:21: 631:39

    bb0: {
        switchInt(_3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:628:20: 628:25
    }

    bb1: {
        _4 = IntEnFlags::insert(_1, _2) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:629:21: 629:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:629:26: 629:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut IntEnFlags, IntEnFlags) {IntEnFlags::insert}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = IntEnFlags::remove(_1, _2) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:631:21: 631:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:631:26: 631:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut IntEnFlags, IntEnFlags) {IntEnFlags::remove}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:633:14: 633:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::intersection(_1: IntEnFlags, _2: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:647:39: 647:43
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:647:45: 647:50
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:647:61: 647:65
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:42: 648:52

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:39
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:42: 648:52
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:52
        _0 = IntEnFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:17: 648:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:649:14: 649:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::intersection(_1: IntEnFlags, _2: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:647:39: 647:43
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:647:45: 647:50
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:647:61: 647:65
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:42: 648:52

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:52
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:39
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:39
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:42: 648:52
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:42: 648:52
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:52
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:51: 648:52
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:51: 648:52
        _0 = IntEnFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:17: 648:54
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:53: 648:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:649:14: 649:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::union(_1: IntEnFlags, _2: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:664:32: 664:36
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:664:38: 664:43
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:664:54: 664:58
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:42: 665:52

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:39
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:42: 665:52
        _3 = BitOr(move _4, move _5);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:52
        _0 = IntEnFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:17: 665:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:666:14: 666:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::union(_1: IntEnFlags, _2: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:664:32: 664:36
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:664:38: 664:43
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:664:54: 664:58
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:42: 665:52

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:52
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:39
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:39
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:42: 665:52
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:42: 665:52
        _3 = BitOr(move _4, move _5);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:52
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:51: 665:52
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:51: 665:52
        _0 = IntEnFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:17: 665:54
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:53: 665:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:666:14: 666:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::difference(_1: IntEnFlags, _2: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:682:37: 682:41
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:682:43: 682:48
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:682:59: 682:63
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:53
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:42: 683:53
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:43: 683:53

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:39
        _6 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:43: 683:53
        _5 = Not(move _6);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:42: 683:53
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:53
        _0 = IntEnFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:17: 683:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:684:14: 684:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::difference(_1: IntEnFlags, _2: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:682:37: 682:41
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:682:43: 682:48
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:682:59: 682:63
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:53
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:42: 683:53
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:43: 683:53

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:53
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:39
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:39
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:42: 683:53
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:43: 683:53
        _6 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:43: 683:53
        _5 = Not(move _6);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:42: 683:53
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:52: 683:53
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:53
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:52: 683:53
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:52: 683:53
        _0 = IntEnFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:17: 683:55
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:54: 683:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:684:14: 684:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::symmetric_difference(_1: IntEnFlags, _2: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:701:47: 701:51
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:701:53: 701:58
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:701:69: 701:73
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:42: 702:52

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:39
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:42: 702:52
        _3 = BitXor(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:52
        _0 = IntEnFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:17: 702:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:703:14: 703:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::symmetric_difference(_1: IntEnFlags, _2: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:701:47: 701:51
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:701:53: 701:58
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:701:69: 701:73
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:42: 702:52

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:52
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:39
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:39
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:42: 702:52
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:42: 702:52
        _3 = BitXor(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:52
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:51: 702:52
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:51: 702:52
        _0 = IntEnFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:17: 702:54
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:53: 702:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:703:14: 703:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::complement(_1: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:720:37: 720:41
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:720:46: 720:50
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:42: 721:52
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:43: 721:52

    bb0: {
        _3 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:43: 721:52
        _2 = Not(move _3);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:42: 721:52
        _0 = IntEnFlags::from_bits_truncate(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:17: 721:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:17: 721:41
                                         // + literal: Const { ty: fn(u8) -> IntEnFlags {IntEnFlags::from_bits_truncate}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:722:14: 722:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::complement(_1: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:720:37: 720:41
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:720:46: 720:50
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:42: 721:52
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:43: 721:52

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:42: 721:52
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:43: 721:52
        _3 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:43: 721:52
        _2 = Not(move _3);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:42: 721:52
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:51: 721:52
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:17: 721:53
        _0 = IntEnFlags::from_bits_truncate(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:17: 721:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:17: 721:41
                                         // + literal: Const { ty: fn(u8) -> IntEnFlags {IntEnFlags::from_bits_truncate}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:52: 721:53
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:722:14: 722:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:726:9: 726:53>::bitor(_1: IntEnFlags, _2: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:731:22: 731:26
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:731:28: 731:33
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:731:49: 731:53
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:30: 732:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:30: 732:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:42: 732:52

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:30: 732:39
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:42: 732:52
        _3 = BitOr(move _4, move _5);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:30: 732:52
        _0 = IntEnFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:17: 732:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:733:14: 733:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:736:9: 736:59>::bitor_assign(_1: &mut IntEnFlags, _2: IntEnFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:739:29: 739:38
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:739:40: 739:45
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:739:53: 739:53
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:740:30: 740:40

    bb0: {
        _3 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:740:30: 740:40
        ((*_1).0: u8) = BitOr(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:740:17: 740:40
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:741:14: 741:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:744:9: 744:54>::bitxor(_1: IntEnFlags, _2: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:749:23: 749:27
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:749:29: 749:34
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:749:45: 749:49
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:30: 750:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:30: 750:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:42: 750:52

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:30: 750:39
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:42: 750:52
        _3 = BitXor(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:30: 750:52
        _0 = IntEnFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:17: 750:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:751:14: 751:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:754:9: 754:60>::bitxor_assign(_1: &mut IntEnFlags, _2: IntEnFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:757:30: 757:39
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:757:41: 757:46
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:757:54: 757:54
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:758:30: 758:40

    bb0: {
        _3 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:758:30: 758:40
        ((*_1).0: u8) = BitXor(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:758:17: 758:40
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:759:14: 759:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:762:9: 762:54>::bitand(_1: IntEnFlags, _2: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:767:23: 767:27
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:767:29: 767:34
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:767:45: 767:49
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:30: 768:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:30: 768:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:42: 768:52

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:30: 768:39
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:42: 768:52
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:30: 768:52
        _0 = IntEnFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:17: 768:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:769:14: 769:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:772:9: 772:60>::bitand_assign(_1: &mut IntEnFlags, _2: IntEnFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:775:30: 775:39
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:775:41: 775:46
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:775:54: 775:54
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:776:30: 776:40

    bb0: {
        _3 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:776:30: 776:40
        ((*_1).0: u8) = BitAnd(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:776:17: 776:40
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:777:14: 777:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:780:9: 780:51>::sub(_1: IntEnFlags, _2: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:785:20: 785:24
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:785:26: 785:31
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:785:42: 785:46
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:30: 786:53
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:30: 786:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:42: 786:53
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:43: 786:53

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:30: 786:39
        _6 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:43: 786:53
        _5 = Not(move _6);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:42: 786:53
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:30: 786:53
        _0 = IntEnFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:17: 786:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:787:14: 787:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:790:9: 790:57>::sub_assign(_1: &mut IntEnFlags, _2: IntEnFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:793:27: 793:36
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:793:38: 793:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:793:51: 793:51
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:794:30: 794:41
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:794:31: 794:41

    bb0: {
        _4 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:794:31: 794:41
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:794:30: 794:41
        ((*_1).0: u8) = BitAnd(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:794:17: 794:41
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:795:14: 795:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:798:9: 798:51>::not(_1: IntEnFlags) -> IntEnFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:803:20: 803:24
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:803:29: 803:33
    let mut _2: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:17: 804:42
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:30: 804:40
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:31: 804:40
    let mut _5: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:45: 804:56

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:31: 804:40
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:30: 804:40
        _2 = IntEnFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:17: 804:42
        _5 = IntEnFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:45: 804:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:45: 804:54
                                         // + literal: Const { ty: fn() -> IntEnFlags {IntEnFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <IntEnFlags as BitAnd>::bitand(move _2, move _5) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:17: 804:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:17: 804:56
                                         // + literal: Const { ty: fn(IntEnFlags, IntEnFlags) -> <IntEnFlags as BitAnd>::Output {<IntEnFlags as BitAnd>::bitand}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:805:14: 805:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:808:9: 808:66>::extend(_1: &mut IntEnFlags, _2: T) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:809:72: 809:81
    debug iterator => _2;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:809:83: 809:91
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:809:96: 809:96
    let mut _3: <T as core::iter::IntoIterator>::IntoIter; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    let mut _4: <T as core::iter::IntoIterator>::IntoIter; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    let _5: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    let mut _6: core::option::Option<IntEnFlags>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    let mut _7: &mut <T as core::iter::IntoIterator>::IntoIter; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    let mut _8: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:17: 812:18
    scope 1 {
        debug iter => _4;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
        let _9: IntEnFlags;              // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:21: 810:25
        scope 2 {
            debug item => _9;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:21: 810:25
        }
    }

    bb0: {
        _3 = <T as IntoIterator>::into_iter(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
                                         // + literal: Const { ty: fn(T) -> <T as IntoIterator>::IntoIter {<T as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _3;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
        goto -> bb2;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:17: 812:18
    }

    bb2: {
        _7 = &mut _4;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
        _6 = <<T as IntoIterator>::IntoIter as Iterator>::next(_7) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut <T as IntoIterator>::IntoIter) -> Option<<<T as IntoIterator>::IntoIter as Iterator>::Item> {<<T as IntoIterator>::IntoIter as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_6);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    }

    bb4: {
        _9 = ((_6 as Some).0: IntEnFlags); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:21: 810:25
        _5 = IntEnFlags::insert(_1, _9) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:811:21: 811:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:811:26: 811:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut IntEnFlags, IntEnFlags) {IntEnFlags::insert}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    }

    bb6: {
        drop(_4) -> [return: bb7, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:812:17: 812:18
    }

    bb7: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:813:14: 813:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:816:9: 816:72>::from_iter(_1: T) -> IntEnFlags {
    debug iterator => _1;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:817:75: 817:83
    let mut _0: IntEnFlags;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:817:91: 817:95
    let mut _2: IntEnFlags;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:818:21: 818:31
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:819:17: 819:40
    let mut _4: &mut IntEnFlags;         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:819:17: 819:40
    scope 1 {
        debug result => _2;              // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:818:21: 818:31
    }

    bb0: {
        _2 = IntEnFlags::empty() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:818:34: 818:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:818:34: 818:45
                                         // + literal: Const { ty: fn() -> IntEnFlags {IntEnFlags::empty}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _2;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:819:17: 819:40
        _3 = <IntEnFlags as Extend<IntEnFlags>>::extend::<T>(move _4, move _1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:819:17: 819:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:819:24: 819:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut IntEnFlags, T) {<IntEnFlags as Extend<IntEnFlags>>::extend::<T>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:820:17: 820:23
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:821:14: 821:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:24: 363:33>::eq(_1: &LineStsFlags, _2: &LineStsFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:24: 363:33
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:24: 363:33
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:24: 363:33
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21

    bb0: {
        _3 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _4 = ((*_2).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _0 = Eq(move _3, move _4);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:33: 363:33
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:35: 363:37>::assert_receiver_is_total_eq(_1: &LineStsFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:35: 363:37
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:35: 363:37
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:37: 363:37
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:39: 363:44>::clone(_1: &LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:39: 363:44
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:39: 363:44
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:39: 363:44
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:44: 363:44
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:46: 363:56>::partial_cmp(_1: &LineStsFlags, _2: &LineStsFlags) -> Option<core::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:46: 363:56
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:46: 363:56
    let mut _0: core::option::Option<core::cmp::Ordering>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:46: 363:56
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
    let _4: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _4 = &((*_2).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _0 = <u8 as PartialOrd>::partial_cmp(_3, _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> Option<core::cmp::Ordering> {<u8 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:56: 363:56
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:58: 363:61>::cmp(_1: &LineStsFlags, _2: &LineStsFlags) -> core::cmp::Ordering {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:58: 363:61
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:58: 363:61
    let mut _0: core::cmp::Ordering;     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:58: 363:61
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
    let _4: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _4 = &((*_2).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _0 = <u8 as Ord>::cmp(_3, _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> core::cmp::Ordering {<u8 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:61: 363:61
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:63: 363:67>::hash(_1: &LineStsFlags, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:63: 363:67
    debug state => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:63: 363:67
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:63: 363:67
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
        _0 = <u8 as Hash>::hash::<__H>(_3, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:365:13: 365:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b mut __H) {<u8 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:363:67: 363:67
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt(_1: &LineStsFlags, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:434:20: 434:25
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:434:27: 434:28
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:434:69: 434:95
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:471:21: 471:30
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:29: 474:34
    let mut _7: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    let mut _8: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:47
    let _9: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
    let mut _10: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
    let mut _11: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
    let mut _12: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:70
    let _13: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
    let mut _14: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
    let mut _17: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:29: 474:34
    let mut _18: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    let mut _19: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:47
    let _20: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
    let mut _21: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
    let mut _22: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
    let mut _23: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:70
    let _24: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
    let mut _25: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
    let mut _27: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:34: 481:43
    let mut _28: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:46: 481:65
    let mut _29: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:65
    let mut _30: &LineStsFlags;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:65
    let _31: LineStsFlags;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:58
    let mut _32: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:482:20: 482:30
    let mut _33: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:483:24: 483:30
    let mut _34: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:483:25: 483:30
    let mut _35: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
    let mut _36: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:43
    let _37: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:37: 484:42
    let mut _38: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:43: 484:44
    let mut _39: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
    let mut _40: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:38
    let _41: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:33: 487:37
    let mut _42: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:38: 487:39
    let mut _43: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
    let mut _44: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:70
    let _45: &u8;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:55: 488:66
    let mut _46: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:70: 488:71
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:490:20: 490:25
    let mut _48: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
    let mut _49: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:43
    let _50: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:33: 491:42
    let mut _51: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:43: 491:44
    scope 1 {
        debug first => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:471:21: 471:30
        let _26: u8;                     // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:21: 481:31
        scope 2 {
            debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();       // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
            scope 5 {
            }
        }
        scope 6 {
            debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
            scope 7 {
            }
        }
        scope 8 {
            debug val => const ();       // in scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
            scope 9 {
            }
        }
        scope 10 {
            debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 10 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
            scope 11 {
            }
        }
        scope 12 {
            debug val => const ();       // in scope 12 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
            scope 13 {
            }
        }
        scope 14 {
            debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 14 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
            scope 15 {
            }
        }
        scope 16 {
            debug val => const ();       // in scope 16 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
            scope 17 {
            }
        }
        scope 18 {
            debug extra_bits => _26;     // in scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:21: 481:31
            scope 19 {
                debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 19 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:43: 484:44
                scope 20 {
                }
            }
            scope 21 {
                debug val => const ();   // in scope 21 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
                scope 22 {
                }
            }
            scope 23 {
                debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 23 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:38: 487:39
                scope 24 {
                }
            }
            scope 25 {
                debug val => const ();   // in scope 25 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
                scope 26 {
                }
            }
            scope 27 {
                debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 27 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:70: 488:71
                scope 28 {
                }
            }
            scope 29 {
                debug val => const ();   // in scope 29 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
                scope 30 {
                }
            }
            scope 31 {
                debug residual => const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error); // in scope 31 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:43: 491:44
                scope 32 {
                }
            }
            scope 33 {
                debug val => const ();   // in scope 33 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
                scope 34 {
                }
            }
        }
    }

    bb0: {
        _3 = const true;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:471:33: 471:37
        _4 = <LineStsFlags as <LineStsFlags as core::fmt::Debug>::fmt::__BitFlags>::INPUT_FULL(_1) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:24: 473:51
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags) -> bool {<LineStsFlags as <LineStsFlags as core::fmt::Debug>::fmt::__BitFlags>::INPUT_FULL}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _4) -> [0: bb12, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
    }

    bb2: {
        _6 = _3;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:29: 474:34
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
        switchInt(move _5) -> [0: bb8, otherwise: bb3]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
    }

    bb3: {
        _9 = const " | ";                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = Formatter::<'_>::write_str(_2, _9) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:31: 475:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = <Result<(), core::fmt::Error> as Try>::branch(move _8) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = discriminant(_7);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
        switchInt(move _10) -> [0: bb8, 1: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    }

    bb6: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    }

    bb7: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb45, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb8: {
        _3 = const false;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:477:25: 477:38
        _13 = const "INPUT_FULL";        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = Formatter::<'_>::write_str(_2, _13) -> [return: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:27: 478:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb9: {
        _11 = <Result<(), core::fmt::Error> as Try>::branch(move _12) -> [return: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb10: {
        _14 = discriminant(_11);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
        switchInt(move _14) -> [0: bb12, 1: bb11, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
    }

    bb11: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb45, unwind unreachable]; // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb12: {
        _15 = <LineStsFlags as <LineStsFlags as core::fmt::Debug>::fmt::__BitFlags>::OUTPUT_EMPTY(_1) -> [return: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:24: 473:51
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags) -> bool {<LineStsFlags as <LineStsFlags as core::fmt::Debug>::fmt::__BitFlags>::OUTPUT_EMPTY}, val: Value(<ZST>) }
    }

    bb13: {
        switchInt(move _15) -> [0: bb23, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:473:46: 473:57
    }

    bb14: {
        _17 = _3;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:29: 474:34
        _16 = Not(move _17);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
        switchInt(move _16) -> [0: bb19, otherwise: bb15]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:474:28: 474:34
    }

    bb15: {
        _20 = const " | ";               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:41: 475:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = Formatter::<'_>::write_str(_2, _20) -> [return: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:31: 475:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb16: {
        _18 = <Result<(), core::fmt::Error> as Try>::branch(move _19) -> [return: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb17: {
        _21 = discriminant(_18);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
        switchInt(move _21) -> [0: bb19, 1: bb18, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
    }

    bb18: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb45, unwind unreachable]; // scope 11 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:29: 475:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:475:47: 475:48
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb19: {
        _3 = const false;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:477:25: 477:38
        _24 = const "OUTPUT_EMPTY";      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:37: 478:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _23 = Formatter::<'_>::write_str(_2, _24) -> [return: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:27: 478:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb20: {
        _22 = <Result<(), core::fmt::Error> as Try>::branch(move _23) -> [return: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb21: {
        _25 = discriminant(_22);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
        switchInt(move _25) -> [0: bb23, 1: bb22, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
    }

    bb22: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb45, unwind unreachable]; // scope 15 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:25: 478:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:478:70: 478:71
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb23: {
        _27 = ((*_1).0: u8);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:34: 481:43
        _31 = LineStsFlags::all() -> [return: bb24, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:56
                                         // + literal: Const { ty: fn() -> LineStsFlags {LineStsFlags::all}, val: Value(<ZST>) }
    }

    bb24: {
        _30 = &_31;                      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:65
        _29 = LineStsFlags::bits(move _30) -> [return: bb25, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:47: 481:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:59: 481:63
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags) -> u8 {LineStsFlags::bits}, val: Value(<ZST>) }
    }

    bb25: {
        _28 = Not(move _29);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:46: 481:65
        _26 = BitAnd(move _27, move _28); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:481:34: 481:65
        _32 = _26;                       // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:482:20: 482:30
        switchInt(move _32) -> [0: bb39, otherwise: bb26]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:482:20: 482:35
    }

    bb26: {
        _34 = _3;                        // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:483:25: 483:30
        _33 = Not(move _34);             // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:483:24: 483:30
        switchInt(move _33) -> [0: bb31, otherwise: bb27]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:483:24: 483:30
    }

    bb27: {
        _37 = const " | ";               // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:37: 484:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:37: 484:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _36 = Formatter::<'_>::write_str(_2, _37) -> [return: bb28, unwind unreachable]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:27: 484:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb28: {
        _35 = <Result<(), core::fmt::Error> as Try>::branch(move _36) -> [return: bb29, unwind unreachable]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb29: {
        _38 = discriminant(_35);         // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
        switchInt(move _38) -> [0: bb31, 1: bb30, otherwise: bb6]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
    }

    bb30: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb45, unwind unreachable]; // scope 20 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:25: 484:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:484:43: 484:44
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb31: {
        _3 = const false;                // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:486:21: 486:34
        _41 = const "0x";                // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:33: 487:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:33: 487:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _40 = Formatter::<'_>::write_str(_2, _41) -> [return: bb32, unwind unreachable]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:23: 487:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb32: {
        _39 = <Result<(), core::fmt::Error> as Try>::branch(move _40) -> [return: bb33, unwind unreachable]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb33: {
        _42 = discriminant(_39);         // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
        switchInt(move _42) -> [0: bb34, 1: bb35, otherwise: bb6]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
    }

    bb34: {
        _45 = &_26;                      // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:55: 488:66
        _44 = <u8 as LowerHex>::fmt(_45, _2) -> [return: bb36, unwind unreachable]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:54
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<u8 as LowerHex>::fmt}, val: Value(<ZST>) }
    }

    bb35: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb45, unwind unreachable]; // scope 24 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:21: 487:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:487:38: 487:39
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb36: {
        _43 = <Result<(), core::fmt::Error> as Try>::branch(move _44) -> [return: bb37, unwind unreachable]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb37: {
        _46 = discriminant(_43);         // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
        switchInt(move _46) -> [0: bb39, 1: bb38, otherwise: bb6]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
    }

    bb38: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb45, unwind unreachable]; // scope 28 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:21: 488:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:488:70: 488:71
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb39: {
        _47 = _3;                        // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:490:20: 490:25
        switchInt(move _47) -> [0: bb44, otherwise: bb40]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:490:20: 490:25
    }

    bb40: {
        _50 = const "(empty)";           // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:33: 491:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:33: 491:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _49 = Formatter::<'_>::write_str(_2, _50) -> [return: bb41, unwind unreachable]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:23: 491:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb41: {
        _48 = <Result<(), core::fmt::Error> as Try>::branch(move _49) -> [return: bb42, unwind unreachable]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>) -> ControlFlow<<Result<(), core::fmt::Error> as Try>::Residual, <Result<(), core::fmt::Error> as Try>::Output> {<Result<(), core::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb42: {
        _51 = discriminant(_48);         // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
        switchInt(move _51) -> [0: bb44, 1: bb43, otherwise: bb6]; // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
    }

    bb43: {
        _0 = <Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual(const Result::<Infallible, core::fmt::Error>::Err(core::fmt::Error)) -> [return: bb45, unwind unreachable]; // scope 32 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:21: 491:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:491:43: 491:44
                                         // + literal: Const { ty: fn(Result<Infallible, core::fmt::Error>) -> Result<(), core::fmt::Error> {<Result<(), core::fmt::Error> as FromResidual<Result<Infallible, core::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, core::fmt::Error>, val: Value(<ZST>) }
    }

    bb44: {
        _0 = Result::<(), core::fmt::Error>::Ok(const ()); // scope 18 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:493:17: 493:23
        goto -> bb45;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:494:14: 494:14
    }

    bb45: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:494:14: 494:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt::__BitFlags::INPUT_FULL(_1: &Self) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:34: 447:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:44: 447:48

    bb0: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:51: 447:56
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:58: 447:58
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt::__BitFlags::OUTPUT_EMPTY(_1: &Self) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:34: 447:39
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:44: 447:48

    bb0: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:51: 447:56
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:447:58: 447:58
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:454:17: 454:46>::INPUT_FULL(_1: &LineStsFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:460:38: 460:43
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:460:48: 460:52
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:52
    let mut _4: LineStsFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:75
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:70
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:65
    let mut _8: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:46
    let mut _9: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:55: 464:65
    let mut _10: LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
    let mut _11: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:75: 464:85
    let mut _12: LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80

    bb0: {
        _4 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::INPUT_FULL, [], None) }
        _3 = (_4.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:52
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb1: {
        _2 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb2: {
        _6 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:70
        _5 = Ne(move _6, const 0_u8);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:75
        _2 = move _5;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb3: {
        switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb4: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:462:37: 462:42
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:33: 465:34
    }

    bb5: {
        _8 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:46
        _10 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::INPUT_FULL, [], None) }
        _9 = (_10.0: u8);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:55: 464:65
        _7 = BitAnd(move _8, move _9);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:65
        _12 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::INPUT_FULL, [], None) }
        _11 = (_12.0: u8);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:75: 464:85
        _0 = Eq(move _7, move _11);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:85
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:33: 465:34
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:875:11: 875:11
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:433:9: 433:53>::fmt::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:454:17: 454:46>::OUTPUT_EMPTY(_1: &LineStsFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:460:38: 460:43
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:460:48: 460:52
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:52
    let mut _4: LineStsFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:75
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:70
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:65
    let mut _8: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:46
    let mut _9: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:55: 464:65
    let mut _10: LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
    let mut _11: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:75: 464:85
    let mut _12: LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80

    bb0: {
        _4 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:36: 461:47
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::OUTPUT_EMPTY, [], None) }
        _3 = (_4.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:52
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb1: {
        _2 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb2: {
        _6 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:70
        _5 = Ne(move _6, const 0_u8);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:61: 461:75
        _2 = move _5;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
        goto -> bb3;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb3: {
        switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:42: 461:75
    }

    bb4: {
        _0 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:462:37: 462:42
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:33: 465:34
    }

    bb5: {
        _8 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:46
        _10 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:49: 464:60
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::OUTPUT_EMPTY, [], None) }
        _9 = (_10.0: u8);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:55: 464:65
        _7 = BitAnd(move _8, move _9);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:65
        _12 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:69: 464:80
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::OUTPUT_EMPTY, [], None) }
        _11 = (_12.0: u8);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:75: 464:85
        _0 = Eq(move _7, move _11);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:464:37: 464:85
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:461:33: 465:34
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:875:11: 875:11
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:496:9: 496:54>::fmt(_1: &LineStsFlags, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:497:20: 497:25
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:497:27: 497:28
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:497:69: 497:95
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:498:49: 498:59

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:498:49: 498:59
        _0 = <u8 as Binary>::fmt(_3, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:498:17: 498:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:498:17: 498:48
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<u8 as Binary>::fmt}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:499:14: 499:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:501:9: 501:53>::fmt(_1: &LineStsFlags, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:502:20: 502:25
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:502:27: 502:28
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:502:69: 502:95
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:503:48: 503:58

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:503:48: 503:58
        _0 = <u8 as Octal>::fmt(_3, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:503:17: 503:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:503:17: 503:47
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<u8 as Octal>::fmt}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:504:14: 504:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:506:9: 506:56>::fmt(_1: &LineStsFlags, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:507:20: 507:25
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:507:27: 507:28
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:507:69: 507:95
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:508:51: 508:61

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:508:51: 508:61
        _0 = <u8 as LowerHex>::fmt(_3, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:508:17: 508:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:508:17: 508:50
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<u8 as LowerHex>::fmt}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:509:14: 509:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:511:9: 511:56>::fmt(_1: &LineStsFlags, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:512:20: 512:25
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:512:27: 512:28
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:512:69: 512:95
    let _3: &u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:513:51: 513:61

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:513:51: 513:61
        _0 = <u8 as UpperHex>::fmt(_3, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:513:17: 513:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:513:17: 513:50
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<u8 as UpperHex>::fmt}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:514:14: 514:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::INPUT_FULL: LineStsFlags = {
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:34: 521:38

    bb0: {
        _0 = LineStsFlags { bits: const 1_u8 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:41: 521:62
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:17: 521:63
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::OUTPUT_EMPTY: LineStsFlags = {
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:34: 521:38
    let mut _1: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:101:30: 101:36
    let mut _2: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:101:30: 101:36
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:101:30: 101:36

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:101:30: 101:36
        _2 = const 5_i32 as u32 (IntToInt); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:101:30: 101:36
        _3 = Lt(move _2, const 8_u32);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:101:30: 101:36
        assert(move _3, "attempt to shift left by `{}`, which would overflow", const 5_i32) -> [success: bb1, unwind: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:101:30: 101:36
    }

    bb1: {
        _1 = Shl(const 1_u8, const 5_i32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:101:30: 101:36
        _0 = LineStsFlags { bits: move _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:41: 521:62
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:61: 521:62
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:17: 521:63
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:521:17: 521:63
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::empty() -> LineStsFlags {
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:526:37: 526:41

    bb0: {
        _0 = LineStsFlags { bits: const 0_u8 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:527:17: 527:33
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:528:14: 528:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::empty() -> LineStsFlags {
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:526:37: 526:41

    bb0: {
        _0 = LineStsFlags { bits: const 0_u8 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:527:17: 527:33
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:528:14: 528:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all() -> LineStsFlags {
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:532:35: 532:39
    let mut _1: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51

    bb0: {
        _1 = BitOr(const _, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
        _0 = LineStsFlags { bits: move _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:9: 413:56
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:541:14: 541:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all() -> LineStsFlags {
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:532:35: 532:39
    let mut _1: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
        _1 = BitOr(const _, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:24: 413:51
        _0 = LineStsFlags { bits: move _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:9: 413:56
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:413:55: 413:56
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:541:14: 541:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all::__BitFlags::INPUT_FULL: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:98:26: 98:28

    bb0: {
        _0 = const 0_u8;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:400:35: 400:36
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:400:17: 400:37
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all::__BitFlags::OUTPUT_EMPTY: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:98:26: 98:28

    bb0: {
        _0 = const 0_u8;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:400:35: 400:36
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:400:17: 400:37
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:404:9: 404:38>::INPUT_FULL: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:98:26: 98:28
    let mut _1: LineStsFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
        _1 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::INPUT_FULL, [], None) }
        _0 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:45: 409:55
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:54: 409:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:55: 930:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::all::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:404:9: 404:38>::OUTPUT_EMPTY: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:98:26: 98:28
    let mut _1: LineStsFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
        _1 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:39: 409:50
                                         // + literal: Const { ty: LineStsFlags, val: Unevaluated(LineStsFlags::OUTPUT_EMPTY, [], None) }
        _0 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:45: 409:55
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:54: 409:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:409:55: 930:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::bits(_1: &LineStsFlags) -> u8 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:545:31: 545:36
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:98:26: 98:28

    bb0: {
        _0 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:546:17: 546:26
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:547:14: 547:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::bits(_1: &LineStsFlags) -> u8 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:545:31: 545:36
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uart_16550-0.2.18/src/lib.rs:98:26: 98:28

    bb0: {
        _0 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:546:17: 546:26
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:547:14: 547:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::from_bits(_1: u8) -> Option<LineStsFlags> {
    debug bits => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:552:36: 552:40
    let mut _0: core::option::Option<LineStsFlags>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:552:49: 552:84
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:48
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:28: 553:47
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
    let mut _5: &LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
    let _6: LineStsFlags;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:40
    let mut _7: LineStsFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:57: 554:70

    bb0: {
        _6 = LineStsFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:38
                                         // + literal: Const { ty: fn() -> LineStsFlags {LineStsFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_6;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
        _4 = LineStsFlags::bits(move _5) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:41: 553:45
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags) -> u8 {LineStsFlags::bits}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:28: 553:47
        _2 = BitAnd(_1, move _3);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:48
        switchInt(move _2) -> [0: bb3, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:53
    }

    bb3: {
        _7 = LineStsFlags { bits: _1 };  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:57: 554:70
        _0 = Option::<LineStsFlags>::Some(move _7); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:21: 554:71
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:17: 557:18
    }

    bb4: {
        _0 = Option::<LineStsFlags>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:556:21: 556:56
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:17: 557:18
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:558:14: 558:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::from_bits(_1: u8) -> Option<LineStsFlags> {
    debug bits => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:552:36: 552:40
    let mut _0: core::option::Option<LineStsFlags>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:552:49: 552:84
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:53
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:48
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:21: 553:25
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:28: 553:47
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
    let mut _7: &LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
    let _8: LineStsFlags;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:40
    let mut _9: LineStsFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:57: 554:70
    let mut _10: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:64: 554:68

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:53
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:48
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:21: 553:25
        _4 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:21: 553:25
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:28: 553:47
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
        StorageLive(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
        StorageLive(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:40
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:40
        _8 = LineStsFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:38
                                         // + literal: Const { ty: fn() -> LineStsFlags {LineStsFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_8;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
        _6 = LineStsFlags::bits(move _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:29: 553:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:41: 553:45
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags) -> u8 {LineStsFlags::bits}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:46: 553:47
        _5 = Not(move _6);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:28: 553:47
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:46: 553:47
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:48
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:47: 553:48
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:47: 553:48
        _2 = Eq(move _3, const 0_u8);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:53
        StorageDead(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:52: 553:53
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:52: 553:53
        switchInt(move _2) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:20: 553:53
    }

    bb3: {
        StorageLive(_9);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:57: 554:70
        StorageLive(_10);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:64: 554:68
        _10 = _1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:64: 554:68
        _9 = LineStsFlags { bits: move _10 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:57: 554:70
        StorageDead(_10);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:69: 554:70
        _0 = Option::<LineStsFlags>::Some(move _9); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:21: 554:71
        StorageDead(_9);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:554:70: 554:71
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:17: 557:18
    }

    bb4: {
        _0 = Option::<LineStsFlags>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:556:21: 556:56
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:553:17: 557:18
    }

    bb5: {
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:557:17: 557:18
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:558:14: 558:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::from_bits_truncate(_1: u8) -> LineStsFlags {
    debug bits => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:563:45: 563:49
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:563:58: 563:62
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:53
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:53
    let mut _4: LineStsFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:48

    bb0: {
        _4 = LineStsFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:46
                                         // + literal: Const { ty: fn() -> LineStsFlags {LineStsFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = (_4.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:53
        _2 = BitAnd(_1, move _3);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:53
        _0 = LineStsFlags { bits: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:17: 564:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:565:14: 565:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::from_bits_truncate(_1: u8) -> LineStsFlags {
    debug bits => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:563:45: 563:49
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:563:58: 563:62
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:53
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:34
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:53
    let mut _5: LineStsFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:48

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:53
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:34
        _3 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:34
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:53
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:48
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:48
        _5 = LineStsFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:46
                                         // + literal: Const { ty: fn() -> LineStsFlags {LineStsFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = (_5.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:37: 564:53
        _2 = BitAnd(move _3, move _4);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:30: 564:53
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:52: 564:53
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:52: 564:53
        _0 = LineStsFlags { bits: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:17: 564:55
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:564:54: 564:55
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:565:13: 565:14
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:565:14: 565:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::from_bits_unchecked(_1: u8) -> LineStsFlags {
    debug bits => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:579:53: 579:57
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:579:66: 579:70

    bb0: {
        _0 = LineStsFlags { bits: _1 };  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:580:17: 580:30
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:581:14: 581:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::from_bits_unchecked(_1: u8) -> LineStsFlags {
    debug bits => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:579:53: 579:57
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:579:66: 579:70
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:580:24: 580:28

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:580:24: 580:28
        _2 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:580:24: 580:28
        _0 = LineStsFlags { bits: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:580:17: 580:30
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:580:29: 580:30
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:581:14: 581:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::is_empty(_1: &LineStsFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:585:35: 585:40
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:585:45: 585:49
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
    let mut _4: &LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
    let _5: LineStsFlags;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:45

    bb0: {
        _2 = LineStsFlags::bits(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:22: 586:26
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags) -> u8 {LineStsFlags::bits}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = LineStsFlags::empty() -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:43
                                         // + literal: Const { ty: fn() -> LineStsFlags {LineStsFlags::empty}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
        _3 = LineStsFlags::bits(move _4) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:46: 586:50
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags) -> u8 {LineStsFlags::bits}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Eq(move _2, move _3);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:52
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:587:14: 587:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::is_empty(_1: &LineStsFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:585:35: 585:40
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:585:45: 585:49
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
    let mut _3: &LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
    let mut _5: &LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
    let _6: LineStsFlags;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:45

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
        _3 = &(*_1);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
        _2 = LineStsFlags::bits(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:22: 586:26
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags) -> u8 {LineStsFlags::bits}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:27: 586:28
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:45
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:45
        _6 = LineStsFlags::empty() -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:43
                                         // + literal: Const { ty: fn() -> LineStsFlags {LineStsFlags::empty}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
        _4 = LineStsFlags::bits(move _5) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:32: 586:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:46: 586:50
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags) -> u8 {LineStsFlags::bits}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:51: 586:52
        _0 = Eq(move _2, move _4);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:17: 586:52
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:51: 586:52
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:586:51: 586:52
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:587:13: 587:14
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:587:14: 587:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::is_all(_1: &LineStsFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:591:33: 591:38
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:591:43: 591:47
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:45
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:33
    let mut _4: LineStsFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:28
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:36: 592:45
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:49: 592:58

    bb0: {
        _4 = LineStsFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:26
                                         // + literal: Const { ty: fn() -> LineStsFlags {LineStsFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = (_4.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:33
        _5 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:36: 592:45
        _2 = BitOr(move _3, move _5);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:45
        _6 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:49: 592:58
        _0 = Eq(move _2, move _6);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:58
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:593:14: 593:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::is_all(_1: &LineStsFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:591:33: 591:38
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:591:43: 591:47
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:45
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:33
    let mut _4: LineStsFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:28
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:36: 592:45
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:49: 592:58

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:45
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:33
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:28
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:28
        _4 = LineStsFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:26
                                         // + literal: Const { ty: fn() -> LineStsFlags {LineStsFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = (_4.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:33
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:36: 592:45
        _5 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:36: 592:45
        _2 = BitOr(move _3, move _5);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:45
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:44: 592:45
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:44: 592:45
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:49: 592:58
        _6 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:49: 592:58
        _0 = Eq(move _2, move _6);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:17: 592:58
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:57: 592:58
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:592:57: 592:58
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:593:13: 593:14
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:593:14: 593:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::intersects(_1: &LineStsFlags, _2: LineStsFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:597:37: 597:42
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:597:44: 597:49
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:597:60: 597:64
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
    let mut _4: &LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
    let _5: LineStsFlags;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:56
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:54
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:41
    let mut _8: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:44: 598:54

    bb0: {
        _7 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:41
        _8 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:44: 598:54
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:54
        _5 = LineStsFlags { bits: move _6 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:56
        _4 = &_5;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
        _3 = LineStsFlags::is_empty(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:57: 598:65
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags) -> bool {LineStsFlags::is_empty}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Not(move _3);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:17: 598:67
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:599:14: 599:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::intersects(_1: &LineStsFlags, _2: LineStsFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:597:37: 597:42
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:597:44: 597:49
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:597:60: 597:64
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
    let mut _4: &LineStsFlags;           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
    let _5: LineStsFlags;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:56
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:54
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:41
    let mut _8: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:44: 598:54

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:56
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:54
        StorageLive(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:41
        _7 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:41
        StorageLive(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:44: 598:54
        _8 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:44: 598:54
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:32: 598:54
        StorageDead(_8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:53: 598:54
        StorageDead(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:53: 598:54
        _5 = LineStsFlags { bits: move _6 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:56
        _4 = &_5;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:55: 598:56
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
        _3 = LineStsFlags::is_empty(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:18: 598:67
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:57: 598:65
                                         // + literal: Const { ty: for<'a> fn(&'a LineStsFlags) -> bool {LineStsFlags::is_empty}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:66: 598:67
        _0 = Not(move _3);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:17: 598:67
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:598:66: 598:67
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:599:13: 599:14
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:599:14: 599:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::contains(_1: &LineStsFlags, _2: LineStsFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:603:35: 603:40
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:603:42: 603:47
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:603:58: 603:62
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:41
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:18: 604:27
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:30: 604:40
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:45: 604:55

    bb0: {
        _4 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:18: 604:27
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:30: 604:40
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:41
        _6 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:45: 604:55
        _0 = Eq(move _3, move _6);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:605:14: 605:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::contains(_1: &LineStsFlags, _2: LineStsFlags) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:603:35: 603:40
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:603:42: 603:47
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:603:58: 603:62
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:41
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:18: 604:27
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:30: 604:40
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:45: 604:55

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:41
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:18: 604:27
        _4 = ((*_1).0: u8);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:18: 604:27
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:30: 604:40
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:30: 604:40
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:41
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:40: 604:41
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:40: 604:41
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:45: 604:55
        _6 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:45: 604:55
        _0 = Eq(move _3, move _6);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:17: 604:55
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:54: 604:55
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:604:54: 604:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:605:14: 605:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::insert(_1: &mut LineStsFlags, _2: LineStsFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:609:27: 609:36
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:609:38: 609:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:609:51: 609:51
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:610:30: 610:40

    bb0: {
        _3 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:610:30: 610:40
        ((*_1).0: u8) = BitOr(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:610:17: 610:40
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:611:14: 611:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::remove(_1: &mut LineStsFlags, _2: LineStsFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:615:27: 615:36
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:615:38: 615:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:615:51: 615:51
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:616:30: 616:41
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:616:31: 616:41

    bb0: {
        _4 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:616:31: 616:41
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:616:30: 616:41
        ((*_1).0: u8) = BitAnd(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:616:17: 616:41
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:617:14: 617:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::toggle(_1: &mut LineStsFlags, _2: LineStsFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:621:27: 621:36
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:621:38: 621:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:621:51: 621:51
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:622:30: 622:40

    bb0: {
        _3 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:622:30: 622:40
        ((*_1).0: u8) = BitXor(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:622:17: 622:40
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:623:14: 623:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::set(_1: &mut LineStsFlags, _2: LineStsFlags, _3: bool) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:627:24: 627:33
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:627:35: 627:40
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:627:48: 627:53
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:627:61: 627:61
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:629:21: 629:39
    let _5: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:631:21: 631:39

    bb0: {
        switchInt(_3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:628:20: 628:25
    }

    bb1: {
        _4 = LineStsFlags::insert(_1, _2) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:629:21: 629:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:629:26: 629:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut LineStsFlags, LineStsFlags) {LineStsFlags::insert}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = LineStsFlags::remove(_1, _2) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:631:21: 631:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:631:26: 631:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut LineStsFlags, LineStsFlags) {LineStsFlags::remove}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:633:14: 633:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::intersection(_1: LineStsFlags, _2: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:647:39: 647:43
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:647:45: 647:50
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:647:61: 647:65
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:42: 648:52

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:39
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:42: 648:52
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:52
        _0 = LineStsFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:17: 648:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:649:14: 649:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::intersection(_1: LineStsFlags, _2: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:647:39: 647:43
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:647:45: 647:50
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:647:61: 647:65
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:42: 648:52

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:52
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:39
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:39
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:42: 648:52
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:42: 648:52
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:30: 648:52
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:51: 648:52
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:51: 648:52
        _0 = LineStsFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:17: 648:54
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:648:53: 648:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:649:14: 649:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::union(_1: LineStsFlags, _2: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:664:32: 664:36
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:664:38: 664:43
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:664:54: 664:58
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:42: 665:52

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:39
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:42: 665:52
        _3 = BitOr(move _4, move _5);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:52
        _0 = LineStsFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:17: 665:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:666:14: 666:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::union(_1: LineStsFlags, _2: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:664:32: 664:36
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:664:38: 664:43
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:664:54: 664:58
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:42: 665:52

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:52
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:39
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:39
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:42: 665:52
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:42: 665:52
        _3 = BitOr(move _4, move _5);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:30: 665:52
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:51: 665:52
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:51: 665:52
        _0 = LineStsFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:17: 665:54
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:665:53: 665:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:666:14: 666:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::difference(_1: LineStsFlags, _2: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:682:37: 682:41
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:682:43: 682:48
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:682:59: 682:63
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:53
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:42: 683:53
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:43: 683:53

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:39
        _6 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:43: 683:53
        _5 = Not(move _6);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:42: 683:53
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:53
        _0 = LineStsFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:17: 683:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:684:14: 684:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::difference(_1: LineStsFlags, _2: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:682:37: 682:41
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:682:43: 682:48
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:682:59: 682:63
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:53
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:42: 683:53
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:43: 683:53

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:53
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:39
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:39
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:42: 683:53
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:43: 683:53
        _6 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:43: 683:53
        _5 = Not(move _6);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:42: 683:53
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:52: 683:53
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:30: 683:53
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:52: 683:53
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:52: 683:53
        _0 = LineStsFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:17: 683:55
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:683:54: 683:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:684:14: 684:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::symmetric_difference(_1: LineStsFlags, _2: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:701:47: 701:51
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:701:53: 701:58
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:701:69: 701:73
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:42: 702:52

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:39
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:42: 702:52
        _3 = BitXor(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:52
        _0 = LineStsFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:17: 702:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:703:14: 703:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::symmetric_difference(_1: LineStsFlags, _2: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:701:47: 701:51
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:701:53: 701:58
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:701:69: 701:73
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:42: 702:52

    bb0: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:52
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:39
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:39
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:42: 702:52
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:42: 702:52
        _3 = BitXor(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:30: 702:52
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:51: 702:52
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:51: 702:52
        _0 = LineStsFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:17: 702:54
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:702:53: 702:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:703:14: 703:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::complement(_1: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:720:37: 720:41
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:720:46: 720:50
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:42: 721:52
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:43: 721:52

    bb0: {
        _3 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:43: 721:52
        _2 = Not(move _3);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:42: 721:52
        _0 = LineStsFlags::from_bits_truncate(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:17: 721:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:17: 721:41
                                         // + literal: Const { ty: fn(u8) -> LineStsFlags {LineStsFlags::from_bits_truncate}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:722:14: 722:14
    }
}

// MIR FOR CTFE
fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:518:9: 518:23>::complement(_1: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:720:37: 720:41
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:720:46: 720:50
    let mut _2: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:42: 721:52
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:43: 721:52

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:42: 721:52
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:43: 721:52
        _3 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:43: 721:52
        _2 = Not(move _3);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:42: 721:52
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:51: 721:52
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:17: 721:53
        _0 = LineStsFlags::from_bits_truncate(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:17: 721:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:17: 721:41
                                         // + literal: Const { ty: fn(u8) -> LineStsFlags {LineStsFlags::from_bits_truncate}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:721:52: 721:53
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:722:14: 722:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:726:9: 726:53>::bitor(_1: LineStsFlags, _2: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:731:22: 731:26
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:731:28: 731:33
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:731:49: 731:53
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:30: 732:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:30: 732:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:42: 732:52

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:30: 732:39
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:42: 732:52
        _3 = BitOr(move _4, move _5);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:30: 732:52
        _0 = LineStsFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:732:17: 732:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:733:14: 733:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:736:9: 736:59>::bitor_assign(_1: &mut LineStsFlags, _2: LineStsFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:739:29: 739:38
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:739:40: 739:45
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:739:53: 739:53
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:740:30: 740:40

    bb0: {
        _3 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:740:30: 740:40
        ((*_1).0: u8) = BitOr(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:740:17: 740:40
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:741:14: 741:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:744:9: 744:54>::bitxor(_1: LineStsFlags, _2: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:749:23: 749:27
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:749:29: 749:34
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:749:45: 749:49
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:30: 750:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:30: 750:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:42: 750:52

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:30: 750:39
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:42: 750:52
        _3 = BitXor(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:30: 750:52
        _0 = LineStsFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:750:17: 750:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:751:14: 751:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:754:9: 754:60>::bitxor_assign(_1: &mut LineStsFlags, _2: LineStsFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:757:30: 757:39
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:757:41: 757:46
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:757:54: 757:54
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:758:30: 758:40

    bb0: {
        _3 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:758:30: 758:40
        ((*_1).0: u8) = BitXor(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:758:17: 758:40
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:759:14: 759:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:762:9: 762:54>::bitand(_1: LineStsFlags, _2: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:767:23: 767:27
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:767:29: 767:34
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:767:45: 767:49
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:30: 768:52
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:30: 768:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:42: 768:52

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:30: 768:39
        _5 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:42: 768:52
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:30: 768:52
        _0 = LineStsFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:768:17: 768:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:769:14: 769:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:772:9: 772:60>::bitand_assign(_1: &mut LineStsFlags, _2: LineStsFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:775:30: 775:39
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:775:41: 775:46
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:775:54: 775:54
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:776:30: 776:40

    bb0: {
        _3 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:776:30: 776:40
        ((*_1).0: u8) = BitAnd(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:776:17: 776:40
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:777:14: 777:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:780:9: 780:51>::sub(_1: LineStsFlags, _2: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:785:20: 785:24
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:785:26: 785:31
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:785:42: 785:46
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:30: 786:53
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:30: 786:39
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:42: 786:53
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:43: 786:53

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:30: 786:39
        _6 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:43: 786:53
        _5 = Not(move _6);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:42: 786:53
        _3 = BitAnd(move _4, move _5);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:30: 786:53
        _0 = LineStsFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:786:17: 786:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:787:14: 787:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:790:9: 790:57>::sub_assign(_1: &mut LineStsFlags, _2: LineStsFlags) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:793:27: 793:36
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:793:38: 793:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:793:51: 793:51
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:794:30: 794:41
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:794:31: 794:41

    bb0: {
        _4 = (_2.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:794:31: 794:41
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:794:30: 794:41
        ((*_1).0: u8) = BitAnd(((*_1).0: u8), move _3); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:794:17: 794:41
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:795:14: 795:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:798:9: 798:51>::not(_1: LineStsFlags) -> LineStsFlags {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:803:20: 803:24
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:803:29: 803:33
    let mut _2: LineStsFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:17: 804:42
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:30: 804:40
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:31: 804:40
    let mut _5: LineStsFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:45: 804:56

    bb0: {
        _4 = (_1.0: u8);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:31: 804:40
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:30: 804:40
        _2 = LineStsFlags { bits: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:17: 804:42
        _5 = LineStsFlags::all() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:45: 804:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:45: 804:54
                                         // + literal: Const { ty: fn() -> LineStsFlags {LineStsFlags::all}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <LineStsFlags as BitAnd>::bitand(move _2, move _5) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:17: 804:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:804:17: 804:56
                                         // + literal: Const { ty: fn(LineStsFlags, LineStsFlags) -> <LineStsFlags as BitAnd>::Output {<LineStsFlags as BitAnd>::bitand}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:805:14: 805:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:808:9: 808:66>::extend(_1: &mut LineStsFlags, _2: T) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:809:72: 809:81
    debug iterator => _2;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:809:83: 809:91
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:809:96: 809:96
    let mut _3: <T as core::iter::IntoIterator>::IntoIter; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    let mut _4: <T as core::iter::IntoIterator>::IntoIter; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    let _5: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    let mut _6: core::option::Option<LineStsFlags>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    let mut _7: &mut <T as core::iter::IntoIterator>::IntoIter; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    let mut _8: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:17: 812:18
    scope 1 {
        debug iter => _4;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
        let _9: LineStsFlags;            // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:21: 810:25
        scope 2 {
            debug item => _9;            // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:21: 810:25
        }
    }

    bb0: {
        _3 = <T as IntoIterator>::into_iter(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
                                         // + literal: Const { ty: fn(T) -> <T as IntoIterator>::IntoIter {<T as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _3;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
        goto -> bb2;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:17: 812:18
    }

    bb2: {
        _7 = &mut _4;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
        _6 = <<T as IntoIterator>::IntoIter as Iterator>::next(_7) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut <T as IntoIterator>::IntoIter) -> Option<<<T as IntoIterator>::IntoIter as Iterator>::Item> {<<T as IntoIterator>::IntoIter as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_6);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    }

    bb4: {
        _9 = ((_6 as Some).0: LineStsFlags); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:21: 810:25
        _5 = LineStsFlags::insert(_1, _9) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:811:21: 811:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:811:26: 811:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut LineStsFlags, LineStsFlags) {LineStsFlags::insert}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:810:29: 810:37
    }

    bb6: {
        drop(_4) -> [return: bb7, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:812:17: 812:18
    }

    bb7: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:813:14: 813:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:816:9: 816:72>::from_iter(_1: T) -> LineStsFlags {
    debug iterator => _1;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:817:75: 817:83
    let mut _0: LineStsFlags;            // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:817:91: 817:95
    let mut _2: LineStsFlags;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:818:21: 818:31
    let _3: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:819:17: 819:40
    let mut _4: &mut LineStsFlags;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:819:17: 819:40
    scope 1 {
        debug result => _2;              // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:818:21: 818:31
    }

    bb0: {
        _2 = LineStsFlags::empty() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:818:34: 818:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:818:34: 818:45
                                         // + literal: Const { ty: fn() -> LineStsFlags {LineStsFlags::empty}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _2;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:819:17: 819:40
        _3 = <LineStsFlags as Extend<LineStsFlags>>::extend::<T>(move _4, move _1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:819:17: 819:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:819:24: 819:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut LineStsFlags, T) {<LineStsFlags as Extend<LineStsFlags>>::extend::<T>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:820:17: 820:23
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs:821:14: 821:14
    }
}
