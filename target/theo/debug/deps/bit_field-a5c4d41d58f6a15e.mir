// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::BIT_LENGTH: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:31: 212:36
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
    let mut _2: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
        _1 = core::mem::size_of::<u8>() -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:67
                                         // + literal: Const { ty: fn() -> usize {core::mem::size_of::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = CheckedMul(_1, const 8_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 8_usize) -> [success: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
    }

    bb2: {
        _0 = move (_2.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:81: 212:82
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bit(_1: &u8, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:24: 215:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:31: 215:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:46: 215:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
    let mut _5: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
    let mut _8: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36

    bb0: {
        _4 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    }

    bb1: {
        _5 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
        _9 = Lt(_2, const 8_usize);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        assert(move _9, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    }

    bb3: {
        _8 = Shl(const 1_u8, _2);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
        _0 = Ne(move _6, const 0_u8);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:219:14: 219:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bits(_1: &u8, _2: T) -> u8 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:48: 222:53
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:55: 222:60
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:68: 222:72
    let _3: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
    let mut _8: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
    let mut _11: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
    let mut _12: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
    let mut _17: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _19: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _20: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
    let mut _23: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    let mut _29: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    scope 1 {
        debug range => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
        let _18: u8;                     // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        scope 2 {
            debug bits => _18;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        }
    }

    bb0: {
        _4 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
        _3 = to_regular_range::<T>(_4, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (_3.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
        _6 = Lt(move _7, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    }

    bb2: {
        _8 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
        _10 = Le(move _11, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
        _9 = Not(move _10);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    }

    bb4: {
        _12 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _15 = (_3.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
        _16 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
        _14 = Lt(move _15, move _16);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    }

    bb6: {
        _17 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _20 = (*_1);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
        _22 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
        _23 = CheckedSub(const _, _22);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _22) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    }

    bb8: {
        _21 = move (_23.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        _24 = Lt(_21, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        assert(move _24, "attempt to shift left by `{}`, which would overflow", _21) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    }

    bb9: {
        _19 = Shl(move _20, move _21);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        _26 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
        _27 = CheckedSub(const _, _26);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _26) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    }

    bb10: {
        _25 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        _28 = Lt(_25, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        assert(move _28, "attempt to shift right by `{}`, which would overflow", _25) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    }

    bb11: {
        _18 = Shr(move _19, move _25);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        _29 = (_3.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
        _30 = Lt(_29, const 8_usize);    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        assert(move _30, "attempt to shift right by `{}`, which would overflow", _29) -> [success: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    }

    bb12: {
        _0 = Shr(_18, move _29);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        drop(_2) -> [return: bb13, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:13: 234:14
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:14: 234:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bit(_1: &mut u8, _2: usize, _3: bool) -> &mut u8 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:24: 237:33
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:35: 237:38
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:47: 237:52
    let mut _0: &mut u8;                 // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:63: 237:72
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
    let mut _6: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _7: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _9: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
    let mut _10: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41

    bb0: {
        _5 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
        _4 = Not(move _5);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    }

    bb1: {
        _6 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(_3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:20: 240:25
    }

    bb3: {
        _8 = Lt(_2, const 8_usize);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        assert(move _8, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    }

    bb4: {
        _11 = Lt(_2, const 8_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        assert(move _11, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    }

    bb5: {
        _7 = Shl(const 1_u8, _2);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        (*_1) = BitOr((*_1), move _7);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:21: 241:38
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb6: {
        _10 = Shl(const 1_u8, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
        (*_1) = BitAnd((*_1), move _9);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:21: 243:41
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb7: {
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:246:17: 246:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:247:14: 247:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bits(_1: &mut u8, _2: T, _3: u8) -> &mut u8 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:48: 250:57
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:59: 250:64
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:69: 250:74
    let mut _0: &mut u8;                 // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:85: 250:94
    let _4: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
    let mut _9: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
    let mut _13: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
    let mut _18: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
    let mut _21: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _22: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _24: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _30: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _31: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
    let mut _34: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _35: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _37: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _39: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _40: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _41: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _42: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _43: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
    let mut _44: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _45: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
    let mut _46: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _48: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _49: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
    let mut _50: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _52: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _54: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _56: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
    let mut _57: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
    let mut _58: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    let mut _59: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    scope 1 {
        debug range => _4;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
        let _38: u8;                     // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        scope 2 {
            debug bitmask => _38;        // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        }
    }

    bb0: {
        _5 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
        _4 = to_regular_range::<T>(_5, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (_4.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
        _7 = Lt(move _8, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
        _6 = Not(move _7);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    }

    bb2: {
        _9 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
        _11 = Le(move _12, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    }

    bb4: {
        _13 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _16 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
        _17 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
        _15 = Lt(move _16, move _17);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
        _14 = Not(move _15);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
        switchInt(move _14) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    }

    bb6: {
        _18 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _25 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
        _26 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
        _27 = CheckedSub(_25, _26);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _25, move _26) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    }

    bb8: {
        _24 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        _28 = CheckedSub(const _, _24);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _24) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    }

    bb9: {
        _23 = move (_28.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        _29 = Lt(_23, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        assert(move _29, "attempt to shift left by `{}`, which would overflow", _23) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    }

    bb10: {
        _22 = Shl(_3, move _23);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        _32 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
        _33 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
        _34 = CheckedSub(_32, _33);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", move _32, move _33) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    }

    bb11: {
        _31 = move (_34.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        _35 = CheckedSub(const _, _31);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _31) -> [success: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    }

    bb12: {
        _30 = move (_35.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        _36 = Lt(_30, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        assert(move _36, "attempt to shift right by `{}`, which would overflow", _30) -> [success: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    }

    bb13: {
        _21 = Shr(move _22, move _30);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        _20 = Eq(move _21, _3);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
        _19 = Not(move _20);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
        switchInt(move _19) -> [0: bb15, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    }

    bb14: {
        _37 = panic(const "value does not fit into bit range") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:258:25: 258:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _43 = Not(const 0_u8);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
        _45 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
        _46 = CheckedSub(const _, _45);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        assert(!move (_46.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _45) -> [success: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    }

    bb16: {
        _44 = move (_46.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        _47 = Lt(_44, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        assert(move _47, "attempt to shift left by `{}`, which would overflow", _44) -> [success: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    }

    bb17: {
        _42 = Shl(move _43, move _44);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        _49 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
        _50 = CheckedSub(const _, _49);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _49) -> [success: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    }

    bb18: {
        _48 = move (_50.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        _51 = Lt(_48, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        assert(move _51, "attempt to shift right by `{}`, which would overflow", _48) -> [success: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    }

    bb19: {
        _41 = Shr(move _42, move _48);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        _52 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
        _53 = Lt(_52, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        assert(move _53, "attempt to shift right by `{}`, which would overflow", _52) -> [success: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    }

    bb20: {
        _40 = Shr(move _41, move _52);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        _54 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
        _55 = Lt(_54, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        assert(move _55, "attempt to shift left by `{}`, which would overflow", _54) -> [success: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    }

    bb21: {
        _39 = Shl(move _40, move _54);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        _38 = Not(move _39);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:37: 262:64
        _57 = (*_1);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
        _56 = BitAnd(move _57, _38);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
        _59 = (_4.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
        _60 = Lt(_59, const 8_usize);    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        assert(move _60, "attempt to shift left by `{}`, which would overflow", _59) -> [success: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    }

    bb22: {
        _58 = Shl(_3, move _59);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        (*_1) = BitOr(move _56, move _58); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:17: 265:67
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:267:17: 267:21
        drop(_2) -> [return: bb23, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:13: 268:14
    }

    bb23: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:14: 268:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::BIT_LENGTH: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:31: 212:36
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
    let mut _2: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
        _1 = core::mem::size_of::<u16>() -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:67
                                         // + literal: Const { ty: fn() -> usize {core::mem::size_of::<u16>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = CheckedMul(_1, const 8_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 8_usize) -> [success: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
    }

    bb2: {
        _0 = move (_2.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:81: 212:82
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bit(_1: &u16, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:24: 215:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:31: 215:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:46: 215:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
    let mut _5: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _6: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
    let mut _7: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
    let mut _8: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36

    bb0: {
        _4 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    }

    bb1: {
        _5 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
        _9 = Lt(_2, const 16_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        assert(move _9, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    }

    bb3: {
        _8 = Shl(const 1_u16, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
        _0 = Ne(move _6, const 0_u16);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:219:14: 219:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bits(_1: &u16, _2: T) -> u16 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:48: 222:53
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:55: 222:60
    let mut _0: u16;                     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:68: 222:72
    let _3: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
    let mut _8: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
    let mut _11: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
    let mut _12: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
    let mut _17: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _19: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _20: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
    let mut _23: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    let mut _29: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    scope 1 {
        debug range => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
        let _18: u16;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        scope 2 {
            debug bits => _18;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        }
    }

    bb0: {
        _4 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
        _3 = to_regular_range::<T>(_4, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (_3.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
        _6 = Lt(move _7, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    }

    bb2: {
        _8 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
        _10 = Le(move _11, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
        _9 = Not(move _10);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    }

    bb4: {
        _12 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _15 = (_3.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
        _16 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
        _14 = Lt(move _15, move _16);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    }

    bb6: {
        _17 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _20 = (*_1);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
        _22 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
        _23 = CheckedSub(const _, _22);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _22) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    }

    bb8: {
        _21 = move (_23.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        _24 = Lt(_21, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        assert(move _24, "attempt to shift left by `{}`, which would overflow", _21) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    }

    bb9: {
        _19 = Shl(move _20, move _21);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        _26 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
        _27 = CheckedSub(const _, _26);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _26) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    }

    bb10: {
        _25 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        _28 = Lt(_25, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        assert(move _28, "attempt to shift right by `{}`, which would overflow", _25) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    }

    bb11: {
        _18 = Shr(move _19, move _25);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        _29 = (_3.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
        _30 = Lt(_29, const 16_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        assert(move _30, "attempt to shift right by `{}`, which would overflow", _29) -> [success: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    }

    bb12: {
        _0 = Shr(_18, move _29);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        drop(_2) -> [return: bb13, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:13: 234:14
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:14: 234:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bit(_1: &mut u16, _2: usize, _3: bool) -> &mut u16 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:24: 237:33
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:35: 237:38
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:47: 237:52
    let mut _0: &mut u16;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:63: 237:72
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
    let mut _6: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _7: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _9: u16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
    let mut _10: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41

    bb0: {
        _5 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
        _4 = Not(move _5);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    }

    bb1: {
        _6 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(_3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:20: 240:25
    }

    bb3: {
        _8 = Lt(_2, const 16_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        assert(move _8, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    }

    bb4: {
        _11 = Lt(_2, const 16_usize);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        assert(move _11, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    }

    bb5: {
        _7 = Shl(const 1_u16, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        (*_1) = BitOr((*_1), move _7);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:21: 241:38
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb6: {
        _10 = Shl(const 1_u16, _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
        (*_1) = BitAnd((*_1), move _9);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:21: 243:41
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb7: {
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:246:17: 246:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:247:14: 247:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bits(_1: &mut u16, _2: T, _3: u16) -> &mut u16 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:48: 250:57
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:59: 250:64
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:69: 250:74
    let mut _0: &mut u16;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:85: 250:94
    let _4: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
    let mut _9: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
    let mut _13: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
    let mut _18: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
    let mut _21: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _22: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _24: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _30: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _31: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
    let mut _34: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _35: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _37: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _39: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _40: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _41: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _42: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _43: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
    let mut _44: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _45: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
    let mut _46: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _48: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _49: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
    let mut _50: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _52: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _54: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _56: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
    let mut _57: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
    let mut _58: u16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    let mut _59: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    scope 1 {
        debug range => _4;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
        let _38: u16;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        scope 2 {
            debug bitmask => _38;        // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        }
    }

    bb0: {
        _5 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
        _4 = to_regular_range::<T>(_5, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (_4.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
        _7 = Lt(move _8, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
        _6 = Not(move _7);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    }

    bb2: {
        _9 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
        _11 = Le(move _12, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    }

    bb4: {
        _13 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _16 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
        _17 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
        _15 = Lt(move _16, move _17);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
        _14 = Not(move _15);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
        switchInt(move _14) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    }

    bb6: {
        _18 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _25 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
        _26 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
        _27 = CheckedSub(_25, _26);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _25, move _26) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    }

    bb8: {
        _24 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        _28 = CheckedSub(const _, _24);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _24) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    }

    bb9: {
        _23 = move (_28.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        _29 = Lt(_23, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        assert(move _29, "attempt to shift left by `{}`, which would overflow", _23) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    }

    bb10: {
        _22 = Shl(_3, move _23);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        _32 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
        _33 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
        _34 = CheckedSub(_32, _33);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", move _32, move _33) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    }

    bb11: {
        _31 = move (_34.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        _35 = CheckedSub(const _, _31);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _31) -> [success: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    }

    bb12: {
        _30 = move (_35.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        _36 = Lt(_30, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        assert(move _36, "attempt to shift right by `{}`, which would overflow", _30) -> [success: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    }

    bb13: {
        _21 = Shr(move _22, move _30);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        _20 = Eq(move _21, _3);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
        _19 = Not(move _20);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
        switchInt(move _19) -> [0: bb15, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    }

    bb14: {
        _37 = panic(const "value does not fit into bit range") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:258:25: 258:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _43 = Not(const 0_u16);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
        _45 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
        _46 = CheckedSub(const _, _45);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        assert(!move (_46.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _45) -> [success: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    }

    bb16: {
        _44 = move (_46.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        _47 = Lt(_44, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        assert(move _47, "attempt to shift left by `{}`, which would overflow", _44) -> [success: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    }

    bb17: {
        _42 = Shl(move _43, move _44);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        _49 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
        _50 = CheckedSub(const _, _49);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _49) -> [success: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    }

    bb18: {
        _48 = move (_50.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        _51 = Lt(_48, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        assert(move _51, "attempt to shift right by `{}`, which would overflow", _48) -> [success: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    }

    bb19: {
        _41 = Shr(move _42, move _48);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        _52 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
        _53 = Lt(_52, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        assert(move _53, "attempt to shift right by `{}`, which would overflow", _52) -> [success: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    }

    bb20: {
        _40 = Shr(move _41, move _52);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        _54 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
        _55 = Lt(_54, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        assert(move _55, "attempt to shift left by `{}`, which would overflow", _54) -> [success: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    }

    bb21: {
        _39 = Shl(move _40, move _54);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        _38 = Not(move _39);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:37: 262:64
        _57 = (*_1);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
        _56 = BitAnd(move _57, _38);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
        _59 = (_4.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
        _60 = Lt(_59, const 16_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        assert(move _60, "attempt to shift left by `{}`, which would overflow", _59) -> [success: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    }

    bb22: {
        _58 = Shl(_3, move _59);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        (*_1) = BitOr(move _56, move _58); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:17: 265:67
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:267:17: 267:21
        drop(_2) -> [return: bb23, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:13: 268:14
    }

    bb23: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:14: 268:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::BIT_LENGTH: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:31: 212:36
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
    let mut _2: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
        _1 = core::mem::size_of::<u32>() -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:67
                                         // + literal: Const { ty: fn() -> usize {core::mem::size_of::<u32>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = CheckedMul(_1, const 8_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 8_usize) -> [success: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
    }

    bb2: {
        _0 = move (_2.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:81: 212:82
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bit(_1: &u32, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:24: 215:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:31: 215:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:46: 215:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
    let mut _5: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _6: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
    let mut _7: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
    let mut _8: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36

    bb0: {
        _4 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    }

    bb1: {
        _5 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
        _9 = Lt(_2, const 32_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        assert(move _9, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    }

    bb3: {
        _8 = Shl(const 1_u32, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
        _0 = Ne(move _6, const 0_u32);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:219:14: 219:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bits(_1: &u32, _2: T) -> u32 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:48: 222:53
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:55: 222:60
    let mut _0: u32;                     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:68: 222:72
    let _3: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
    let mut _8: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
    let mut _11: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
    let mut _12: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
    let mut _17: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _19: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _20: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
    let mut _23: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    let mut _29: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    scope 1 {
        debug range => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
        let _18: u32;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        scope 2 {
            debug bits => _18;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        }
    }

    bb0: {
        _4 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
        _3 = to_regular_range::<T>(_4, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (_3.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
        _6 = Lt(move _7, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    }

    bb2: {
        _8 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
        _10 = Le(move _11, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
        _9 = Not(move _10);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    }

    bb4: {
        _12 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _15 = (_3.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
        _16 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
        _14 = Lt(move _15, move _16);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    }

    bb6: {
        _17 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _20 = (*_1);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
        _22 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
        _23 = CheckedSub(const _, _22);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _22) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    }

    bb8: {
        _21 = move (_23.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        _24 = Lt(_21, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        assert(move _24, "attempt to shift left by `{}`, which would overflow", _21) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    }

    bb9: {
        _19 = Shl(move _20, move _21);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        _26 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
        _27 = CheckedSub(const _, _26);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _26) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    }

    bb10: {
        _25 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        _28 = Lt(_25, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        assert(move _28, "attempt to shift right by `{}`, which would overflow", _25) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    }

    bb11: {
        _18 = Shr(move _19, move _25);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        _29 = (_3.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
        _30 = Lt(_29, const 32_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        assert(move _30, "attempt to shift right by `{}`, which would overflow", _29) -> [success: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    }

    bb12: {
        _0 = Shr(_18, move _29);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        drop(_2) -> [return: bb13, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:13: 234:14
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:14: 234:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bit(_1: &mut u32, _2: usize, _3: bool) -> &mut u32 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:24: 237:33
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:35: 237:38
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:47: 237:52
    let mut _0: &mut u32;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:63: 237:72
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
    let mut _6: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _7: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _9: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
    let mut _10: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41

    bb0: {
        _5 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
        _4 = Not(move _5);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    }

    bb1: {
        _6 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(_3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:20: 240:25
    }

    bb3: {
        _8 = Lt(_2, const 32_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        assert(move _8, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    }

    bb4: {
        _11 = Lt(_2, const 32_usize);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        assert(move _11, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    }

    bb5: {
        _7 = Shl(const 1_u32, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        (*_1) = BitOr((*_1), move _7);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:21: 241:38
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb6: {
        _10 = Shl(const 1_u32, _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
        (*_1) = BitAnd((*_1), move _9);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:21: 243:41
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb7: {
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:246:17: 246:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:247:14: 247:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bits(_1: &mut u32, _2: T, _3: u32) -> &mut u32 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:48: 250:57
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:59: 250:64
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:69: 250:74
    let mut _0: &mut u32;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:85: 250:94
    let _4: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
    let mut _9: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
    let mut _13: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
    let mut _18: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
    let mut _21: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _22: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _24: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _30: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _31: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
    let mut _34: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _35: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _37: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _39: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _40: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _41: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _42: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _43: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
    let mut _44: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _45: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
    let mut _46: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _48: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _49: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
    let mut _50: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _52: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _54: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _56: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
    let mut _57: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
    let mut _58: u32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    let mut _59: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    scope 1 {
        debug range => _4;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
        let _38: u32;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        scope 2 {
            debug bitmask => _38;        // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        }
    }

    bb0: {
        _5 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
        _4 = to_regular_range::<T>(_5, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (_4.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
        _7 = Lt(move _8, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
        _6 = Not(move _7);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    }

    bb2: {
        _9 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
        _11 = Le(move _12, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    }

    bb4: {
        _13 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _16 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
        _17 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
        _15 = Lt(move _16, move _17);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
        _14 = Not(move _15);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
        switchInt(move _14) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    }

    bb6: {
        _18 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _25 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
        _26 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
        _27 = CheckedSub(_25, _26);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _25, move _26) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    }

    bb8: {
        _24 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        _28 = CheckedSub(const _, _24);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _24) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    }

    bb9: {
        _23 = move (_28.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        _29 = Lt(_23, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        assert(move _29, "attempt to shift left by `{}`, which would overflow", _23) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    }

    bb10: {
        _22 = Shl(_3, move _23);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        _32 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
        _33 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
        _34 = CheckedSub(_32, _33);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", move _32, move _33) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    }

    bb11: {
        _31 = move (_34.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        _35 = CheckedSub(const _, _31);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _31) -> [success: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    }

    bb12: {
        _30 = move (_35.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        _36 = Lt(_30, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        assert(move _36, "attempt to shift right by `{}`, which would overflow", _30) -> [success: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    }

    bb13: {
        _21 = Shr(move _22, move _30);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        _20 = Eq(move _21, _3);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
        _19 = Not(move _20);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
        switchInt(move _19) -> [0: bb15, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    }

    bb14: {
        _37 = panic(const "value does not fit into bit range") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:258:25: 258:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _43 = Not(const 0_u32);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
        _45 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
        _46 = CheckedSub(const _, _45);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        assert(!move (_46.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _45) -> [success: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    }

    bb16: {
        _44 = move (_46.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        _47 = Lt(_44, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        assert(move _47, "attempt to shift left by `{}`, which would overflow", _44) -> [success: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    }

    bb17: {
        _42 = Shl(move _43, move _44);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        _49 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
        _50 = CheckedSub(const _, _49);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _49) -> [success: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    }

    bb18: {
        _48 = move (_50.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        _51 = Lt(_48, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        assert(move _51, "attempt to shift right by `{}`, which would overflow", _48) -> [success: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    }

    bb19: {
        _41 = Shr(move _42, move _48);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        _52 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
        _53 = Lt(_52, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        assert(move _53, "attempt to shift right by `{}`, which would overflow", _52) -> [success: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    }

    bb20: {
        _40 = Shr(move _41, move _52);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        _54 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
        _55 = Lt(_54, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        assert(move _55, "attempt to shift left by `{}`, which would overflow", _54) -> [success: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    }

    bb21: {
        _39 = Shl(move _40, move _54);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        _38 = Not(move _39);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:37: 262:64
        _57 = (*_1);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
        _56 = BitAnd(move _57, _38);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
        _59 = (_4.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
        _60 = Lt(_59, const 32_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        assert(move _60, "attempt to shift left by `{}`, which would overflow", _59) -> [success: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    }

    bb22: {
        _58 = Shl(_3, move _59);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        (*_1) = BitOr(move _56, move _58); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:17: 265:67
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:267:17: 267:21
        drop(_2) -> [return: bb23, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:13: 268:14
    }

    bb23: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:14: 268:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::BIT_LENGTH: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:31: 212:36
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
    let mut _2: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
        _1 = core::mem::size_of::<u64>() -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:67
                                         // + literal: Const { ty: fn() -> usize {core::mem::size_of::<u64>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = CheckedMul(_1, const 8_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 8_usize) -> [success: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
    }

    bb2: {
        _0 = move (_2.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:81: 212:82
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bit(_1: &u64, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:24: 215:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:31: 215:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:46: 215:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
    let mut _5: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _6: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
    let mut _7: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
    let mut _8: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36

    bb0: {
        _4 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    }

    bb1: {
        _5 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
        _9 = Lt(_2, const 64_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        assert(move _9, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    }

    bb3: {
        _8 = Shl(const 1_u64, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
        _0 = Ne(move _6, const 0_u64);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:219:14: 219:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bits(_1: &u64, _2: T) -> u64 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:48: 222:53
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:55: 222:60
    let mut _0: u64;                     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:68: 222:72
    let _3: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
    let mut _8: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
    let mut _11: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
    let mut _12: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
    let mut _17: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _19: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _20: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
    let mut _23: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    let mut _29: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    scope 1 {
        debug range => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
        let _18: u64;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        scope 2 {
            debug bits => _18;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        }
    }

    bb0: {
        _4 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
        _3 = to_regular_range::<T>(_4, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (_3.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
        _6 = Lt(move _7, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    }

    bb2: {
        _8 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
        _10 = Le(move _11, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
        _9 = Not(move _10);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    }

    bb4: {
        _12 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _15 = (_3.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
        _16 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
        _14 = Lt(move _15, move _16);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    }

    bb6: {
        _17 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _20 = (*_1);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
        _22 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
        _23 = CheckedSub(const _, _22);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _22) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    }

    bb8: {
        _21 = move (_23.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        _24 = Lt(_21, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        assert(move _24, "attempt to shift left by `{}`, which would overflow", _21) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    }

    bb9: {
        _19 = Shl(move _20, move _21);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        _26 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
        _27 = CheckedSub(const _, _26);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _26) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    }

    bb10: {
        _25 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        _28 = Lt(_25, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        assert(move _28, "attempt to shift right by `{}`, which would overflow", _25) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    }

    bb11: {
        _18 = Shr(move _19, move _25);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        _29 = (_3.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
        _30 = Lt(_29, const 64_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        assert(move _30, "attempt to shift right by `{}`, which would overflow", _29) -> [success: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    }

    bb12: {
        _0 = Shr(_18, move _29);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        drop(_2) -> [return: bb13, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:13: 234:14
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:14: 234:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bit(_1: &mut u64, _2: usize, _3: bool) -> &mut u64 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:24: 237:33
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:35: 237:38
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:47: 237:52
    let mut _0: &mut u64;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:63: 237:72
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
    let mut _6: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _7: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _9: u64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
    let mut _10: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41

    bb0: {
        _5 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
        _4 = Not(move _5);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    }

    bb1: {
        _6 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(_3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:20: 240:25
    }

    bb3: {
        _8 = Lt(_2, const 64_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        assert(move _8, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    }

    bb4: {
        _11 = Lt(_2, const 64_usize);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        assert(move _11, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    }

    bb5: {
        _7 = Shl(const 1_u64, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        (*_1) = BitOr((*_1), move _7);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:21: 241:38
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb6: {
        _10 = Shl(const 1_u64, _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
        (*_1) = BitAnd((*_1), move _9);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:21: 243:41
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb7: {
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:246:17: 246:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:247:14: 247:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bits(_1: &mut u64, _2: T, _3: u64) -> &mut u64 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:48: 250:57
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:59: 250:64
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:69: 250:74
    let mut _0: &mut u64;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:85: 250:94
    let _4: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
    let mut _9: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
    let mut _13: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
    let mut _18: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
    let mut _21: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _22: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _24: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _30: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _31: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
    let mut _34: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _35: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _37: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _39: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _40: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _41: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _42: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _43: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
    let mut _44: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _45: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
    let mut _46: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _48: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _49: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
    let mut _50: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _52: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _54: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _56: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
    let mut _57: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
    let mut _58: u64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    let mut _59: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    scope 1 {
        debug range => _4;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
        let _38: u64;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        scope 2 {
            debug bitmask => _38;        // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        }
    }

    bb0: {
        _5 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
        _4 = to_regular_range::<T>(_5, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (_4.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
        _7 = Lt(move _8, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
        _6 = Not(move _7);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    }

    bb2: {
        _9 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
        _11 = Le(move _12, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    }

    bb4: {
        _13 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _16 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
        _17 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
        _15 = Lt(move _16, move _17);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
        _14 = Not(move _15);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
        switchInt(move _14) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    }

    bb6: {
        _18 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _25 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
        _26 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
        _27 = CheckedSub(_25, _26);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _25, move _26) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    }

    bb8: {
        _24 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        _28 = CheckedSub(const _, _24);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _24) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    }

    bb9: {
        _23 = move (_28.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        _29 = Lt(_23, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        assert(move _29, "attempt to shift left by `{}`, which would overflow", _23) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    }

    bb10: {
        _22 = Shl(_3, move _23);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        _32 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
        _33 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
        _34 = CheckedSub(_32, _33);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", move _32, move _33) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    }

    bb11: {
        _31 = move (_34.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        _35 = CheckedSub(const _, _31);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _31) -> [success: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    }

    bb12: {
        _30 = move (_35.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        _36 = Lt(_30, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        assert(move _36, "attempt to shift right by `{}`, which would overflow", _30) -> [success: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    }

    bb13: {
        _21 = Shr(move _22, move _30);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        _20 = Eq(move _21, _3);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
        _19 = Not(move _20);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
        switchInt(move _19) -> [0: bb15, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    }

    bb14: {
        _37 = panic(const "value does not fit into bit range") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:258:25: 258:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _43 = Not(const 0_u64);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
        _45 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
        _46 = CheckedSub(const _, _45);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        assert(!move (_46.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _45) -> [success: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    }

    bb16: {
        _44 = move (_46.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        _47 = Lt(_44, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        assert(move _47, "attempt to shift left by `{}`, which would overflow", _44) -> [success: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    }

    bb17: {
        _42 = Shl(move _43, move _44);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        _49 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
        _50 = CheckedSub(const _, _49);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _49) -> [success: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    }

    bb18: {
        _48 = move (_50.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        _51 = Lt(_48, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        assert(move _51, "attempt to shift right by `{}`, which would overflow", _48) -> [success: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    }

    bb19: {
        _41 = Shr(move _42, move _48);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        _52 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
        _53 = Lt(_52, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        assert(move _53, "attempt to shift right by `{}`, which would overflow", _52) -> [success: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    }

    bb20: {
        _40 = Shr(move _41, move _52);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        _54 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
        _55 = Lt(_54, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        assert(move _55, "attempt to shift left by `{}`, which would overflow", _54) -> [success: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    }

    bb21: {
        _39 = Shl(move _40, move _54);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        _38 = Not(move _39);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:37: 262:64
        _57 = (*_1);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
        _56 = BitAnd(move _57, _38);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
        _59 = (_4.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
        _60 = Lt(_59, const 64_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        assert(move _60, "attempt to shift left by `{}`, which would overflow", _59) -> [success: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    }

    bb22: {
        _58 = Shl(_3, move _59);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        (*_1) = BitOr(move _56, move _58); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:17: 265:67
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:267:17: 267:21
        drop(_2) -> [return: bb23, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:13: 268:14
    }

    bb23: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:14: 268:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::BIT_LENGTH: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:31: 212:36
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
    let mut _2: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
        _1 = core::mem::size_of::<u128>() -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:67
                                         // + literal: Const { ty: fn() -> usize {core::mem::size_of::<u128>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = CheckedMul(_1, const 8_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 8_usize) -> [success: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
    }

    bb2: {
        _0 = move (_2.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:81: 212:82
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bit(_1: &u128, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:24: 215:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:31: 215:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:46: 215:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
    let mut _5: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _6: u128;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
    let mut _7: u128;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
    let mut _8: u128;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36

    bb0: {
        _4 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    }

    bb1: {
        _5 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
        _9 = Lt(_2, const 128_usize);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        assert(move _9, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    }

    bb3: {
        _8 = Shl(const 1_u128, _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
        _0 = Ne(move _6, const 0_u128);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:219:14: 219:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bits(_1: &u128, _2: T) -> u128 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:48: 222:53
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:55: 222:60
    let mut _0: u128;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:68: 222:72
    let _3: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
    let mut _8: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
    let mut _11: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
    let mut _12: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
    let mut _17: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _19: u128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _20: u128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
    let mut _23: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    let mut _29: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    scope 1 {
        debug range => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
        let _18: u128;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        scope 2 {
            debug bits => _18;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        }
    }

    bb0: {
        _4 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
        _3 = to_regular_range::<T>(_4, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (_3.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
        _6 = Lt(move _7, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    }

    bb2: {
        _8 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
        _10 = Le(move _11, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
        _9 = Not(move _10);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    }

    bb4: {
        _12 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _15 = (_3.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
        _16 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
        _14 = Lt(move _15, move _16);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    }

    bb6: {
        _17 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _20 = (*_1);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
        _22 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
        _23 = CheckedSub(const _, _22);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _22) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    }

    bb8: {
        _21 = move (_23.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        _24 = Lt(_21, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        assert(move _24, "attempt to shift left by `{}`, which would overflow", _21) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    }

    bb9: {
        _19 = Shl(move _20, move _21);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        _26 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
        _27 = CheckedSub(const _, _26);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _26) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    }

    bb10: {
        _25 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        _28 = Lt(_25, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        assert(move _28, "attempt to shift right by `{}`, which would overflow", _25) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    }

    bb11: {
        _18 = Shr(move _19, move _25);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        _29 = (_3.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
        _30 = Lt(_29, const 128_usize);  // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        assert(move _30, "attempt to shift right by `{}`, which would overflow", _29) -> [success: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    }

    bb12: {
        _0 = Shr(_18, move _29);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        drop(_2) -> [return: bb13, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:13: 234:14
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:14: 234:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bit(_1: &mut u128, _2: usize, _3: bool) -> &mut u128 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:24: 237:33
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:35: 237:38
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:47: 237:52
    let mut _0: &mut u128;               // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:63: 237:72
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
    let mut _6: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _7: u128;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _9: u128;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
    let mut _10: u128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41

    bb0: {
        _5 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
        _4 = Not(move _5);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    }

    bb1: {
        _6 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(_3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:20: 240:25
    }

    bb3: {
        _8 = Lt(_2, const 128_usize);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        assert(move _8, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    }

    bb4: {
        _11 = Lt(_2, const 128_usize);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        assert(move _11, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    }

    bb5: {
        _7 = Shl(const 1_u128, _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        (*_1) = BitOr((*_1), move _7);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:21: 241:38
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb6: {
        _10 = Shl(const 1_u128, _2);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
        (*_1) = BitAnd((*_1), move _9);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:21: 243:41
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb7: {
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:246:17: 246:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:247:14: 247:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bits(_1: &mut u128, _2: T, _3: u128) -> &mut u128 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:48: 250:57
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:59: 250:64
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:69: 250:74
    let mut _0: &mut u128;               // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:85: 250:94
    let _4: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
    let mut _9: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
    let mut _13: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
    let mut _18: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
    let mut _21: u128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _22: u128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _24: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _30: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _31: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
    let mut _34: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _35: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _37: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _39: u128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _40: u128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _41: u128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _42: u128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _43: u128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
    let mut _44: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _45: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
    let mut _46: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _48: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _49: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
    let mut _50: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _52: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _54: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _56: u128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
    let mut _57: u128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
    let mut _58: u128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    let mut _59: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    scope 1 {
        debug range => _4;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
        let _38: u128;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        scope 2 {
            debug bitmask => _38;        // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        }
    }

    bb0: {
        _5 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
        _4 = to_regular_range::<T>(_5, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (_4.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
        _7 = Lt(move _8, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
        _6 = Not(move _7);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    }

    bb2: {
        _9 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
        _11 = Le(move _12, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    }

    bb4: {
        _13 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _16 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
        _17 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
        _15 = Lt(move _16, move _17);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
        _14 = Not(move _15);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
        switchInt(move _14) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    }

    bb6: {
        _18 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _25 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
        _26 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
        _27 = CheckedSub(_25, _26);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _25, move _26) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    }

    bb8: {
        _24 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        _28 = CheckedSub(const _, _24);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _24) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    }

    bb9: {
        _23 = move (_28.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        _29 = Lt(_23, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        assert(move _29, "attempt to shift left by `{}`, which would overflow", _23) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    }

    bb10: {
        _22 = Shl(_3, move _23);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        _32 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
        _33 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
        _34 = CheckedSub(_32, _33);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", move _32, move _33) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    }

    bb11: {
        _31 = move (_34.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        _35 = CheckedSub(const _, _31);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _31) -> [success: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    }

    bb12: {
        _30 = move (_35.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        _36 = Lt(_30, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        assert(move _36, "attempt to shift right by `{}`, which would overflow", _30) -> [success: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    }

    bb13: {
        _21 = Shr(move _22, move _30);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        _20 = Eq(move _21, _3);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
        _19 = Not(move _20);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
        switchInt(move _19) -> [0: bb15, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    }

    bb14: {
        _37 = panic(const "value does not fit into bit range") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:258:25: 258:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _43 = Not(const 0_u128);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
        _45 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
        _46 = CheckedSub(const _, _45);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        assert(!move (_46.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _45) -> [success: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    }

    bb16: {
        _44 = move (_46.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        _47 = Lt(_44, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        assert(move _47, "attempt to shift left by `{}`, which would overflow", _44) -> [success: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    }

    bb17: {
        _42 = Shl(move _43, move _44);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        _49 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
        _50 = CheckedSub(const _, _49);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _49) -> [success: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    }

    bb18: {
        _48 = move (_50.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        _51 = Lt(_48, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        assert(move _51, "attempt to shift right by `{}`, which would overflow", _48) -> [success: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    }

    bb19: {
        _41 = Shr(move _42, move _48);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        _52 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
        _53 = Lt(_52, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        assert(move _53, "attempt to shift right by `{}`, which would overflow", _52) -> [success: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    }

    bb20: {
        _40 = Shr(move _41, move _52);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        _54 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
        _55 = Lt(_54, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        assert(move _55, "attempt to shift left by `{}`, which would overflow", _54) -> [success: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    }

    bb21: {
        _39 = Shl(move _40, move _54);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        _38 = Not(move _39);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:37: 262:64
        _57 = (*_1);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
        _56 = BitAnd(move _57, _38);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
        _59 = (_4.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
        _60 = Lt(_59, const 128_usize);  // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        assert(move _60, "attempt to shift left by `{}`, which would overflow", _59) -> [success: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    }

    bb22: {
        _58 = Shl(_3, move _59);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        (*_1) = BitOr(move _56, move _58); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:17: 265:67
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:267:17: 267:21
        drop(_2) -> [return: bb23, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:13: 268:14
    }

    bb23: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:14: 268:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::BIT_LENGTH: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:31: 212:36
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
    let mut _2: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
        _1 = core::mem::size_of::<usize>() -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:67
                                         // + literal: Const { ty: fn() -> usize {core::mem::size_of::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = CheckedMul(_1, const 8_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 8_usize) -> [success: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
    }

    bb2: {
        _0 = move (_2.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:81: 212:82
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bit(_1: &usize, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:24: 215:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:31: 215:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:46: 215:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
    let mut _5: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36

    bb0: {
        _4 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    }

    bb1: {
        _5 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
        _9 = Lt(_2, const 64_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        assert(move _9, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    }

    bb3: {
        _8 = Shl(const 1_usize, _2);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
        _0 = Ne(move _6, const 0_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:219:14: 219:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bits(_1: &usize, _2: T) -> usize {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:48: 222:53
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:55: 222:60
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:68: 222:72
    let _3: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
    let mut _8: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
    let mut _11: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
    let mut _12: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
    let mut _17: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _19: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _20: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
    let mut _23: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    let mut _29: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    scope 1 {
        debug range => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
        let _18: usize;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        scope 2 {
            debug bits => _18;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        }
    }

    bb0: {
        _4 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
        _3 = to_regular_range::<T>(_4, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (_3.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
        _6 = Lt(move _7, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    }

    bb2: {
        _8 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
        _10 = Le(move _11, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
        _9 = Not(move _10);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    }

    bb4: {
        _12 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _15 = (_3.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
        _16 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
        _14 = Lt(move _15, move _16);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    }

    bb6: {
        _17 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _20 = (*_1);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
        _22 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
        _23 = CheckedSub(const _, _22);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _22) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    }

    bb8: {
        _21 = move (_23.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        _24 = Lt(_21, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        assert(move _24, "attempt to shift left by `{}`, which would overflow", _21) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    }

    bb9: {
        _19 = Shl(move _20, move _21);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        _26 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
        _27 = CheckedSub(const _, _26);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _26) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    }

    bb10: {
        _25 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        _28 = Lt(_25, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        assert(move _28, "attempt to shift right by `{}`, which would overflow", _25) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    }

    bb11: {
        _18 = Shr(move _19, move _25);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        _29 = (_3.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
        _30 = Lt(_29, const 64_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        assert(move _30, "attempt to shift right by `{}`, which would overflow", _29) -> [success: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    }

    bb12: {
        _0 = Shr(_18, move _29);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        drop(_2) -> [return: bb13, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:13: 234:14
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:14: 234:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bit(_1: &mut usize, _2: usize, _3: bool) -> &mut usize {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:24: 237:33
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:35: 237:38
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:47: 237:52
    let mut _0: &mut usize;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:63: 237:72
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
    let mut _6: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _9: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
    let mut _10: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41

    bb0: {
        _5 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
        _4 = Not(move _5);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    }

    bb1: {
        _6 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(_3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:20: 240:25
    }

    bb3: {
        _8 = Lt(_2, const 64_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        assert(move _8, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    }

    bb4: {
        _11 = Lt(_2, const 64_usize);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        assert(move _11, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    }

    bb5: {
        _7 = Shl(const 1_usize, _2);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        (*_1) = BitOr((*_1), move _7);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:21: 241:38
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb6: {
        _10 = Shl(const 1_usize, _2);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
        (*_1) = BitAnd((*_1), move _9);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:21: 243:41
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb7: {
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:246:17: 246:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:247:14: 247:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bits(_1: &mut usize, _2: T, _3: usize) -> &mut usize {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:48: 250:57
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:59: 250:64
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:69: 250:74
    let mut _0: &mut usize;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:85: 250:94
    let _4: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
    let mut _9: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
    let mut _13: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
    let mut _18: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _24: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _30: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _31: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
    let mut _34: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _35: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _37: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _39: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _40: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _41: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _42: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _43: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
    let mut _44: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _45: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
    let mut _46: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _48: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _49: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
    let mut _50: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _52: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _54: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _56: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
    let mut _57: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
    let mut _58: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    let mut _59: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    scope 1 {
        debug range => _4;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
        let _38: usize;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        scope 2 {
            debug bitmask => _38;        // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        }
    }

    bb0: {
        _5 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
        _4 = to_regular_range::<T>(_5, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (_4.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
        _7 = Lt(move _8, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
        _6 = Not(move _7);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    }

    bb2: {
        _9 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
        _11 = Le(move _12, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    }

    bb4: {
        _13 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _16 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
        _17 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
        _15 = Lt(move _16, move _17);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
        _14 = Not(move _15);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
        switchInt(move _14) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    }

    bb6: {
        _18 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _25 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
        _26 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
        _27 = CheckedSub(_25, _26);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _25, move _26) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    }

    bb8: {
        _24 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        _28 = CheckedSub(const _, _24);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _24) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    }

    bb9: {
        _23 = move (_28.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        _29 = Lt(_23, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        assert(move _29, "attempt to shift left by `{}`, which would overflow", _23) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    }

    bb10: {
        _22 = Shl(_3, move _23);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        _32 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
        _33 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
        _34 = CheckedSub(_32, _33);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", move _32, move _33) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    }

    bb11: {
        _31 = move (_34.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        _35 = CheckedSub(const _, _31);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _31) -> [success: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    }

    bb12: {
        _30 = move (_35.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        _36 = Lt(_30, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        assert(move _36, "attempt to shift right by `{}`, which would overflow", _30) -> [success: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    }

    bb13: {
        _21 = Shr(move _22, move _30);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        _20 = Eq(move _21, _3);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
        _19 = Not(move _20);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
        switchInt(move _19) -> [0: bb15, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    }

    bb14: {
        _37 = panic(const "value does not fit into bit range") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:258:25: 258:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _43 = Not(const 0_usize);        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
        _45 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
        _46 = CheckedSub(const _, _45);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        assert(!move (_46.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _45) -> [success: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    }

    bb16: {
        _44 = move (_46.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        _47 = Lt(_44, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        assert(move _47, "attempt to shift left by `{}`, which would overflow", _44) -> [success: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    }

    bb17: {
        _42 = Shl(move _43, move _44);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        _49 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
        _50 = CheckedSub(const _, _49);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _49) -> [success: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    }

    bb18: {
        _48 = move (_50.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        _51 = Lt(_48, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        assert(move _51, "attempt to shift right by `{}`, which would overflow", _48) -> [success: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    }

    bb19: {
        _41 = Shr(move _42, move _48);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        _52 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
        _53 = Lt(_52, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        assert(move _53, "attempt to shift right by `{}`, which would overflow", _52) -> [success: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    }

    bb20: {
        _40 = Shr(move _41, move _52);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        _54 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
        _55 = Lt(_54, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        assert(move _55, "attempt to shift left by `{}`, which would overflow", _54) -> [success: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    }

    bb21: {
        _39 = Shl(move _40, move _54);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        _38 = Not(move _39);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:37: 262:64
        _57 = (*_1);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
        _56 = BitAnd(move _57, _38);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
        _59 = (_4.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
        _60 = Lt(_59, const 64_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        assert(move _60, "attempt to shift left by `{}`, which would overflow", _59) -> [success: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    }

    bb22: {
        _58 = Shl(_3, move _59);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        (*_1) = BitOr(move _56, move _58); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:17: 265:67
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:267:17: 267:21
        drop(_2) -> [return: bb23, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:13: 268:14
    }

    bb23: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:14: 268:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::BIT_LENGTH: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:31: 212:36
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
    let mut _2: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
        _1 = core::mem::size_of::<i8>() -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:67
                                         // + literal: Const { ty: fn() -> usize {core::mem::size_of::<i8>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = CheckedMul(_1, const 8_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 8_usize) -> [success: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
    }

    bb2: {
        _0 = move (_2.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:81: 212:82
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bit(_1: &i8, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:24: 215:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:31: 215:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:46: 215:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
    let mut _5: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _6: i8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
    let mut _7: i8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
    let mut _8: i8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36

    bb0: {
        _4 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    }

    bb1: {
        _5 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
        _9 = Lt(_2, const 8_usize);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        assert(move _9, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    }

    bb3: {
        _8 = Shl(const 1_i8, _2);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
        _0 = Ne(move _6, const 0_i8);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:219:14: 219:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bits(_1: &i8, _2: T) -> i8 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:48: 222:53
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:55: 222:60
    let mut _0: i8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:68: 222:72
    let _3: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
    let mut _8: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
    let mut _11: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
    let mut _12: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
    let mut _17: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _19: i8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _20: i8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
    let mut _23: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    let mut _29: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    scope 1 {
        debug range => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
        let _18: i8;                     // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        scope 2 {
            debug bits => _18;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        }
    }

    bb0: {
        _4 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
        _3 = to_regular_range::<T>(_4, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (_3.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
        _6 = Lt(move _7, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    }

    bb2: {
        _8 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
        _10 = Le(move _11, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
        _9 = Not(move _10);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    }

    bb4: {
        _12 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _15 = (_3.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
        _16 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
        _14 = Lt(move _15, move _16);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    }

    bb6: {
        _17 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _20 = (*_1);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
        _22 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
        _23 = CheckedSub(const _, _22);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _22) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    }

    bb8: {
        _21 = move (_23.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        _24 = Lt(_21, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        assert(move _24, "attempt to shift left by `{}`, which would overflow", _21) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    }

    bb9: {
        _19 = Shl(move _20, move _21);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        _26 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
        _27 = CheckedSub(const _, _26);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _26) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    }

    bb10: {
        _25 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        _28 = Lt(_25, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        assert(move _28, "attempt to shift right by `{}`, which would overflow", _25) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    }

    bb11: {
        _18 = Shr(move _19, move _25);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        _29 = (_3.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
        _30 = Lt(_29, const 8_usize);    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        assert(move _30, "attempt to shift right by `{}`, which would overflow", _29) -> [success: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    }

    bb12: {
        _0 = Shr(_18, move _29);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        drop(_2) -> [return: bb13, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:13: 234:14
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:14: 234:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bit(_1: &mut i8, _2: usize, _3: bool) -> &mut i8 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:24: 237:33
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:35: 237:38
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:47: 237:52
    let mut _0: &mut i8;                 // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:63: 237:72
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
    let mut _6: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _7: i8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _9: i8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
    let mut _10: i8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41

    bb0: {
        _5 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
        _4 = Not(move _5);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    }

    bb1: {
        _6 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(_3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:20: 240:25
    }

    bb3: {
        _8 = Lt(_2, const 8_usize);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        assert(move _8, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    }

    bb4: {
        _11 = Lt(_2, const 8_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        assert(move _11, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    }

    bb5: {
        _7 = Shl(const 1_i8, _2);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        (*_1) = BitOr((*_1), move _7);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:21: 241:38
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb6: {
        _10 = Shl(const 1_i8, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
        (*_1) = BitAnd((*_1), move _9);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:21: 243:41
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb7: {
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:246:17: 246:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:247:14: 247:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bits(_1: &mut i8, _2: T, _3: i8) -> &mut i8 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:48: 250:57
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:59: 250:64
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:69: 250:74
    let mut _0: &mut i8;                 // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:85: 250:94
    let _4: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
    let mut _9: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
    let mut _13: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
    let mut _18: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
    let mut _21: i8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _22: i8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _24: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _30: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _31: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
    let mut _34: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _35: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _37: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _39: i8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _40: i8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _41: i8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _42: i8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _43: i8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
    let mut _44: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _45: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
    let mut _46: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _48: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _49: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
    let mut _50: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _52: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _54: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _56: i8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
    let mut _57: i8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
    let mut _58: i8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    let mut _59: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    scope 1 {
        debug range => _4;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
        let _38: i8;                     // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        scope 2 {
            debug bitmask => _38;        // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        }
    }

    bb0: {
        _5 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
        _4 = to_regular_range::<T>(_5, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (_4.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
        _7 = Lt(move _8, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
        _6 = Not(move _7);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    }

    bb2: {
        _9 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
        _11 = Le(move _12, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    }

    bb4: {
        _13 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _16 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
        _17 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
        _15 = Lt(move _16, move _17);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
        _14 = Not(move _15);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
        switchInt(move _14) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    }

    bb6: {
        _18 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _25 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
        _26 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
        _27 = CheckedSub(_25, _26);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _25, move _26) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    }

    bb8: {
        _24 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        _28 = CheckedSub(const _, _24);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _24) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    }

    bb9: {
        _23 = move (_28.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        _29 = Lt(_23, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        assert(move _29, "attempt to shift left by `{}`, which would overflow", _23) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    }

    bb10: {
        _22 = Shl(_3, move _23);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        _32 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
        _33 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
        _34 = CheckedSub(_32, _33);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", move _32, move _33) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    }

    bb11: {
        _31 = move (_34.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        _35 = CheckedSub(const _, _31);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _31) -> [success: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    }

    bb12: {
        _30 = move (_35.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        _36 = Lt(_30, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        assert(move _36, "attempt to shift right by `{}`, which would overflow", _30) -> [success: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    }

    bb13: {
        _21 = Shr(move _22, move _30);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        _20 = Eq(move _21, _3);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
        _19 = Not(move _20);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
        switchInt(move _19) -> [0: bb15, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    }

    bb14: {
        _37 = panic(const "value does not fit into bit range") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:258:25: 258:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _43 = Not(const 0_i8);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
        _45 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
        _46 = CheckedSub(const _, _45);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        assert(!move (_46.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _45) -> [success: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    }

    bb16: {
        _44 = move (_46.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        _47 = Lt(_44, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        assert(move _47, "attempt to shift left by `{}`, which would overflow", _44) -> [success: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    }

    bb17: {
        _42 = Shl(move _43, move _44);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        _49 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
        _50 = CheckedSub(const _, _49);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _49) -> [success: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    }

    bb18: {
        _48 = move (_50.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        _51 = Lt(_48, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        assert(move _51, "attempt to shift right by `{}`, which would overflow", _48) -> [success: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    }

    bb19: {
        _41 = Shr(move _42, move _48);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        _52 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
        _53 = Lt(_52, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        assert(move _53, "attempt to shift right by `{}`, which would overflow", _52) -> [success: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    }

    bb20: {
        _40 = Shr(move _41, move _52);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        _54 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
        _55 = Lt(_54, const 8_usize);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        assert(move _55, "attempt to shift left by `{}`, which would overflow", _54) -> [success: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    }

    bb21: {
        _39 = Shl(move _40, move _54);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        _38 = Not(move _39);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:37: 262:64
        _57 = (*_1);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
        _56 = BitAnd(move _57, _38);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
        _59 = (_4.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
        _60 = Lt(_59, const 8_usize);    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        assert(move _60, "attempt to shift left by `{}`, which would overflow", _59) -> [success: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    }

    bb22: {
        _58 = Shl(_3, move _59);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        (*_1) = BitOr(move _56, move _58); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:17: 265:67
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:267:17: 267:21
        drop(_2) -> [return: bb23, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:13: 268:14
    }

    bb23: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:14: 268:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::BIT_LENGTH: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:31: 212:36
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
    let mut _2: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
        _1 = core::mem::size_of::<i16>() -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:67
                                         // + literal: Const { ty: fn() -> usize {core::mem::size_of::<i16>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = CheckedMul(_1, const 8_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 8_usize) -> [success: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
    }

    bb2: {
        _0 = move (_2.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:81: 212:82
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bit(_1: &i16, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:24: 215:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:31: 215:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:46: 215:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
    let mut _5: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _6: i16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
    let mut _7: i16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
    let mut _8: i16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36

    bb0: {
        _4 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    }

    bb1: {
        _5 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
        _9 = Lt(_2, const 16_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        assert(move _9, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    }

    bb3: {
        _8 = Shl(const 1_i16, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
        _0 = Ne(move _6, const 0_i16);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:219:14: 219:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bits(_1: &i16, _2: T) -> i16 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:48: 222:53
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:55: 222:60
    let mut _0: i16;                     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:68: 222:72
    let _3: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
    let mut _8: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
    let mut _11: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
    let mut _12: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
    let mut _17: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _19: i16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _20: i16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
    let mut _23: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    let mut _29: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    scope 1 {
        debug range => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
        let _18: i16;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        scope 2 {
            debug bits => _18;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        }
    }

    bb0: {
        _4 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
        _3 = to_regular_range::<T>(_4, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (_3.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
        _6 = Lt(move _7, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    }

    bb2: {
        _8 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
        _10 = Le(move _11, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
        _9 = Not(move _10);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    }

    bb4: {
        _12 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _15 = (_3.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
        _16 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
        _14 = Lt(move _15, move _16);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    }

    bb6: {
        _17 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _20 = (*_1);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
        _22 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
        _23 = CheckedSub(const _, _22);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _22) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    }

    bb8: {
        _21 = move (_23.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        _24 = Lt(_21, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        assert(move _24, "attempt to shift left by `{}`, which would overflow", _21) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    }

    bb9: {
        _19 = Shl(move _20, move _21);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        _26 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
        _27 = CheckedSub(const _, _26);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _26) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    }

    bb10: {
        _25 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        _28 = Lt(_25, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        assert(move _28, "attempt to shift right by `{}`, which would overflow", _25) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    }

    bb11: {
        _18 = Shr(move _19, move _25);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        _29 = (_3.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
        _30 = Lt(_29, const 16_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        assert(move _30, "attempt to shift right by `{}`, which would overflow", _29) -> [success: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    }

    bb12: {
        _0 = Shr(_18, move _29);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        drop(_2) -> [return: bb13, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:13: 234:14
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:14: 234:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bit(_1: &mut i16, _2: usize, _3: bool) -> &mut i16 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:24: 237:33
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:35: 237:38
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:47: 237:52
    let mut _0: &mut i16;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:63: 237:72
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
    let mut _6: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _7: i16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _9: i16;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
    let mut _10: i16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41

    bb0: {
        _5 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
        _4 = Not(move _5);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    }

    bb1: {
        _6 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(_3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:20: 240:25
    }

    bb3: {
        _8 = Lt(_2, const 16_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        assert(move _8, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    }

    bb4: {
        _11 = Lt(_2, const 16_usize);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        assert(move _11, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    }

    bb5: {
        _7 = Shl(const 1_i16, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        (*_1) = BitOr((*_1), move _7);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:21: 241:38
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb6: {
        _10 = Shl(const 1_i16, _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
        (*_1) = BitAnd((*_1), move _9);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:21: 243:41
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb7: {
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:246:17: 246:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:247:14: 247:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bits(_1: &mut i16, _2: T, _3: i16) -> &mut i16 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:48: 250:57
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:59: 250:64
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:69: 250:74
    let mut _0: &mut i16;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:85: 250:94
    let _4: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
    let mut _9: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
    let mut _13: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
    let mut _18: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
    let mut _21: i16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _22: i16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _24: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _30: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _31: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
    let mut _34: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _35: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _37: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _39: i16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _40: i16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _41: i16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _42: i16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _43: i16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
    let mut _44: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _45: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
    let mut _46: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _48: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _49: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
    let mut _50: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _52: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _54: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _56: i16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
    let mut _57: i16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
    let mut _58: i16;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    let mut _59: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    scope 1 {
        debug range => _4;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
        let _38: i16;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        scope 2 {
            debug bitmask => _38;        // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        }
    }

    bb0: {
        _5 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
        _4 = to_regular_range::<T>(_5, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (_4.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
        _7 = Lt(move _8, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
        _6 = Not(move _7);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    }

    bb2: {
        _9 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
        _11 = Le(move _12, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    }

    bb4: {
        _13 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _16 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
        _17 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
        _15 = Lt(move _16, move _17);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
        _14 = Not(move _15);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
        switchInt(move _14) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    }

    bb6: {
        _18 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _25 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
        _26 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
        _27 = CheckedSub(_25, _26);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _25, move _26) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    }

    bb8: {
        _24 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        _28 = CheckedSub(const _, _24);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _24) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    }

    bb9: {
        _23 = move (_28.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        _29 = Lt(_23, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        assert(move _29, "attempt to shift left by `{}`, which would overflow", _23) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    }

    bb10: {
        _22 = Shl(_3, move _23);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        _32 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
        _33 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
        _34 = CheckedSub(_32, _33);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", move _32, move _33) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    }

    bb11: {
        _31 = move (_34.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        _35 = CheckedSub(const _, _31);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _31) -> [success: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    }

    bb12: {
        _30 = move (_35.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        _36 = Lt(_30, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        assert(move _36, "attempt to shift right by `{}`, which would overflow", _30) -> [success: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    }

    bb13: {
        _21 = Shr(move _22, move _30);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        _20 = Eq(move _21, _3);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
        _19 = Not(move _20);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
        switchInt(move _19) -> [0: bb15, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    }

    bb14: {
        _37 = panic(const "value does not fit into bit range") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:258:25: 258:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _43 = Not(const 0_i16);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
        _45 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
        _46 = CheckedSub(const _, _45);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        assert(!move (_46.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _45) -> [success: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    }

    bb16: {
        _44 = move (_46.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        _47 = Lt(_44, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        assert(move _47, "attempt to shift left by `{}`, which would overflow", _44) -> [success: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    }

    bb17: {
        _42 = Shl(move _43, move _44);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        _49 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
        _50 = CheckedSub(const _, _49);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _49) -> [success: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    }

    bb18: {
        _48 = move (_50.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        _51 = Lt(_48, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        assert(move _51, "attempt to shift right by `{}`, which would overflow", _48) -> [success: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    }

    bb19: {
        _41 = Shr(move _42, move _48);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        _52 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
        _53 = Lt(_52, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        assert(move _53, "attempt to shift right by `{}`, which would overflow", _52) -> [success: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    }

    bb20: {
        _40 = Shr(move _41, move _52);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        _54 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
        _55 = Lt(_54, const 16_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        assert(move _55, "attempt to shift left by `{}`, which would overflow", _54) -> [success: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    }

    bb21: {
        _39 = Shl(move _40, move _54);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        _38 = Not(move _39);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:37: 262:64
        _57 = (*_1);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
        _56 = BitAnd(move _57, _38);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
        _59 = (_4.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
        _60 = Lt(_59, const 16_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        assert(move _60, "attempt to shift left by `{}`, which would overflow", _59) -> [success: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    }

    bb22: {
        _58 = Shl(_3, move _59);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        (*_1) = BitOr(move _56, move _58); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:17: 265:67
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:267:17: 267:21
        drop(_2) -> [return: bb23, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:13: 268:14
    }

    bb23: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:14: 268:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::BIT_LENGTH: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:31: 212:36
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
    let mut _2: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
        _1 = core::mem::size_of::<i32>() -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:67
                                         // + literal: Const { ty: fn() -> usize {core::mem::size_of::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = CheckedMul(_1, const 8_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 8_usize) -> [success: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
    }

    bb2: {
        _0 = move (_2.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:81: 212:82
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bit(_1: &i32, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:24: 215:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:31: 215:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:46: 215:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
    let mut _5: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _6: i32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
    let mut _7: i32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
    let mut _8: i32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36

    bb0: {
        _4 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    }

    bb1: {
        _5 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
        _9 = Lt(_2, const 32_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        assert(move _9, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    }

    bb3: {
        _8 = Shl(const 1_i32, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
        _0 = Ne(move _6, const 0_i32);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:219:14: 219:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bits(_1: &i32, _2: T) -> i32 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:48: 222:53
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:55: 222:60
    let mut _0: i32;                     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:68: 222:72
    let _3: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
    let mut _8: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
    let mut _11: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
    let mut _12: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
    let mut _17: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _19: i32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _20: i32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
    let mut _23: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    let mut _29: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    scope 1 {
        debug range => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
        let _18: i32;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        scope 2 {
            debug bits => _18;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        }
    }

    bb0: {
        _4 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
        _3 = to_regular_range::<T>(_4, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (_3.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
        _6 = Lt(move _7, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    }

    bb2: {
        _8 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
        _10 = Le(move _11, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
        _9 = Not(move _10);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    }

    bb4: {
        _12 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _15 = (_3.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
        _16 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
        _14 = Lt(move _15, move _16);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    }

    bb6: {
        _17 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _20 = (*_1);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
        _22 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
        _23 = CheckedSub(const _, _22);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _22) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    }

    bb8: {
        _21 = move (_23.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        _24 = Lt(_21, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        assert(move _24, "attempt to shift left by `{}`, which would overflow", _21) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    }

    bb9: {
        _19 = Shl(move _20, move _21);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        _26 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
        _27 = CheckedSub(const _, _26);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _26) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    }

    bb10: {
        _25 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        _28 = Lt(_25, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        assert(move _28, "attempt to shift right by `{}`, which would overflow", _25) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    }

    bb11: {
        _18 = Shr(move _19, move _25);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        _29 = (_3.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
        _30 = Lt(_29, const 32_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        assert(move _30, "attempt to shift right by `{}`, which would overflow", _29) -> [success: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    }

    bb12: {
        _0 = Shr(_18, move _29);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        drop(_2) -> [return: bb13, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:13: 234:14
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:14: 234:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bit(_1: &mut i32, _2: usize, _3: bool) -> &mut i32 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:24: 237:33
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:35: 237:38
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:47: 237:52
    let mut _0: &mut i32;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:63: 237:72
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
    let mut _6: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _7: i32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _9: i32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
    let mut _10: i32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41

    bb0: {
        _5 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
        _4 = Not(move _5);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    }

    bb1: {
        _6 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(_3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:20: 240:25
    }

    bb3: {
        _8 = Lt(_2, const 32_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        assert(move _8, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    }

    bb4: {
        _11 = Lt(_2, const 32_usize);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        assert(move _11, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    }

    bb5: {
        _7 = Shl(const 1_i32, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        (*_1) = BitOr((*_1), move _7);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:21: 241:38
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb6: {
        _10 = Shl(const 1_i32, _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
        (*_1) = BitAnd((*_1), move _9);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:21: 243:41
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb7: {
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:246:17: 246:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:247:14: 247:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bits(_1: &mut i32, _2: T, _3: i32) -> &mut i32 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:48: 250:57
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:59: 250:64
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:69: 250:74
    let mut _0: &mut i32;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:85: 250:94
    let _4: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
    let mut _9: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
    let mut _13: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
    let mut _18: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
    let mut _21: i32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _22: i32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _24: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _30: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _31: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
    let mut _34: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _35: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _37: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _39: i32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _40: i32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _41: i32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _42: i32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _43: i32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
    let mut _44: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _45: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
    let mut _46: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _48: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _49: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
    let mut _50: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _52: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _54: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _56: i32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
    let mut _57: i32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
    let mut _58: i32;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    let mut _59: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    scope 1 {
        debug range => _4;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
        let _38: i32;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        scope 2 {
            debug bitmask => _38;        // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        }
    }

    bb0: {
        _5 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
        _4 = to_regular_range::<T>(_5, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (_4.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
        _7 = Lt(move _8, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
        _6 = Not(move _7);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    }

    bb2: {
        _9 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
        _11 = Le(move _12, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    }

    bb4: {
        _13 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _16 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
        _17 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
        _15 = Lt(move _16, move _17);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
        _14 = Not(move _15);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
        switchInt(move _14) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    }

    bb6: {
        _18 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _25 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
        _26 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
        _27 = CheckedSub(_25, _26);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _25, move _26) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    }

    bb8: {
        _24 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        _28 = CheckedSub(const _, _24);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _24) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    }

    bb9: {
        _23 = move (_28.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        _29 = Lt(_23, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        assert(move _29, "attempt to shift left by `{}`, which would overflow", _23) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    }

    bb10: {
        _22 = Shl(_3, move _23);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        _32 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
        _33 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
        _34 = CheckedSub(_32, _33);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", move _32, move _33) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    }

    bb11: {
        _31 = move (_34.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        _35 = CheckedSub(const _, _31);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _31) -> [success: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    }

    bb12: {
        _30 = move (_35.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        _36 = Lt(_30, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        assert(move _36, "attempt to shift right by `{}`, which would overflow", _30) -> [success: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    }

    bb13: {
        _21 = Shr(move _22, move _30);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        _20 = Eq(move _21, _3);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
        _19 = Not(move _20);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
        switchInt(move _19) -> [0: bb15, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    }

    bb14: {
        _37 = panic(const "value does not fit into bit range") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:258:25: 258:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _43 = Not(const 0_i32);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
        _45 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
        _46 = CheckedSub(const _, _45);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        assert(!move (_46.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _45) -> [success: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    }

    bb16: {
        _44 = move (_46.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        _47 = Lt(_44, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        assert(move _47, "attempt to shift left by `{}`, which would overflow", _44) -> [success: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    }

    bb17: {
        _42 = Shl(move _43, move _44);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        _49 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
        _50 = CheckedSub(const _, _49);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _49) -> [success: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    }

    bb18: {
        _48 = move (_50.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        _51 = Lt(_48, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        assert(move _51, "attempt to shift right by `{}`, which would overflow", _48) -> [success: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    }

    bb19: {
        _41 = Shr(move _42, move _48);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        _52 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
        _53 = Lt(_52, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        assert(move _53, "attempt to shift right by `{}`, which would overflow", _52) -> [success: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    }

    bb20: {
        _40 = Shr(move _41, move _52);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        _54 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
        _55 = Lt(_54, const 32_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        assert(move _55, "attempt to shift left by `{}`, which would overflow", _54) -> [success: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    }

    bb21: {
        _39 = Shl(move _40, move _54);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        _38 = Not(move _39);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:37: 262:64
        _57 = (*_1);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
        _56 = BitAnd(move _57, _38);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
        _59 = (_4.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
        _60 = Lt(_59, const 32_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        assert(move _60, "attempt to shift left by `{}`, which would overflow", _59) -> [success: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    }

    bb22: {
        _58 = Shl(_3, move _59);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        (*_1) = BitOr(move _56, move _58); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:17: 265:67
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:267:17: 267:21
        drop(_2) -> [return: bb23, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:13: 268:14
    }

    bb23: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:14: 268:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::BIT_LENGTH: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:31: 212:36
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
    let mut _2: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
        _1 = core::mem::size_of::<i64>() -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:67
                                         // + literal: Const { ty: fn() -> usize {core::mem::size_of::<i64>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = CheckedMul(_1, const 8_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 8_usize) -> [success: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
    }

    bb2: {
        _0 = move (_2.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:81: 212:82
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bit(_1: &i64, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:24: 215:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:31: 215:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:46: 215:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
    let mut _5: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _6: i64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
    let mut _7: i64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
    let mut _8: i64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36

    bb0: {
        _4 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    }

    bb1: {
        _5 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
        _9 = Lt(_2, const 64_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        assert(move _9, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    }

    bb3: {
        _8 = Shl(const 1_i64, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
        _0 = Ne(move _6, const 0_i64);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:219:14: 219:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bits(_1: &i64, _2: T) -> i64 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:48: 222:53
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:55: 222:60
    let mut _0: i64;                     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:68: 222:72
    let _3: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
    let mut _8: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
    let mut _11: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
    let mut _12: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
    let mut _17: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _19: i64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _20: i64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
    let mut _23: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    let mut _29: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    scope 1 {
        debug range => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
        let _18: i64;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        scope 2 {
            debug bits => _18;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        }
    }

    bb0: {
        _4 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
        _3 = to_regular_range::<T>(_4, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (_3.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
        _6 = Lt(move _7, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    }

    bb2: {
        _8 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
        _10 = Le(move _11, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
        _9 = Not(move _10);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    }

    bb4: {
        _12 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _15 = (_3.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
        _16 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
        _14 = Lt(move _15, move _16);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    }

    bb6: {
        _17 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _20 = (*_1);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
        _22 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
        _23 = CheckedSub(const _, _22);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _22) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    }

    bb8: {
        _21 = move (_23.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        _24 = Lt(_21, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        assert(move _24, "attempt to shift left by `{}`, which would overflow", _21) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    }

    bb9: {
        _19 = Shl(move _20, move _21);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        _26 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
        _27 = CheckedSub(const _, _26);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _26) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    }

    bb10: {
        _25 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        _28 = Lt(_25, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        assert(move _28, "attempt to shift right by `{}`, which would overflow", _25) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    }

    bb11: {
        _18 = Shr(move _19, move _25);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        _29 = (_3.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
        _30 = Lt(_29, const 64_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        assert(move _30, "attempt to shift right by `{}`, which would overflow", _29) -> [success: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    }

    bb12: {
        _0 = Shr(_18, move _29);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        drop(_2) -> [return: bb13, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:13: 234:14
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:14: 234:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bit(_1: &mut i64, _2: usize, _3: bool) -> &mut i64 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:24: 237:33
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:35: 237:38
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:47: 237:52
    let mut _0: &mut i64;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:63: 237:72
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
    let mut _6: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _7: i64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _9: i64;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
    let mut _10: i64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41

    bb0: {
        _5 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
        _4 = Not(move _5);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    }

    bb1: {
        _6 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(_3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:20: 240:25
    }

    bb3: {
        _8 = Lt(_2, const 64_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        assert(move _8, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    }

    bb4: {
        _11 = Lt(_2, const 64_usize);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        assert(move _11, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    }

    bb5: {
        _7 = Shl(const 1_i64, _2);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        (*_1) = BitOr((*_1), move _7);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:21: 241:38
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb6: {
        _10 = Shl(const 1_i64, _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
        (*_1) = BitAnd((*_1), move _9);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:21: 243:41
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb7: {
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:246:17: 246:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:247:14: 247:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bits(_1: &mut i64, _2: T, _3: i64) -> &mut i64 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:48: 250:57
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:59: 250:64
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:69: 250:74
    let mut _0: &mut i64;                // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:85: 250:94
    let _4: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
    let mut _9: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
    let mut _13: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
    let mut _18: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
    let mut _21: i64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _22: i64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _24: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _30: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _31: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
    let mut _34: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _35: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _37: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _39: i64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _40: i64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _41: i64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _42: i64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _43: i64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
    let mut _44: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _45: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
    let mut _46: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _48: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _49: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
    let mut _50: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _52: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _54: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _56: i64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
    let mut _57: i64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
    let mut _58: i64;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    let mut _59: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    scope 1 {
        debug range => _4;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
        let _38: i64;                    // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        scope 2 {
            debug bitmask => _38;        // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        }
    }

    bb0: {
        _5 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
        _4 = to_regular_range::<T>(_5, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (_4.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
        _7 = Lt(move _8, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
        _6 = Not(move _7);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    }

    bb2: {
        _9 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
        _11 = Le(move _12, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    }

    bb4: {
        _13 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _16 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
        _17 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
        _15 = Lt(move _16, move _17);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
        _14 = Not(move _15);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
        switchInt(move _14) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    }

    bb6: {
        _18 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _25 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
        _26 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
        _27 = CheckedSub(_25, _26);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _25, move _26) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    }

    bb8: {
        _24 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        _28 = CheckedSub(const _, _24);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _24) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    }

    bb9: {
        _23 = move (_28.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        _29 = Lt(_23, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        assert(move _29, "attempt to shift left by `{}`, which would overflow", _23) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    }

    bb10: {
        _22 = Shl(_3, move _23);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        _32 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
        _33 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
        _34 = CheckedSub(_32, _33);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", move _32, move _33) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    }

    bb11: {
        _31 = move (_34.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        _35 = CheckedSub(const _, _31);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _31) -> [success: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    }

    bb12: {
        _30 = move (_35.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        _36 = Lt(_30, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        assert(move _36, "attempt to shift right by `{}`, which would overflow", _30) -> [success: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    }

    bb13: {
        _21 = Shr(move _22, move _30);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        _20 = Eq(move _21, _3);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
        _19 = Not(move _20);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
        switchInt(move _19) -> [0: bb15, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    }

    bb14: {
        _37 = panic(const "value does not fit into bit range") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:258:25: 258:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _43 = Not(const 0_i64);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
        _45 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
        _46 = CheckedSub(const _, _45);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        assert(!move (_46.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _45) -> [success: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    }

    bb16: {
        _44 = move (_46.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        _47 = Lt(_44, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        assert(move _47, "attempt to shift left by `{}`, which would overflow", _44) -> [success: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    }

    bb17: {
        _42 = Shl(move _43, move _44);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        _49 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
        _50 = CheckedSub(const _, _49);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _49) -> [success: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    }

    bb18: {
        _48 = move (_50.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        _51 = Lt(_48, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        assert(move _51, "attempt to shift right by `{}`, which would overflow", _48) -> [success: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    }

    bb19: {
        _41 = Shr(move _42, move _48);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        _52 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
        _53 = Lt(_52, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        assert(move _53, "attempt to shift right by `{}`, which would overflow", _52) -> [success: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    }

    bb20: {
        _40 = Shr(move _41, move _52);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        _54 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
        _55 = Lt(_54, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        assert(move _55, "attempt to shift left by `{}`, which would overflow", _54) -> [success: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    }

    bb21: {
        _39 = Shl(move _40, move _54);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        _38 = Not(move _39);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:37: 262:64
        _57 = (*_1);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
        _56 = BitAnd(move _57, _38);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
        _59 = (_4.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
        _60 = Lt(_59, const 64_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        assert(move _60, "attempt to shift left by `{}`, which would overflow", _59) -> [success: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    }

    bb22: {
        _58 = Shl(_3, move _59);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        (*_1) = BitOr(move _56, move _58); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:17: 265:67
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:267:17: 267:21
        drop(_2) -> [return: bb23, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:13: 268:14
    }

    bb23: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:14: 268:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::BIT_LENGTH: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:31: 212:36
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
    let mut _2: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
        _1 = core::mem::size_of::<i128>() -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:67
                                         // + literal: Const { ty: fn() -> usize {core::mem::size_of::<i128>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = CheckedMul(_1, const 8_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 8_usize) -> [success: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
    }

    bb2: {
        _0 = move (_2.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:81: 212:82
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bit(_1: &i128, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:24: 215:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:31: 215:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:46: 215:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
    let mut _5: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _6: i128;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
    let mut _7: i128;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
    let mut _8: i128;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36

    bb0: {
        _4 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    }

    bb1: {
        _5 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
        _9 = Lt(_2, const 128_usize);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        assert(move _9, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    }

    bb3: {
        _8 = Shl(const 1_i128, _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
        _0 = Ne(move _6, const 0_i128);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:219:14: 219:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bits(_1: &i128, _2: T) -> i128 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:48: 222:53
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:55: 222:60
    let mut _0: i128;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:68: 222:72
    let _3: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
    let mut _8: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
    let mut _11: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
    let mut _12: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
    let mut _17: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _19: i128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _20: i128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
    let mut _23: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    let mut _29: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    scope 1 {
        debug range => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
        let _18: i128;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        scope 2 {
            debug bits => _18;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        }
    }

    bb0: {
        _4 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
        _3 = to_regular_range::<T>(_4, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (_3.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
        _6 = Lt(move _7, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    }

    bb2: {
        _8 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
        _10 = Le(move _11, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
        _9 = Not(move _10);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    }

    bb4: {
        _12 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _15 = (_3.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
        _16 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
        _14 = Lt(move _15, move _16);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    }

    bb6: {
        _17 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _20 = (*_1);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
        _22 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
        _23 = CheckedSub(const _, _22);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _22) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    }

    bb8: {
        _21 = move (_23.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        _24 = Lt(_21, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        assert(move _24, "attempt to shift left by `{}`, which would overflow", _21) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    }

    bb9: {
        _19 = Shl(move _20, move _21);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        _26 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
        _27 = CheckedSub(const _, _26);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _26) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    }

    bb10: {
        _25 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        _28 = Lt(_25, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        assert(move _28, "attempt to shift right by `{}`, which would overflow", _25) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    }

    bb11: {
        _18 = Shr(move _19, move _25);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        _29 = (_3.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
        _30 = Lt(_29, const 128_usize);  // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        assert(move _30, "attempt to shift right by `{}`, which would overflow", _29) -> [success: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    }

    bb12: {
        _0 = Shr(_18, move _29);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        drop(_2) -> [return: bb13, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:13: 234:14
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:14: 234:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bit(_1: &mut i128, _2: usize, _3: bool) -> &mut i128 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:24: 237:33
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:35: 237:38
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:47: 237:52
    let mut _0: &mut i128;               // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:63: 237:72
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
    let mut _6: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _7: i128;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _9: i128;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
    let mut _10: i128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41

    bb0: {
        _5 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
        _4 = Not(move _5);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    }

    bb1: {
        _6 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(_3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:20: 240:25
    }

    bb3: {
        _8 = Lt(_2, const 128_usize);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        assert(move _8, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    }

    bb4: {
        _11 = Lt(_2, const 128_usize);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        assert(move _11, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    }

    bb5: {
        _7 = Shl(const 1_i128, _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        (*_1) = BitOr((*_1), move _7);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:21: 241:38
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb6: {
        _10 = Shl(const 1_i128, _2);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
        (*_1) = BitAnd((*_1), move _9);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:21: 243:41
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb7: {
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:246:17: 246:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:247:14: 247:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bits(_1: &mut i128, _2: T, _3: i128) -> &mut i128 {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:48: 250:57
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:59: 250:64
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:69: 250:74
    let mut _0: &mut i128;               // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:85: 250:94
    let _4: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
    let mut _9: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
    let mut _13: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
    let mut _18: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
    let mut _21: i128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _22: i128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _24: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _30: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _31: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
    let mut _34: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _35: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _37: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _39: i128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _40: i128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _41: i128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _42: i128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _43: i128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
    let mut _44: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _45: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
    let mut _46: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _48: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _49: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
    let mut _50: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _52: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _54: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _56: i128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
    let mut _57: i128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
    let mut _58: i128;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    let mut _59: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    scope 1 {
        debug range => _4;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
        let _38: i128;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        scope 2 {
            debug bitmask => _38;        // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        }
    }

    bb0: {
        _5 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
        _4 = to_regular_range::<T>(_5, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (_4.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
        _7 = Lt(move _8, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
        _6 = Not(move _7);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    }

    bb2: {
        _9 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
        _11 = Le(move _12, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    }

    bb4: {
        _13 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _16 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
        _17 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
        _15 = Lt(move _16, move _17);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
        _14 = Not(move _15);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
        switchInt(move _14) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    }

    bb6: {
        _18 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _25 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
        _26 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
        _27 = CheckedSub(_25, _26);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _25, move _26) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    }

    bb8: {
        _24 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        _28 = CheckedSub(const _, _24);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _24) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    }

    bb9: {
        _23 = move (_28.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        _29 = Lt(_23, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        assert(move _29, "attempt to shift left by `{}`, which would overflow", _23) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    }

    bb10: {
        _22 = Shl(_3, move _23);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        _32 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
        _33 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
        _34 = CheckedSub(_32, _33);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", move _32, move _33) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    }

    bb11: {
        _31 = move (_34.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        _35 = CheckedSub(const _, _31);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _31) -> [success: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    }

    bb12: {
        _30 = move (_35.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        _36 = Lt(_30, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        assert(move _36, "attempt to shift right by `{}`, which would overflow", _30) -> [success: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    }

    bb13: {
        _21 = Shr(move _22, move _30);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        _20 = Eq(move _21, _3);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
        _19 = Not(move _20);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
        switchInt(move _19) -> [0: bb15, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    }

    bb14: {
        _37 = panic(const "value does not fit into bit range") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:258:25: 258:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _43 = Not(const 0_i128);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
        _45 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
        _46 = CheckedSub(const _, _45);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        assert(!move (_46.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _45) -> [success: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    }

    bb16: {
        _44 = move (_46.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        _47 = Lt(_44, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        assert(move _47, "attempt to shift left by `{}`, which would overflow", _44) -> [success: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    }

    bb17: {
        _42 = Shl(move _43, move _44);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        _49 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
        _50 = CheckedSub(const _, _49);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _49) -> [success: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    }

    bb18: {
        _48 = move (_50.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        _51 = Lt(_48, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        assert(move _51, "attempt to shift right by `{}`, which would overflow", _48) -> [success: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    }

    bb19: {
        _41 = Shr(move _42, move _48);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        _52 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
        _53 = Lt(_52, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        assert(move _53, "attempt to shift right by `{}`, which would overflow", _52) -> [success: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    }

    bb20: {
        _40 = Shr(move _41, move _52);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        _54 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
        _55 = Lt(_54, const 128_usize);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        assert(move _55, "attempt to shift left by `{}`, which would overflow", _54) -> [success: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    }

    bb21: {
        _39 = Shl(move _40, move _54);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        _38 = Not(move _39);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:37: 262:64
        _57 = (*_1);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
        _56 = BitAnd(move _57, _38);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
        _59 = (_4.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
        _60 = Lt(_59, const 128_usize);  // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        assert(move _60, "attempt to shift left by `{}`, which would overflow", _59) -> [success: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    }

    bb22: {
        _58 = Shl(_3, move _59);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        (*_1) = BitOr(move _56, move _58); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:17: 265:67
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:267:17: 267:21
        drop(_2) -> [return: bb23, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:13: 268:14
    }

    bb23: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:14: 268:14
    }
}

const <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::BIT_LENGTH: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:31: 212:36
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
    let mut _2: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:78
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
        _1 = core::mem::size_of::<isize>() -> [return: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:67
                                         // + literal: Const { ty: fn() -> usize {core::mem::size_of::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = CheckedMul(_1, const 8_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 8_usize) -> [success: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
    }

    bb2: {
        _0 = move (_2.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:39: 212:82
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:81: 212:82
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:212:13: 212:83
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bit(_1: &isize, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:24: 215:29
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:31: 215:34
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:215:46: 215:50
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
    let mut _5: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    let mut _6: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
    let mut _7: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
    let mut _8: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36

    bb0: {
        _4 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:25: 216:47
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
    }

    bb1: {
        _5 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:216:17: 216:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:18: 218:23
        _9 = Lt(_2, const 64_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        assert(move _9, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
    }

    bb3: {
        _8 = Shl(const 1_isize, _2);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:26: 218:36
        _6 = BitAnd(move _7, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:37
        _0 = Ne(move _6, const 0_isize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:218:17: 218:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:219:14: 219:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::get_bits(_1: &isize, _2: T) -> isize {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:48: 222:53
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:55: 222:60
    let mut _0: isize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:222:68: 222:72
    let _3: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
    let mut _8: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
    let mut _11: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
    let mut _12: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
    let mut _17: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    let mut _19: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _20: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
    let mut _23: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    let mut _28: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    let mut _29: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    scope 1 {
        debug range => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:21: 223:26
        let _18: isize;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        scope 2 {
            debug bits => _18;           // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:21: 230:25
        }
    }

    bb0: {
        _4 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:46: 223:52
        _3 = to_regular_range::<T>(_4, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:223:29: 223:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (_3.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:36
        _6 = Lt(move _7, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:25: 225:55
        _5 = Not(move _6);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
    }

    bb2: {
        _8 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:225:17: 225:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:34
        _10 = Le(move _11, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:25: 226:54
        _9 = Not(move _10);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
    }

    bb4: {
        _12 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:226:17: 226:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _15 = (_3.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:36
        _16 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:39: 227:48
        _14 = Lt(move _15, move _16);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:25: 227:48
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
    }

    bb6: {
        _17 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:227:17: 227:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _20 = (*_1);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:33
        _22 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:57: 230:66
        _23 = CheckedSub(const _, _22);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _22) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
    }

    bb8: {
        _21 = move (_23.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:37: 230:67
        _24 = Lt(_21, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        assert(move _24, "attempt to shift left by `{}`, which would overflow", _21) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
    }

    bb9: {
        _19 = Shl(move _20, move _21);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:67
        _26 = (_3.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:91: 230:100
        _27 = CheckedSub(const _, _26);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _26) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
    }

    bb10: {
        _25 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:71: 230:101
        _28 = Lt(_25, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        assert(move _28, "attempt to shift right by `{}`, which would overflow", _25) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
    }

    bb11: {
        _18 = Shr(move _19, move _25);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:230:28: 230:101
        _29 = (_3.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:25: 233:36
        _30 = Lt(_29, const 64_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        assert(move _30, "attempt to shift right by `{}`, which would overflow", _29) -> [success: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
    }

    bb12: {
        _0 = Shr(_18, move _29);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:233:17: 233:36
        drop(_2) -> [return: bb13, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:13: 234:14
    }

    bb13: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:234:14: 234:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bit(_1: &mut isize, _2: usize, _3: bool) -> &mut isize {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:24: 237:33
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:35: 237:38
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:47: 237:52
    let mut _0: &mut isize;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:237:63: 237:72
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
    let mut _6: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    let mut _7: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    let mut _9: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
    let mut _10: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41

    bb0: {
        _5 = Lt(_2, const _);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:25: 238:47
        _4 = Not(move _5);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
    }

    bb1: {
        _6 = panic(const "assertion failed: bit < Self::BIT_LENGTH") -> unwind unreachable; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:238:17: 238:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(_3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:20: 240:25
    }

    bb3: {
        _8 = Lt(_2, const 64_usize);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        assert(move _8, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
    }

    bb4: {
        _11 = Lt(_2, const 64_usize);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        assert(move _11, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
    }

    bb5: {
        _7 = Shl(const 1_isize, _2);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:30: 241:38
        (*_1) = BitOr((*_1), move _7);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:241:21: 241:38
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb6: {
        _10 = Shl(const 1_isize, _2);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:31: 243:41
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:30: 243:41
        (*_1) = BitAnd((*_1), move _9);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:243:21: 243:41
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:240:17: 244:18
    }

    bb7: {
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:246:17: 246:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:247:14: 247:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:211:9: 269:10>::set_bits(_1: &mut isize, _2: T, _3: isize) -> &mut isize {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:48: 250:57
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:59: 250:64
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:69: 250:74
    let mut _0: &mut isize;              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:250:85: 250:94
    let _4: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
    let mut _9: !;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
    let mut _13: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
    let mut _18: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
    let mut _21: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _22: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _24: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _25: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
    let mut _26: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
    let mut _27: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    let mut _29: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    let mut _30: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _31: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
    let mut _34: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    let mut _35: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    let mut _36: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    let mut _37: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _39: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _40: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _41: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _42: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _43: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
    let mut _44: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _45: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
    let mut _46: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    let mut _47: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    let mut _48: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _49: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
    let mut _50: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    let mut _51: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    let mut _52: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    let mut _54: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
    let mut _55: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    let mut _56: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
    let mut _57: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
    let mut _58: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    let mut _59: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
    let mut _60: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    scope 1 {
        debug range => _4;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:21: 251:26
        let _38: isize;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        scope 2 {
            debug bitmask => _38;        // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:21: 260:28
        }
    }

    bb0: {
        _5 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:46: 251:52
        _4 = to_regular_range::<T>(_5, const _) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:71
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:251:29: 251:45
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> Range<usize> {to_regular_range::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (_4.0: usize);              // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:36
        _7 = Lt(move _8, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:25: 253:55
        _6 = Not(move _7);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
    }

    bb2: {
        _9 = panic(const "assertion failed: range.start < Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:253:17: 253:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:34
        _11 = Le(move _12, const _);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:25: 254:54
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
    }

    bb4: {
        _13 = panic(const "assertion failed: range.end <= Self::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:254:17: 254:55
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _16 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:36
        _17 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:39: 255:48
        _15 = Lt(move _16, move _17);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:25: 255:48
        _14 = Not(move _15);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
        switchInt(move _14) -> [0: bb7, otherwise: bb6]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
    }

    bb6: {
        _18 = panic(const "assertion failed: range.start < range.end") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:255:17: 255:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _25 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:55: 256:64
        _26 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:67: 256:78
        _27 = CheckedSub(_25, _26);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _25, move _26) -> [success: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
    }

    bb8: {
        _24 = move (_27.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:54: 256:79
        _28 = CheckedSub(const _, _24);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _24) -> [success: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
    }

    bb9: {
        _23 = move (_28.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:34: 256:80
        _29 = Lt(_23, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        assert(move _29, "attempt to shift left by `{}`, which would overflow", _23) -> [success: bb10, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
    }

    bb10: {
        _22 = Shl(_3, move _23);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 256:80
        _32 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:46: 257:55
        _33 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:58: 257:69
        _34 = CheckedSub(_32, _33);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", move _32, move _33) -> [success: bb11, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
    }

    bb11: {
        _31 = move (_34.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:45: 257:70
        _35 = CheckedSub(const _, _31);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _31) -> [success: bb12, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
    }

    bb12: {
        _30 = move (_35.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:257:25: 257:71
        _36 = Lt(_30, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        assert(move _36, "attempt to shift right by `{}`, which would overflow", _30) -> [success: bb13, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
    }

    bb13: {
        _21 = Shr(move _22, move _30);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:71
        _20 = Eq(move _21, _3);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:25: 257:80
        _19 = Not(move _20);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
        switchInt(move _19) -> [0: bb15, otherwise: bb14]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:256:17: 258:61
    }

    bb14: {
        _37 = panic(const "value does not fit into bit range") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:258:25: 258:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _43 = Not(const 0_isize);        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:41
        _45 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:65: 260:74
        _46 = CheckedSub(const _, _45);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        assert(!move (_46.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _45) -> [success: bb16, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
    }

    bb16: {
        _44 = move (_46.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:45: 260:75
        _47 = Lt(_44, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        assert(move _47, "attempt to shift left by `{}`, which would overflow", _44) -> [success: bb17, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
    }

    bb17: {
        _42 = Shl(move _43, move _44);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 260:75
        _49 = (_4.1: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:57: 261:66
        _50 = CheckedSub(const _, _49);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _49) -> [success: bb18, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
    }

    bb18: {
        _48 = move (_50.0: usize);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:261:37: 261:67
        _51 = Lt(_48, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        assert(move _51, "attempt to shift right by `{}`, which would overflow", _48) -> [success: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
    }

    bb19: {
        _41 = Shr(move _42, move _48);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 261:67
        _52 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:37: 262:48
        _53 = Lt(_52, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        assert(move _53, "attempt to shift right by `{}`, which would overflow", _52) -> [success: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
    }

    bb20: {
        _40 = Shr(move _41, move _52);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:39: 262:48
        _54 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:262:52: 262:63
        _55 = Lt(_54, const 64_usize);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        assert(move _55, "attempt to shift left by `{}`, which would overflow", _54) -> [success: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
    }

    bb21: {
        _39 = Shl(move _40, move _54);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:38: 262:64
        _38 = Not(move _39);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:260:37: 262:64
        _57 = (*_1);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:26: 265:31
        _56 = BitAnd(move _57, _38);     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:25: 265:42
        _59 = (_4.0: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:55: 265:66
        _60 = Lt(_59, const 64_usize);   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        assert(move _60, "attempt to shift left by `{}`, which would overflow", _59) -> [success: bb22, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
    }

    bb22: {
        _58 = Shl(_3, move _59);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:45: 265:67
        (*_1) = BitOr(move _56, move _58); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:265:17: 265:67
        _0 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:267:17: 267:21
        drop(_2) -> [return: bb23, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:13: 268:14
    }

    bb23: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:268:14: 268:14
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:275:1: 275:38>::bit_length(_1: &[T]) -> usize {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:277:19: 277:24
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:277:29: 277:34
    let mut _2: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:278:9: 278:19
    let mut _3: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:278:9: 278:35

    bb0: {
        _2 = Len((*_1));                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:278:9: 278:19
        _3 = CheckedMul(_2, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:278:9: 278:35
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const _) -> [success: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:278:9: 278:35
    }

    bb1: {
        _0 = move (_3.0: usize);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:278:9: 278:35
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:279:6: 279:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:275:1: 275:38>::get_bit(_1: &[T], _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:282:16: 282:21
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:282:23: 282:26
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:282:38: 282:42
    let _3: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:283:13: 283:24
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:283:27: 283:46
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:284:25: 284:44
    let mut _7: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:285:9: 285:45
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:285:9: 285:26
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:285:9: 285:26
    scope 1 {
        debug slice_index => _3;         // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:283:13: 283:24
        let _5: usize;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:284:13: 284:22
        scope 2 {
            debug bit_index => _5;       // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:284:13: 284:22
        }
    }

    bb0: {
        _4 = Eq(const _, const 0_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:283:27: 283:46
        assert(!move _4, "attempt to divide `{}` by zero", _2) -> [success: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:283:27: 283:46
    }

    bb1: {
        _3 = Div(_2, const _);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:283:27: 283:46
        _6 = Eq(const _, const 0_usize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:284:25: 284:44
        assert(!move _6, "attempt to calculate the remainder of `{}` with a divisor of zero", _2) -> [success: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:284:25: 284:44
    }

    bb2: {
        _5 = Rem(_2, const _);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:284:25: 284:44
        _8 = Len((*_1));                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:285:9: 285:26
        _9 = Lt(_3, _8);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:285:9: 285:26
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _3) -> [success: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:285:9: 285:26
    }

    bb3: {
        _7 = &(*_1)[_3];                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:285:9: 285:45
        _0 = <T as BitField>::get_bit(move _7, _5) -> [return: bb4, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:285:9: 285:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:285:27: 285:34
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> bool {<T as BitField>::get_bit}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:286:6: 286:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:275:1: 275:38>::get_bits(_1: &[T], _2: U) -> T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:289:40: 289:45
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:289:47: 289:52
    let mut _0: T;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:289:60: 289:61
    let _3: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:290:13: 290:18
    let _4: &U;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:290:38: 290:44
    let mut _5: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:290:46: 290:63
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:292:9: 292:46
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:292:17: 292:45
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:292:17: 292:28
    let mut _9: &core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:292:17: 292:28
    let mut _10: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:292:9: 292:46
    let mut _12: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:294:27: 294:38
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:294:27: 294:54
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:295:25: 295:34
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:295:25: 295:50
    let mut _18: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:296:25: 296:36
    let mut _19: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:296:25: 296:52
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:297:23: 297:32
    let mut _22: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:297:23: 297:48
    let mut _24: &core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:298:19: 298:30
    let mut _25: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:300:9: 300:46
    let mut _26: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:300:17: 300:45
    let mut _27: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:300:17: 300:40
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:300:17: 300:40
    let mut _29: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:300:9: 300:46
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:302:12: 302:36
    let mut _31: &T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:303:13: 303:59
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:303:13: 303:30
    let mut _33: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:303:13: 303:30
    let mut _34: core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:303:40: 303:58
    let mut _35: &T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:305:13: 305:65
    let mut _36: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:305:13: 305:30
    let mut _37: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:305:13: 305:30
    let mut _38: core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:305:40: 305:64
    let mut _40: &T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:307:27: 307:79
    let mut _41: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:307:27: 307:44
    let mut _42: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:307:27: 307:44
    let mut _43: core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:307:54: 307:78
    let _44: &mut T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:308:13: 311:14
    let mut _45: &mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:308:13: 311:14
    let mut _46: core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:309:17: 309:49
    let mut _47: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:309:17: 309:44
    let mut _48: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:309:17: 309:44
    let mut _49: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:309:46: 309:49
    let mut _50: T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:310:17: 310:53
    let mut _51: &T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:310:17: 310:53
    let mut _52: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:310:17: 310:32
    let mut _53: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:310:17: 310:32
    let mut _54: core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:310:42: 310:52
    scope 1 {
        debug range => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:290:13: 290:18
        let _11: usize;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:294:13: 294:24
        scope 2 {
            debug slice_start => _11;    // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:294:13: 294:24
            let _14: usize;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:295:13: 295:22
            scope 3 {
                debug slice_end => _14;  // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:295:13: 295:22
                let _17: usize;          // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:296:13: 296:22
                scope 4 {
                    debug bit_start => _17; // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:296:13: 296:22
                    let _20: usize;      // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:297:13: 297:20
                    scope 5 {
                        debug bit_end => _20; // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:297:13: 297:20
                        let _23: usize;  // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:298:13: 298:16
                        scope 6 {
                            debug len => _23; // in scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:298:13: 298:16
                            let mut _39: T; // in scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:307:17: 307:24
                            scope 7 {
                                debug ret => _39; // in scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:307:17: 307:24
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:290:38: 290:44
        _5 = <[T] as BitArray<T>>::bit_length(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:290:46: 290:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:290:51: 290:61
                                         // + literal: Const { ty: for<'a> fn(&'a [T]) -> usize {<[T] as BitArray<T>>::bit_length}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = to_regular_range::<U>(_4, move _5) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:290:21: 290:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:290:21: 290:37
                                         // + literal: Const { ty: for<'a> fn(&'a U, usize) -> Range<usize> {to_regular_range::<U>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &_3;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:292:17: 292:28
        _8 = <Range<usize> as ExactSizeIterator>::len(move _9) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:292:17: 292:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:292:23: 292:26
                                         // + literal: Const { ty: for<'a> fn(&'a Range<usize>) -> usize {<Range<usize> as ExactSizeIterator>::len}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = Le(move _8, const _);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:292:17: 292:45
        _6 = Not(move _7);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:292:9: 292:46
        switchInt(move _6) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:292:9: 292:46
    }

    bb4: {
        _10 = panic(const "assertion failed: range.len() <= T::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:292:9: 292:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:292:9: 292:46
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _12 = (_3.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:294:27: 294:38
        _13 = Eq(const _, const 0_usize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:294:27: 294:54
        assert(!move _13, "attempt to divide `{}` by zero", _12) -> [success: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:294:27: 294:54
    }

    bb6: {
        _11 = Div(move _12, const _);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:294:27: 294:54
        _15 = (_3.1: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:295:25: 295:34
        _16 = Eq(const _, const 0_usize); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:295:25: 295:50
        assert(!move _16, "attempt to divide `{}` by zero", _15) -> [success: bb7, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:295:25: 295:50
    }

    bb7: {
        _14 = Div(move _15, const _);    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:295:25: 295:50
        _18 = (_3.0: usize);             // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:296:25: 296:36
        _19 = Eq(const _, const 0_usize); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:296:25: 296:52
        assert(!move _19, "attempt to calculate the remainder of `{}` with a divisor of zero", _18) -> [success: bb8, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:296:25: 296:52
    }

    bb8: {
        _17 = Rem(move _18, const _);    // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:296:25: 296:52
        _21 = (_3.1: usize);             // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:297:23: 297:32
        _22 = Eq(const _, const 0_usize); // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:297:23: 297:48
        assert(!move _22, "attempt to calculate the remainder of `{}` with a divisor of zero", _21) -> [success: bb9, unwind unreachable]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:297:23: 297:48
    }

    bb9: {
        _20 = Rem(move _21, const _);    // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:297:23: 297:48
        _24 = &_3;                       // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:298:19: 298:30
        _23 = <Range<usize> as ExactSizeIterator>::len(move _24) -> [return: bb10, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:298:19: 298:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:298:25: 298:28
                                         // + literal: Const { ty: for<'a> fn(&'a Range<usize>) -> usize {<Range<usize> as ExactSizeIterator>::len}, val: Value(<ZST>) }
    }

    bb10: {
        _28 = CheckedSub(_14, _11);      // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:300:17: 300:40
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", _14, _11) -> [success: bb11, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:300:17: 300:40
    }

    bb11: {
        _27 = move (_28.0: usize);       // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:300:17: 300:40
        _26 = Le(move _27, const 1_usize); // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:300:17: 300:45
        _25 = Not(move _26);             // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:300:9: 300:46
        switchInt(move _25) -> [0: bb13, otherwise: bb12]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:300:9: 300:46
    }

    bb12: {
        _29 = panic(const "assertion failed: slice_end - slice_start <= 1") -> unwind unreachable; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:300:9: 300:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:300:9: 300:46
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _30 = Eq(_11, _14);              // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:302:12: 302:36
        switchInt(move _30) -> [0: bb15, otherwise: bb14]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:302:12: 302:36
    }

    bb14: {
        _32 = Len((*_1));                // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:303:13: 303:30
        _33 = Lt(_11, _32);              // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:303:13: 303:30
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _11) -> [success: bb16, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:303:13: 303:30
    }

    bb15: {
        switchInt(move _20) -> [0: bb17, otherwise: bb18]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:304:19: 304:31
    }

    bb16: {
        _31 = &(*_1)[_11];               // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:303:13: 303:59
        _34 = Range::<usize> { start: _17, end: _20 }; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:303:40: 303:58
        _0 = <T as BitField>::get_bits::<Range<usize>>(move _31, move _34) -> [return: bb26, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:303:13: 303:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:303:31: 303:39
                                         // + literal: Const { ty: for<'a> fn(&'a T, Range<usize>) -> T {<T as BitField>::get_bits::<Range<usize>>}, val: Value(<ZST>) }
    }

    bb17: {
        _36 = Len((*_1));                // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:305:13: 305:30
        _37 = Lt(_11, _36);              // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:305:13: 305:30
        assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _11) -> [success: bb19, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:305:13: 305:30
    }

    bb18: {
        _41 = Len((*_1));                // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:307:27: 307:44
        _42 = Lt(_11, _41);              // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:307:27: 307:44
        assert(move _42, "index out of bounds: the length is {} but the index is {}", move _41, _11) -> [success: bb20, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:307:27: 307:44
    }

    bb19: {
        _35 = &(*_1)[_11];               // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:305:13: 305:65
        _38 = Range::<usize> { start: _17, end: const _ }; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:305:40: 305:64
        _0 = <T as BitField>::get_bits::<Range<usize>>(move _35, move _38) -> [return: bb26, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:305:13: 305:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:305:31: 305:39
                                         // + literal: Const { ty: for<'a> fn(&'a T, Range<usize>) -> T {<T as BitField>::get_bits::<Range<usize>>}, val: Value(<ZST>) }
    }

    bb20: {
        _40 = &(*_1)[_11];               // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:307:27: 307:79
        _43 = Range::<usize> { start: _17, end: const _ }; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:307:54: 307:78
        _39 = <T as BitField>::get_bits::<Range<usize>>(move _40, move _43) -> [return: bb21, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:307:27: 307:79
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:307:45: 307:53
                                         // + literal: Const { ty: for<'a> fn(&'a T, Range<usize>) -> T {<T as BitField>::get_bits::<Range<usize>>}, val: Value(<ZST>) }
    }

    bb21: {
        _45 = &mut _39;                  // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:308:13: 311:14
        _48 = CheckedSub(const _, _17);  // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:309:17: 309:44
        assert(!move (_48.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, _17) -> [success: bb22, unwind unreachable]; // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:309:17: 309:44
    }

    bb22: {
        _47 = move (_48.0: usize);       // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:309:17: 309:44
        _49 = _23;                       // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:309:46: 309:49
        _46 = Range::<usize> { start: move _47, end: move _49 }; // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:309:17: 309:49
        _52 = Len((*_1));                // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:310:17: 310:32
        _53 = Lt(_14, _52);              // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:310:17: 310:32
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _14) -> [success: bb23, unwind unreachable]; // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:310:17: 310:32
    }

    bb23: {
        _51 = &(*_1)[_14];               // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:310:17: 310:53
        _54 = Range::<usize> { start: const 0_usize, end: _20 }; // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:310:42: 310:52
        _50 = <T as BitField>::get_bits::<Range<usize>>(move _51, move _54) -> [return: bb24, unwind unreachable]; // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:310:17: 310:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:310:33: 310:41
                                         // + literal: Const { ty: for<'a> fn(&'a T, Range<usize>) -> T {<T as BitField>::get_bits::<Range<usize>>}, val: Value(<ZST>) }
    }

    bb24: {
        _44 = <T as BitField>::set_bits::<Range<usize>>(move _45, move _46, move _50) -> [return: bb25, unwind unreachable]; // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:308:13: 311:14
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:308:17: 308:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut T, Range<usize>, T) -> &'a mut T {<T as BitField>::set_bits::<Range<usize>>}, val: Value(<ZST>) }
    }

    bb25: {
        _0 = move _39;                   // scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:312:13: 312:16
        goto -> bb26;                    // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:304:16: 313:10
    }

    bb26: {
        drop(_2) -> [return: bb27, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:314:5: 314:6
    }

    bb27: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:314:6: 314:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:275:1: 275:38>::set_bit(_1: &mut [T], _2: usize, _3: bool) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:317:16: 317:25
    debug bit => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:317:27: 317:30
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:317:39: 317:44
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:317:52: 317:52
    let _4: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:318:13: 318:24
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:318:27: 318:46
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:319:25: 319:44
    let _8: &mut T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:320:9: 320:52
    let mut _9: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:320:9: 320:52
    let mut _10: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:320:9: 320:26
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:320:9: 320:26
    scope 1 {
        debug slice_index => _4;         // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:318:13: 318:24
        let _6: usize;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:319:13: 319:22
        scope 2 {
            debug bit_index => _6;       // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:319:13: 319:22
        }
    }

    bb0: {
        _5 = Eq(const _, const 0_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:318:27: 318:46
        assert(!move _5, "attempt to divide `{}` by zero", _2) -> [success: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:318:27: 318:46
    }

    bb1: {
        _4 = Div(_2, const _);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:318:27: 318:46
        _7 = Eq(const _, const 0_usize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:319:25: 319:44
        assert(!move _7, "attempt to calculate the remainder of `{}` with a divisor of zero", _2) -> [success: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:319:25: 319:44
    }

    bb2: {
        _6 = Rem(_2, const _);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:319:25: 319:44
        _10 = Len((*_1));                // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:320:9: 320:26
        _11 = Lt(_4, _10);               // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:320:9: 320:26
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _4) -> [success: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:320:9: 320:26
    }

    bb3: {
        _9 = &mut (*_1)[_4];             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:320:9: 320:52
        _8 = <T as BitField>::set_bit(move _9, _6, _3) -> [return: bb4, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:320:9: 320:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:320:27: 320:34
                                         // + literal: Const { ty: for<'a> fn(&'a mut T, usize, bool) -> &'a mut T {<T as BitField>::set_bit}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:321:6: 321:6
    }
}

fn <impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:275:1: 275:38>::set_bits(_1: &mut [T], _2: U, _3: T) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:324:40: 324:49
    debug range => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:324:51: 324:56
    debug value => _3;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:324:61: 324:66
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:324:71: 324:71
    let _4: core::ops::Range<usize>;     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:325:13: 325:18
    let _5: &U;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:325:38: 325:44
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:325:46: 325:63
    let mut _7: &[T];                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:325:46: 325:63
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:327:9: 327:46
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:327:17: 327:45
    let mut _10: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:327:17: 327:28
    let mut _11: &core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:327:17: 327:28
    let mut _12: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:327:9: 327:46
    let mut _14: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:329:27: 329:38
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:329:27: 329:54
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:330:25: 330:34
    let mut _18: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:330:25: 330:50
    let mut _20: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:331:25: 331:36
    let mut _21: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:331:25: 331:52
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:332:23: 332:32
    let mut _24: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:332:23: 332:48
    let mut _25: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:334:9: 334:46
    let mut _26: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:334:17: 334:45
    let mut _27: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:334:17: 334:40
    let mut _28: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:334:17: 334:40
    let mut _29: !;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:334:9: 334:46
    let mut _30: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:336:12: 336:36
    let _31: &mut T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:13: 337:66
    let mut _32: &mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:13: 337:66
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:13: 337:30
    let mut _34: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:13: 337:30
    let mut _35: core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:40: 337:58
    let mut _36: T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:60: 337:65
    let _37: &mut T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:13: 339:72
    let mut _38: &mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:13: 339:72
    let mut _39: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:13: 339:30
    let mut _40: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:13: 339:30
    let mut _41: core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:40: 339:64
    let mut _42: T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:66: 339:71
    let _43: &mut T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:341:13: 344:14
    let mut _44: &mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:341:13: 344:14
    let mut _45: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:341:13: 341:30
    let mut _46: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:341:13: 341:30
    let mut _47: core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:342:17: 342:41
    let mut _48: T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:343:17: 343:61
    let mut _49: &T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:343:17: 343:61
    let mut _50: core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:343:32: 343:60
    let mut _51: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:343:35: 343:60
    let mut _52: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:343:35: 343:60
    let _53: &mut T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:345:13: 348:14
    let mut _54: &mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:345:13: 348:14
    let mut _55: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:345:13: 345:28
    let mut _56: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:345:13: 345:28
    let mut _57: core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:346:17: 346:27
    let mut _58: T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:347:17: 347:73
    let mut _59: &T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:347:17: 347:73
    let mut _60: core::ops::Range<usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:347:32: 347:72
    let mut _61: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:347:32: 347:57
    let mut _62: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:347:32: 347:57
    let mut _63: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:350:5: 350:6
    scope 1 {
        debug range => _4;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:325:13: 325:18
        let _13: usize;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:329:13: 329:24
        scope 2 {
            debug slice_start => _13;    // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:329:13: 329:24
            let _16: usize;              // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:330:13: 330:22
            scope 3 {
                debug slice_end => _16;  // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:330:13: 330:22
                let _19: usize;          // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:331:13: 331:22
                scope 4 {
                    debug bit_start => _19; // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:331:13: 331:22
                    let _22: usize;      // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:332:13: 332:20
                    scope 5 {
                        debug bit_end => _22; // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:332:13: 332:20
                    }
                }
            }
        }
    }

    bb0: {
        _63 = const false;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:325:13: 325:18
        _63 = const true;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:325:13: 325:18
        _5 = &_2;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:325:38: 325:44
        _7 = &(*_1);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:325:46: 325:63
        _6 = <[T] as BitArray<T>>::bit_length(move _7) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:325:46: 325:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:325:51: 325:61
                                         // + literal: Const { ty: for<'a> fn(&'a [T]) -> usize {<[T] as BitArray<T>>::bit_length}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = to_regular_range::<U>(_5, move _6) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:325:21: 325:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:325:21: 325:37
                                         // + literal: Const { ty: for<'a> fn(&'a U, usize) -> Range<usize> {to_regular_range::<U>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &_4;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:327:17: 327:28
        _10 = <Range<usize> as ExactSizeIterator>::len(move _11) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:327:17: 327:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:327:23: 327:26
                                         // + literal: Const { ty: for<'a> fn(&'a Range<usize>) -> usize {<Range<usize> as ExactSizeIterator>::len}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = Le(move _10, const _);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:327:17: 327:45
        _8 = Not(move _9);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:327:9: 327:46
        switchInt(move _8) -> [0: bb5, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:327:9: 327:46
    }

    bb4: {
        _12 = panic(const "assertion failed: range.len() <= T::BIT_LENGTH") -> unwind unreachable; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:327:9: 327:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:327:9: 327:46
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _14 = (_4.0: usize);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:329:27: 329:38
        _15 = Eq(const _, const 0_usize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:329:27: 329:54
        assert(!move _15, "attempt to divide `{}` by zero", _14) -> [success: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:329:27: 329:54
    }

    bb6: {
        _13 = Div(move _14, const _);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:329:27: 329:54
        _17 = (_4.1: usize);             // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:330:25: 330:34
        _18 = Eq(const _, const 0_usize); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:330:25: 330:50
        assert(!move _18, "attempt to divide `{}` by zero", _17) -> [success: bb7, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:330:25: 330:50
    }

    bb7: {
        _16 = Div(move _17, const _);    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:330:25: 330:50
        _20 = (_4.0: usize);             // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:331:25: 331:36
        _21 = Eq(const _, const 0_usize); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:331:25: 331:52
        assert(!move _21, "attempt to calculate the remainder of `{}` with a divisor of zero", _20) -> [success: bb8, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:331:25: 331:52
    }

    bb8: {
        _19 = Rem(move _20, const _);    // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:331:25: 331:52
        _23 = (_4.1: usize);             // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:332:23: 332:32
        _24 = Eq(const _, const 0_usize); // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:332:23: 332:48
        assert(!move _24, "attempt to calculate the remainder of `{}` with a divisor of zero", _23) -> [success: bb9, unwind unreachable]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:332:23: 332:48
    }

    bb9: {
        _22 = Rem(move _23, const _);    // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:332:23: 332:48
        _28 = CheckedSub(_16, _13);      // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:334:17: 334:40
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", _16, _13) -> [success: bb10, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:334:17: 334:40
    }

    bb10: {
        _27 = move (_28.0: usize);       // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:334:17: 334:40
        _26 = Le(move _27, const 1_usize); // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:334:17: 334:45
        _25 = Not(move _26);             // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:334:9: 334:46
        switchInt(move _25) -> [0: bb12, otherwise: bb11]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:334:9: 334:46
    }

    bb11: {
        _29 = panic(const "assertion failed: slice_end - slice_start <= 1") -> unwind unreachable; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:334:9: 334:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:334:9: 334:46
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _30 = Eq(_13, _16);              // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:336:12: 336:36
        switchInt(move _30) -> [0: bb14, otherwise: bb13]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:336:12: 336:36
    }

    bb13: {
        _33 = Len((*_1));                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:13: 337:30
        _34 = Lt(_13, _33);              // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:13: 337:30
        assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _13) -> [success: bb15, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:13: 337:30
    }

    bb14: {
        switchInt(move _22) -> [0: bb16, otherwise: bb17]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:338:19: 338:31
    }

    bb15: {
        _32 = &mut (*_1)[_13];           // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:13: 337:66
        _35 = Range::<usize> { start: _19, end: _22 }; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:40: 337:58
        _63 = const false;               // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:60: 337:65
        _36 = move _3;                   // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:60: 337:65
        _31 = <T as BitField>::set_bits::<Range<usize>>(move _32, move _35, move _36) -> [return: bb26, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:13: 337:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:337:31: 337:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut T, Range<usize>, T) -> &'a mut T {<T as BitField>::set_bits::<Range<usize>>}, val: Value(<ZST>) }
    }

    bb16: {
        _39 = Len((*_1));                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:13: 339:30
        _40 = Lt(_13, _39);              // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:13: 339:30
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _13) -> [success: bb18, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:13: 339:30
    }

    bb17: {
        _45 = Len((*_1));                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:341:13: 341:30
        _46 = Lt(_13, _45);              // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:341:13: 341:30
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _13) -> [success: bb19, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:341:13: 341:30
    }

    bb18: {
        _38 = &mut (*_1)[_13];           // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:13: 339:72
        _41 = Range::<usize> { start: _19, end: const _ }; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:40: 339:64
        _63 = const false;               // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:66: 339:71
        _42 = move _3;                   // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:66: 339:71
        _37 = <T as BitField>::set_bits::<Range<usize>>(move _38, move _41, move _42) -> [return: bb26, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:13: 339:72
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:339:31: 339:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut T, Range<usize>, T) -> &'a mut T {<T as BitField>::set_bits::<Range<usize>>}, val: Value(<ZST>) }
    }

    bb19: {
        _44 = &mut (*_1)[_13];           // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:341:13: 344:14
        _47 = Range::<usize> { start: _19, end: const _ }; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:342:17: 342:41
        _49 = &_3;                       // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:343:17: 343:61
        _52 = CheckedSub(const _, _19);  // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:343:35: 343:60
        assert(!move (_52.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, _19) -> [success: bb20, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:343:35: 343:60
    }

    bb20: {
        _51 = move (_52.0: usize);       // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:343:35: 343:60
        _50 = Range::<usize> { start: const 0_usize, end: move _51 }; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:343:32: 343:60
        _48 = <T as BitField>::get_bits::<Range<usize>>(move _49, move _50) -> [return: bb21, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:343:17: 343:61
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:343:23: 343:31
                                         // + literal: Const { ty: for<'a> fn(&'a T, Range<usize>) -> T {<T as BitField>::get_bits::<Range<usize>>}, val: Value(<ZST>) }
    }

    bb21: {
        _43 = <T as BitField>::set_bits::<Range<usize>>(move _44, move _47, move _48) -> [return: bb22, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:341:13: 344:14
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:341:31: 341:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut T, Range<usize>, T) -> &'a mut T {<T as BitField>::set_bits::<Range<usize>>}, val: Value(<ZST>) }
    }

    bb22: {
        _55 = Len((*_1));                // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:345:13: 345:28
        _56 = Lt(_16, _55);              // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:345:13: 345:28
        assert(move _56, "index out of bounds: the length is {} but the index is {}", move _55, _16) -> [success: bb23, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:345:13: 345:28
    }

    bb23: {
        _54 = &mut (*_1)[_16];           // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:345:13: 348:14
        _57 = Range::<usize> { start: const 0_usize, end: _22 }; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:346:17: 346:27
        _59 = &_3;                       // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:347:17: 347:73
        _62 = CheckedSub(const _, _19);  // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:347:32: 347:57
        assert(!move (_62.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, _19) -> [success: bb24, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:347:32: 347:57
    }

    bb24: {
        _61 = move (_62.0: usize);       // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:347:32: 347:57
        _60 = Range::<usize> { start: move _61, end: const _ }; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:347:32: 347:72
        _58 = <T as BitField>::get_bits::<Range<usize>>(move _59, move _60) -> [return: bb25, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:347:17: 347:73
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:347:23: 347:31
                                         // + literal: Const { ty: for<'a> fn(&'a T, Range<usize>) -> T {<T as BitField>::get_bits::<Range<usize>>}, val: Value(<ZST>) }
    }

    bb25: {
        _53 = <T as BitField>::set_bits::<Range<usize>>(move _54, move _57, move _58) -> [return: bb26, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:345:13: 348:14
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:345:29: 345:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut T, Range<usize>, T) -> &'a mut T {<T as BitField>::set_bits::<Range<usize>>}, val: Value(<ZST>) }
    }

    bb26: {
        switchInt(_63) -> [0: bb27, otherwise: bb29]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:350:5: 350:6
    }

    bb27: {
        drop(_2) -> [return: bb28, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:350:5: 350:6
    }

    bb28: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:350:6: 350:6
    }

    bb29: {
        drop(_3) -> [return: bb27, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:350:5: 350:6
    }
}

fn to_regular_range(_1: &T, _2: usize) -> Range<usize> {
    debug generic_rage => _1;            // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:353:44: 353:56
    debug bit_length => _2;              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:353:62: 353:72
    let mut _0: core::ops::Range<usize>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:353:84: 353:96
    let _3: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:354:9: 354:14
    let mut _4: core::ops::Bound<&usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:354:23: 354:49
    let mut _5: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:355:9: 355:32
    let _6: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:355:26: 355:31
    let mut _7: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:355:36: 355:45
    let _8: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:356:26: 356:31
    let mut _10: core::ops::Bound<&usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:359:21: 359:45
    let mut _11: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:360:9: 360:32
    let mut _14: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:361:36: 361:45
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:365:5: 365:10
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:365:12: 365:15
    let mut _17: &usize;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:354:23: 354:49
    let mut _18: &usize;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:354:23: 354:49
    let mut _19: &usize;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:359:21: 359:45
    let mut _20: &usize;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:359:21: 359:45
    scope 1 {
        debug start => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:354:9: 354:14
        let _9: usize;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:359:9: 359:12
        let _12: usize;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:360:26: 360:31
        let _13: usize;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:361:26: 361:31
        scope 4 {
            debug end => _9;             // in scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:359:9: 359:12
        }
        scope 5 {
            debug value => _12;          // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:360:26: 360:31
        }
        scope 6 {
            debug value => _13;          // in scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:361:26: 361:31
        }
    }
    scope 2 {
        debug value => _6;               // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:355:26: 355:31
    }
    scope 3 {
        debug value => _8;               // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:356:26: 356:31
    }

    bb0: {
        _4 = <T as RangeBounds<usize>>::start_bound(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:354:23: 354:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:354:36: 354:47
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> Bound<&'a usize> {<T as RangeBounds<usize>>::start_bound}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:354:23: 354:49
        switchInt(move _5) -> [0: bb6, 1: bb4, 2: bb2, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:354:17: 354:49
    }

    bb2: {
        _3 = const 0_usize;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:357:29: 357:30
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:357:29: 357:30
    }

    bb3: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:354:23: 354:49
    }

    bb4: {
        _17 = deref_copy ((_4 as Excluded).0: &usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:355:26: 355:31
        _6 = (*_17);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:355:26: 355:31
        _7 = CheckedAdd(_6, const 1_usize); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:355:36: 355:45
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", _6, const 1_usize) -> [success: bb5, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:355:36: 355:45
    }

    bb5: {
        _3 = move (_7.0: usize);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:355:36: 355:45
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:355:44: 355:45
    }

    bb6: {
        _18 = deref_copy ((_4 as Included).0: &usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:356:26: 356:31
        _8 = (*_18);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:356:26: 356:31
        _3 = _8;                         // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:356:36: 356:41
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:356:40: 356:41
    }

    bb7: {
        _10 = <T as RangeBounds<usize>>::end_bound(_1) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:359:21: 359:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:359:34: 359:43
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> Bound<&'a usize> {<T as RangeBounds<usize>>::end_bound}, val: Value(<ZST>) }
    }

    bb8: {
        _11 = discriminant(_10);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:359:21: 359:45
        switchInt(move _11) -> [0: bb11, 1: bb10, 2: bb9, otherwise: bb3]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:359:15: 359:45
    }

    bb9: {
        _9 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:362:29: 362:39
        goto -> bb13;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:362:29: 362:39
    }

    bb10: {
        _19 = deref_copy ((_10 as Excluded).0: &usize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:360:26: 360:31
        _12 = (*_19);                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:360:26: 360:31
        _9 = _12;                        // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:360:36: 360:41
        goto -> bb13;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:360:40: 360:41
    }

    bb11: {
        _20 = deref_copy ((_10 as Included).0: &usize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:361:26: 361:31
        _13 = (*_20);                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:361:26: 361:31
        _14 = CheckedAdd(_13, const 1_usize); // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:361:36: 361:45
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", _13, const 1_usize) -> [success: bb12, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:361:36: 361:45
    }

    bb12: {
        _9 = move (_14.0: usize);        // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:361:36: 361:45
        goto -> bb13;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:361:44: 361:45
    }

    bb13: {
        _15 = _3;                        // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:365:5: 365:10
        _16 = _9;                        // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:365:12: 365:15
        _0 = Range::<usize> { start: move _15, end: move _16 }; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:365:5: 365:15
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit_field-0.10.1/src/lib.rs:366:2: 366:2
    }
}
