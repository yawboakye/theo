// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn barrier::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:72:1: 72:34>::wait(_1: &barrier::Barrier<R>) -> BarrierWaitResult {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:110:17: 110:22
    let mut _0: barrier::BarrierWaitResult; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:110:27: 110:44
    let mut _2: mutex::MutexGuard<'_, barrier::BarrierState>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:111:13: 111:21
    let mut _3: &mutex::Mutex<barrier::BarrierState, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:111:24: 111:40
    let mut _4: &mut barrier::BarrierState; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:112:9: 112:19
    let mut _5: &mut mutex::MutexGuard<'_, barrier::BarrierState>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:112:9: 112:13
    let mut _6: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:112:9: 112:24
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:12: 114:41
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:12: 114:22
    let mut _9: &barrier::BarrierState;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:12: 114:22
    let mut _10: &mutex::MutexGuard<'_, barrier::BarrierState>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:12: 114:16
    let mut _11: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:25: 114:41
    let mut _13: &barrier::BarrierState; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:116:29: 116:47
    let mut _14: &mutex::MutexGuard<'_, barrier::BarrierState>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:116:29: 116:33
    let mut _15: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:19: 118:83
    let mut _16: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:19: 118:50
    let mut _17: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:32: 118:50
    let mut _18: &barrier::BarrierState; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:32: 118:50
    let mut _19: &mutex::MutexGuard<'_, barrier::BarrierState>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:32: 118:36
    let mut _20: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:54: 118:83
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:54: 118:64
    let mut _22: &barrier::BarrierState; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:54: 118:64
    let mut _23: &mutex::MutexGuard<'_, barrier::BarrierState>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:54: 118:58
    let mut _24: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:67: 118:83
    let _25: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:119:17: 119:27
    let mut _26: mutex::MutexGuard<'_, barrier::BarrierState>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:119:22: 119:26
    let _27: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:120:17: 120:27
    let mut _28: mutex::MutexGuard<'_, barrier::BarrierState>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:121:24: 121:40
    let mut _29: &mutex::Mutex<barrier::BarrierState, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:121:24: 121:40
    let mut _30: &mut barrier::BarrierState; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:127:13: 127:23
    let mut _31: &mut mutex::MutexGuard<'_, barrier::BarrierState>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:127:13: 127:17
    let mut _32: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:34: 128:68
    let mut _33: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:34: 128:52
    let mut _34: &barrier::BarrierState; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:34: 128:52
    let mut _35: &mutex::MutexGuard<'_, barrier::BarrierState>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:34: 128:38
    let mut _36: &mut barrier::BarrierState; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:13: 128:31
    let mut _37: &mut mutex::MutexGuard<'_, barrier::BarrierState>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:13: 128:17
    scope 1 {
        debug lock => _2;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:111:13: 111:21
        let _12: usize;                  // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:116:17: 116:26
        scope 2 {
            debug local_gen => _12;      // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:116:17: 116:26
        }
    }

    bb0: {
        _3 = &((*_1).0: mutex::Mutex<barrier::BarrierState, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:111:24: 111:40
        _2 = mutex::Mutex::<BarrierState, R>::lock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:111:24: 111:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:111:34: 111:38
                                         // + literal: Const { ty: for<'a> fn(&'a mutex::Mutex<BarrierState, R>) -> mutex::MutexGuard<'a, BarrierState> {mutex::Mutex::<BarrierState, R>::lock}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _2;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:112:9: 112:13
        _4 = <mutex::MutexGuard<'_, BarrierState> as DerefMut>::deref_mut(move _5) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:112:9: 112:19
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:112:9: 112:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut mutex::MutexGuard<'_, BarrierState>) -> &'a mut <mutex::MutexGuard<'_, BarrierState> as Deref>::Target {<mutex::MutexGuard<'_, BarrierState> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = CheckedAdd(((*_4).0: usize), const 1_usize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:112:9: 112:24
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_4).0: usize), const 1_usize) -> [success: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:112:9: 112:24
    }

    bb3: {
        ((*_4).0: usize) = move (_6.0: usize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:112:9: 112:24
        _10 = &_2;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:12: 114:16
        _9 = <mutex::MutexGuard<'_, BarrierState> as Deref>::deref(move _10) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:12: 114:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:12: 114:22
                                         // + literal: Const { ty: for<'a> fn(&'a mutex::MutexGuard<'_, BarrierState>) -> &'a <mutex::MutexGuard<'_, BarrierState> as Deref>::Target {<mutex::MutexGuard<'_, BarrierState> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = ((*_9).0: usize);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:12: 114:22
        _11 = ((*_1).1: usize);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:25: 114:41
        _7 = Lt(move _8, move _11);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:12: 114:41
        switchInt(move _7) -> [0: bb18, otherwise: bb5]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:12: 114:41
    }

    bb5: {
        _14 = &_2;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:116:29: 116:33
        _13 = <mutex::MutexGuard<'_, BarrierState> as Deref>::deref(move _14) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:116:29: 116:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:116:29: 116:47
                                         // + literal: Const { ty: for<'a> fn(&'a mutex::MutexGuard<'_, BarrierState>) -> &'a <mutex::MutexGuard<'_, BarrierState> as Deref>::Target {<mutex::MutexGuard<'_, BarrierState> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = ((*_13).1: usize);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:116:29: 116:47
        goto -> bb7;                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:13: 122:14
    }

    bb7: {
        _19 = &_2;                       // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:32: 118:36
        _18 = <mutex::MutexGuard<'_, BarrierState> as Deref>::deref(move _19) -> [return: bb11, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:32: 118:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:32: 118:50
                                         // + literal: Const { ty: for<'a> fn(&'a mutex::MutexGuard<'_, BarrierState>) -> &'a <mutex::MutexGuard<'_, BarrierState> as Deref>::Target {<mutex::MutexGuard<'_, BarrierState> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = const false;               // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:19: 118:83
        goto -> bb10;                    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:19: 118:83
    }

    bb9: {
        _23 = &_2;                       // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:54: 118:58
        _22 = <mutex::MutexGuard<'_, BarrierState> as Deref>::deref(move _23) -> [return: bb12, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:54: 118:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:54: 118:64
                                         // + literal: Const { ty: for<'a> fn(&'a mutex::MutexGuard<'_, BarrierState>) -> &'a <mutex::MutexGuard<'_, BarrierState> as Deref>::Target {<mutex::MutexGuard<'_, BarrierState> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _15) -> [0: bb17, otherwise: bb13]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:19: 118:83
    }

    bb11: {
        _17 = ((*_18).1: usize);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:32: 118:50
        _16 = Eq(_12, move _17);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:19: 118:50
        switchInt(move _16) -> [0: bb8, otherwise: bb9]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:19: 118:83
    }

    bb12: {
        _21 = ((*_22).0: usize);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:54: 118:64
        _24 = ((*_1).1: usize);          // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:67: 118:83
        _20 = Lt(move _21, move _24);    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:54: 118:83
        _15 = move _20;                  // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:19: 118:83
        goto -> bb10;                    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:19: 118:83
    }

    bb13: {
        _26 = move _2;                   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:119:22: 119:26
        _25 = core::mem::drop::<mutex::MutexGuard<'_, BarrierState>>(move _26) -> [return: bb14, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:119:17: 119:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:119:17: 119:21
                                         // + literal: Const { ty: fn(mutex::MutexGuard<'_, BarrierState>) {core::mem::drop::<mutex::MutexGuard<'_, BarrierState>>}, val: Value(<ZST>) }
    }

    bb14: {
        _27 = <R as RelaxStrategy>::relax() -> [return: bb15, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:120:17: 120:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:120:17: 120:25
                                         // + literal: Const { ty: fn() {<R as RelaxStrategy>::relax}, val: Value(<ZST>) }
    }

    bb15: {
        _29 = &((*_1).0: mutex::Mutex<barrier::BarrierState, R>); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:121:24: 121:40
        _28 = mutex::Mutex::<BarrierState, R>::lock(move _29) -> [return: bb16, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:121:24: 121:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:121:34: 121:38
                                         // + literal: Const { ty: for<'a> fn(&'a mutex::Mutex<BarrierState, R>) -> mutex::MutexGuard<'a, BarrierState> {mutex::Mutex::<BarrierState, R>::lock}, val: Value(<ZST>) }
    }

    bb16: {
        _2 = move _28;                   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:121:17: 121:21
        goto -> bb7;                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:118:13: 122:14
    }

    bb17: {
        _0 = BarrierWaitResult(const false); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:123:13: 123:37
        goto -> bb23;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:9: 130:10
    }

    bb18: {
        _31 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:127:13: 127:17
        _30 = <mutex::MutexGuard<'_, BarrierState> as DerefMut>::deref_mut(move _31) -> [return: bb19, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:127:13: 127:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:127:13: 127:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut mutex::MutexGuard<'_, BarrierState>) -> &'a mut <mutex::MutexGuard<'_, BarrierState> as Deref>::Target {<mutex::MutexGuard<'_, BarrierState> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb19: {
        ((*_30).0: usize) = const 0_usize; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:127:13: 127:27
        _35 = &_2;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:34: 128:38
        _34 = <mutex::MutexGuard<'_, BarrierState> as Deref>::deref(move _35) -> [return: bb20, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:34: 128:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:34: 128:52
                                         // + literal: Const { ty: for<'a> fn(&'a mutex::MutexGuard<'_, BarrierState>) -> &'a <mutex::MutexGuard<'_, BarrierState> as Deref>::Target {<mutex::MutexGuard<'_, BarrierState> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb20: {
        _33 = ((*_34).1: usize);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:34: 128:52
        _32 = num::<impl usize>::wrapping_add(move _33, const 1_usize) -> [return: bb21, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:34: 128:68
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:53: 128:65
                                         // + literal: Const { ty: fn(usize, usize) -> usize {num::<impl usize>::wrapping_add}, val: Value(<ZST>) }
    }

    bb21: {
        _37 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:13: 128:17
        _36 = <mutex::MutexGuard<'_, BarrierState> as DerefMut>::deref_mut(move _37) -> [return: bb22, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:13: 128:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:13: 128:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut mutex::MutexGuard<'_, BarrierState>) -> &'a mut <mutex::MutexGuard<'_, BarrierState> as Deref>::Target {<mutex::MutexGuard<'_, BarrierState> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb22: {
        ((*_36).1: usize) = move _32;    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:128:13: 128:68
        _0 = BarrierWaitResult(const true); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:129:13: 129:36
        goto -> bb23;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:114:9: 130:10
    }

    bb23: {
        drop(_2) -> [return: bb24, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:131:5: 131:6
    }

    bb24: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:131:6: 131:6
    }
}

fn barrier::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:134:1: 134:19>::new(_1: usize) -> barrier::Barrier<R> {
    debug n => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:150:22: 150:23
    let mut _0: barrier::Barrier<R>;     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:150:35: 150:39
    let mut _2: mutex::Mutex<barrier::BarrierState, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:152:19: 155:15
    let mut _3: barrier::BarrierState;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:152:30: 155:14

    bb0: {
        _3 = BarrierState { count: const 0_usize, generation_id: const 0_usize }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:152:30: 155:14
        _2 = mutex::Mutex::<BarrierState, R>::new(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:152:19: 155:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:152:19: 152:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(BarrierState) -> mutex::Mutex<BarrierState, R> {mutex::Mutex::<BarrierState, R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = barrier::Barrier::<R> { lock: move _2, num_threads: _1 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:151:9: 157:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:158:6: 158:6
    }
}

// MIR FOR CTFE
fn barrier::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:134:1: 134:19>::new(_1: usize) -> barrier::Barrier<R> {
    debug n => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:150:22: 150:23
    let mut _0: barrier::Barrier<R>;     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:150:35: 150:39
    let mut _2: mutex::Mutex<barrier::BarrierState, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:152:19: 155:15
    let mut _3: barrier::BarrierState;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:152:30: 155:14
    let mut _4: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:156:26: 156:27

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:152:19: 155:15
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:152:30: 155:14
        _3 = BarrierState { count: const 0_usize, generation_id: const 0_usize }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:152:30: 155:14
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:152:19: 155:15
        _2 = mutex::Mutex::<BarrierState, R>::new(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:152:19: 155:15
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:152:19: 152:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(BarrierState) -> mutex::Mutex<BarrierState, R> {mutex::Mutex::<BarrierState, R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:155:14: 155:15
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:156:26: 156:27
        _4 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:156:26: 156:27
        _0 = barrier::Barrier::<R> { lock: move _2, num_threads: move _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:151:9: 157:10
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:157:9: 157:10
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:157:9: 157:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:158:6: 158:6
    }
}

fn barrier::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:161:1: 161:23>::is_leader(_1: &BarrierWaitResult) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:178:22: 178:27
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:178:32: 178:36

    bb0: {
        _0 = ((*_1).0: bool);            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:179:9: 179:15
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:180:6: 180:6
    }
}

fn lazy::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:46:1: 46:55>::fmt(_1: &lazy::Lazy<T, F, R>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:47:12: 47:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:47:19: 47:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:47:50: 47:61
    let mut _3: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:9: 51:22
    let mut _4: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:9: 50:34
    let mut _5: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:9: 50:34
    let mut _6: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:9: 49:39
    let mut _7: &mut core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:9: 49:39
    let mut _8: core::fmt::DebugStruct<'_, '_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:9: 48:31
    let _9: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:24: 48:30
    let _10: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:49:20: 49:26
    let mut _11: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:49:28: 49:38
    let _12: &once::Once<T, R>;          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:49:28: 49:38
    let _13: &str;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:20: 50:26
    let mut _14: &dyn core::fmt::Debug;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:28: 50:33
    let mut _15: &&str;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:28: 50:33

    bb0: {
        _9 = const "Lazy";               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:24: 48:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:24: 48:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = Formatter::<'_>::debug_struct(_2, _9) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:9: 48:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:11: 48:23
                                         // + literal: Const { ty: for<'b, 'a> fn(&'b mut Formatter<'_>, &'a str) -> DebugStruct<'b, '_> {Formatter::<'_>::debug_struct}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &mut _8;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:9: 49:39
        _10 = const "cell";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:49:20: 49:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:49:20: 49:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &((*_1).0: once::Once<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:49:28: 49:38
        _11 = _12 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:49:28: 49:38
        _6 = DebugStruct::<'_, '_>::field(move _7, _10, move _11) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:9: 49:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:49:14: 49:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = _6;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:9: 50:34
        _13 = const "init";              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:20: 50:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:20: 50:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:28: 50:33
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:28: 50:33
                                         // + literal: Const { ty: &&str, val: Unevaluated(<lazy::Lazy<T, F, R> as Debug>::fmt, [T, F, R], Some(promoted[0])) }
        _14 = _15 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:28: 50:33
        _4 = DebugStruct::<'_, '_>::field(move _5, _13, move _14) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:9: 50:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:14: 50:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:9: 51:22
        _0 = DebugStruct::<'_, '_>::finish(move _3) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:48:9: 51:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:51:14: 51:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugStruct<'_, '_>) -> Result<(), core::fmt::Error> {DebugStruct::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:52:6: 52:6
    }
}

promoted[0] in lazy::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:46:1: 46:55>::fmt: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:28: 50:33
    let mut _1: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:29: 50:33

    bb0: {
        _1 = const "..";                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:29: 50:33
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:29: 50:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:28: 50:33
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:50:28: 50:33
    }
}

fn lazy::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:63:1: 63:28>::new(_1: F) -> lazy::Lazy<T, F, R> {
    debug f => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:66:22: 66:23
    let mut _0: lazy::Lazy<T, F, R>;     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:66:31: 66:35
    let mut _2: once::Once<T, R>;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:68:19: 68:30
    let mut _3: core::cell::Cell<core::option::Option<F>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:19: 69:37
    let mut _4: core::option::Option<F>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:29: 69:36

    bb0: {
        _2 = once::Once::<T, R>::new() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:68:19: 68:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:68:19: 68:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> once::Once<T, R> {once::Once::<T, R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Option::<F>::Some(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:29: 69:36
        _3 = Cell::<Option<F>>::new(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:19: 69:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:19: 69:28
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Option<F>) -> Cell<Option<F>> {Cell::<Option<F>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = lazy::Lazy::<T, F, R> { cell: move _2, init: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:67:9: 70:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:71:6: 71:6
    }
}

// MIR FOR CTFE
fn lazy::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:63:1: 63:28>::new(_1: F) -> lazy::Lazy<T, F, R> {
    debug f => _1;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:66:22: 66:23
    let mut _0: lazy::Lazy<T, F, R>;     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:66:31: 66:35
    let mut _2: once::Once<T, R>;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:68:19: 68:30
    let mut _3: core::cell::Cell<core::option::Option<F>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:19: 69:37
    let mut _4: core::option::Option<F>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:29: 69:36
    let mut _5: F;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:34: 69:35
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:71:5: 71:6

    bb0: {
        _6 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:68:19: 68:30
        _6 = const true;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:68:19: 68:30
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:68:19: 68:30
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:68:19: 68:30
        _2 = once::Once::<T, R>::new() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:68:19: 68:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:68:19: 68:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> once::Once<T, R> {once::Once::<T, R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:19: 69:37
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:29: 69:36
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:34: 69:35
        _6 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:34: 69:35
        _5 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:34: 69:35
        _4 = Option::<F>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:29: 69:36
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:35: 69:36
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:19: 69:37
        _3 = Cell::<Option<F>>::new(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:19: 69:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:19: 69:28
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Option<F>) -> Cell<Option<F>> {Cell::<Option<F>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:69:36: 69:37
        _0 = lazy::Lazy::<T, F, R> { cell: move _2, init: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:67:9: 70:10
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:70:9: 70:10
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:70:9: 70:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:71:6: 71:6
    }
}

fn lazy::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:63:1: 63:28>::as_mut_ptr(_1: &lazy::Lazy<T, F, R>) -> *mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:77:23: 77:28
    let mut _0: *mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:77:33: 77:39
    let mut _2: &once::Once<T, R>;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:78:9: 78:31

    bb0: {
        _2 = &((*_1).0: once::Once<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:78:9: 78:31
        _0 = once::Once::<T, R>::as_mut_ptr(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:78:9: 78:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:78:19: 78:29
                                         // + literal: Const { ty: for<'a> fn(&'a once::Once<T, R>) -> *mut T {once::Once::<T, R>::as_mut_ptr}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:79:6: 79:6
    }
}

fn lazy::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:82:1: 82:58>::force(_1: &lazy::Lazy<T, F, R>) -> &T {
    debug this => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:97:18: 97:22
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:97:34: 97:36
    let _2: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:9: 101:11
    let mut _3: &once::Once<T, R>;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:9: 101:11
    let mut _4: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:29: 98:31]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:29: 101:10
    let mut _5: &&lazy::Lazy<T, F, R>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:29: 101:10

    bb0: {
        _3 = &((*_1).0: once::Once<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:9: 101:11
        _5 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:29: 101:10
        _4 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:29: 98:31] { this: move _5 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:29: 101:10
                                         // closure
                                         // + def_id: DefId(0:62 ~ spin[cd97]::lazy::{impl#3}::force::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     F,
                                         //     R,
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> T,
                                         //     (&&lazy::Lazy<T, F, R>,),
                                         // ]
        _2 = once::Once::<T, R>::call_once::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:29: 98:31]>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:9: 101:11
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:19: 98:28
                                         // + literal: Const { ty: for<'a> fn(&'a once::Once<T, R>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:29: 98:31]) -> &'a T {once::Once::<T, R>::call_once::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:29: 98:31]>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = _2;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:9: 101:11
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:102:6: 102:6
    }
}

fn lazy::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:82:1: 82:58>::force::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:29: 98:31]) -> T {
    debug this => (*(_1.0: &&lazy::Lazy<T, F, R>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:97:18: 97:22
    let mut _0: T;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:32: 98:32
    let mut _2: core::option::Option<F>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:38: 98:54
    let mut _3: &core::cell::Cell<core::option::Option<F>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:38: 98:54
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:99:13: 99:20
    let _5: F;                           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:99:18: 99:19
    let mut _6: !;                       // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _7: &&lazy::Lazy<T, F, R>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:29: 101:10
    let mut _8: &lazy::Lazy<T, F, R>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:29: 101:10
    scope 1 {
        debug f => _5;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:99:18: 99:19
    }

    bb0: {
        _7 = deref_copy (_1.0: &&lazy::Lazy<T, F, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:38: 98:54
        _8 = deref_copy (*_7);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:38: 98:54
        _3 = &((*_8).1: core::cell::Cell<core::option::Option<F>>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:38: 98:54
        _2 = Cell::<Option<F>>::take(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:38: 98:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:48: 98:52
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<F>>) -> Option<F> {Cell::<Option<F>>::take}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_2);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:38: 98:54
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:32: 98:54
    }

    bb2: {
        _6 = panic(const "Lazy instance has previously been poisoned") -> unwind unreachable; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:100:28: 100:72
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:98:38: 98:54
    }

    bb4: {
        _5 = move ((_2 as Some).0: F);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:99:18: 99:19
        _0 = <F as FnOnce<()>>::call_once(move _5, const ()) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:99:24: 99:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:99:24: 99:25
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:101:10: 101:10
    }
}

fn lazy::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:105:1: 105:68>::deref(_1: &lazy::Lazy<T, F, R>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:108:14: 108:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:108:24: 108:26
    let _2: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:109:9: 109:26

    bb0: {
        _2 = lazy::Lazy::<T, F, R>::force(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:109:9: 109:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:109:9: 109:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a lazy::Lazy<T, F, R>) -> &'a T {lazy::Lazy::<T, F, R>::force}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = _2;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:109:9: 109:26
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:110:6: 110:6
    }
}

fn lazy::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:113:1: 113:54>::default() -> lazy::Lazy<T, fn() -> T, R> {
    let mut _0: lazy::Lazy<T, fn() -> T, R>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:115:21: 115:25
    let mut _1: fn() -> T;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:116:19: 116:29

    bb0: {
        _1 = <T as Default>::default as fn() -> T (Pointer(ReifyFnPointer)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:116:19: 116:29
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:116:19: 116:29
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
        _0 = lazy::Lazy::<T, fn() -> T, R>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:116:9: 116:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:116:9: 116:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(fn() -> T) -> lazy::Lazy<T, fn() -> T, R> {lazy::Lazy::<T, fn() -> T, R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lazy.rs:117:6: 117:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:93:1: 93:27>::new(_1: T) -> SpinMutex<T, R> {
    debug data => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:110:22: 110:26
    let mut _0: mutex::spin::SpinMutex<T, R>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:110:34: 110:38
    let mut _2: core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:112:19: 112:41
    let mut _3: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:113:19: 113:40

    bb0: {
        _2 = AtomicBool::new(const false) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:112:19: 112:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:112:19: 112:34
                                         // + literal: Const { ty: fn(bool) -> AtomicBool {AtomicBool::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = UnsafeCell::<T>::new(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:113:19: 113:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:113:19: 113:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = SpinMutex::<T, R> { phantom: const ZeroSized: PhantomData<R>, lock: move _2, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:111:9: 115:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<R>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:116:6: 116:6
    }
}

// MIR FOR CTFE
fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:93:1: 93:27>::new(_1: T) -> SpinMutex<T, R> {
    debug data => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:110:22: 110:26
    let mut _0: mutex::spin::SpinMutex<T, R>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:110:34: 110:38
    let mut _2: core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:112:19: 112:41
    let mut _3: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:113:19: 113:40
    let mut _4: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:113:35: 113:39
    let mut _5: core::marker::PhantomData<R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:114:22: 114:33
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:116:5: 116:6

    bb0: {
        _6 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:112:19: 112:41
        _6 = const true;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:112:19: 112:41
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:112:19: 112:41
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:112:19: 112:41
        _2 = AtomicBool::new(const false) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:112:19: 112:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:112:19: 112:34
                                         // + literal: Const { ty: fn(bool) -> AtomicBool {AtomicBool::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:113:19: 113:40
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:113:35: 113:39
        _6 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:113:35: 113:39
        _4 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:113:35: 113:39
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:113:19: 113:40
        _3 = UnsafeCell::<T>::new(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:113:19: 113:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:113:19: 113:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:113:39: 113:40
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:114:22: 114:33
        _5 = PhantomData::<R>;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:114:22: 114:33
        _0 = SpinMutex::<T, R> { phantom: move _5, lock: move _2, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:111:9: 115:10
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:115:9: 115:10
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:115:9: 115:10
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:115:9: 115:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:116:6: 116:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:93:1: 93:27>::into_inner(_1: SpinMutex<T, R>) -> T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:127:23: 127:27
    let mut _0: T;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:127:32: 127:33
    let _2: core::cell::UnsafeCell<T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:130:25: 130:29
    scope 1 {
        debug data => _2;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:130:25: 130:29
    }

    bb0: {
        _2 = move (_1.2: core::cell::UnsafeCell<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:130:25: 130:29
        _0 = UnsafeCell::<T>::into_inner(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:131:9: 131:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:131:14: 131:24
                                         // + literal: Const { ty: fn(UnsafeCell<T>) -> T {UnsafeCell::<T>::into_inner}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:132:6: 132:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:93:1: 93:27>::as_mut_ptr(_1: &SpinMutex<T, R>) -> *mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:156:23: 156:28
    let mut _0: *mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:156:33: 156:39
    let mut _2: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:157:9: 157:24

    bb0: {
        _2 = &((*_1).2: core::cell::UnsafeCell<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:157:9: 157:24
        _0 = UnsafeCell::<T>::get(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:157:9: 157:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:157:19: 157:22
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:158:6: 158:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:161:1: 161:50>::lock(_1: &SpinMutex<T, R>) -> SpinMutexGuard<'_, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:177:17: 177:22
    let mut _0: mutex::spin::SpinMutexGuard<'_, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:177:27: 177:44
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:180:15: 183:22
    let mut _3: &core::result::Result<bool, bool>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:180:15: 183:22
    let _4: core::result::Result<bool, bool>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:180:15: 182:86
    let mut _5: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:180:15: 182:86
    let mut _6: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:182:49: 182:66
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:182:68: 182:85
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:186:19: 186:35
    let _9: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:187:17: 187:27
    let _10: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:192:19: 192:29
    let mut _11: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:193:19: 193:51
    let mut _12: &mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:193:28: 193:49
    let mut _13: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:193:34: 193:49
    let mut _14: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:193:34: 193:49
    scope 1 {
    }

    bb0: {
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:180:9: 189:10
    }

    bb1: {
        _5 = &((*_1).1: core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:180:15: 182:86
        _6 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:182:49: 182:66
        _7 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:182:68: 182:85
        _4 = AtomicBool::compare_exchange_weak(move _5, const false, const true, move _6, move _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:180:15: 182:86
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:182:14: 182:35
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, bool, bool, core::sync::atomic::Ordering, core::sync::atomic::Ordering) -> Result<bool, bool> {AtomicBool::compare_exchange_weak}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:180:15: 183:22
        _2 = Result::<bool, bool>::is_err(move _3) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:180:15: 183:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:183:14: 183:20
                                         // + literal: Const { ty: for<'a> fn(&'a Result<bool, bool>) -> bool {Result::<bool, bool>::is_err}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _2) -> [0: bb7, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:180:15: 183:22
    }

    bb4: {
        _8 = SpinMutex::<T, R>::is_locked(_1) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:186:19: 186:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:186:24: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a SpinMutex<T, R>) -> bool {SpinMutex::<T, R>::is_locked}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _8) -> [0: bb1, otherwise: bb6]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:186:19: 186:35
    }

    bb6: {
        _9 = <R as RelaxStrategy>::relax() -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:187:17: 187:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:187:17: 187:25
                                         // + literal: Const { ty: fn() {<R as RelaxStrategy>::relax}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = &((*_1).1: core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:192:19: 192:29
        _14 = &((*_1).2: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:193:34: 193:49
        _13 = UnsafeCell::<T>::get(move _14) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:193:34: 193:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:193:44: 193:47
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = &mut (*_13);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:193:28: 193:49
        _11 = &raw mut (*_12);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:193:28: 193:49
        _0 = SpinMutexGuard::<'_, T> { lock: _10, data: move _11 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:191:9: 194:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:195:6: 195:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:198:1: 198:35>::is_locked(_1: &SpinMutex<T, R>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:206:22: 206:27
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:206:32: 206:36
    let mut _2: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:207:9: 207:42
    let mut _3: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:207:24: 207:41

    bb0: {
        _2 = &((*_1).1: core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:207:9: 207:42
        _3 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:207:24: 207:41
        _0 = AtomicBool::load(move _2, move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:207:9: 207:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:207:19: 207:23
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, core::sync::atomic::Ordering) -> bool {AtomicBool::load}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:208:6: 208:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:198:1: 198:35>::force_unlock(_1: &SpinMutex<T, R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:218:32: 218:37
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:218:39: 218:39
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:219:9: 219:50
    let mut _3: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:219:9: 219:50
    let mut _4: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:219:32: 219:49

    bb0: {
        _3 = &((*_1).1: core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:219:9: 219:50
        _4 = Release;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:219:32: 219:49
        _2 = AtomicBool::store(move _3, const false, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:219:9: 219:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:219:19: 219:24
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, bool, core::sync::atomic::Ordering) {AtomicBool::store}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:220:6: 220:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:198:1: 198:35>::try_lock(_1: &SpinMutex<T, R>) -> Option<SpinMutexGuard<'_, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:237:21: 237:26
    let mut _0: core::option::Option<mutex::spin::SpinMutexGuard<'_, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:237:31: 237:56
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:240:12: 243:21
    let mut _3: &core::result::Result<bool, bool>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:240:12: 243:21
    let _4: core::result::Result<bool, bool>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:240:12: 242:81
    let mut _5: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:240:12: 242:81
    let mut _6: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:242:44: 242:61
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:242:63: 242:80
    let mut _8: mutex::spin::SpinMutexGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:245:18: 248:14
    let _9: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:246:23: 246:33
    let mut _10: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:247:23: 247:55
    let mut _11: &mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:247:32: 247:53
    let mut _12: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:247:38: 247:53
    let mut _13: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:247:38: 247:53
    scope 1 {
    }

    bb0: {
        _5 = &((*_1).1: core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:240:12: 242:81
        _6 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:242:44: 242:61
        _7 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:242:63: 242:80
        _4 = AtomicBool::compare_exchange(move _5, const false, const true, move _6, move _7) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:240:12: 242:81
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:242:14: 242:30
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, bool, bool, core::sync::atomic::Ordering, core::sync::atomic::Ordering) -> Result<bool, bool> {AtomicBool::compare_exchange}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:240:12: 243:21
        _2 = Result::<bool, bool>::is_ok(move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:240:12: 243:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:243:14: 243:19
                                         // + literal: Const { ty: for<'a> fn(&'a Result<bool, bool>) -> bool {Result::<bool, bool>::is_ok}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _2) -> [0: bb5, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:240:12: 243:21
    }

    bb3: {
        _9 = &((*_1).1: core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:246:23: 246:33
        _13 = &((*_1).2: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:247:38: 247:53
        _12 = UnsafeCell::<T>::get(move _13) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:247:38: 247:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:247:48: 247:51
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &mut (*_12);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:247:32: 247:53
        _10 = &raw mut (*_11);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:247:32: 247:53
        _8 = SpinMutexGuard::<'_, T> { lock: _9, data: move _10 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:245:18: 248:14
        _0 = Option::<SpinMutexGuard<'_, T>>::Some(move _8); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:245:13: 248:15
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:240:9: 251:10
    }

    bb5: {
        _0 = Option::<SpinMutexGuard<'_, T>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:250:13: 250:17
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:240:9: 251:10
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:252:6: 252:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:198:1: 198:35>::get_mut(_1: &mut SpinMutex<T, R>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:268:20: 268:29
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:268:34: 268:40
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:271:24: 271:39
    let mut _3: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:271:24: 271:39
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).2: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:271:24: 271:39
        _2 = UnsafeCell::<T>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:271:24: 271:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:271:34: 271:37
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &mut (*_2);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:271:18: 271:39
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:272:6: 272:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:275:1: 275:63>::fmt(_1: &SpinMutex<T, R>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:276:12: 276:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:276:19: 276:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:276:46: 276:57
    let mut _3: core::option::Option<mutex::spin::SpinMutexGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:277:15: 277:30
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:13: 278:24
    let _5: mutex::spin::SpinMutexGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:18: 278:23
    let mut _6: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:28: 279:49
    let mut _7: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _8: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _9: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _10: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:38: 278:55
    let mut _11: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:31]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:48
    let mut _12: &mutex::spin::SpinMutexGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:48
    let mut _13: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:48
    let mut _14: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:27: 280:31]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:27: 280:47
    let mut _15: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:27: 280:47
    let mut _16: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _17: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _18: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:281:31: 281:53
    let mut _19: &[&str; 1];             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:281:31: 281:53
    scope 1 {
        debug guard => _5;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:18: 278:23
        let mut _20: &[&str; 1];         // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:38: 278:55
    }

    bb0: {
        _3 = SpinMutex::<T, R>::try_lock(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:277:15: 277:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:277:20: 277:28
                                         // + literal: Const { ty: for<'a> fn(&'a SpinMutex<T, R>) -> Option<SpinMutexGuard<'a, T>> {SpinMutex::<T, R>::try_lock}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:277:15: 277:30
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:277:9: 277:30
    }

    bb2: {
        _16 = _2;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _19 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:281:31: 281:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:281:31: 281:53
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<SpinMutex<T, R> as Debug>::fmt, [T, R], Some(promoted[0])) }
        _18 = _19 as &[&str] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:281:31: 281:53
        _17 = Arguments::<'_>::new_const(move _18) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:277:15: 277:30
    }

    bb4: {
        _5 = move ((_3 as Some).0: mutex::spin::SpinMutexGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:18: 278:23
        _8 = _2;                         // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _20 = const _;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:38: 278:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:38: 278:55
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<SpinMutex<T, R> as Debug>::fmt, [T, R], Some(promoted[1])) }
        _10 = _20 as &[&str] (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:38: 278:55
        _9 = Arguments::<'_>::new_const(move _10) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = Formatter::<'_>::write_fmt(move _8, move _9) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = &_5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:48
        _13 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:48
        _11 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:31] { guard: move _12, f: move _13 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:48
                                         // closure
                                         // + def_id: DefId(0:131 ~ spin[cd97]::mutex::spin::{impl#7}::fmt::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     R,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)) -> core::result::Result<(), core::fmt::Error>,
                                         //     (&mutex::spin::SpinMutexGuard<'_, T>, &mut &mut core::fmt::Formatter<'_>),
                                         // ]
        _6 = Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:31]>(move _7, move _11) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:28: 279:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:18: 279:26
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:31]) -> Result<(), core::fmt::Error> {Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:31]>}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:27: 280:47
        _14 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:27: 280:31] { f: move _15 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:27: 280:47
                                         // closure
                                         // + def_id: DefId(0:132 ~ spin[cd97]::mutex::spin::{impl#7}::fmt::{closure#1})
                                         // + substs: [
                                         //     T,
                                         //     R,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)) -> core::result::Result<(), core::fmt::Error>,
                                         //     (&mut &mut core::fmt::Formatter<'_>,),
                                         // ]
        _0 = Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:27: 280:31]>(move _6, move _14) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:28: 280:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:18: 280:26
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:27: 280:31]) -> Result<(), core::fmt::Error> {Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:27: 280:31]>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_5) -> [return: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:47: 280:48
    }

    bb9: {
        _0 = Formatter::<'_>::write_fmt(move _16, move _17) -> [return: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:283:6: 283:6
    }
}

promoted[0] in spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:275:1: 275:63>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:281:31: 281:53
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:281:31: 281:53

    bb0: {
        _1 = [const "Mutex { <locked> }"]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:281:31: 281:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:281:31: 281:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:281:31: 281:53
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:281:31: 281:53
    }
}

promoted[1] in spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:275:1: 275:63>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:38: 278:55
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:38: 278:55

    bb0: {
        _1 = [const "Mutex { data: "];   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:38: 278:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:38: 278:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:38: 278:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:38: 278:55
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:275:1: 275:63>::fmt::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:31], _2: ()) -> Result<(), core::fmt::Error> {
    debug guard => (*(_1.0: &mutex::spin::SpinMutexGuard<'_, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:278:18: 278:23
    debug f => (*(_1.1: &mut &mut core::fmt::Formatter<'_>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:276:19: 276:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:32: 279:32
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:32: 279:41
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:34: 279:40
    let mut _5: &mutex::spin::SpinMutexGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:48
    let mut _6: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:48
    let mut _7: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:27: 279:48

    bb0: {
        _5 = deref_copy (_1.0: &mutex::spin::SpinMutexGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:35: 279:40
        _4 = <SpinMutexGuard<'_, T> as Deref>::deref(_5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:34: 279:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:34: 279:40
                                         // + literal: Const { ty: for<'a> fn(&'a SpinMutexGuard<'_, T>) -> &'a <SpinMutexGuard<'_, T> as Deref>::Target {<SpinMutexGuard<'_, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:32: 279:41
        _6 = deref_copy (_1.1: &mut &mut core::fmt::Formatter<'_>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:46: 279:47
        _7 = deref_copy (*_6);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:46: 279:47
        _0 = <T as Debug>::fmt(_3, _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:32: 279:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:42: 279:45
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:279:48: 279:48
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:275:1: 275:63>::fmt::{closure#1}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:27: 280:31], _2: ()) -> Result<(), core::fmt::Error> {
    debug f => (*(_1.0: &mut &mut core::fmt::Formatter<'_>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:276:19: 276:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:32: 280:32
    let mut _3: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _4: &[&str];                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:42: 280:46
    let mut _5: &[&str; 1];              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:42: 280:46
    let mut _6: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:27: 280:47
    let mut _7: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:27: 280:47

    bb0: {
        _6 = deref_copy (_1.0: &mut &mut core::fmt::Formatter<'_>); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _7 = deref_copy (*_6);           // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _5 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:42: 280:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:42: 280:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<SpinMutex<T, R> as Debug>::fmt::{closure#1}, [T, R, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _4 = _5 as &[&str] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:42: 280:46
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Formatter::<'_>::write_fmt(_7, move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:47: 280:47
    }
}

promoted[0] in spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:275:1: 275:63>::fmt::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:42: 280:46
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:42: 280:46

    bb0: {
        _1 = [const "}"];                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:42: 280:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:42: 280:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:42: 280:46
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:280:42: 280:46
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:286:1: 286:57>::default() -> SpinMutex<T, R> {
    let mut _0: mutex::spin::SpinMutex<T, R>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:287:21: 287:25
    let mut _1: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:288:19: 288:37

    bb0: {
        _1 = <T as Default>::default() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:288:19: 288:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:288:19: 288:35
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = SpinMutex::<T, R>::new(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:288:9: 288:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:288:9: 288:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> SpinMutex<T, R> {SpinMutex::<T, R>::new}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:289:6: 289:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:292:1: 292:39>::from(_1: T) -> SpinMutex<T, R> {
    debug data => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:293:13: 293:17
    let mut _0: mutex::spin::SpinMutex<T, R>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:293:25: 293:29

    bb0: {
        _0 = SpinMutex::<T, R>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:294:9: 294:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:294:9: 294:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> SpinMutex<T, R> {SpinMutex::<T, R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:295:6: 295:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:298:1: 298:42>::leak(_1: SpinMutexGuard<'_, T>) -> &mut T {
    debug this => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:312:17: 312:21
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:312:32: 312:41
    let mut _2: core::mem::ManuallyDrop<mutex::spin::SpinMutexGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:314:13: 314:21
    let mut _3: &mut mutex::spin::SpinMutexGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:316:24: 316:33
    let mut _4: &mut core::mem::ManuallyDrop<mutex::spin::SpinMutexGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:316:24: 316:28
    let mut _5: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:316:24: 316:33
    scope 1 {
        debug this => _2;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:314:13: 314:21
        scope 2 {
        }
    }

    bb0: {
        _2 = ManuallyDrop::<SpinMutexGuard<'_, T>>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:314:24: 314:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:314:24: 314:41
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(SpinMutexGuard<'_, T>) -> ManuallyDrop<SpinMutexGuard<'_, T>> {ManuallyDrop::<SpinMutexGuard<'_, T>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _2;                    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:316:24: 316:28
        _3 = <ManuallyDrop<SpinMutexGuard<'_, T>> as DerefMut>::deref_mut(move _4) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:316:24: 316:33
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:316:24: 316:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut ManuallyDrop<SpinMutexGuard<'_, T>>) -> &'a mut <ManuallyDrop<SpinMutexGuard<'_, T>> as Deref>::Target {<ManuallyDrop<SpinMutexGuard<'_, T>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = deref_copy ((*_3).1: *mut T); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:316:18: 316:33
        _0 = &mut (*_5);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:316:18: 316:33
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:317:6: 317:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:320:1: 320:70>::fmt(_1: &SpinMutexGuard<'_, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:321:12: 321:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:321:19: 321:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:321:46: 321:57
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:322:25: 322:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:322:26: 322:32

    bb0: {
        _4 = <SpinMutexGuard<'_, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:322:26: 322:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:322:26: 322:32
                                         // + literal: Const { ty: for<'a> fn(&'a SpinMutexGuard<'_, T>) -> &'a <SpinMutexGuard<'_, T> as Deref>::Target {<SpinMutexGuard<'_, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:322:25: 322:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:322:9: 322:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:322:9: 322:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:323:6: 323:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:326:1: 326:74>::fmt(_1: &SpinMutexGuard<'_, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:327:12: 327:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:327:19: 327:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:327:46: 327:57
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:328:27: 328:34
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:328:28: 328:34

    bb0: {
        _4 = <SpinMutexGuard<'_, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:328:28: 328:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:328:28: 328:34
                                         // + literal: Const { ty: for<'a> fn(&'a SpinMutexGuard<'_, T>) -> &'a <SpinMutexGuard<'_, T> as Deref>::Target {<SpinMutexGuard<'_, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:328:27: 328:34
        _0 = <T as Display>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:328:9: 328:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:328:9: 328:26
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:329:6: 329:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:332:1: 332:52>::deref(_1: &SpinMutexGuard<'_, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:334:14: 334:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:334:24: 334:26
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:334:14: 334:19
    scope 1 {
    }

    bb0: {
        _2 = deref_copy ((*_1).1: *mut T); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:336:18: 336:29
        _0 = &(*_2);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:336:18: 336:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:337:6: 337:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:340:1: 340:55>::deref_mut(_1: &mut SpinMutexGuard<'_, T>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:341:18: 341:27
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:341:32: 341:38
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:341:18: 341:27
    scope 1 {
    }

    bb0: {
        _2 = deref_copy ((*_1).1: *mut T); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:343:18: 343:33
        _0 = &mut (*_2);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:343:18: 343:33
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:344:6: 344:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:347:1: 347:51>::drop(_1: &mut SpinMutexGuard<'_, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:349:13: 349:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:349:24: 349:24
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:350:9: 350:50
    let mut _3: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:350:32: 350:49
    let mut _4: &core::sync::atomic::AtomicBool; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:349:13: 349:22

    bb0: {
        _4 = deref_copy ((*_1).0: &core::sync::atomic::AtomicBool); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:350:9: 350:50
        _3 = Release;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:350:32: 350:49
        _2 = AtomicBool::store(_4, const false, move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:350:9: 350:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:350:19: 350:24
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, bool, core::sync::atomic::Ordering) {AtomicBool::store}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:351:6: 351:6
    }
}

const spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:355:1: 355:76>::INIT: SpinMutex<(), R> = {
    let mut _0: mutex::spin::SpinMutex<(), R>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:358:17: 358:21
    let mut _1: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:358:34: 358:36

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:358:34: 358:36
        _1 = ();                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:358:34: 358:36
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:358:24: 358:37
        _0 = SpinMutex::<(), R>::new(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:358:24: 358:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:358:24: 358:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(()) -> SpinMutex<(), R> {SpinMutex::<(), R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:358:36: 358:37
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:358:5: 358:38
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:358:5: 358:38
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:355:1: 355:76>::lock(_1: &SpinMutex<(), R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:360:13: 360:18
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:360:20: 360:20
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:362:9: 362:44
    let mut _3: mutex::spin::SpinMutexGuard<'_, ()>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:362:27: 362:43

    bb0: {
        _3 = SpinMutex::<(), R>::lock(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:362:27: 362:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:362:27: 362:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a SpinMutex<(), R>) -> SpinMutexGuard<'a, ()> {SpinMutex::<(), R>::lock}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = core::mem::forget::<SpinMutexGuard<'_, ()>>(move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:362:9: 362:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:362:9: 362:26
                                         // + literal: Const { ty: fn(SpinMutexGuard<'_, ()>) {core::mem::forget::<SpinMutexGuard<'_, ()>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:363:6: 363:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:355:1: 355:76>::try_lock(_1: &SpinMutex<(), R>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:365:17: 365:22
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:365:27: 365:31
    let mut _2: &core::option::Option<()>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:367:9: 367:62
    let _3: core::option::Option<()>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:367:9: 367:52
    let mut _4: core::option::Option<mutex::spin::SpinMutexGuard<'_, ()>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:367:9: 367:29

    bb0: {
        _4 = SpinMutex::<(), R>::try_lock(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:367:9: 367:29
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:367:9: 367:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a SpinMutex<(), R>) -> Option<SpinMutexGuard<'a, ()>> {SpinMutex::<(), R>::try_lock}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Option::<SpinMutexGuard<'_, ()>>::map::<(), fn(SpinMutexGuard<'_, ()>) {core::mem::forget::<SpinMutexGuard<'_, ()>>}>(move _4, core::mem::forget::<SpinMutexGuard<'_, ()>>) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:367:9: 367:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:367:30: 367:33
                                         // + literal: Const { ty: fn(Option<SpinMutexGuard<'_, ()>>, fn(SpinMutexGuard<'_, ()>) {core::mem::forget::<SpinMutexGuard<'_, ()>>}) -> Option<()> {Option::<SpinMutexGuard<'_, ()>>::map::<(), fn(SpinMutexGuard<'_, ()>) {core::mem::forget::<SpinMutexGuard<'_, ()>>}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:367:34: 367:51
                                         // + literal: Const { ty: fn(SpinMutexGuard<'_, ()>) {core::mem::forget::<SpinMutexGuard<'_, ()>>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:367:9: 367:62
        _0 = Option::<()>::is_some(move _2) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:367:9: 367:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:367:53: 367:60
                                         // + literal: Const { ty: for<'a> fn(&'a Option<()>) -> bool {Option::<()>::is_some}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:368:6: 368:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:355:1: 355:76>::unlock(_1: &SpinMutex<(), R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:370:22: 370:27
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:370:29: 370:29
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:371:9: 371:28

    bb0: {
        _2 = SpinMutex::<(), R>::force_unlock(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:371:9: 371:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:371:14: 371:26
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a SpinMutex<(), R>) {SpinMutex::<(), R>::force_unlock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:372:6: 372:6
    }
}

fn spin::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:355:1: 355:76>::is_locked(_1: &SpinMutex<(), R>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:374:18: 374:23
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:374:28: 374:32

    bb0: {
        _0 = SpinMutex::<(), R>::is_locked(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:375:9: 375:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:375:9: 375:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a SpinMutex<(), R>) -> bool {SpinMutex::<(), R>::is_locked}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex/spin.rs:376:6: 376:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:131:1: 131:23>::new(_1: T) -> mutex::Mutex<T, R> {
    debug value => _1;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:148:22: 148:27
    let mut _0: mutex::Mutex<T, R>;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:148:35: 148:39
    let mut _2: mutex::spin::SpinMutex<T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:150:20: 150:42

    bb0: {
        _2 = SpinMutex::<T, R>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:150:20: 150:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:150:20: 150:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> SpinMutex<T, R> {SpinMutex::<T, R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = mutex::Mutex::<T, R> { inner: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:149:9: 151:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:152:6: 152:6
    }
}

// MIR FOR CTFE
fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:131:1: 131:23>::new(_1: T) -> mutex::Mutex<T, R> {
    debug value => _1;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:148:22: 148:27
    let mut _0: mutex::Mutex<T, R>;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:148:35: 148:39
    let mut _2: mutex::spin::SpinMutex<T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:150:20: 150:42
    let mut _3: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:150:36: 150:41

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:150:20: 150:42
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:150:36: 150:41
        _3 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:150:36: 150:41
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:150:20: 150:42
        _2 = SpinMutex::<T, R>::new(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:150:20: 150:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:150:20: 150:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> SpinMutex<T, R> {SpinMutex::<T, R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:150:41: 150:42
        _0 = mutex::Mutex::<T, R> { inner: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:149:9: 151:10
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:151:9: 151:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:152:6: 152:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:131:1: 131:23>::into_inner(_1: mutex::Mutex<T, R>) -> T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:163:23: 163:27
    let mut _0: T;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:163:32: 163:33
    let mut _2: mutex::spin::SpinMutex<T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:164:9: 164:19

    bb0: {
        _2 = move (_1.0: mutex::spin::SpinMutex<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:164:9: 164:19
        _0 = SpinMutex::<T, R>::into_inner(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:164:9: 164:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:164:20: 164:30
                                         // + literal: Const { ty: fn(SpinMutex<T, R>) -> T {SpinMutex::<T, R>::into_inner}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:165:6: 165:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:168:1: 168:46>::lock(_1: &mutex::Mutex<T, R>) -> mutex::MutexGuard<'_, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:184:17: 184:22
    let mut _0: mutex::MutexGuard<'_, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:184:27: 184:40
    let mut _2: mutex::spin::SpinMutexGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:186:20: 186:37
    let mut _3: &mutex::spin::SpinMutex<T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:186:20: 186:37

    bb0: {
        _3 = &((*_1).0: mutex::spin::SpinMutex<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:186:20: 186:37
        _2 = SpinMutex::<T, R>::lock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:186:20: 186:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:186:31: 186:35
                                         // + literal: Const { ty: for<'a> fn(&'a SpinMutex<T, R>) -> SpinMutexGuard<'a, T> {SpinMutex::<T, R>::lock}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = mutex::MutexGuard::<'_, T> { inner: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:185:9: 187:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:188:6: 188:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:191:1: 191:31>::is_locked(_1: &mutex::Mutex<T, R>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:199:22: 199:27
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:199:32: 199:36
    let mut _2: &mutex::spin::SpinMutex<T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:200:9: 200:31

    bb0: {
        _2 = &((*_1).0: mutex::spin::SpinMutex<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:200:9: 200:31
        _0 = SpinMutex::<T, R>::is_locked(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:200:9: 200:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:200:20: 200:29
                                         // + literal: Const { ty: for<'a> fn(&'a SpinMutex<T, R>) -> bool {SpinMutex::<T, R>::is_locked}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:201:6: 201:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:191:1: 191:31>::force_unlock(_1: &mutex::Mutex<T, R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:211:32: 211:37
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:211:39: 211:39
    let mut _2: &mutex::spin::SpinMutex<T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:212:9: 212:34

    bb0: {
        _2 = &((*_1).0: mutex::spin::SpinMutex<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:212:9: 212:34
        _0 = SpinMutex::<T, R>::force_unlock(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:212:9: 212:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:212:20: 212:32
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a SpinMutex<T, R>) {SpinMutex::<T, R>::force_unlock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:213:6: 213:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:191:1: 191:31>::try_lock(_1: &mutex::Mutex<T, R>) -> Option<mutex::MutexGuard<'_, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:230:21: 230:26
    let mut _0: core::option::Option<mutex::MutexGuard<'_, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:230:31: 230:52
    let mut _2: core::option::Option<mutex::spin::SpinMutexGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:231:9: 232:24
    let mut _3: &mutex::spin::SpinMutex<T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:231:9: 232:24

    bb0: {
        _3 = &((*_1).0: mutex::spin::SpinMutex<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:231:9: 232:24
        _2 = SpinMutex::<T, R>::try_lock(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:231:9: 232:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:232:14: 232:22
                                         // + literal: Const { ty: for<'a> fn(&'a SpinMutex<T, R>) -> Option<SpinMutexGuard<'a, T>> {SpinMutex::<T, R>::try_lock}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<SpinMutexGuard<'_, T>>::map::<mutex::MutexGuard<'_, T>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:233:18: 233:25]>(move _2, const ZeroSized: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:233:18: 233:25]) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:231:9: 233:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:233:14: 233:17
                                         // + literal: Const { ty: fn(Option<SpinMutexGuard<'_, T>>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:233:18: 233:25]) -> Option<mutex::MutexGuard<'_, T>> {Option::<SpinMutexGuard<'_, T>>::map::<mutex::MutexGuard<'_, T>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:233:18: 233:25]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:233:18: 233:25], val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:234:6: 234:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:191:1: 191:31>::try_lock::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:233:18: 233:25], _2: SpinMutexGuard<'_, T>) -> mutex::MutexGuard<'_, T> {
    debug guard => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:233:19: 233:24
    let mut _0: mutex::MutexGuard<'_, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:233:26: 233:26

    bb0: {
        _0 = mutex::MutexGuard::<'_, T> { inner: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:233:26: 233:53
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:233:53: 233:53
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:191:1: 191:31>::get_mut(_1: &mut mutex::Mutex<T, R>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:250:20: 250:29
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:250:34: 250:40
    let mut _2: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:251:9: 251:29
    let mut _3: &mut mutex::spin::SpinMutex<T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:251:9: 251:29

    bb0: {
        _3 = &mut ((*_1).0: mutex::spin::SpinMutex<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:251:9: 251:29
        _2 = SpinMutex::<T, R>::get_mut(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:251:9: 251:29
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:251:20: 251:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut SpinMutex<T, R>) -> &'a mut T {SpinMutex::<T, R>::get_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = _2;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:251:9: 251:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:252:6: 252:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:255:1: 255:59>::fmt(_1: &mutex::Mutex<T, R>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:256:12: 256:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:256:19: 256:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:256:46: 256:57
    let _3: &mutex::spin::SpinMutex<T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:257:25: 257:36

    bb0: {
        _3 = &((*_1).0: mutex::spin::SpinMutex<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:257:25: 257:36
        _0 = <SpinMutex<T, R> as Debug>::fmt(_3, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:257:9: 257:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:257:9: 257:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a SpinMutex<T, R>, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<SpinMutex<T, R> as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:258:6: 258:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:261:1: 261:53>::default() -> mutex::Mutex<T, R> {
    let mut _0: mutex::Mutex<T, R>;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:262:21: 262:25
    let mut _1: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:263:19: 263:37

    bb0: {
        _1 = <T as Default>::default() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:263:19: 263:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:263:19: 263:35
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = mutex::Mutex::<T, R>::new(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:263:9: 263:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:263:9: 263:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> mutex::Mutex<T, R> {mutex::Mutex::<T, R>::new}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:264:6: 264:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:267:1: 267:35>::from(_1: T) -> mutex::Mutex<T, R> {
    debug data => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:268:13: 268:17
    let mut _0: mutex::Mutex<T, R>;      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:268:25: 268:29

    bb0: {
        _0 = mutex::Mutex::<T, R>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:269:9: 269:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:269:9: 269:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> mutex::Mutex<T, R> {mutex::Mutex::<T, R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:270:6: 270:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:273:1: 273:38>::leak(_1: mutex::MutexGuard<'_, T>) -> &mut T {
    debug this => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:287:17: 287:21
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:287:32: 287:41
    let mut _2: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:288:9: 288:42
    let mut _3: mutex::spin::SpinMutexGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:288:31: 288:41

    bb0: {
        _3 = move (_1.0: mutex::spin::SpinMutexGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:288:31: 288:41
        _2 = SpinMutexGuard::<'_, T>::leak(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:288:9: 288:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:288:9: 288:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(SpinMutexGuard<'_, T>) -> &mut T {SpinMutexGuard::<'_, T>::leak}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = _2;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:288:9: 288:42
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:289:6: 289:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:292:1: 292:66>::fmt(_1: &mutex::MutexGuard<'_, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:293:12: 293:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:293:19: 293:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:293:46: 293:57
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:294:25: 294:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:294:26: 294:32

    bb0: {
        _4 = <mutex::MutexGuard<'_, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:294:26: 294:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:294:26: 294:32
                                         // + literal: Const { ty: for<'a> fn(&'a mutex::MutexGuard<'_, T>) -> &'a <mutex::MutexGuard<'_, T> as Deref>::Target {<mutex::MutexGuard<'_, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:294:25: 294:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:294:9: 294:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:294:9: 294:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:295:6: 295:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:298:1: 298:70>::fmt(_1: &mutex::MutexGuard<'_, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:299:12: 299:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:299:19: 299:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:299:46: 299:57
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:300:27: 300:34
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:300:28: 300:34

    bb0: {
        _4 = <mutex::MutexGuard<'_, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:300:28: 300:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:300:28: 300:34
                                         // + literal: Const { ty: for<'a> fn(&'a mutex::MutexGuard<'_, T>) -> &'a <mutex::MutexGuard<'_, T> as Deref>::Target {<mutex::MutexGuard<'_, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:300:27: 300:34
        _0 = <T as Display>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:300:9: 300:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:300:9: 300:26
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:301:6: 301:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:304:1: 304:48>::deref(_1: &mutex::MutexGuard<'_, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:306:14: 306:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:306:24: 306:26
    let _2: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:307:10: 307:21
    let mut _3: &mutex::spin::SpinMutexGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:307:11: 307:21

    bb0: {
        _3 = &((*_1).0: mutex::spin::SpinMutexGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:307:11: 307:21
        _2 = <SpinMutexGuard<'_, T> as Deref>::deref(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:307:10: 307:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:307:10: 307:21
                                         // + literal: Const { ty: for<'a> fn(&'a SpinMutexGuard<'_, T>) -> &'a <SpinMutexGuard<'_, T> as Deref>::Target {<SpinMutexGuard<'_, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = _2;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:307:9: 307:21
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:308:6: 308:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:311:1: 311:51>::deref_mut(_1: &mut mutex::MutexGuard<'_, T>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:312:18: 312:27
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:312:32: 312:38
    let mut _2: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:313:14: 313:25
    let mut _3: &mut mutex::spin::SpinMutexGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:313:15: 313:25

    bb0: {
        _3 = &mut ((*_1).0: mutex::spin::SpinMutexGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:313:15: 313:25
        _2 = <SpinMutexGuard<'_, T> as DerefMut>::deref_mut(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:313:14: 313:25
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:313:14: 313:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut SpinMutexGuard<'_, T>) -> &'a mut <SpinMutexGuard<'_, T> as Deref>::Target {<SpinMutexGuard<'_, T> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = _2;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:313:9: 313:25
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:314:6: 314:6
    }
}

const mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:318:1: 318:72>::INIT: mutex::Mutex<(), R> = {
    let mut _0: mutex::Mutex<(), R>;     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:321:17: 321:21
    let mut _1: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:321:34: 321:36

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:321:34: 321:36
        _1 = ();                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:321:34: 321:36
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:321:24: 321:37
        _0 = mutex::Mutex::<(), R>::new(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:321:24: 321:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:321:24: 321:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(()) -> mutex::Mutex<(), R> {mutex::Mutex::<(), R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:321:36: 321:37
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:321:5: 321:38
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:321:5: 321:38
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:318:1: 318:72>::lock(_1: &mutex::Mutex<(), R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:323:13: 323:18
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:323:20: 323:20
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:325:9: 325:44
    let mut _3: mutex::MutexGuard<'_, ()>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:325:27: 325:43

    bb0: {
        _3 = mutex::Mutex::<(), R>::lock(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:325:27: 325:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:325:27: 325:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mutex::Mutex<(), R>) -> mutex::MutexGuard<'a, ()> {mutex::Mutex::<(), R>::lock}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = core::mem::forget::<mutex::MutexGuard<'_, ()>>(move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:325:9: 325:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:325:9: 325:26
                                         // + literal: Const { ty: fn(mutex::MutexGuard<'_, ()>) {core::mem::forget::<mutex::MutexGuard<'_, ()>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:326:6: 326:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:318:1: 318:72>::try_lock(_1: &mutex::Mutex<(), R>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:328:17: 328:22
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:328:27: 328:31
    let mut _2: &core::option::Option<()>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:330:9: 330:62
    let _3: core::option::Option<()>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:330:9: 330:52
    let mut _4: core::option::Option<mutex::MutexGuard<'_, ()>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:330:9: 330:29

    bb0: {
        _4 = mutex::Mutex::<(), R>::try_lock(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:330:9: 330:29
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:330:9: 330:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mutex::Mutex<(), R>) -> Option<mutex::MutexGuard<'a, ()>> {mutex::Mutex::<(), R>::try_lock}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Option::<mutex::MutexGuard<'_, ()>>::map::<(), fn(mutex::MutexGuard<'_, ()>) {core::mem::forget::<mutex::MutexGuard<'_, ()>>}>(move _4, core::mem::forget::<mutex::MutexGuard<'_, ()>>) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:330:9: 330:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:330:30: 330:33
                                         // + literal: Const { ty: fn(Option<mutex::MutexGuard<'_, ()>>, fn(mutex::MutexGuard<'_, ()>) {core::mem::forget::<mutex::MutexGuard<'_, ()>>}) -> Option<()> {Option::<mutex::MutexGuard<'_, ()>>::map::<(), fn(mutex::MutexGuard<'_, ()>) {core::mem::forget::<mutex::MutexGuard<'_, ()>>}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:330:34: 330:51
                                         // + literal: Const { ty: fn(mutex::MutexGuard<'_, ()>) {core::mem::forget::<mutex::MutexGuard<'_, ()>>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:330:9: 330:62
        _0 = Option::<()>::is_some(move _2) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:330:9: 330:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:330:53: 330:60
                                         // + literal: Const { ty: for<'a> fn(&'a Option<()>) -> bool {Option::<()>::is_some}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:331:6: 331:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:318:1: 318:72>::unlock(_1: &mutex::Mutex<(), R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:333:22: 333:27
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:333:29: 333:29
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:334:9: 334:28

    bb0: {
        _2 = mutex::Mutex::<(), R>::force_unlock(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:334:9: 334:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:334:14: 334:26
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mutex::Mutex<(), R>) {mutex::Mutex::<(), R>::force_unlock}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:335:6: 335:6
    }
}

fn mutex::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:318:1: 318:72>::is_locked(_1: &mutex::Mutex<(), R>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:337:18: 337:23
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:337:28: 337:32
    let mut _2: &mutex::spin::SpinMutex<(), R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:338:9: 338:31

    bb0: {
        _2 = &((*_1).0: mutex::spin::SpinMutex<(), R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:338:9: 338:31
        _0 = SpinMutex::<(), R>::is_locked(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:338:9: 338:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:338:20: 338:29
                                         // + literal: Const { ty: for<'a> fn(&'a SpinMutex<(), R>) -> bool {SpinMutex::<(), R>::is_locked}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/mutex.rs:339:6: 339:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:34:1: 34:34>::default() -> once::Once<T, R> {
    let mut _0: once::Once<T, R>;        // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:35:21: 35:25

    bb0: {
        _0 = once::Once::<T, R>::new() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:36:9: 36:20
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:36:9: 36:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> once::Once<T, R> {once::Once::<T, R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:37:6: 37:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:40:1: 40:49>::fmt(_1: &once::Once<T, R>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:41:12: 41:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:41:19: 41:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:41:46: 41:57
    let mut _3: core::option::Option<&T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:42:15: 42:25
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:13: 43:20
    let _5: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:18: 43:19
    let mut _6: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:24: 44:41
    let mut _7: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _8: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _9: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _10: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:34: 43:50
    let mut _11: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:31]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:40
    let mut _12: &&T;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:40
    let mut _13: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:40
    let mut _14: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:27: 45:31]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:27: 45:47
    let mut _15: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:27: 45:47
    let mut _16: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _17: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _18: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:46:31: 46:59
    let mut _19: &[&str; 1];             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:46:31: 46:59
    scope 1 {
        debug s => _5;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:18: 43:19
        let mut _20: &[&str; 1];         // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:34: 43:50
    }

    bb0: {
        _3 = once::Once::<T, R>::get(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:42:15: 42:25
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:42:20: 42:23
                                         // + literal: Const { ty: for<'a> fn(&'a once::Once<T, R>) -> Option<&'a T> {once::Once::<T, R>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:42:15: 42:25
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:42:9: 42:25
    }

    bb2: {
        _16 = _2;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _19 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:46:31: 46:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:46:31: 46:59
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<once::Once<T, R> as Debug>::fmt, [T, R], Some(promoted[0])) }
        _18 = _19 as &[&str] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:46:31: 46:59
        _17 = Arguments::<'_>::new_const(move _18) -> [return: bb8, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:42:15: 42:25
    }

    bb4: {
        _5 = ((_3 as Some).0: &T);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:18: 43:19
        _8 = _2;                         // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _20 = const _;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:34: 43:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:34: 43:50
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<once::Once<T, R> as Debug>::fmt, [T, R], Some(promoted[1])) }
        _10 = _20 as &[&str] (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:34: 43:50
        _9 = Arguments::<'_>::new_const(move _10) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = Formatter::<'_>::write_fmt(move _8, move _9) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = &_5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:40
        _13 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:40
        _11 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:31] { s: move _12, f: move _13 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:40
                                         // closure
                                         // + def_id: DefId(0:289 ~ spin[cd97]::once::{impl#1}::fmt::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     R,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)) -> core::result::Result<(), core::fmt::Error>,
                                         //     (&&T, &mut &mut core::fmt::Formatter<'_>),
                                         // ]
        _6 = Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:31]>(move _7, move _11) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:24: 44:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:18: 44:26
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:31]) -> Result<(), core::fmt::Error> {Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:31]>}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:27: 45:47
        _14 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:27: 45:31] { f: move _15 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:27: 45:47
                                         // closure
                                         // + def_id: DefId(0:290 ~ spin[cd97]::once::{impl#1}::fmt::{closure#1})
                                         // + substs: [
                                         //     T,
                                         //     R,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)) -> core::result::Result<(), core::fmt::Error>,
                                         //     (&mut &mut core::fmt::Formatter<'_>,),
                                         // ]
        _0 = Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:27: 45:31]>(move _6, move _14) -> [return: bb9, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:24: 45:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:18: 45:26
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:27: 45:31]) -> Result<(), core::fmt::Error> {Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:27: 45:31]>}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Formatter::<'_>::write_fmt(move _16, move _17) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:48:6: 48:6
    }
}

promoted[0] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:40:1: 40:49>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:46:31: 46:59
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:46:31: 46:59

    bb0: {
        _1 = [const "Once { <uninitialized> }"]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:46:31: 46:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:46:31: 46:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:46:31: 46:59
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:46:31: 46:59
    }
}

promoted[1] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:40:1: 40:49>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:34: 43:50
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:34: 43:50

    bb0: {
        _1 = [const "Once { data: "];    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:34: 43:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:34: 43:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:34: 43:50
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:34: 43:50
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:40:1: 40:49>::fmt::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:31], _2: ()) -> Result<(), core::fmt::Error> {
    debug s => (*(_1.0: &&T));           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:43:18: 43:19
    debug f => (*(_1.1: &mut &mut core::fmt::Formatter<'_>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:41:19: 41:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:32: 44:32
    let mut _3: &&T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:40
    let mut _4: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:40
    let mut _5: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:40
    let mut _6: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:27: 44:40

    bb0: {
        _3 = deref_copy (_1.0: &&T);     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:32: 44:40
        _4 = deref_copy (*_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:32: 44:40
        _5 = deref_copy (_1.1: &mut &mut core::fmt::Formatter<'_>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:38: 44:39
        _6 = deref_copy (*_5);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:38: 44:39
        _0 = <T as Debug>::fmt(_4, _6) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:32: 44:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:34: 44:37
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:44:40: 44:40
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:40:1: 40:49>::fmt::{closure#1}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:27: 45:31], _2: ()) -> Result<(), core::fmt::Error> {
    debug f => (*(_1.0: &mut &mut core::fmt::Formatter<'_>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:41:19: 41:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:32: 45:32
    let mut _3: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _4: &[&str];                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:42: 45:46
    let mut _5: &[&str; 1];              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:42: 45:46
    let mut _6: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:27: 45:47
    let mut _7: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:27: 45:47

    bb0: {
        _6 = deref_copy (_1.0: &mut &mut core::fmt::Formatter<'_>); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _7 = deref_copy (*_6);           // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _5 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:42: 45:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:42: 45:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<once::Once<T, R> as Debug>::fmt::{closure#1}, [T, R, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _4 = _5 as &[&str] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:42: 45:46
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Formatter::<'_>::write_fmt(_7, move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:47: 45:47
    }
}

promoted[0] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:40:1: 40:49>::fmt::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:42: 45:46
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:42: 45:46

    bb0: {
        _1 = [const "}"];                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:42: 45:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:42: 45:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:42: 45:46
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:45:42: 45:46
    }
}

Status::Incomplete::{constant#0}: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:70:22: 70:26

    bb0: {
        _0 = const 0_u8;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:70:22: 70:26
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:70:22: 70:26
    }
}

Status::Running::{constant#0}: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:71:19: 71:23

    bb0: {
        _0 = const 1_u8;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:71:19: 71:23
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:71:19: 71:23
    }
}

Status::Complete::{constant#0}: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:72:20: 72:24

    bb0: {
        _0 = const 2_u8;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:72:20: 72:24
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:72:20: 72:24
    }
}

Status::Panicked::{constant#0}: u8 = {
    let mut _0: u8;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:73:20: 73:24

    bb0: {
        _0 = const 3_u8;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:73:20: 73:24
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:73:20: 73:24
    }
}

fn status::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:14: 68:19>::clone(_1: &Status) -> Status {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:14: 68:19
    let mut _0: once::status::Status;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:14: 68:19

    bb0: {
        _0 = (*_1);                      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:14: 68:19
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:19: 68:19
    }
}

fn status::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32>::fmt(_1: &Status, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
    let mut _3: &str;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
    let _5: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
    let _6: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
    let _7: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
    let _8: &str;                        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
    }

    bb1: {
        _8 = const "Panicked";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _8;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:31: 68:32
    }

    bb2: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
    }

    bb3: {
        _5 = const "Incomplete";         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:31: 68:32
    }

    bb4: {
        _6 = const "Running";            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:31: 68:32
    }

    bb5: {
        _7 = const "Complete";           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _7;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:31: 68:32
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb7, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:27: 68:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:32: 68:32
    }
}

fn status::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:34: 68:43>::eq(_1: &Status, _2: &Status) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:34: 68:43
    debug other => _2;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:34: 68:43
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:34: 68:43
    let _3: u8;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:34: 68:43
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:34: 68:43
        let _4: u8;                      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:34: 68:43
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:34: 68:43
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:34: 68:43
        _4 = discriminant((*_2));        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:34: 68:43
        _0 = Eq(_3, _4);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:34: 68:43
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:68:43: 68:43
    }
}

fn status::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:75:5: 75:16>::new_unchecked(_1: u8) -> Status {
    debug inner => _1;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:81:33: 81:38
    let mut _0: once::status::Status;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:81:47: 81:51

    bb0: {
        _0 = _1 as once::status::Status (Transmute); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:82:13: 82:40
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:83:10: 83:10
    }
}

fn status::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:86:5: 86:22>::new(_1: Status) -> AtomicStatus {
    debug status => _1;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:88:26: 88:32
    let mut _0: once::status::AtomicStatus; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:88:45: 88:49
    let mut _2: core::sync::atomic::AtomicU8; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:18: 90:45
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:38
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:44

    bb0: {
        _3 = discriminant(_1);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:44
        _4 = Le(_3, const 3_u8);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:44
        assume(move _4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:44
        _2 = core::sync::atomic::AtomicU8::new(_3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:18: 90:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:18: 90:31
                                         // + literal: Const { ty: fn(u8) -> core::sync::atomic::AtomicU8 {core::sync::atomic::AtomicU8::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = AtomicStatus(move _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:13: 90:46
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:91:10: 91:10
    }
}

// MIR FOR CTFE
fn status::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:86:5: 86:22>::new(_1: Status) -> AtomicStatus {
    debug status => _1;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:88:26: 88:32
    let mut _0: once::status::AtomicStatus; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:88:45: 88:49
    let mut _2: core::sync::atomic::AtomicU8; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:18: 90:45
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:44
    let _4: once::status::Status;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:38
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:38
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:44
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:44

    bb0: {
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:18: 90:45
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:44
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:38
        _4 = _1;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:38
        _5 = discriminant(_4);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:44
        _6 = _5 as u8 (IntToInt);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:44
        _7 = Le(_6, const 3_u8);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:44
        assume(move _7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:44
        _3 = move _5 as u8 (IntToInt);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:32: 90:44
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:43: 90:44
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:18: 90:45
        _2 = core::sync::atomic::AtomicU8::new(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:18: 90:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:18: 90:31
                                         // + literal: Const { ty: fn(u8) -> core::sync::atomic::AtomicU8 {core::sync::atomic::AtomicU8::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:44: 90:45
        _0 = AtomicStatus(move _2);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:13: 90:46
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:90:45: 90:46
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:91:10: 91:10
    }
}

fn status::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:86:5: 86:22>::load(_1: &AtomicStatus, _2: core::sync::atomic::Ordering) -> Status {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:93:21: 93:26
    debug ordering => _2;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:93:28: 93:36
    let mut _0: once::status::Status;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:93:51: 93:57
    let mut _3: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:96:44: 96:65
    let mut _4: &core::sync::atomic::AtomicU8; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:96:44: 96:65
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).0: core::sync::atomic::AtomicU8); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:96:44: 96:65
        _3 = core::sync::atomic::AtomicU8::load(move _4, _2) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:96:44: 96:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:96:51: 96:55
                                         // + literal: Const { ty: for<'a> fn(&'a core::sync::atomic::AtomicU8, core::sync::atomic::Ordering) -> u8 {core::sync::atomic::AtomicU8::load}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Status::new_unchecked(move _3) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:96:22: 96:66
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:96:22: 96:43
                                         // + literal: Const { ty: unsafe fn(u8) -> Status {Status::new_unchecked}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:97:10: 97:10
    }
}

fn status::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:86:5: 86:22>::store(_1: &AtomicStatus, _2: Status, _3: core::sync::atomic::Ordering) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:99:22: 99:27
    debug status => _2;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:99:29: 99:35
    debug ordering => _3;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:99:45: 99:53
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:99:65: 99:65
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:102:13: 102:49
    let mut _5: &core::sync::atomic::AtomicU8; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:102:13: 102:49
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:102:26: 102:32
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:102:26: 102:38

    bb0: {
        _5 = &((*_1).0: core::sync::atomic::AtomicU8); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:102:13: 102:49
        _6 = discriminant(_2);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:102:26: 102:38
        _7 = Le(_6, const 3_u8);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:102:26: 102:38
        assume(move _7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:102:26: 102:38
        _4 = core::sync::atomic::AtomicU8::store(move _5, _6, _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:102:13: 102:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:102:20: 102:25
                                         // + literal: Const { ty: for<'a> fn(&'a core::sync::atomic::AtomicU8, u8, core::sync::atomic::Ordering) {core::sync::atomic::AtomicU8::store}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:103:10: 103:10
    }
}

fn status::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:86:5: 86:22>::compare_exchange(_1: &AtomicStatus, _2: Status, _3: Status, _4: core::sync::atomic::Ordering, _5: core::sync::atomic::Ordering) -> Result<Status, Status> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:106:13: 106:18
    debug old => _2;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:107:13: 107:16
    debug new => _3;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:108:13: 108:16
    debug success => _4;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:109:13: 109:20
    debug failure => _5;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:110:13: 110:20
    let mut _0: core::result::Result<once::status::Status, once::status::Status>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:111:14: 111:36
    let mut _6: core::result::Result<u8, u8>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:112:19: 114:74
    let mut _7: &core::sync::atomic::AtomicU8; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:112:19: 114:74
    let mut _8: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:114:35: 114:38
    let mut _9: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:114:35: 114:44
    let mut _10: u8;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:114:46: 114:49
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:114:46: 114:55
    let mut _12: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:119:17: 119:23
    let _13: u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:119:20: 119:22
    let mut _14: once::status::Status;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:119:30: 119:66
    let _15: u8;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:120:21: 120:24
    let mut _16: once::status::Status;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:120:33: 120:70
    scope 1 {
        debug ok => _13;                 // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:119:20: 119:22
        scope 2 {
        }
    }
    scope 3 {
        debug err => _15;                // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:120:21: 120:24
        scope 4 {
        }
    }

    bb0: {
        _7 = &((*_1).0: core::sync::atomic::AtomicU8); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:112:19: 114:74
        _8 = discriminant(_2);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:114:35: 114:44
        _9 = Le(_8, const 3_u8);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:114:35: 114:44
        assume(move _9);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:114:35: 114:44
        _10 = discriminant(_3);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:114:46: 114:55
        _11 = Le(_10, const 3_u8);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:114:46: 114:55
        assume(move _11);                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:114:46: 114:55
        _6 = core::sync::atomic::AtomicU8::compare_exchange(move _7, _8, _10, _4, _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:112:19: 114:74
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:114:18: 114:34
                                         // + literal: Const { ty: for<'a> fn(&'a core::sync::atomic::AtomicU8, u8, u8, core::sync::atomic::Ordering, core::sync::atomic::Ordering) -> Result<u8, u8> {core::sync::atomic::AtomicU8::compare_exchange}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = discriminant(_6);          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:112:19: 114:74
        switchInt(move _12) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:112:13: 114:74
    }

    bb2: {
        _15 = ((_6 as Err).0: u8);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:120:21: 120:24
        _16 = Status::new_unchecked(_15) -> [return: bb6, unwind unreachable]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:120:42: 120:68
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:120:42: 120:63
                                         // + literal: Const { ty: unsafe fn(u8) -> Status {Status::new_unchecked}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:112:19: 114:74
    }

    bb4: {
        _13 = ((_6 as Ok).0: u8);        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:119:20: 119:22
        _14 = Status::new_unchecked(_13) -> [return: bb5, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:119:39: 119:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:119:39: 119:60
                                         // + literal: Const { ty: unsafe fn(u8) -> Status {Status::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = Result::<Status, Status>::Ok(move _14); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:119:27: 119:67
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:119:66: 119:67
    }

    bb6: {
        _0 = Result::<Status, Status>::Err(move _16); // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:120:29: 120:71
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:120:70: 120:71
    }

    bb7: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:122:10: 122:10
    }
}

fn status::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:86:5: 86:22>::get_mut(_1: &mut AtomicStatus) -> &mut Status {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:124:24: 124:33
    let mut _0: &mut once::status::Status; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:124:38: 124:49
    let mut _2: *mut once::status::Status; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:127:28: 127:76
    let mut _3: *mut u8;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:127:29: 127:58
    let mut _4: &mut u8;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:127:30: 127:46
    let mut _5: &mut core::sync::atomic::AtomicU8; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:127:30: 127:46
    scope 1 {
    }

    bb0: {
        _5 = &mut ((*_1).0: core::sync::atomic::AtomicU8); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:127:30: 127:46
        _4 = core::sync::atomic::AtomicU8::get_mut(move _5) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:127:30: 127:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:127:37: 127:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut core::sync::atomic::AtomicU8) -> &'a mut u8 {core::sync::atomic::AtomicU8::get_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &raw mut (*_4);             // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:127:30: 127:46
        _2 = ptr::mut_ptr::<impl *mut u8>::cast::<Status>(move _3) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:127:28: 127:76
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:127:59: 127:63
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(*mut u8) -> *mut Status {ptr::mut_ptr::<impl *mut u8>::cast::<Status>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = &mut (*_2);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:127:22: 127:76
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:128:10: 128:10
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:133:1: 133:37>::call_once(_1: &once::Once<T, R>, _2: F) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:168:40: 168:45
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:168:47: 168:48
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:168:56: 168:58
    let mut _3: core::result::Result<&T, core::convert::Infallible>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:15: 169:77
    let mut _4: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:34: 169:36]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:34: 169:76
    let mut _5: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:170:13: 170:18
    scope 1 {
        debug x => _0;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:170:16: 170:17
    }
    scope 2 {
        debug void => const ZeroSized: Infallible; // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:171:17: 171:21
    }

    bb0: {
        _4 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:34: 169:36] { f: move _2 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:34: 169:76
                                         // closure
                                         // + def_id: DefId(0:318 ~ spin[cd97]::once::{impl#4}::call_once::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     R,
                                         //     F,
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> core::result::Result<T, core::convert::Infallible>,
                                         //     (F,),
                                         // ]
        _3 = once::Once::<T, R>::try_call_once::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:34: 169:36], Infallible>(_1, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:15: 169:77
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:20: 169:33
                                         // + literal: Const { ty: for<'a> fn(&'a once::Once<T, R>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:34: 169:36]) -> Result<&'a T, Infallible> {once::Once::<T, R>::try_call_once::<[closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:34: 169:36], Infallible>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:15: 169:77
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:9: 169:77
    }

    bb2: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:15: 169:77
    }

    bb3: {
        _0 = ((_3 as Ok).0: &T);         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:170:16: 170:17
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:173:6: 173:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:133:1: 133:37>::call_once::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:34: 169:36]) -> Result<T, Infallible> {
    debug f => (_1.0: F);                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:168:47: 168:48
    let mut _0: core::result::Result<T, core::convert::Infallible>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:37: 169:37
    let mut _2: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:72: 169:75
    let mut _3: F;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:72: 169:73

    bb0: {
        _3 = move (_1.0: F);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:72: 169:73
        _2 = <F as FnOnce<()>>::call_once(move _3, const ()) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:72: 169:75
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:72: 169:73
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Result::<T, Infallible>::Ok(move _2); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:37: 169:76
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:169:76: 169:76
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:133:1: 133:37>::try_call_once(_1: &once::Once<T, R>, _2: F) -> Result<&T, E> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:208:58: 208:63
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:208:65: 208:66
    let mut _0: core::result::Result<&T, E>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:208:74: 208:87
    let mut _3: core::option::Option<&T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:209:30: 209:40
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:209:16: 209:27
    let mut _6: F;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:212:37: 212:38
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:214:5: 214:6
    scope 1 {
        debug value => _5;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:209:21: 209:26
        let _5: &T;                      // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:209:21: 209:26
    }

    bb0: {
        _7 = const false;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:209:30: 209:40
        _7 = const true;                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:209:30: 209:40
        _3 = once::Once::<T, R>::get(_1) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:209:30: 209:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:209:35: 209:38
                                         // + literal: Const { ty: for<'a> fn(&'a once::Once<T, R>) -> Option<&'a T> {once::Once::<T, R>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_3);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:209:16: 209:27
        switchInt(move _4) -> [1: bb2, otherwise: bb3]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:209:16: 209:27
    }

    bb2: {
        _5 = ((_3 as Some).0: &T);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:209:21: 209:26
        _0 = Result::<&T, E>::Ok(_5);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:210:13: 210:22
        goto -> bb4;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:209:9: 213:10
    }

    bb3: {
        _7 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:212:37: 212:38
        _6 = move _2;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:212:37: 212:38
        _0 = once::Once::<T, R>::try_call_once_slow::<F, E>(_1, move _6) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:212:13: 212:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:212:18: 212:36
                                         // + literal: Const { ty: for<'a> fn(&'a once::Once<T, R>, F) -> Result<&'a T, E> {once::Once::<T, R>::try_call_once_slow::<F, E>}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt(_7) -> [0: bb5, otherwise: bb6]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:214:5: 214:6
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:214:6: 214:6
    }

    bb6: {
        drop(_2) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:214:5: 214:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:133:1: 133:37>::try_call_once_slow(_1: &once::Once<T, R>, _2: F) -> Result<&T, E> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:217:59: 217:64
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:217:66: 217:67
    let mut _0: core::result::Result<&T, E>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:217:75: 217:88
    let _3: core::result::Result<once::status::Status, once::status::Status>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:219:17: 219:21
    let mut _4: &once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:219:24: 224:14
    let mut _5: once::status::Status;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:220:17: 220:35
    let mut _6: once::status::Status;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:221:17: 221:32
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:222:17: 222:34
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:223:17: 223:34
    let mut _9: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:230:21: 230:37
    let mut _10: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:227:17: 227:46
    let mut _12: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    let mut _13: core::option::Option<&T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:231:47: 231:58
    let mut _14: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:232:21: 232:28
    let mut _16: &T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:236:31: 239:22
    let _17: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:238:25: 238:41
    let _19: &once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:253:25: 253:37
    let mut _20: core::result::Result<T, E>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:255:29: 255:32
    let mut _21: F;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:255:29: 255:30
    let mut _22: isize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:256:17: 256:24
    let _25: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:259:21: 259:46
    let _26: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:260:21: 260:77
    let mut _27: &once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:260:21: 260:77
    let mut _28: once::status::Status;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:260:39: 260:57
    let mut _29: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:260:59: 260:76
    let _30: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:269:17: 269:59
    let mut _31: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:269:17: 269:48
    let mut _32: &mut core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:269:17: 269:48
    let mut _33: *mut core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:269:19: 269:34
    let mut _34: &core::cell::UnsafeCell<core::mem::MaybeUninit<T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:269:19: 269:34
    let _35: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:282:13: 282:38
    let _36: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:290:13: 290:67
    let mut _37: &once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:290:13: 290:67
    let mut _38: once::status::Status;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:290:31: 290:47
    let mut _39: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:290:49: 290:66
    let mut _40: &T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:293:32: 293:48
    let _41: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:293:32: 293:48
    let mut _42: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:295:5: 295:6
    scope 1 {
        debug xchg => _3;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:219:17: 219:21
        let _11: once::status::Status;   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:227:20: 227:45
        let _15: &T;                     // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:232:26: 232:27
        let _18: once::Finish<'_>;       // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:252:17: 252:23
        scope 2 {
            debug _must_be_state_incomplete => _11; // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:227:20: 227:45
        }
        scope 3 {
            debug v => _15;              // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:232:26: 232:27
        }
        scope 4 {
        }
        scope 5 {
            debug finish => _18;         // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:252:17: 252:23
            let _23: T;                  // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:256:20: 256:23
            let _24: E;                  // in scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:257:21: 257:24
            scope 6 {
                debug val => _23;        // in scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:255:17: 255:20
                scope 9 {
                }
                scope 10 {
                }
            }
            scope 7 {
                debug val => _23;        // in scope 7 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:256:20: 256:23
            }
            scope 8 {
                debug err => _24;        // in scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:257:21: 257:24
            }
        }
    }

    bb0: {
        _42 = const false;               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:218:9: 294:10
        _42 = const true;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:218:9: 294:10
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:218:9: 294:10
    }

    bb1: {
        _4 = &((*_1).1: once::status::AtomicStatus); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:219:24: 224:14
        _5 = Status::Incomplete;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:220:17: 220:35
        _6 = Status::Running;            // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:221:17: 221:32
        _7 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:222:17: 222:34
        _8 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:223:17: 223:34
        _3 = AtomicStatus::compare_exchange(move _4, move _5, move _6, move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:219:24: 224:14
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:219:36: 219:52
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicStatus, Status, Status, core::sync::atomic::Ordering, core::sync::atomic::Ordering) -> Result<Status, Status> {AtomicStatus::compare_exchange}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = discriminant(_3);          // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:226:19: 226:23
        switchInt(move _10) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:226:13: 226:23
    }

    bb3: {
        _9 = discriminant(((_3 as Err).0: once::status::Status)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:226:19: 226:23
        switchInt(move _9) -> [0: bb1, 1: bb7, 2: bb10, 3: bb6, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:226:13: 226:23
    }

    bb4: {
        unreachable;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:226:19: 226:23
    }

    bb5: {
        _11 = ((_3 as Ok).0: once::status::Status); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:227:20: 227:45
        _19 = &((*_1).1: once::status::AtomicStatus); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:253:25: 253:37
        _18 = Finish::<'_> { status: _19 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:252:26: 254:14
        _42 = const false;               // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:255:29: 255:30
        _21 = move _2;                   // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:255:29: 255:30
        _20 = <F as FnOnce<()>>::call_once(move _21, const ()) -> [return: bb12, unwind unreachable]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:255:29: 255:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:255:29: 255:30
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = panic(const "Once panicked") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:230:49: 230:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _13 = once::Once::<T, R>::poll(_1) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:231:47: 231:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:231:52: 231:56
                                         // + literal: Const { ty: for<'a> fn(&'a once::Once<T, R>) -> Option<&'a T> {once::Once::<T, R>::poll}, val: Value(<ZST>) }
    }

    bb8: {
        _14 = discriminant(_13);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:231:47: 231:58
        switchInt(move _14) -> [0: bb1, 1: bb9, otherwise: bb4]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:231:41: 231:58
    }

    bb9: {
        _15 = ((_13 as Some).0: &T);     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:232:26: 232:27
        _0 = Result::<&T, E>::Ok(_15);   // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:232:39: 232:44
        goto -> bb23;                    // scope 1 at no-location
    }

    bb10: {
        _17 = once::Once::<T, R>::force_get(_1) -> [return: bb11, unwind unreachable]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:238:25: 238:41
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:238:30: 238:39
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a once::Once<T, R>) -> &'a T {once::Once::<T, R>::force_get}, val: Value(<ZST>) }
    }

    bb11: {
        _16 = _17;                       // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:238:25: 238:41
        _0 = Result::<&T, E>::Ok(move _16); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:236:28: 239:23
        goto -> bb23;                    // scope 1 at no-location
    }

    bb12: {
        _22 = discriminant(_20);         // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:255:29: 255:32
        switchInt(move _22) -> [0: bb14, 1: bb13, otherwise: bb4]; // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:255:23: 255:32
    }

    bb13: {
        _24 = move ((_20 as Err).0: E);  // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:257:21: 257:24
        _25 = core::mem::forget::<Finish<'_>>(move _18) -> [return: bb15, unwind unreachable]; // scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:259:21: 259:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:259:21: 259:38
                                         // + literal: Const { ty: fn(Finish<'_>) {core::mem::forget::<Finish<'_>>}, val: Value(<ZST>) }
    }

    bb14: {
        _23 = move ((_20 as Ok).0: T);   // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:256:20: 256:23
        _34 = &((*_1).2: core::cell::UnsafeCell<core::mem::MaybeUninit<T>>); // scope 9 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:269:19: 269:34
        _33 = UnsafeCell::<MaybeUninit<T>>::get(move _34) -> [return: bb17, unwind unreachable]; // scope 9 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:269:19: 269:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:269:29: 269:32
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<MaybeUninit<T>>) -> *mut MaybeUninit<T> {UnsafeCell::<MaybeUninit<T>>::get}, val: Value(<ZST>) }
    }

    bb15: {
        _27 = &((*_1).1: once::status::AtomicStatus); // scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:260:21: 260:77
        _28 = Status::Incomplete;        // scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:260:39: 260:57
        _29 = Release;                   // scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:260:59: 260:76
        _26 = AtomicStatus::store(move _27, move _28, move _29) -> [return: bb16, unwind unreachable]; // scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:260:21: 260:77
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:260:33: 260:38
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicStatus, Status, core::sync::atomic::Ordering) {AtomicStatus::store}, val: Value(<ZST>) }
    }

    bb16: {
        _0 = Result::<&T, E>::Err(move _24); // scope 8 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:261:28: 261:36
        goto -> bb23;                    // scope 5 at no-location
    }

    bb17: {
        _32 = &mut (*_33);               // scope 9 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:269:17: 269:48
        _31 = MaybeUninit::<T>::as_mut_ptr(move _32) -> [return: bb18, unwind unreachable]; // scope 9 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:269:17: 269:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:269:36: 269:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut MaybeUninit<T>) -> *mut T {MaybeUninit::<T>::as_mut_ptr}, val: Value(<ZST>) }
    }

    bb18: {
        _30 = ptr::mut_ptr::<impl *mut T>::write(move _31, move _23) -> [return: bb19, unwind unreachable]; // scope 9 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:269:17: 269:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:269:49: 269:54
                                         // + literal: Const { ty: unsafe fn(*mut T, T) {ptr::mut_ptr::<impl *mut T>::write}, val: Value(<ZST>) }
    }

    bb19: {
        _35 = core::mem::forget::<Finish<'_>>(move _18) -> [return: bb20, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:282:13: 282:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:282:13: 282:30
                                         // + literal: Const { ty: fn(Finish<'_>) {core::mem::forget::<Finish<'_>>}, val: Value(<ZST>) }
    }

    bb20: {
        _37 = &((*_1).1: once::status::AtomicStatus); // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:290:13: 290:67
        _38 = Status::Complete;          // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:290:31: 290:47
        _39 = Release;                   // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:290:49: 290:66
        _36 = AtomicStatus::store(move _37, move _38, move _39) -> [return: bb21, unwind unreachable]; // scope 6 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:290:13: 290:67
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:290:25: 290:30
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicStatus, Status, core::sync::atomic::Ordering) {AtomicStatus::store}, val: Value(<ZST>) }
    }

    bb21: {
        _41 = once::Once::<T, R>::force_get(_1) -> [return: bb22, unwind unreachable]; // scope 10 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:293:32: 293:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:293:37: 293:46
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a once::Once<T, R>) -> &'a T {once::Once::<T, R>::force_get}, val: Value(<ZST>) }
    }

    bb22: {
        _40 = _41;                       // scope 10 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:293:32: 293:48
        _0 = Result::<&T, E>::Ok(move _40); // scope 10 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:293:29: 293:49
        goto -> bb23;                    // scope 5 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:294:9: 294:10
    }

    bb23: {
        switchInt(_42) -> [0: bb24, otherwise: bb25]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:295:5: 295:6
    }

    bb24: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:295:6: 295:6
    }

    bb25: {
        drop(_2) -> [return: bb24, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:295:5: 295:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:133:1: 133:37>::wait(_1: &once::Once<T, R>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:306:17: 306:22
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:306:27: 306:29
    let mut _2: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:306:5: 313:6
    let mut _3: core::option::Option<&T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:308:19: 308:30
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:309:17: 309:24
    scope 1 {
        debug x => _0;                   // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:309:22: 309:23
    }

    bb0: {
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:307:9: 312:10
    }

    bb1: {
        _3 = once::Once::<T, R>::poll(_1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:308:19: 308:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:308:24: 308:28
                                         // + literal: Const { ty: for<'a> fn(&'a once::Once<T, R>) -> Option<&'a T> {once::Once::<T, R>::poll}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:308:19: 308:30
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:308:13: 308:30
    }

    bb3: {
        _2 = <R as RelaxStrategy>::relax() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:310:25: 310:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:310:25: 310:33
                                         // + literal: Const { ty: fn() {<R as RelaxStrategy>::relax}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:308:19: 308:30
    }

    bb5: {
        _0 = ((_3 as Some).0: &T);       // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:309:22: 309:23
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:313:6: 313:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:133:1: 133:37>::poll(_1: &once::Once<T, R>) -> Option<&T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:325:17: 325:22
    let mut _0: core::option::Option<&T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:325:27: 325:37
    let mut _2: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:325:5: 337:6
    let mut _3: once::status::Status;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:330:19: 330:54
    let mut _4: &once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:330:19: 330:54
    let mut _5: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:330:36: 330:53
    let mut _6: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:331:17: 331:35
    let mut _7: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:333:49: 333:76
    let _8: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:333:58: 333:74
    let mut _9: !;                       // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    scope 1 {
    }

    bb0: {
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:326:9: 336:10
    }

    bb1: {
        _4 = &((*_1).1: once::status::AtomicStatus); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:330:19: 330:54
        _5 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:330:36: 330:53
        _3 = AtomicStatus::load(move _4, move _5) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:330:19: 330:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:330:31: 330:35
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicStatus, core::sync::atomic::Ordering) -> Status {AtomicStatus::load}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:330:19: 330:54
        switchInt(move _6) -> [0: bb5, 1: bb6, 2: bb7, 3: bb3, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:330:13: 330:54
    }

    bb3: {
        _9 = panic(const "Once previously poisoned by a panicked") -> unwind unreachable; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:334:44: 334:84
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:330:19: 330:54
    }

    bb5: {
        _0 = Option::<&T>::None;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:331:46: 331:50
        goto -> bb9;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:331:39: 331:50
    }

    bb6: {
        _2 = <R as RelaxStrategy>::relax() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:332:36: 332:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:332:36: 332:44
                                         // + literal: Const { ty: fn() {<R as RelaxStrategy>::relax}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = once::Once::<T, R>::force_get(_1) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:333:58: 333:74
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:333:63: 333:72
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a once::Once<T, R>) -> &'a T {once::Once::<T, R>::force_get}, val: Value(<ZST>) }
    }

    bb8: {
        _7 = _8;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:333:58: 333:74
        _0 = Option::<&T>::Some(move _7); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:333:44: 333:77
        goto -> bb9;                     // scope 0 at no-location
    }

    bb9: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:337:6: 337:6
    }
}

const once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::INIT: once::Once<T, R> = {
    let mut _0: once::Once<T, R>;        // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:343:21: 343:25
    let mut _1: core::marker::PhantomData<R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:344:18: 344:29
    let mut _2: once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:345:17: 345:54
    let mut _3: once::status::Status;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:345:35: 345:53
    let mut _4: core::cell::UnsafeCell<core::mem::MaybeUninit<T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:346:15: 346:53
    let mut _5: core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:346:31: 346:52

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:344:18: 344:29
        _1 = PhantomData::<R>;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:344:18: 344:29
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:345:17: 345:54
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:345:35: 345:53
        _3 = Status::Incomplete;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:345:35: 345:53
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:345:17: 345:54
        _2 = AtomicStatus::new(move _3) -> [return: bb1, unwind: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:345:17: 345:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:345:17: 345:34
                                         // + literal: Const { ty: fn(Status) -> AtomicStatus {AtomicStatus::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:345:53: 345:54
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:346:15: 346:53
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:346:31: 346:52
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:346:31: 346:52
        _5 = MaybeUninit::<T>::uninit() -> [return: bb2, unwind: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:346:31: 346:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:346:31: 346:50
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> MaybeUninit<T> {MaybeUninit::<T>::uninit}, val: Value(<ZST>) }
    }

    bb2: {
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:346:15: 346:53
        _4 = UnsafeCell::<MaybeUninit<T>>::new(move _5) -> [return: bb3, unwind: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:346:15: 346:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:346:15: 346:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(MaybeUninit<T>) -> UnsafeCell<MaybeUninit<T>> {UnsafeCell::<MaybeUninit<T>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:346:52: 346:53
        _0 = once::Once::<T, R> { phantom: move _1, status: move _2, data: move _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:343:28: 347:6
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:347:5: 347:6
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:347:5: 347:6
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:347:5: 347:6
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:343:5: 347:7
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:343:5: 347:7
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::new() -> once::Once<T, R> {
    let mut _0: once::Once<T, R>;        // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:350:27: 350:31

    bb0: {
        _0 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:351:9: 351:19
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:351:9: 351:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: once::Once<T, R>, val: Unevaluated(once::Once::<T, R>::INIT, [T, R], None) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:352:6: 352:6
    }
}

// MIR FOR CTFE
fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::new() -> once::Once<T, R> {
    let mut _0: once::Once<T, R>;        // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:350:27: 350:31

    bb0: {
        _0 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:351:9: 351:19
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:351:9: 351:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: once::Once<T, R>, val: Unevaluated(once::Once::<T, R>::INIT, [T, R], None) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:352:6: 352:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::initialized(_1: T) -> once::Once<T, R> {
    debug data => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:355:30: 355:34
    let mut _0: once::Once<T, R>;        // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:355:42: 355:46
    let mut _2: once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:21: 358:56
    let mut _3: once::status::Status;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:39: 358:55
    let mut _4: core::cell::UnsafeCell<core::mem::MaybeUninit<T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:19: 359:58
    let mut _5: core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:35: 359:57

    bb0: {
        _3 = Status::Complete;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:39: 358:55
        _2 = AtomicStatus::new(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:21: 358:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:21: 358:38
                                         // + literal: Const { ty: fn(Status) -> AtomicStatus {AtomicStatus::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = MaybeUninit::<T>::new(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:35: 359:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:35: 359:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(T) -> MaybeUninit<T> {MaybeUninit::<T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = UnsafeCell::<MaybeUninit<T>>::new(move _5) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:19: 359:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:19: 359:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(MaybeUninit<T>) -> UnsafeCell<MaybeUninit<T>> {UnsafeCell::<MaybeUninit<T>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = once::Once::<T, R> { phantom: const ZeroSized: PhantomData<R>, status: move _2, data: move _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:356:9: 360:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<R>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:361:6: 361:6
    }
}

// MIR FOR CTFE
fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::initialized(_1: T) -> once::Once<T, R> {
    debug data => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:355:30: 355:34
    let mut _0: once::Once<T, R>;        // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:355:42: 355:46
    let mut _2: core::marker::PhantomData<R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:357:22: 357:33
    let mut _3: once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:21: 358:56
    let mut _4: once::status::Status;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:39: 358:55
    let mut _5: core::cell::UnsafeCell<core::mem::MaybeUninit<T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:19: 359:58
    let mut _6: core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:35: 359:57
    let mut _7: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:52: 359:56
    let mut _8: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:361:5: 361:6

    bb0: {
        _8 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:357:22: 357:33
        _8 = const true;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:357:22: 357:33
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:357:22: 357:33
        _2 = PhantomData::<R>;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:357:22: 357:33
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:21: 358:56
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:39: 358:55
        _4 = Status::Complete;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:39: 358:55
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:21: 358:56
        _3 = AtomicStatus::new(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:21: 358:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:21: 358:38
                                         // + literal: Const { ty: fn(Status) -> AtomicStatus {AtomicStatus::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:358:55: 358:56
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:19: 359:58
        StorageLive(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:35: 359:57
        StorageLive(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:52: 359:56
        _8 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:52: 359:56
        _7 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:52: 359:56
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:35: 359:57
        _6 = MaybeUninit::<T>::new(move _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:35: 359:57
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:35: 359:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(T) -> MaybeUninit<T> {MaybeUninit::<T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_7);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:56: 359:57
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:19: 359:58
        _5 = UnsafeCell::<MaybeUninit<T>>::new(move _6) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:19: 359:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:19: 359:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(MaybeUninit<T>) -> UnsafeCell<MaybeUninit<T>> {UnsafeCell::<MaybeUninit<T>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_6);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:359:57: 359:58
        _0 = once::Once::<T, R> { phantom: move _2, status: move _3, data: move _5 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:356:9: 360:10
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:360:9: 360:10
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:360:9: 360:10
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:360:9: 360:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:361:6: 361:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::as_mut_ptr(_1: &once::Once<T, R>) -> *mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:368:23: 368:28
    let mut _0: *mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:368:33: 368:39
    let mut _2: *mut core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:371:9: 371:24
    let mut _3: &core::cell::UnsafeCell<core::mem::MaybeUninit<T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:371:9: 371:24

    bb0: {
        _3 = &((*_1).2: core::cell::UnsafeCell<core::mem::MaybeUninit<T>>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:371:9: 371:24
        _2 = UnsafeCell::<MaybeUninit<T>>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:371:9: 371:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:371:19: 371:22
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<MaybeUninit<T>>) -> *mut MaybeUninit<T> {UnsafeCell::<MaybeUninit<T>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = ptr::mut_ptr::<impl *mut MaybeUninit<T>>::cast::<T>(move _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:371:9: 371:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:371:25: 371:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(*mut MaybeUninit<T>) -> *mut T {ptr::mut_ptr::<impl *mut MaybeUninit<T>>::cast::<T>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:372:6: 372:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::force_get(_1: &once::Once<T, R>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:375:25: 375:30
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:375:35: 375:37
    let _2: *const T;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:379:11: 379:38
    let mut _3: &core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:379:11: 379:38
    let _4: *mut core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:379:13: 379:28
    let mut _5: &core::cell::UnsafeCell<core::mem::MaybeUninit<T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:379:13: 379:28

    bb0: {
        _5 = &((*_1).2: core::cell::UnsafeCell<core::mem::MaybeUninit<T>>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:379:13: 379:28
        _4 = UnsafeCell::<MaybeUninit<T>>::get(move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:379:13: 379:28
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:379:23: 379:26
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<MaybeUninit<T>>) -> *mut MaybeUninit<T> {UnsafeCell::<MaybeUninit<T>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &(*_4);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:379:11: 379:38
        _2 = MaybeUninit::<T>::as_ptr(move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:379:11: 379:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:379:30: 379:36
                                         // + literal: Const { ty: for<'a> fn(&'a MaybeUninit<T>) -> *const T {MaybeUninit::<T>::as_ptr}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = &(*_2);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:379:9: 379:38
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:380:6: 380:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::force_get_mut(_1: &mut once::Once<T, R>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:383:29: 383:38
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:383:43: 383:49
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:387:15: 387:46
    let mut _3: &mut core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:387:15: 387:46
    let mut _4: *mut core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:387:17: 387:32
    let mut _5: &core::cell::UnsafeCell<core::mem::MaybeUninit<T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:387:17: 387:32

    bb0: {
        _5 = &((*_1).2: core::cell::UnsafeCell<core::mem::MaybeUninit<T>>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:387:17: 387:32
        _4 = UnsafeCell::<MaybeUninit<T>>::get(move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:387:17: 387:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:387:27: 387:30
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<MaybeUninit<T>>) -> *mut MaybeUninit<T> {UnsafeCell::<MaybeUninit<T>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut (*_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:387:15: 387:46
        _2 = MaybeUninit::<T>::as_mut_ptr(move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:387:15: 387:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:387:34: 387:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut MaybeUninit<T>) -> *mut T {MaybeUninit::<T>::as_mut_ptr}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = &mut (*_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:387:9: 387:46
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:388:6: 388:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::force_into_inner(_1: once::Once<T, R>) -> T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:391:32: 391:36
    let mut _0: T;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:391:41: 391:42
    let mut _2: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:395:9: 395:36
    let mut _3: &core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:395:9: 395:36
    let _4: *mut core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:395:11: 395:26
    let mut _5: &core::cell::UnsafeCell<core::mem::MaybeUninit<T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:395:11: 395:26

    bb0: {
        _5 = &(_1.2: core::cell::UnsafeCell<core::mem::MaybeUninit<T>>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:395:11: 395:26
        _4 = UnsafeCell::<MaybeUninit<T>>::get(move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:395:11: 395:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:395:21: 395:24
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<MaybeUninit<T>>) -> *mut MaybeUninit<T> {UnsafeCell::<MaybeUninit<T>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &(*_4);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:395:9: 395:36
        _2 = MaybeUninit::<T>::as_ptr(move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:395:9: 395:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:395:28: 395:34
                                         // + literal: Const { ty: for<'a> fn(&'a MaybeUninit<T>) -> *const T {MaybeUninit::<T>::as_ptr}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = ptr::const_ptr::<impl *const T>::read(move _2) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:395:9: 395:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:395:37: 395:41
                                         // + literal: Const { ty: unsafe fn(*const T) -> T {ptr::const_ptr::<impl *const T>::read}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:396:5: 396:6
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:396:6: 396:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::get(_1: &once::Once<T, R>) -> Option<&T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:399:16: 399:21
    let mut _0: core::option::Option<&T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:399:26: 399:36
    let mut _2: once::status::Status;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:402:15: 402:50
    let mut _3: &once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:402:15: 402:50
    let mut _4: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:402:32: 402:49
    let mut _5: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:403:13: 403:29
    let mut _6: &T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:403:38: 403:65
    let _7: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:403:47: 403:63
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).1: once::status::AtomicStatus); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:402:15: 402:50
        _4 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:402:32: 402:49
        _2 = AtomicStatus::load(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:402:15: 402:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:402:27: 402:31
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicStatus, core::sync::atomic::Ordering) -> Status {AtomicStatus::load}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_2);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:402:15: 402:50
        switchInt(move _5) -> [2: bb3, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:402:9: 402:50
    }

    bb2: {
        _0 = Option::<&T>::None;         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:404:18: 404:22
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:404:18: 404:22
    }

    bb3: {
        _7 = once::Once::<T, R>::force_get(_1) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:403:47: 403:63
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:403:52: 403:61
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a once::Once<T, R>) -> &'a T {once::Once::<T, R>::force_get}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = _7;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:403:47: 403:63
        _0 = Option::<&T>::Some(move _6); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:403:33: 403:66
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:403:65: 403:66
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:406:6: 406:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::get_unchecked(_1: &once::Once<T, R>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:416:33: 416:38
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:416:43: 416:45
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    let mut _3: (&once::status::Status, &once::status::Status); // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:15: 51:32
    let mut _4: &once::status::Status;   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:16: 51:22
    let _5: once::status::Status;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:418:13: 418:47
    let mut _6: &once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:418:13: 418:47
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:418:30: 418:46
    let _8: &once::status::Status;       // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:14: 52:22
    let _9: &once::status::Status;       // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:24: 52:33
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:20: 53:46
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:21: 53:46
    let _13: !;                          // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:21: 58:146
    let mut _14: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:85: 58:145
    let mut _15: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:114: 58:144
    let mut _16: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:420:13: 420:173
    let _17: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:422:9: 422:25
    let mut _19: &once::status::Status;  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:14: 52:22
        debug right_val => _9;           // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:24: 52:33
        let _12: core::panicking::AssertKind; // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:54:25: 54:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:54:25: 54:29
            let mut _18: &[&str; 1];     // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:420:13: 420:173
        }
    }

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
        switchInt(move _2) -> [0: bb6, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    }

    bb1: {
        _6 = &((*_1).1: once::status::AtomicStatus); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:418:13: 418:47
        _7 = SeqCst;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:418:30: 418:46
        _5 = AtomicStatus::load(move _6, move _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:418:13: 418:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:418:25: 418:29
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicStatus, core::sync::atomic::Ordering) -> Status {AtomicStatus::load}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:16: 51:22
        _19 = const _;                   // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
                                         // + literal: Const { ty: &Status, val: Unevaluated(once::Once::<T, R>::get_unchecked, [T, R], Some(promoted[1])) }
        _3 = (move _4, _19);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:15: 51:32
        _8 = (_3.0: &once::status::Status); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:14: 52:22
        _9 = (_3.1: &once::status::Status); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:24: 52:33
        _11 = <Status as PartialEq>::eq(_8, _9) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:21: 53:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:21: 53:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Status, &'b Status) -> bool {<Status as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:20: 53:46
        switchInt(move _10) -> [0: bb6, otherwise: bb4]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:20: 53:46
    }

    bb4: {
        _12 = core::panicking::AssertKind::Eq; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:54:32: 54:65
        _18 = const _;                   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:420:13: 420:173
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:420:13: 420:173
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(once::Once::<T, R>::get_unchecked, [T, R], Some(promoted[0])) }
        _16 = _18 as &[&str] (Pointer(Unsize)); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:420:13: 420:173
        _15 = Arguments::<'_>::new_const(move _16) -> [return: bb5, unwind unreachable]; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:114: 58:144
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:114: 58:144
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = Option::<Arguments<'_>>::Some(move _15); // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:85: 58:145
        _13 = assert_failed::<Status, Status>(move _12, _8, _9, move _14) -> unwind unreachable; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:21: 58:146
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:21: 58:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a Status, &'b Status, Option<Arguments<'c>>) -> ! {assert_failed::<Status, Status>}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = once::Once::<T, R>::force_get(_1) -> [return: bb7, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:422:9: 422:25
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:422:14: 422:23
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a once::Once<T, R>) -> &'a T {once::Once::<T, R>::force_get}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = _17;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:422:9: 422:25
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:423:6: 423:6
    }
}

promoted[0] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::get_unchecked: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:420:13: 420:173
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:420:13: 420:173

    bb0: {
        _1 = [const "Attempted to access an uninitialized Once. If this was run without debug checks, this would be undefined behaviour. This is a serious bug and you must fix it."]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:420:13: 420:173
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:420:13: 420:173
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:420:13: 420:173
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:420:13: 420:173
    }
}

promoted[1] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::get_unchecked: &Status = {
    let mut _0: &once::status::Status;   // return place in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
    let mut _1: once::status::Status;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:419:13: 419:29

    bb0: {
        _1 = Status::Complete;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:419:13: 419:29
        _0 = &_1;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
        return;                          // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::get_mut(_1: &mut once::Once<T, R>) -> Option<&mut T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:429:20: 429:29
    let mut _0: core::option::Option<&mut T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:429:34: 429:48
    let mut _2: &mut once::status::Status; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:430:16: 430:37
    let mut _3: &mut once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:430:16: 430:37
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:431:13: 431:29
    let mut _5: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:431:47: 431:67
    let mut _6: &mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:431:47: 431:67
    scope 1 {
    }

    bb0: {
        _3 = &mut ((*_1).1: once::status::AtomicStatus); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:430:16: 430:37
        _2 = AtomicStatus::get_mut(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:430:16: 430:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:430:28: 430:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut AtomicStatus) -> &'a mut Status {AtomicStatus::get_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant((*_2));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:430:15: 430:37
        switchInt(move _4) -> [2: bb3, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:430:9: 430:37
    }

    bb2: {
        _0 = Option::<&mut T>::None;     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:432:18: 432:22
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:432:18: 432:22
    }

    bb3: {
        _6 = once::Once::<T, R>::force_get_mut(_1) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:431:47: 431:67
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:431:52: 431:65
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut once::Once<T, R>) -> &'a mut T {once::Once::<T, R>::force_get_mut}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = _6;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:431:47: 431:67
        _0 = Option::<&mut T>::Some(_5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:431:33: 431:70
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:431:69: 431:70
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:434:6: 434:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::get_mut_unchecked(_1: &mut once::Once<T, R>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:444:37: 444:46
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:444:51: 444:57
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    let mut _3: (&once::status::Status, &once::status::Status); // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:15: 51:32
    let mut _4: &once::status::Status;   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:16: 51:22
    let _5: once::status::Status;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:446:13: 446:47
    let mut _6: &once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:446:13: 446:47
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:446:30: 446:46
    let _8: &once::status::Status;       // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:14: 52:22
    let _9: &once::status::Status;       // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:24: 52:33
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:20: 53:46
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:21: 53:46
    let _13: !;                          // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:21: 58:146
    let mut _14: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:85: 58:145
    let mut _15: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:114: 58:144
    let mut _16: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:448:13: 448:176
    let mut _17: &mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:450:9: 450:29
    let mut _19: &once::status::Status;  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:14: 52:22
        debug right_val => _9;           // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:24: 52:33
        let _12: core::panicking::AssertKind; // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:54:25: 54:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:54:25: 54:29
            let mut _18: &[&str; 1];     // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:448:13: 448:176
        }
    }

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
        switchInt(move _2) -> [0: bb6, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    }

    bb1: {
        _6 = &((*_1).1: once::status::AtomicStatus); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:446:13: 446:47
        _7 = SeqCst;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:446:30: 446:46
        _5 = AtomicStatus::load(move _6, move _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:446:13: 446:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:446:25: 446:29
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicStatus, core::sync::atomic::Ordering) -> Status {AtomicStatus::load}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:16: 51:22
        _19 = const _;                   // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
                                         // + literal: Const { ty: &Status, val: Unevaluated(once::Once::<T, R>::get_mut_unchecked, [T, R], Some(promoted[1])) }
        _3 = (move _4, _19);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:15: 51:32
        _8 = (_3.0: &once::status::Status); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:14: 52:22
        _9 = (_3.1: &once::status::Status); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:24: 52:33
        _11 = <Status as PartialEq>::eq(_8, _9) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:21: 53:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:21: 53:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Status, &'b Status) -> bool {<Status as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:20: 53:46
        switchInt(move _10) -> [0: bb6, otherwise: bb4]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:20: 53:46
    }

    bb4: {
        _12 = core::panicking::AssertKind::Eq; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:54:32: 54:65
        _18 = const _;                   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:448:13: 448:176
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:448:13: 448:176
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(once::Once::<T, R>::get_mut_unchecked, [T, R], Some(promoted[0])) }
        _16 = _18 as &[&str] (Pointer(Unsize)); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:448:13: 448:176
        _15 = Arguments::<'_>::new_const(move _16) -> [return: bb5, unwind unreachable]; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:114: 58:144
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:114: 58:144
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = Option::<Arguments<'_>>::Some(move _15); // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:85: 58:145
        _13 = assert_failed::<Status, Status>(move _12, _8, _9, move _14) -> unwind unreachable; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:21: 58:146
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:21: 58:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a Status, &'b Status, Option<Arguments<'c>>) -> ! {assert_failed::<Status, Status>}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = once::Once::<T, R>::force_get_mut(_1) -> [return: bb7, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:450:9: 450:29
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:450:14: 450:27
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut once::Once<T, R>) -> &'a mut T {once::Once::<T, R>::force_get_mut}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = _17;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:450:9: 450:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:451:6: 451:6
    }
}

promoted[0] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::get_mut_unchecked: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:448:13: 448:176
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:448:13: 448:176

    bb0: {
        _1 = [const "Attempted to access an unintialized Once.  If this was to run without debug checks, this would be undefined behavior.  This is a serious bug and you must fix it."]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:448:13: 448:176
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:448:13: 448:176
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:448:13: 448:176
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:448:13: 448:176
    }
}

promoted[1] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::get_mut_unchecked: &Status = {
    let mut _0: &once::status::Status;   // return place in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
    let mut _1: once::status::Status;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:447:13: 447:29

    bb0: {
        _1 = Status::Complete;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:447:13: 447:29
        _0 = &_1;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
        return;                          // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::try_into_inner(_1: once::Once<T, R>) -> Option<T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:457:27: 457:35
    let mut _0: core::option::Option<T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:457:40: 457:49
    let mut _2: &mut once::status::Status; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:458:16: 458:37
    let mut _3: &mut once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:458:16: 458:37
    let mut _4: u8;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:459:13: 459:29
    let mut _5: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:459:38: 459:72
    let mut _6: once::Once<T, R>;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:459:47: 459:51
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:462:5: 462:6
    scope 1 {
    }

    bb0: {
        _7 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:458:16: 458:37
        _7 = const true;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:458:16: 458:37
        _3 = &mut (_1.1: once::status::AtomicStatus); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:458:16: 458:37
        _2 = AtomicStatus::get_mut(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:458:16: 458:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:458:28: 458:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut AtomicStatus) -> &'a mut Status {AtomicStatus::get_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant((*_2));        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:458:15: 458:37
        switchInt(move _4) -> [2: bb3, otherwise: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:458:9: 458:37
    }

    bb2: {
        _0 = Option::<T>::None;          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:460:18: 460:22
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:460:18: 460:22
    }

    bb3: {
        _7 = const false;                // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:459:47: 459:51
        _6 = move _1;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:459:47: 459:51
        _5 = once::Once::<T, R>::force_into_inner(move _6) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:459:47: 459:70
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:459:52: 459:68
                                         // + literal: Const { ty: unsafe fn(once::Once<T, R>) -> T {once::Once::<T, R>::force_into_inner}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = Option::<T>::Some(move _5); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:459:33: 459:73
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:459:72: 459:73
    }

    bb5: {
        switchInt(_7) -> [0: bb6, otherwise: bb7]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:462:5: 462:6
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:462:6: 462:6
    }

    bb7: {
        drop(_1) -> [return: bb6, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:462:5: 462:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::into_inner_unchecked(_1: once::Once<T, R>) -> T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:471:40: 471:44
    let mut _0: T;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:471:49: 471:50
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    let mut _3: (&once::status::Status, &once::status::Status); // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:15: 51:32
    let mut _4: &once::status::Status;   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:16: 51:22
    let _5: once::status::Status;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:473:13: 473:47
    let mut _6: &once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:473:13: 473:47
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:473:30: 473:46
    let _8: &once::status::Status;       // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:14: 52:22
    let _9: &once::status::Status;       // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:24: 52:33
    let mut _10: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:20: 53:46
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:21: 53:46
    let _13: !;                          // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:21: 58:146
    let mut _14: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:85: 58:145
    let mut _15: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:114: 58:144
    let mut _16: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:475:13: 475:176
    let mut _17: once::Once<T, R>;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:477:9: 477:13
    let mut _19: &once::status::Status;  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:14: 52:22
        debug right_val => _9;           // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:24: 52:33
        let _12: core::panicking::AssertKind; // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:54:25: 54:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:54:25: 54:29
            let mut _18: &[&str; 1];     // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:475:13: 475:176
        }
    }

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
        switchInt(move _2) -> [0: bb6, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    }

    bb1: {
        _6 = &(_1.1: once::status::AtomicStatus); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:473:13: 473:47
        _7 = SeqCst;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:473:30: 473:46
        _5 = AtomicStatus::load(move _6, move _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:473:13: 473:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:473:25: 473:29
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicStatus, core::sync::atomic::Ordering) -> Status {AtomicStatus::load}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:16: 51:22
        _19 = const _;                   // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
                                         // + literal: Const { ty: &Status, val: Unevaluated(once::Once::<T, R>::into_inner_unchecked, [T, R], Some(promoted[1])) }
        _3 = (move _4, _19);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:15: 51:32
        _8 = (_3.0: &once::status::Status); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:14: 52:22
        _9 = (_3.1: &once::status::Status); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:24: 52:33
        _11 = <Status as PartialEq>::eq(_8, _9) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:21: 53:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:21: 53:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Status, &'b Status) -> bool {<Status as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = Not(move _11);             // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:20: 53:46
        switchInt(move _10) -> [0: bb6, otherwise: bb4]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:20: 53:46
    }

    bb4: {
        _12 = core::panicking::AssertKind::Eq; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:54:32: 54:65
        _18 = const _;                   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:475:13: 475:176
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:475:13: 475:176
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(once::Once::<T, R>::into_inner_unchecked, [T, R], Some(promoted[0])) }
        _16 = _18 as &[&str] (Pointer(Unsize)); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:475:13: 475:176
        _15 = Arguments::<'_>::new_const(move _16) -> [return: bb5, unwind unreachable]; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:114: 58:144
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:114: 58:144
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = Option::<Arguments<'_>>::Some(move _15); // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:85: 58:145
        _13 = assert_failed::<Status, Status>(move _12, _8, _9, move _14) -> unwind unreachable; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:21: 58:146
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:21: 58:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a Status, &'b Status, Option<Arguments<'c>>) -> ! {assert_failed::<Status, Status>}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = move _1;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:477:9: 477:13
        _0 = once::Once::<T, R>::force_into_inner(move _17) -> [return: bb7, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:477:9: 477:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:477:14: 477:30
                                         // + literal: Const { ty: unsafe fn(once::Once<T, R>) -> T {once::Once::<T, R>::force_into_inner}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:478:6: 478:6
    }
}

promoted[0] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::into_inner_unchecked: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:475:13: 475:176
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:475:13: 475:176

    bb0: {
        _1 = [const "Attempted to access an unintialized Once.  If this was to run without debug checks, this would be undefined behavior.  This is a serious bug and you must fix it."]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:475:13: 475:176
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:475:13: 475:176
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:475:13: 475:176
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:475:13: 475:176
    }
}

promoted[1] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::into_inner_unchecked: &Status = {
    let mut _0: &once::status::Status;   // return place in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
    let mut _1: once::status::Status;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:474:13: 474:29

    bb0: {
        _1 = Status::Complete;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:474:13: 474:29
        _0 = &_1;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
        return;                          // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::is_completed(_1: &once::Once<T, R>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:485:25: 485:30
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:485:35: 485:39
    let mut _2: &once::status::Status;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:9: 487:44
    let _3: once::status::Status;        // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:9: 487:44
    let mut _4: &once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:9: 487:44
    let mut _5: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:26: 487:43
    let mut _6: &once::status::Status;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:48: 487:64

    bb0: {
        _4 = &((*_1).1: once::status::AtomicStatus); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:9: 487:44
        _5 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:26: 487:43
        _3 = AtomicStatus::load(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:9: 487:44
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:21: 487:25
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicStatus, core::sync::atomic::Ordering) -> Status {AtomicStatus::load}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:9: 487:44
        _6 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:48: 487:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:48: 487:64
                                         // + literal: Const { ty: &Status, val: Unevaluated(once::Once::<T, R>::is_completed, [T, R], Some(promoted[0])) }
        _0 = <Status as PartialEq>::eq(move _2, _6) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:9: 487:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:9: 487:64
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Status, &'b Status) -> bool {<Status as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:488:6: 488:6
    }
}

promoted[0] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:340:1: 340:22>::is_completed: &Status = {
    let mut _0: &once::status::Status;   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:48: 487:64
    let mut _1: once::status::Status;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:48: 487:64

    bb0: {
        _1 = Status::Complete;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:48: 487:64
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:48: 487:64
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:487:48: 487:64
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:491:1: 491:34>::from(_1: T) -> once::Once<T, R> {
    debug data => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:492:13: 492:17
    let mut _0: once::Once<T, R>;        // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:492:25: 492:29

    bb0: {
        _0 = once::Once::<T, R>::initialized(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:493:9: 493:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:493:9: 493:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> once::Once<T, R> {once::Once::<T, R>::initialized}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:494:6: 494:6
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:497:1: 497:31>::drop(_1: &mut once::Once<T, R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:498:13: 498:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:498:24: 498:24
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:12: 500:54
    let mut _3: &once::status::Status;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:12: 500:34
    let _4: &mut once::status::Status;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:13: 500:34
    let mut _5: &mut once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:13: 500:34
    let _6: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:503:17: 503:74
    let mut _7: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:503:42: 503:73
    let mut _8: &mut core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:503:42: 503:73
    let mut _9: *mut core::mem::MaybeUninit<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:503:44: 503:59
    let mut _10: &core::cell::UnsafeCell<core::mem::MaybeUninit<T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:503:44: 503:59
    let mut _11: &once::status::Status;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:38: 500:54
    scope 1 {
    }

    bb0: {
        _5 = &mut ((*_1).1: once::status::AtomicStatus); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:13: 500:34
        _4 = AtomicStatus::get_mut(move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:13: 500:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:25: 500:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut AtomicStatus) -> &'a mut Status {AtomicStatus::get_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &(*_4);                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:12: 500:34
        _11 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:38: 500:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:38: 500:54
                                         // + literal: Const { ty: &Status, val: Unevaluated(<once::Once<T, R> as Drop>::drop, [T, R], Some(promoted[0])) }
        _2 = <Status as PartialEq>::eq(move _3, _11) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:12: 500:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:12: 500:54
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Status, &'b Status) -> bool {<Status as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _2) -> [0: bb6, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:12: 500:54
    }

    bb3: {
        _10 = &((*_1).2: core::cell::UnsafeCell<core::mem::MaybeUninit<T>>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:503:44: 503:59
        _9 = UnsafeCell::<MaybeUninit<T>>::get(move _10) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:503:44: 503:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:503:54: 503:57
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<MaybeUninit<T>>) -> *mut MaybeUninit<T> {UnsafeCell::<MaybeUninit<T>>::get}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = &mut (*_9);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:503:42: 503:73
        _7 = MaybeUninit::<T>::as_mut_ptr(move _8) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:503:42: 503:73
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:503:61: 503:71
                                         // + literal: Const { ty: for<'a> fn(&'a mut MaybeUninit<T>) -> *mut T {MaybeUninit::<T>::as_mut_ptr}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = core::ptr::drop_in_place::<T>(move _7) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:503:17: 503:74
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:503:17: 503:41
                                         // + literal: Const { ty: unsafe fn(*mut T) {core::ptr::drop_in_place::<T>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:506:6: 506:6
    }
}

promoted[0] in once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:497:1: 497:31>::drop: &Status = {
    let mut _0: &once::status::Status;   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:38: 500:54
    let mut _1: once::status::Status;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:38: 500:54

    bb0: {
        _1 = Status::Complete;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:38: 500:54
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:38: 500:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:500:38: 500:54
    }
}

fn once::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:513:1: 513:29>::drop(_1: &mut Finish<'_>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:514:13: 514:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:514:24: 514:24
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:521:9: 521:62
    let mut _3: once::status::Status;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:521:27: 521:43
    let mut _4: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:521:45: 521:61
    let mut _5: &once::status::AtomicStatus; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:514:13: 514:22

    bb0: {
        _5 = deref_copy ((*_1).0: &once::status::AtomicStatus); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:521:9: 521:62
        _3 = Status::Panicked;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:521:27: 521:43
        _4 = SeqCst;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:521:45: 521:61
        _2 = AtomicStatus::store(_5, move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:521:9: 521:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:521:21: 521:26
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicStatus, Status, core::sync::atomic::Ordering) {AtomicStatus::store}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:522:6: 522:6
    }
}

fn relax::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/relax.rs:23:1: 23:28>::relax() -> () {
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/relax.rs:25:16: 25:16
    let _1: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/relax.rs:29:9: 29:45
    scope 1 {
    }

    bb0: {
        _1 = spin_loop_hint() -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/relax.rs:29:9: 29:45
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/relax.rs:29:9: 29:43
                                         // + literal: Const { ty: fn() {spin_loop_hint}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/relax.rs:30:6: 30:6
    }
}

fn relax::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/relax.rs:58:1: 58:28>::relax() -> () {
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/relax.rs:60:16: 60:16

    bb0: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/relax.rs:60:18: 60:18
    }
}

const READER: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:75:15: 75:20
    let mut _1: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:75:23: 75:29
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:75:23: 75:29

    bb0: {
        _1 = const 2_i32 as u32 (IntToInt); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:75:23: 75:29
        _2 = Lt(move _1, const 64_u32);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:75:23: 75:29
        assert(move _2, "attempt to shift left by `{}`, which would overflow", const 2_i32) -> [success: bb1, unwind: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:75:23: 75:29
    }

    bb1: {
        _0 = Shl(const 1_usize, const 2_i32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:75:23: 75:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:75:1: 75:30
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:75:1: 75:30
    }
}

const UPGRADED: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:76:17: 76:22
    let mut _1: u32;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:76:25: 76:31
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:76:25: 76:31

    bb0: {
        _1 = const 1_i32 as u32 (IntToInt); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:76:25: 76:31
        _2 = Lt(move _1, const 64_u32);  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:76:25: 76:31
        assert(move _2, "attempt to shift left by `{}`, which would overflow", const 1_i32) -> [success: bb1, unwind: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:76:25: 76:31
    }

    bb1: {
        _0 = Shl(const 1_usize, const 1_i32); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:76:25: 76:31
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:76:1: 76:32
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:76:1: 76:32
    }
}

const WRITER: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:77:15: 77:20

    bb0: {
        _0 = const 1_usize;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:77:23: 77:24
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:77:1: 77:25
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:123:1: 123:24>::new(_1: T) -> rwlock::RwLock<T, R> {
    debug data => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:140:22: 140:26
    let mut _0: rwlock::RwLock<T, R>;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:140:34: 140:38
    let mut _2: core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:143:19: 143:38
    let mut _3: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:144:19: 144:40

    bb0: {
        _2 = AtomicUsize::new(const 0_usize) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:143:19: 143:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:143:19: 143:35
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = UnsafeCell::<T>::new(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:144:19: 144:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:144:19: 144:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = rwlock::RwLock::<T, R> { phantom: const ZeroSized: PhantomData<R>, lock: move _2, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:141:9: 145:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<R>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:146:6: 146:6
    }
}

// MIR FOR CTFE
fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:123:1: 123:24>::new(_1: T) -> rwlock::RwLock<T, R> {
    debug data => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:140:22: 140:26
    let mut _0: rwlock::RwLock<T, R>;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:140:34: 140:38
    let mut _2: core::marker::PhantomData<R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:142:22: 142:33
    let mut _3: core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:143:19: 143:38
    let mut _4: core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:144:19: 144:40
    let mut _5: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:144:35: 144:39
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:146:5: 146:6

    bb0: {
        _6 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:142:22: 142:33
        _6 = const true;                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:142:22: 142:33
        StorageLive(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:142:22: 142:33
        _2 = PhantomData::<R>;           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:142:22: 142:33
        StorageLive(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:143:19: 143:38
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:143:19: 143:38
        _3 = AtomicUsize::new(const 0_usize) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:143:19: 143:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:143:19: 143:35
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:144:19: 144:40
        StorageLive(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:144:35: 144:39
        _6 = const false;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:144:35: 144:39
        _5 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:144:35: 144:39
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:144:19: 144:40
        _4 = UnsafeCell::<T>::new(move _5) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:144:19: 144:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:144:19: 144:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> UnsafeCell<T> {UnsafeCell::<T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_5);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:144:39: 144:40
        _0 = rwlock::RwLock::<T, R> { phantom: move _2, lock: move _3, data: move _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:141:9: 145:10
        StorageDead(_4);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:145:9: 145:10
        StorageDead(_3);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:145:9: 145:10
        StorageDead(_2);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:145:9: 145:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:146:6: 146:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:123:1: 123:24>::into_inner(_1: rwlock::RwLock<T, R>) -> T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:150:23: 150:27
    let mut _0: T;                       // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:150:32: 150:33
    let _2: core::cell::UnsafeCell<T>;   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:153:22: 153:26
    scope 1 {
        debug data => _2;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:153:22: 153:26
    }

    bb0: {
        _2 = move (_1.2: core::cell::UnsafeCell<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:153:22: 153:26
        _0 = UnsafeCell::<T>::into_inner(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:154:9: 154:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:154:14: 154:24
                                         // + literal: Const { ty: fn(UnsafeCell<T>) -> T {UnsafeCell::<T>::into_inner}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:155:6: 155:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:123:1: 123:24>::as_mut_ptr(_1: &rwlock::RwLock<T, R>) -> *mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:181:23: 181:28
    let mut _0: *mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:181:33: 181:39
    let mut _2: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:182:9: 182:24

    bb0: {
        _2 = &((*_1).2: core::cell::UnsafeCell<T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:182:9: 182:24
        _0 = UnsafeCell::<T>::get(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:182:9: 182:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:182:19: 182:22
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:183:6: 183:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:186:1: 186:47>::read(_1: &rwlock::RwLock<T, R>) -> rwlock::RwLockReadGuard<'_, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:209:17: 209:22
    let mut _0: rwlock::RwLockReadGuard<'_, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:209:27: 209:45
    let mut _2: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:209:5: 216:6
    let mut _3: core::option::Option<rwlock::RwLockReadGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:211:19: 211:34
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:212:17: 212:28
    scope 1 {
        debug guard => _0;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:212:22: 212:27
    }

    bb0: {
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:210:9: 215:10
    }

    bb1: {
        _3 = rwlock::RwLock::<T, R>::try_read(_1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:211:19: 211:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:211:24: 211:32
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<T, R>) -> Option<rwlock::RwLockReadGuard<'a, T>> {rwlock::RwLock::<T, R>::try_read}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:211:19: 211:34
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:211:13: 211:34
    }

    bb3: {
        _2 = <R as RelaxStrategy>::relax() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:213:25: 213:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:213:25: 213:33
                                         // + literal: Const { ty: fn() {<R as RelaxStrategy>::relax}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:211:19: 211:34
    }

    bb5: {
        _0 = move ((_3 as Some).0: rwlock::RwLockReadGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:212:22: 212:27
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:216:6: 216:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:186:1: 186:47>::write(_1: &rwlock::RwLock<T, R>) -> rwlock::RwLockWriteGuard<'_, T, R> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:237:18: 237:23
    let mut _0: rwlock::RwLockWriteGuard<'_, T, R>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:237:28: 237:50
    let mut _2: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:237:5: 244:6
    let mut _3: core::option::Option<rwlock::RwLockWriteGuard<'_, T, R>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:239:19: 239:49
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:240:17: 240:28
    scope 1 {
        debug guard => _0;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:240:22: 240:27
    }

    bb0: {
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:238:9: 243:10
    }

    bb1: {
        _3 = rwlock::RwLock::<T, R>::try_write_internal(_1, const false) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:239:19: 239:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:239:24: 239:42
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<T, R>, bool) -> Option<rwlock::RwLockWriteGuard<'a, T, R>> {rwlock::RwLock::<T, R>::try_write_internal}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:239:19: 239:49
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:239:13: 239:49
    }

    bb3: {
        _2 = <R as RelaxStrategy>::relax() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:241:25: 241:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:241:25: 241:33
                                         // + literal: Const { ty: fn() {<R as RelaxStrategy>::relax}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:239:19: 239:49
    }

    bb5: {
        _0 = move ((_3 as Some).0: rwlock::RwLockWriteGuard<'_, T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:240:22: 240:27
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:244:6: 244:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:186:1: 186:47>::upgradeable_read(_1: &rwlock::RwLock<T, R>) -> rwlock::RwLockUpgradableGuard<'_, T, R> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:249:29: 249:34
    let mut _0: rwlock::RwLockUpgradableGuard<'_, T, R>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:249:39: 249:66
    let mut _2: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:249:5: 256:6
    let mut _3: core::option::Option<rwlock::RwLockUpgradableGuard<'_, T, R>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:251:19: 251:46
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:252:17: 252:28
    scope 1 {
        debug guard => _0;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:252:22: 252:27
    }

    bb0: {
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:250:9: 255:10
    }

    bb1: {
        _3 = rwlock::RwLock::<T, R>::try_upgradeable_read(_1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:251:19: 251:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:251:24: 251:44
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<T, R>) -> Option<rwlock::RwLockUpgradableGuard<'a, T, R>> {rwlock::RwLock::<T, R>::try_upgradeable_read}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:251:19: 251:46
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:251:13: 251:46
    }

    bb3: {
        _2 = <R as RelaxStrategy>::relax() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:253:25: 253:35
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:253:25: 253:33
                                         // + literal: Const { ty: fn() {<R as RelaxStrategy>::relax}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:251:19: 251:46
    }

    bb5: {
        _0 = move ((_3 as Some).0: rwlock::RwLockUpgradableGuard<'_, T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:252:22: 252:27
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:256:6: 256:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:259:1: 259:32>::acquire_reader(_1: &rwlock::RwLock<T, R>) -> usize {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:261:23: 261:28
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:261:33: 261:38
    let _2: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:265:13: 265:18
    let mut _3: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:265:21: 265:67
    let mut _4: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:265:49: 265:66
    let mut _5: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:267:12: 267:40
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:267:12: 267:17
    let mut _7: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:267:20: 267:40
    let mut _8: (usize, bool);           // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:267:20: 267:40
    let _9: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:268:13: 268:59
    let mut _10: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:268:13: 268:59
    let mut _11: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:268:41: 268:58
    let _12: !;                          // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
    scope 1 {
        debug value => _2;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:265:13: 265:18
    }

    bb0: {
        _3 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:265:21: 265:67
        _4 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:265:49: 265:66
        _2 = AtomicUsize::fetch_add(move _3, const _, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:265:21: 265:67
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:265:31: 265:40
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:267:12: 267:17
        _8 = CheckedMul(const _, const _); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:267:20: 267:40
        assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const _) -> [success: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:267:20: 267:40
    }

    bb2: {
        _7 = move (_8.0: usize);         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:267:20: 267:40
        _5 = Gt(move _6, move _7);       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:267:12: 267:40
        switchInt(move _5) -> [0: bb5, otherwise: bb3]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:267:12: 267:40
    }

    bb3: {
        _10 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:268:13: 268:59
        _11 = Relaxed;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:268:41: 268:58
        _9 = AtomicUsize::fetch_sub(move _10, const _, move _11) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:268:13: 268:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:268:23: 268:32
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_sub}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = panic(const "Too many lock readers, cannot safely proceed") -> unwind unreachable; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:269:20: 269:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _0 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:271:13: 271:18
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:273:6: 273:6
    }
}

const MAX_READERS: usize = {
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:28: 263:33
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:36: 263:61
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:36: 263:61
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:36: 263:65

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:36: 263:61
        _2 = Eq(const _, const 0_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:36: 263:61
        assert(!move _2, "attempt to divide `{}` by zero", const _) -> [success: bb1, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:36: 263:61
    }

    bb1: {
        _1 = Div(const _, const _);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:36: 263:61
        _3 = Eq(const 2_usize, const 0_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:36: 263:65
        assert(!move _3, "attempt to divide `{}` by zero", _1) -> [success: bb2, unwind: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:36: 263:65
    }

    bb2: {
        _0 = Div(move _1, const 2_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:36: 263:65
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:64: 263:65
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:9: 263:66
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:263:9: 263:66
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:259:1: 259:32>::try_read(_1: &rwlock::RwLock<T, R>) -> Option<rwlock::RwLockReadGuard<'_, T>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:298:21: 298:26
    let mut _0: core::option::Option<rwlock::RwLockReadGuard<'_, T>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:298:31: 298:57
    let _2: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:299:13: 299:18
    let mut _3: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:303:12: 303:39
    let mut _4: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:303:12: 303:17
    let mut _5: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:303:20: 303:39
    let _6: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:305:13: 305:59
    let mut _7: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:305:13: 305:59
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:305:41: 305:58
    let mut _9: rwlock::RwLockReadGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:308:18: 311:14
    let _10: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:309:23: 309:33
    let mut _11: *const T;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:310:23: 310:51
    let _12: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:310:32: 310:49
    let _13: *mut T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:310:34: 310:49
    let mut _14: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:310:34: 310:49
    scope 1 {
        debug value => _2;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:299:13: 299:18
        scope 2 {
        }
    }

    bb0: {
        _2 = rwlock::RwLock::<T, R>::acquire_reader(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:299:21: 299:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:299:26: 299:40
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<T, R>) -> usize {rwlock::RwLock::<T, R>::acquire_reader}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:303:12: 303:17
        _5 = BitOr(const _, const _);    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:303:20: 303:39
        _3 = BitAnd(move _4, move _5);   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:303:12: 303:39
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:303:12: 303:44
    }

    bb2: {
        _7 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:305:13: 305:59
        _8 = Release;                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:305:41: 305:58
        _6 = AtomicUsize::fetch_sub(move _7, const _, move _8) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:305:13: 305:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:305:23: 305:32
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_sub}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<rwlock::RwLockReadGuard<'_, T>>::None; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:306:13: 306:17
        goto -> bb6;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:303:9: 312:10
    }

    bb4: {
        _10 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:309:23: 309:33
        _14 = &((*_1).2: core::cell::UnsafeCell<T>); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:310:34: 310:49
        _13 = UnsafeCell::<T>::get(move _14) -> [return: bb5, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:310:34: 310:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:310:44: 310:47
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = &(*_13);                   // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:310:32: 310:49
        _11 = &raw const (*_12);         // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:310:32: 310:49
        _9 = rwlock::RwLockReadGuard::<'_, T> { lock: _10, data: move _11 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:308:18: 311:14
        _0 = Option::<rwlock::RwLockReadGuard<'_, T>>::Some(move _9); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:308:13: 311:15
        goto -> bb6;                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:303:9: 312:10
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:313:6: 313:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:259:1: 259:32>::reader_count(_1: &rwlock::RwLock<T, R>) -> usize {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:321:25: 321:30
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:321:35: 321:40
    let _2: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:322:13: 322:18
    let mut _3: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:322:21: 322:54
    let mut _4: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:322:36: 322:53
    let mut _5: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:9: 323:23
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:9: 323:14
    let mut _7: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:9: 323:23
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:26: 323:55
    let mut _9: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:26: 323:44
    let mut _10: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:27: 323:32
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:26: 323:55
    let mut _12: (usize, bool);          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:9: 323:55
    scope 1 {
        debug state => _2;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:322:13: 322:18
    }

    bb0: {
        _3 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:322:21: 322:54
        _4 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:322:36: 322:53
        _2 = AtomicUsize::load(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:322:21: 322:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:322:31: 322:35
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _2;                         // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:9: 323:14
        _7 = Eq(const _, const 0_usize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:9: 323:23
        assert(!move _7, "attempt to divide `{}` by zero", _6) -> [success: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:9: 323:23
    }

    bb2: {
        _5 = Div(move _6, const _);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:9: 323:23
        _10 = _2;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:27: 323:32
        _9 = BitAnd(move _10, const _);  // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:26: 323:44
        _11 = Eq(const _, const 0_usize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:26: 323:55
        assert(!move _11, "attempt to divide `{}` by zero", _9) -> [success: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:26: 323:55
    }

    bb3: {
        _8 = Div(move _9, const _);      // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:26: 323:55
        _12 = CheckedAdd(_5, _8);        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:9: 323:55
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _8) -> [success: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:9: 323:55
    }

    bb4: {
        _0 = move (_12.0: usize);        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:323:9: 323:55
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:324:6: 324:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:259:1: 259:32>::writer_count(_1: &rwlock::RwLock<T, R>) -> usize {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:334:25: 334:30
    let mut _0: usize;                   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:334:35: 334:40
    let mut _2: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:335:9: 335:53
    let mut _3: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:335:10: 335:43
    let mut _4: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:335:10: 335:43
    let mut _5: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:335:25: 335:42
    let mut _6: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:335:9: 335:62

    bb0: {
        _4 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:335:10: 335:43
        _5 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:335:25: 335:42
        _3 = AtomicUsize::load(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:335:10: 335:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:335:20: 335:24
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = BitAnd(move _3, const _);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:335:9: 335:53
        _6 = Eq(const _, const 0_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:335:9: 335:62
        assert(!move _6, "attempt to divide `{}` by zero", _2) -> [success: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:335:9: 335:62
    }

    bb2: {
        _0 = Div(move _2, const _);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:335:9: 335:62
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:336:6: 336:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:259:1: 259:32>::force_read_decrement(_1: &rwlock::RwLock<T, R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:347:40: 347:45
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:347:47: 347:47
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:218:12: 218:42
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:348:23: 348:70
    let mut _5: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:348:23: 348:66
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:348:23: 348:56
    let mut _7: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:348:23: 348:56
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:348:38: 348:55
    let mut _9: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:348:59: 348:66
    let mut _10: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
    let _11: usize;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:349:9: 349:55
    let mut _12: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:349:9: 349:55
    let mut _13: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:349:37: 349:54

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:218:12: 218:42
        switchInt(move _2) -> [0: bb4, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:218:12: 218:42
    }

    bb1: {
        _7 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:348:23: 348:56
        _8 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:348:38: 348:55
        _6 = AtomicUsize::load(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:348:23: 348:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:348:33: 348:37
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = Not(const _);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:348:59: 348:66
        _5 = BitAnd(move _6, move _9);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:348:23: 348:66
        _4 = Gt(move _5, const 0_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:348:23: 348:70
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
    }

    bb3: {
        _10 = panic(const "assertion failed: self.lock.load(Ordering::Relaxed) & !WRITER > 0") -> unwind unreachable; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _12 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:349:9: 349:55
        _13 = Release;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:349:37: 349:54
        _11 = AtomicUsize::fetch_sub(move _12, const _, move _13) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:349:9: 349:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:349:19: 349:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_sub}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:350:6: 350:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:259:1: 259:32>::force_write_unlock(_1: &rwlock::RwLock<T, R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:361:38: 361:43
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:361:45: 361:45
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    let mut _3: (&usize, &usize);        // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:26: 362:82
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:26: 362:59
    let mut _7: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:26: 362:59
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:41: 362:58
    let mut _9: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:62: 362:82
    let mut _10: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:63: 362:82
    let _11: &usize;                     // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
    let _12: &usize;                     // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
    let _20: usize;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:363:9: 363:69
    let mut _21: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:363:9: 363:69
    let mut _22: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:363:29: 363:49
    let mut _23: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:363:30: 363:49
    let mut _24: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:363:51: 363:68
    let mut _25: &usize;                 // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _11;           // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _12;          // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        let _17: core::panicking::AssertKind; // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _17;           // in scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
        switchInt(move _2) -> [0: bb4, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    }

    bb1: {
        _7 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:26: 362:59
        _8 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:41: 362:58
        _6 = AtomicUsize::load(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:26: 362:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:36: 362:40
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = BitOr(const _, const _);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:63: 362:82
        _9 = Not(move _10);              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:62: 362:82
        _5 = BitAnd(move _6, move _9);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:26: 362:82
        _4 = &_5;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = const _;                   // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(rwlock::RwLock::<T, R>::force_write_unlock, [T, R], Some(promoted[0])) }
        _3 = (move _4, _25);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_3.0: &usize);            // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_3.1: &usize);            // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = (*_11);                    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = (*_12);                    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb4, otherwise: bb3]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = assert_failed::<usize, usize>(move _17, _11, _12, move _19) -> unwind unreachable; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:363:9: 363:69
        _23 = BitOr(const _, const _);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:363:30: 363:49
        _22 = Not(move _23);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:363:29: 363:49
        _24 = Release;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:363:51: 363:68
        _20 = AtomicUsize::fetch_and(move _21, move _22, move _24) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:363:9: 363:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:363:19: 363:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_and}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:364:6: 364:6
    }
}

promoted[0] in rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:259:1: 259:32>::force_write_unlock: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:84: 362:85

    bb0: {
        _1 = const 0_usize;              // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:362:84: 362:85
        _0 = &_1;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:259:1: 259:32>::try_write_internal(_1: &rwlock::RwLock<T, R>, _2: bool) -> Option<rwlock::RwLockWriteGuard<'_, T, R>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:367:27: 367:32
    debug strong => _2;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:367:34: 367:40
    let mut _0: core::option::Option<rwlock::RwLockWriteGuard<'_, T, R>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:367:51: 367:81
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:368:12: 376:17
    let mut _4: &core::result::Result<usize, usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:368:12: 376:17
    let _5: core::result::Result<usize, usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:368:12: 375:10
    let _6: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:369:13: 369:23
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:372:13: 372:30
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:373:13: 373:30
    let mut _9: rwlock::RwLockWriteGuard<'_, T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:378:18: 382:14
    let mut _10: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:381:23: 381:55
    let mut _11: &mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:381:32: 381:53
    let mut _12: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:381:38: 381:53
    let mut _13: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:381:38: 381:53
    scope 1 {
    }

    bb0: {
        _6 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:369:13: 369:23
        _7 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:372:13: 372:30
        _8 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:373:13: 373:30
        _5 = compare_exchange(_6, const 0_usize, const _, move _7, move _8, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:368:12: 375:10
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:368:12: 368:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, usize, core::sync::atomic::Ordering, core::sync::atomic::Ordering, bool) -> Result<usize, usize> {compare_exchange}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:368:12: 376:17
        _3 = Result::<usize, usize>::is_ok(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:368:12: 376:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:376:10: 376:15
                                         // + literal: Const { ty: for<'a> fn(&'a Result<usize, usize>) -> bool {Result::<usize, usize>::is_ok}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _3) -> [0: bb5, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:368:12: 376:17
    }

    bb3: {
        _13 = &((*_1).2: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:381:38: 381:53
        _12 = UnsafeCell::<T>::get(move _13) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:381:38: 381:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:381:48: 381:51
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &mut (*_12);               // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:381:32: 381:53
        _10 = &raw mut (*_11);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:381:32: 381:53
        _9 = rwlock::RwLockWriteGuard::<'_, T, R> { phantom: const ZeroSized: PhantomData<R>, inner: _1, data: move _10 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:378:18: 382:14
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<R>, val: Value(<ZST>) }
        _0 = Option::<rwlock::RwLockWriteGuard<'_, T, R>>::Some(move _9); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:378:13: 382:15
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:368:9: 385:10
    }

    bb5: {
        _0 = Option::<rwlock::RwLockWriteGuard<'_, T, R>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:384:13: 384:17
        goto -> bb6;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:368:9: 385:10
    }

    bb6: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:386:6: 386:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:259:1: 259:32>::try_write(_1: &rwlock::RwLock<T, R>) -> Option<rwlock::RwLockWriteGuard<'_, T, R>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:408:22: 408:27
    let mut _0: core::option::Option<rwlock::RwLockWriteGuard<'_, T, R>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:408:32: 408:62

    bb0: {
        _0 = rwlock::RwLock::<T, R>::try_write_internal(_1, const true) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:409:9: 409:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:409:14: 409:32
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<T, R>, bool) -> Option<rwlock::RwLockWriteGuard<'a, T, R>> {rwlock::RwLock::<T, R>::try_write_internal}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:410:6: 410:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:259:1: 259:32>::try_upgradeable_read(_1: &rwlock::RwLock<T, R>) -> Option<rwlock::RwLockUpgradableGuard<'_, T, R>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:414:33: 414:38
    let mut _0: core::option::Option<rwlock::RwLockUpgradableGuard<'_, T, R>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:414:43: 414:78
    let mut _2: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:12: 415:81
    let mut _3: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:12: 415:59
    let mut _4: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:12: 415:59
    let mut _5: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:41: 415:58
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:62: 415:81
    let mut _7: rwlock::RwLockUpgradableGuard<'_, T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:416:18: 420:14
    let mut _8: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:419:23: 419:51
    let _9: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:419:32: 419:49
    let _10: *mut T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:419:34: 419:49
    let mut _11: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:419:34: 419:49
    scope 1 {
    }

    bb0: {
        _4 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:12: 415:59
        _5 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:41: 415:58
        _3 = AtomicUsize::fetch_or(move _4, const _, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:12: 415:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:22: 415:30
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_or}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = BitOr(const _, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:62: 415:81
        _2 = BitAnd(move _3, move _6);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:12: 415:81
        switchInt(move _2) -> [0: bb2, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:12: 415:86
    }

    bb2: {
        _11 = &((*_1).2: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:419:34: 419:49
        _10 = UnsafeCell::<T>::get(move _11) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:419:34: 419:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:419:44: 419:47
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &(*_10);                    // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:419:32: 419:49
        _8 = &raw const (*_9);           // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:419:32: 419:49
        _7 = rwlock::RwLockUpgradableGuard::<'_, T, R> { phantom: const ZeroSized: PhantomData<R>, inner: _1, data: move _8 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:416:18: 420:14
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<R>, val: Value(<ZST>) }
        _0 = Option::<rwlock::RwLockUpgradableGuard<'_, T, R>>::Some(move _7); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:416:13: 420:15
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:9: 425:10
    }

    bb4: {
        _0 = Option::<rwlock::RwLockUpgradableGuard<'_, T, R>>::None; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:424:13: 424:17
        goto -> bb5;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:415:9: 425:10
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:426:6: 426:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:259:1: 259:32>::get_mut(_1: &mut rwlock::RwLock<T, R>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:440:20: 440:29
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:440:34: 440:40
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:443:24: 443:39
    let mut _3: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:443:24: 443:39
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).2: core::cell::UnsafeCell<T>); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:443:24: 443:39
        _2 = UnsafeCell::<T>::get(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:443:24: 443:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:443:34: 443:37
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &mut (*_2);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:443:18: 443:39
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:444:6: 444:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:447:1: 447:60>::fmt(_1: &rwlock::RwLock<T, R>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:448:12: 448:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:448:19: 448:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:448:46: 448:57
    let mut _3: core::option::Option<rwlock::RwLockReadGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:449:15: 449:30
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:13: 450:24
    let _5: rwlock::RwLockReadGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:18: 450:23
    let mut _6: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:28: 451:49
    let mut _7: core::result::Result<(), core::fmt::Error>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _8: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _9: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _10: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:38: 450:56
    let mut _11: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:31]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:48
    let mut _12: &rwlock::RwLockReadGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:48
    let mut _13: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:48
    let mut _14: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:27: 452:31]; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:27: 452:47
    let mut _15: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:27: 452:47
    let mut _16: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
    let mut _17: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _18: &[&str];                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:453:31: 453:54
    let mut _19: &[&str; 1];             // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:453:31: 453:54
    scope 1 {
        debug guard => _5;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:18: 450:23
        let mut _20: &[&str; 1];         // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:38: 450:56
    }

    bb0: {
        _3 = rwlock::RwLock::<T, R>::try_read(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:449:15: 449:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:449:20: 449:28
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<T, R>) -> Option<rwlock::RwLockReadGuard<'a, T>> {rwlock::RwLock::<T, R>::try_read}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_3);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:449:15: 449:30
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:449:9: 449:30
    }

    bb2: {
        _16 = _2;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _19 = const _;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:453:31: 453:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:453:31: 453:54
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<rwlock::RwLock<T, R> as Debug>::fmt, [T, R], Some(promoted[0])) }
        _18 = _19 as &[&str] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:453:31: 453:54
        _17 = Arguments::<'_>::new_const(move _18) -> [return: bb9, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:449:15: 449:30
    }

    bb4: {
        _5 = move ((_3 as Some).0: rwlock::RwLockReadGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:18: 450:23
        _8 = _2;                         // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _20 = const _;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:38: 450:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:38: 450:56
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<rwlock::RwLock<T, R> as Debug>::fmt, [T, R], Some(promoted[1])) }
        _10 = _20 as &[&str] (Pointer(Unsize)); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:38: 450:56
        _9 = Arguments::<'_>::new_const(move _10) -> [return: bb5, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = Formatter::<'_>::write_fmt(move _8, move _9) -> [return: bb6, unwind unreachable]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = &_5;                       // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:48
        _13 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:48
        _11 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:31] { guard: move _12, f: move _13 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:48
                                         // closure
                                         // + def_id: DefId(0:465 ~ spin[cd97]::rwlock::{impl#11}::fmt::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     R,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)) -> core::result::Result<(), core::fmt::Error>,
                                         //     (&rwlock::RwLockReadGuard<'_, T>, &mut &mut core::fmt::Formatter<'_>),
                                         // ]
        _6 = Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:31]>(move _7, move _11) -> [return: bb7, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:28: 451:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:18: 451:26
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:31]) -> Result<(), core::fmt::Error> {Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:31]>}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = &mut _2;                   // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:27: 452:47
        _14 = [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:27: 452:31] { f: move _15 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:27: 452:47
                                         // closure
                                         // + def_id: DefId(0:466 ~ spin[cd97]::rwlock::{impl#11}::fmt::{closure#1})
                                         // + substs: [
                                         //     T,
                                         //     R,
                                         //     i32,
                                         //     extern "rust-call" fn(((),)) -> core::result::Result<(), core::fmt::Error>,
                                         //     (&mut &mut core::fmt::Formatter<'_>,),
                                         // ]
        _0 = Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:27: 452:31]>(move _6, move _14) -> [return: bb8, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:28: 452:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:18: 452:26
                                         // + literal: Const { ty: fn(Result<(), core::fmt::Error>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:27: 452:31]) -> Result<(), core::fmt::Error> {Result::<(), core::fmt::Error>::and_then::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:27: 452:31]>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_5) -> [return: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:47: 452:48
    }

    bb9: {
        _0 = Formatter::<'_>::write_fmt(move _16, move _17) -> [return: bb10, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:455:6: 455:6
    }
}

promoted[0] in rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:447:1: 447:60>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:453:31: 453:54
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:453:31: 453:54

    bb0: {
        _1 = [const "RwLock { <locked> }"]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:453:31: 453:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:453:31: 453:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:453:31: 453:54
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:453:31: 453:54
    }
}

promoted[1] in rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:447:1: 447:60>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:38: 450:56
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:38: 450:56

    bb0: {
        _1 = [const "RwLock { data: "];  // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:38: 450:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:38: 450:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:38: 450:56
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:38: 450:56
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:447:1: 447:60>::fmt::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:31], _2: ()) -> Result<(), core::fmt::Error> {
    debug guard => (*(_1.0: &rwlock::RwLockReadGuard<'_, T>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:450:18: 450:23
    debug f => (*(_1.1: &mut &mut core::fmt::Formatter<'_>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:448:19: 448:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:32: 451:32
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:32: 451:41
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:34: 451:40
    let mut _5: &rwlock::RwLockReadGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:48
    let mut _6: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:48
    let mut _7: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:27: 451:48

    bb0: {
        _5 = deref_copy (_1.0: &rwlock::RwLockReadGuard<'_, T>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:35: 451:40
        _4 = <rwlock::RwLockReadGuard<'_, T> as Deref>::deref(_5) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:34: 451:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:34: 451:40
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLockReadGuard<'_, T>) -> &'a <rwlock::RwLockReadGuard<'_, T> as Deref>::Target {<rwlock::RwLockReadGuard<'_, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:32: 451:41
        _6 = deref_copy (_1.1: &mut &mut core::fmt::Formatter<'_>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:46: 451:47
        _7 = deref_copy (*_6);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:46: 451:47
        _0 = <T as Debug>::fmt(_3, _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:32: 451:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:42: 451:45
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:451:48: 451:48
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:447:1: 447:60>::fmt::{closure#1}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:27: 452:31], _2: ()) -> Result<(), core::fmt::Error> {
    debug f => (*(_1.0: &mut &mut core::fmt::Formatter<'_>)); // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:448:19: 448:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:32: 452:32
    let mut _3: core::fmt::Arguments<'_>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
    let mut _4: &[&str];                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:42: 452:46
    let mut _5: &[&str; 1];              // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:42: 452:46
    let mut _6: &mut &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:27: 452:47
    let mut _7: &mut core::fmt::Formatter<'_>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:27: 452:47

    bb0: {
        _6 = deref_copy (_1.0: &mut &mut core::fmt::Formatter<'_>); // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _7 = deref_copy (*_6);           // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
        _5 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:42: 452:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:42: 452:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<rwlock::RwLock<T, R> as Debug>::fmt::{closure#1}, [T, R, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _4 = _5 as &[&str] (Pointer(Unsize)); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:42: 452:46
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:24: 519:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Formatter::<'_>::write_fmt(_7, move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:9: 519:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:519:14: 519:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), core::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:47: 452:47
    }
}

promoted[0] in rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:447:1: 447:60>::fmt::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:42: 452:46
    let mut _1: [&str; 1];               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:42: 452:46

    bb0: {
        _1 = [const "}"];                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:42: 452:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:42: 452:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:42: 452:46
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:452:42: 452:46
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:458:1: 458:54>::default() -> rwlock::RwLock<T, R> {
    let mut _0: rwlock::RwLock<T, R>;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:459:21: 459:25
    let mut _1: T;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:460:19: 460:37

    bb0: {
        _1 = <T as Default>::default() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:460:19: 460:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:460:19: 460:35
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = rwlock::RwLock::<T, R>::new(move _1) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:460:9: 460:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:460:9: 460:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> rwlock::RwLock<T, R> {rwlock::RwLock::<T, R>::new}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:461:6: 461:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:464:1: 464:36>::from(_1: T) -> rwlock::RwLock<T, R> {
    debug data => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:465:13: 465:17
    let mut _0: rwlock::RwLock<T, R>;    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:465:25: 465:29

    bb0: {
        _0 = rwlock::RwLock::<T, R>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:466:9: 466:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:466:9: 466:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> rwlock::RwLock<T, R> {rwlock::RwLock::<T, R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:467:6: 467:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:470:1: 470:53>::leak(_1: rwlock::RwLockReadGuard<'_, T>) -> &T {
    debug this => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:483:17: 483:21
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:483:32: 483:42
    let _2: core::mem::ManuallyDrop<rwlock::RwLockReadGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:484:13: 484:17
    let _3: &rwlock::RwLockReadGuard<'_, T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:486:20: 486:29
    let mut _4: &core::mem::ManuallyDrop<rwlock::RwLockReadGuard<'_, T>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:486:20: 486:24
    let mut _5: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:486:20: 486:29
    scope 1 {
        debug this => _2;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:484:13: 484:17
        scope 2 {
        }
    }

    bb0: {
        _2 = ManuallyDrop::<rwlock::RwLockReadGuard<'_, T>>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:484:20: 484:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:484:20: 484:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(rwlock::RwLockReadGuard<'_, T>) -> ManuallyDrop<rwlock::RwLockReadGuard<'_, T>> {ManuallyDrop::<rwlock::RwLockReadGuard<'_, T>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_2;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:486:20: 486:24
        _3 = <ManuallyDrop<rwlock::RwLockReadGuard<'_, T>> as Deref>::deref(move _4) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:486:20: 486:29
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:486:20: 486:29
                                         // + literal: Const { ty: for<'a> fn(&'a ManuallyDrop<rwlock::RwLockReadGuard<'_, T>>) -> &'a <ManuallyDrop<rwlock::RwLockReadGuard<'_, T>> as Deref>::Target {<ManuallyDrop<rwlock::RwLockReadGuard<'_, T>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = deref_copy ((*_3).1: *const T); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:486:18: 486:29
        _0 = &(*_5);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:486:18: 486:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:487:6: 487:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:490:1: 490:81>::fmt(_1: &rwlock::RwLockReadGuard<'_, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:491:12: 491:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:491:19: 491:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:491:46: 491:57
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:492:25: 492:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:492:26: 492:32

    bb0: {
        _4 = <rwlock::RwLockReadGuard<'_, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:492:26: 492:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:492:26: 492:32
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLockReadGuard<'_, T>) -> &'a <rwlock::RwLockReadGuard<'_, T> as Deref>::Target {<rwlock::RwLockReadGuard<'_, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:492:25: 492:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:492:9: 492:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:492:9: 492:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:493:6: 493:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:496:1: 496:85>::fmt(_1: &rwlock::RwLockReadGuard<'_, T>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:497:12: 497:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:497:19: 497:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:497:46: 497:57
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:498:27: 498:34
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:498:28: 498:34

    bb0: {
        _4 = <rwlock::RwLockReadGuard<'_, T> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:498:28: 498:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:498:28: 498:34
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLockReadGuard<'_, T>) -> &'a <rwlock::RwLockReadGuard<'_, T> as Deref>::Target {<rwlock::RwLockReadGuard<'_, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:498:27: 498:34
        _0 = <T as Display>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:498:9: 498:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:498:9: 498:26
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:499:6: 499:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:502:1: 502:80>::upgrade(_1: rwlock::RwLockUpgradableGuard<'_, T, R>) -> rwlock::RwLockWriteGuard<'_, T, R> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:512:20: 512:28
    let mut _0: rwlock::RwLockWriteGuard<'_, T, R>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:512:33: 512:64
    let mut _2: core::result::Result<rwlock::RwLockWriteGuard<'_, T, R>, rwlock::RwLockUpgradableGuard<'_, T, R>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:514:26: 514:58
    let mut _3: rwlock::RwLockUpgradableGuard<'_, T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:514:26: 514:30
    let mut _4: isize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:515:17: 515:26
    let _5: rwlock::RwLockUpgradableGuard<'_, T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:516:21: 516:22
    let _6: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:519:13: 519:23
    scope 1 {
        debug guard => _0;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:515:20: 515:25
    }
    scope 2 {
        debug e => _5;                   // in scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:516:21: 516:22
    }

    bb0: {
        goto -> bb1;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:513:9: 520:10
    }

    bb1: {
        _3 = move _1;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:514:26: 514:30
        _2 = rwlock::RwLockUpgradableGuard::<'_, T, R>::try_upgrade_internal(move _3, const false) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:514:26: 514:58
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:514:31: 514:51
                                         // + literal: Const { ty: fn(rwlock::RwLockUpgradableGuard<'_, T, R>, bool) -> Result<rwlock::RwLockWriteGuard<'_, T, R>, rwlock::RwLockUpgradableGuard<'_, T, R>> {rwlock::RwLockUpgradableGuard::<'_, T, R>::try_upgrade_internal}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_2);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:514:26: 514:58
        switchInt(move _4) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:514:20: 514:58
    }

    bb3: {
        _5 = move ((_2 as Err).0: rwlock::RwLockUpgradableGuard<'_, T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:516:21: 516:22
        _1 = move _5;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:514:13: 514:17
        _6 = <R as RelaxStrategy>::relax() -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:519:13: 519:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:519:13: 519:21
                                         // + literal: Const { ty: fn() {<R as RelaxStrategy>::relax}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:514:26: 514:58
    }

    bb5: {
        _0 = move ((_2 as Ok).0: rwlock::RwLockWriteGuard<'_, T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:515:20: 515:25
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:521:6: 521:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:524:1: 524:65>::try_upgrade_internal(_1: rwlock::RwLockUpgradableGuard<'_, T, R>, _2: bool) -> Result<rwlock::RwLockWriteGuard<'_, T, R>, rwlock::RwLockUpgradableGuard<'_, T, R>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:526:29: 526:33
    debug strong => _2;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:526:35: 526:41
    let mut _0: core::result::Result<rwlock::RwLockWriteGuard<'_, T, R>, rwlock::RwLockUpgradableGuard<'_, T, R>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:526:52: 526:97
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:527:12: 535:17
    let mut _4: &core::result::Result<usize, usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:527:12: 535:17
    let _5: core::result::Result<usize, usize>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:527:12: 534:10
    let _6: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:528:13: 528:29
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:531:13: 531:30
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:532:13: 532:30
    let _9: &rwlock::RwLock<T, R>;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:537:17: 537:22
    let _10: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:540:13: 540:30
    let mut _11: rwlock::RwLockWriteGuard<'_, T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:543:16: 547:14
    let mut _12: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:546:23: 546:56
    let mut _13: &mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:546:32: 546:54
    let mut _14: *mut T;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:546:38: 546:54
    let mut _15: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:546:38: 546:54
    let mut _16: &rwlock::RwLock<T, R>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:526:29: 526:33
    scope 1 {
        debug inner => _9;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:537:17: 537:22
        scope 2 {
        }
    }

    bb0: {
        _16 = deref_copy (_1.1: &rwlock::RwLock<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:528:13: 528:29
        _6 = &((*_16).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:528:13: 528:29
        _7 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:531:13: 531:30
        _8 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:532:13: 532:30
        _5 = compare_exchange(_6, const _, const _, move _7, move _8, _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:527:12: 534:10
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:527:12: 527:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, usize, core::sync::atomic::Ordering, core::sync::atomic::Ordering, bool) -> Result<usize, usize> {compare_exchange}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:527:12: 535:17
        _3 = Result::<usize, usize>::is_ok(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:527:12: 535:17
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:535:10: 535:15
                                         // + literal: Const { ty: for<'a> fn(&'a Result<usize, usize>) -> bool {Result::<usize, usize>::is_ok}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _3) -> [0: bb6, otherwise: bb3]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:527:12: 535:17
    }

    bb3: {
        _9 = (_1.1: &rwlock::RwLock<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:537:25: 537:35
        _10 = core::mem::forget::<rwlock::RwLockUpgradableGuard<'_, T, R>>(move _1) -> [return: bb4, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:540:13: 540:30
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:540:13: 540:24
                                         // + literal: Const { ty: fn(rwlock::RwLockUpgradableGuard<'_, T, R>) {core::mem::forget::<rwlock::RwLockUpgradableGuard<'_, T, R>>}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = &((*_9).2: core::cell::UnsafeCell<T>); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:546:38: 546:54
        _14 = UnsafeCell::<T>::get(move _15) -> [return: bb5, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:546:38: 546:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:546:49: 546:52
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &mut (*_14);               // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:546:32: 546:54
        _12 = &raw mut (*_13);           // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:546:32: 546:54
        _11 = rwlock::RwLockWriteGuard::<'_, T, R> { phantom: const ZeroSized: PhantomData<R>, inner: _9, data: move _12 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:543:16: 547:14
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<R>, val: Value(<ZST>) }
        _0 = Result::<rwlock::RwLockWriteGuard<'_, T, R>, rwlock::RwLockUpgradableGuard<'_, T, R>>::Ok(move _11); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:543:13: 547:15
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:527:9: 550:10
    }

    bb6: {
        _0 = Result::<rwlock::RwLockWriteGuard<'_, T, R>, rwlock::RwLockUpgradableGuard<'_, T, R>>::Err(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:549:13: 549:22
        goto -> bb7;                     // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:527:9: 550:10
    }

    bb7: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:551:6: 551:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:524:1: 524:65>::try_upgrade(_1: rwlock::RwLockUpgradableGuard<'_, T, R>) -> Result<rwlock::RwLockWriteGuard<'_, T, R>, rwlock::RwLockUpgradableGuard<'_, T, R>> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:565:24: 565:28
    let mut _0: core::result::Result<rwlock::RwLockWriteGuard<'_, T, R>, rwlock::RwLockUpgradableGuard<'_, T, R>>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:565:33: 565:78

    bb0: {
        _0 = rwlock::RwLockUpgradableGuard::<'_, T, R>::try_upgrade_internal(move _1, const true) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:566:9: 566:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:566:14: 566:34
                                         // + literal: Const { ty: fn(rwlock::RwLockUpgradableGuard<'_, T, R>, bool) -> Result<rwlock::RwLockWriteGuard<'_, T, R>, rwlock::RwLockUpgradableGuard<'_, T, R>> {rwlock::RwLockUpgradableGuard::<'_, T, R>::try_upgrade_internal}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:567:6: 567:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:524:1: 524:65>::downgrade(_1: rwlock::RwLockUpgradableGuard<'_, T, R>) -> rwlock::RwLockReadGuard<'_, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:583:22: 583:26
    let mut _0: rwlock::RwLockReadGuard<'_, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:583:31: 583:58
    let _2: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:585:9: 585:36
    let _3: &rwlock::RwLock<T, R>;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:587:13: 587:18
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:590:9: 590:24
    let _5: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:593:19: 593:30
    let mut _6: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:594:19: 594:48
    let _7: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:594:28: 594:46
    let _8: *mut T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:594:30: 594:46
    let mut _9: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:594:30: 594:46
    let mut _10: &rwlock::RwLock<T, R>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:583:22: 583:26
    scope 1 {
        debug inner => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:587:13: 587:18
        scope 2 {
        }
    }

    bb0: {
        _10 = deref_copy (_1.1: &rwlock::RwLock<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:585:9: 585:36
        _2 = rwlock::RwLock::<T, R>::acquire_reader(_10) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:585:9: 585:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:585:20: 585:34
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<T, R>) -> usize {rwlock::RwLock::<T, R>::acquire_reader}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = (_1.1: &rwlock::RwLock<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:587:21: 587:31
        _4 = core::mem::drop::<rwlock::RwLockUpgradableGuard<'_, T, R>>(move _1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:590:9: 590:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:590:9: 590:18
                                         // + literal: Const { ty: fn(rwlock::RwLockUpgradableGuard<'_, T, R>) {core::mem::drop::<rwlock::RwLockUpgradableGuard<'_, T, R>>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &((*_3).1: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:593:19: 593:30
        _9 = &((*_3).2: core::cell::UnsafeCell<T>); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:594:30: 594:46
        _8 = UnsafeCell::<T>::get(move _9) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:594:30: 594:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:594:41: 594:44
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = &(*_8);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:594:28: 594:46
        _6 = &raw const (*_7);           // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:594:28: 594:46
        _0 = rwlock::RwLockReadGuard::<'_, T> { lock: _5, data: move _6 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:592:9: 595:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:596:6: 596:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:524:1: 524:65>::leak(_1: rwlock::RwLockUpgradableGuard<'_, T, R>) -> &T {
    debug this => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:610:17: 610:21
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:610:32: 610:42
    let _2: core::mem::ManuallyDrop<rwlock::RwLockUpgradableGuard<'_, T, R>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:611:13: 611:17
    let _3: &rwlock::RwLockUpgradableGuard<'_, T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:613:20: 613:29
    let mut _4: &core::mem::ManuallyDrop<rwlock::RwLockUpgradableGuard<'_, T, R>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:613:20: 613:24
    let mut _5: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:613:20: 613:29
    scope 1 {
        debug this => _2;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:611:13: 611:17
        scope 2 {
        }
    }

    bb0: {
        _2 = ManuallyDrop::<rwlock::RwLockUpgradableGuard<'_, T, R>>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:611:20: 611:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:611:20: 611:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(rwlock::RwLockUpgradableGuard<'_, T, R>) -> ManuallyDrop<rwlock::RwLockUpgradableGuard<'_, T, R>> {ManuallyDrop::<rwlock::RwLockUpgradableGuard<'_, T, R>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_2;                        // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:613:20: 613:24
        _3 = <ManuallyDrop<rwlock::RwLockUpgradableGuard<'_, T, R>> as Deref>::deref(move _4) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:613:20: 613:29
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:613:20: 613:29
                                         // + literal: Const { ty: for<'a> fn(&'a ManuallyDrop<rwlock::RwLockUpgradableGuard<'_, T, R>>) -> &'a <ManuallyDrop<rwlock::RwLockUpgradableGuard<'_, T, R>> as Deref>::Target {<ManuallyDrop<rwlock::RwLockUpgradableGuard<'_, T, R>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = deref_copy ((*_3).2: *const T); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:613:18: 613:29
        _0 = &(*_5);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:613:18: 613:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:614:6: 614:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:617:1: 617:93>::fmt(_1: &rwlock::RwLockUpgradableGuard<'_, T, R>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:618:12: 618:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:618:19: 618:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:618:46: 618:57
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:619:25: 619:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:619:26: 619:32

    bb0: {
        _4 = <rwlock::RwLockUpgradableGuard<'_, T, R> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:619:26: 619:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:619:26: 619:32
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLockUpgradableGuard<'_, T, R>) -> &'a <rwlock::RwLockUpgradableGuard<'_, T, R> as Deref>::Target {<rwlock::RwLockUpgradableGuard<'_, T, R> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:619:25: 619:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:619:9: 619:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:619:9: 619:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:620:6: 620:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:623:1: 623:97>::fmt(_1: &rwlock::RwLockUpgradableGuard<'_, T, R>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:624:12: 624:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:624:19: 624:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:624:46: 624:57
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:625:27: 625:34
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:625:28: 625:34

    bb0: {
        _4 = <rwlock::RwLockUpgradableGuard<'_, T, R> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:625:28: 625:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:625:28: 625:34
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLockUpgradableGuard<'_, T, R>) -> &'a <rwlock::RwLockUpgradableGuard<'_, T, R> as Deref>::Target {<rwlock::RwLockUpgradableGuard<'_, T, R> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:625:27: 625:34
        _0 = <T as Display>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:625:9: 625:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:625:9: 625:26
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:626:6: 626:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:629:1: 629:60>::downgrade(_1: rwlock::RwLockWriteGuard<'_, T, R>) -> rwlock::RwLockReadGuard<'_, T> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:643:22: 643:26
    let mut _0: rwlock::RwLockReadGuard<'_, T>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:643:31: 643:58
    let _2: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:645:9: 645:36
    let _3: &rwlock::RwLock<T, R>;       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:647:13: 647:18
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:650:9: 650:24
    let _5: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:653:19: 653:30
    let mut _6: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:654:19: 654:48
    let _7: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:654:28: 654:46
    let _8: *mut T;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:654:30: 654:46
    let mut _9: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:654:30: 654:46
    let mut _10: &rwlock::RwLock<T, R>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:643:22: 643:26
    scope 1 {
        debug inner => _3;               // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:647:13: 647:18
        scope 2 {
        }
    }

    bb0: {
        _10 = deref_copy (_1.1: &rwlock::RwLock<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:645:9: 645:36
        _2 = rwlock::RwLock::<T, R>::acquire_reader(_10) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:645:9: 645:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:645:20: 645:34
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<T, R>) -> usize {rwlock::RwLock::<T, R>::acquire_reader}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = (_1.1: &rwlock::RwLock<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:647:21: 647:31
        _4 = core::mem::drop::<rwlock::RwLockWriteGuard<'_, T, R>>(move _1) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:650:9: 650:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:650:9: 650:18
                                         // + literal: Const { ty: fn(rwlock::RwLockWriteGuard<'_, T, R>) {core::mem::drop::<rwlock::RwLockWriteGuard<'_, T, R>>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &((*_3).1: core::sync::atomic::AtomicUsize); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:653:19: 653:30
        _9 = &((*_3).2: core::cell::UnsafeCell<T>); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:654:30: 654:46
        _8 = UnsafeCell::<T>::get(move _9) -> [return: bb3, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:654:30: 654:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:654:41: 654:44
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = &(*_8);                     // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:654:28: 654:46
        _6 = &raw const (*_7);           // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:654:28: 654:46
        _0 = rwlock::RwLockReadGuard::<'_, T> { lock: _5, data: move _6 }; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:652:9: 655:10
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:656:6: 656:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:629:1: 629:60>::downgrade_to_upgradeable(_1: rwlock::RwLockWriteGuard<'_, T, R>) -> rwlock::RwLockUpgradableGuard<'_, T, R> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:670:37: 670:41
    let mut _0: rwlock::RwLockUpgradableGuard<'_, T, R>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:670:46: 670:82
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    let mut _3: (&usize, &usize);        // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:672:13: 672:74
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:672:13: 672:52
    let mut _7: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:672:13: 672:52
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:672:34: 672:51
    let mut _9: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:672:55: 672:74
    let _10: &usize;                     // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
    let _11: &usize;                     // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _12: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
    let _19: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:677:9: 677:59
    let mut _20: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:677:9: 677:59
    let mut _21: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:677:41: 677:58
    let _22: &rwlock::RwLock<T, R>;      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:679:13: 679:18
    let _23: ();                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:682:9: 682:26
    let mut _24: *const T;               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:687:19: 687:48
    let _25: &T;                         // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:687:28: 687:46
    let _26: *mut T;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:687:30: 687:46
    let mut _27: &core::cell::UnsafeCell<T>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:687:30: 687:46
    let mut _28: &usize;                 // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _29: &rwlock::RwLock<T, R>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:670:37: 670:41
    let mut _30: &rwlock::RwLock<T, R>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:670:37: 670:41
    scope 1 {
        debug left_val => _10;           // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _11;          // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        let _16: core::panicking::AssertKind; // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _16;           // in scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug inner => _22;              // in scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:679:13: 679:18
        scope 4 {
        }
    }

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
        switchInt(move _2) -> [0: bb4, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    }

    bb1: {
        _29 = deref_copy (_1.1: &rwlock::RwLock<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:672:13: 672:52
        _7 = &((*_29).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:672:13: 672:52
        _8 = Acquire;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:672:34: 672:51
        _6 = AtomicUsize::load(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:672:13: 672:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:672:29: 672:33
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = BitOr(const _, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:672:55: 672:74
        _5 = BitAnd(move _6, move _9);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:672:13: 672:74
        _4 = &_5;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
        _28 = const _;                   // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(rwlock::RwLockWriteGuard::<'rwlock, T, R>::downgrade_to_upgradeable, [ReErased, T, R], Some(promoted[0])) }
        _3 = (move _4, _28);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_3.0: &usize);            // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_3.1: &usize);            // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = (*_11);                    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb4, otherwise: bb3]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = assert_failed::<usize, usize>(move _16, _10, _11, move _18) -> unwind unreachable; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _30 = deref_copy (_1.1: &rwlock::RwLock<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:677:9: 677:59
        _20 = &((*_30).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:677:9: 677:59
        _21 = Release;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:677:41: 677:58
        _19 = AtomicUsize::store(move _20, const _, move _21) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:677:9: 677:59
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:677:25: 677:30
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = (_1.1: &rwlock::RwLock<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:679:21: 679:31
        _23 = core::mem::forget::<rwlock::RwLockWriteGuard<'_, T, R>>(move _1) -> [return: bb6, unwind unreachable]; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:682:9: 682:26
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:682:9: 682:20
                                         // + literal: Const { ty: fn(rwlock::RwLockWriteGuard<'_, T, R>) {core::mem::forget::<rwlock::RwLockWriteGuard<'_, T, R>>}, val: Value(<ZST>) }
    }

    bb6: {
        _27 = &((*_22).2: core::cell::UnsafeCell<T>); // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:687:30: 687:46
        _26 = UnsafeCell::<T>::get(move _27) -> [return: bb7, unwind unreachable]; // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:687:30: 687:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:687:41: 687:44
                                         // + literal: Const { ty: for<'a> fn(&'a UnsafeCell<T>) -> *mut T {UnsafeCell::<T>::get}, val: Value(<ZST>) }
    }

    bb7: {
        _25 = &(*_26);                   // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:687:28: 687:46
        _24 = &raw const (*_25);         // scope 4 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:687:28: 687:46
        _0 = rwlock::RwLockUpgradableGuard::<'_, T, R> { phantom: const ZeroSized: PhantomData<R>, inner: _22, data: move _24 }; // scope 3 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:684:9: 688:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<R>, val: Value(<ZST>) }
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:689:6: 689:6
    }
}

promoted[0] in rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:629:1: 629:60>::downgrade_to_upgradeable: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:673:13: 673:19

    bb0: {
        _1 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:673:13: 673:19
        _0 = &_1;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:629:1: 629:60>::leak(_1: rwlock::RwLockWriteGuard<'_, T, R>) -> &mut T {
    debug this => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:704:17: 704:21
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:704:32: 704:46
    let mut _2: core::mem::ManuallyDrop<rwlock::RwLockWriteGuard<'_, T, R>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:705:13: 705:21
    let mut _3: &mut rwlock::RwLockWriteGuard<'_, T, R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:707:24: 707:33
    let mut _4: &mut core::mem::ManuallyDrop<rwlock::RwLockWriteGuard<'_, T, R>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:707:24: 707:28
    let mut _5: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:707:24: 707:33
    scope 1 {
        debug this => _2;                // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:705:13: 705:21
        scope 2 {
        }
    }

    bb0: {
        _2 = ManuallyDrop::<rwlock::RwLockWriteGuard<'_, T, R>>::new(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:705:24: 705:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:705:24: 705:41
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(rwlock::RwLockWriteGuard<'_, T, R>) -> ManuallyDrop<rwlock::RwLockWriteGuard<'_, T, R>> {ManuallyDrop::<rwlock::RwLockWriteGuard<'_, T, R>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _2;                    // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:707:24: 707:28
        _3 = <ManuallyDrop<rwlock::RwLockWriteGuard<'_, T, R>> as DerefMut>::deref_mut(move _4) -> [return: bb2, unwind unreachable]; // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:707:24: 707:33
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:707:24: 707:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut ManuallyDrop<rwlock::RwLockWriteGuard<'_, T, R>>) -> &'a mut <ManuallyDrop<rwlock::RwLockWriteGuard<'_, T, R>> as Deref>::Target {<ManuallyDrop<rwlock::RwLockWriteGuard<'_, T, R>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = deref_copy ((*_3).2: *mut T); // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:707:18: 707:33
        _0 = &mut (*_5);                 // scope 2 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:707:18: 707:33
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:708:6: 708:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:711:1: 711:88>::fmt(_1: &rwlock::RwLockWriteGuard<'_, T, R>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:712:12: 712:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:712:19: 712:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:712:46: 712:57
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:713:25: 713:32
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:713:26: 713:32

    bb0: {
        _4 = <rwlock::RwLockWriteGuard<'_, T, R> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:713:26: 713:32
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:713:26: 713:32
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLockWriteGuard<'_, T, R>) -> &'a <rwlock::RwLockWriteGuard<'_, T, R> as Deref>::Target {<rwlock::RwLockWriteGuard<'_, T, R> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:713:25: 713:32
        _0 = <T as Debug>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:713:9: 713:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:713:9: 713:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:714:6: 714:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:717:1: 717:92>::fmt(_1: &rwlock::RwLockWriteGuard<'_, T, R>, _2: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:718:12: 718:17
    debug f => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:718:19: 718:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:718:46: 718:57
    let _3: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:719:27: 719:34
    let _4: &T;                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:719:28: 719:34

    bb0: {
        _4 = <rwlock::RwLockWriteGuard<'_, T, R> as Deref>::deref(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:719:28: 719:34
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:719:28: 719:34
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLockWriteGuard<'_, T, R>) -> &'a <rwlock::RwLockWriteGuard<'_, T, R> as Deref>::Target {<rwlock::RwLockWriteGuard<'_, T, R> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:719:27: 719:34
        _0 = <T as Display>::fmt(_3, _2) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:719:9: 719:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:719:9: 719:26
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> Result<(), core::fmt::Error> {<T as Display>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:720:6: 720:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:723:1: 723:63>::deref(_1: &rwlock::RwLockReadGuard<'_, T>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:726:14: 726:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:726:24: 726:26
    let mut _2: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:726:14: 726:19
    scope 1 {
    }

    bb0: {
        _2 = deref_copy ((*_1).1: *const T); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:728:18: 728:29
        _0 = &(*_2);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:728:18: 728:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:729:6: 729:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:732:1: 732:75>::deref(_1: &rwlock::RwLockUpgradableGuard<'_, T, R>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:735:14: 735:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:735:24: 735:26
    let mut _2: *const T;                // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:735:14: 735:19
    scope 1 {
    }

    bb0: {
        _2 = deref_copy ((*_1).2: *const T); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:737:18: 737:29
        _0 = &(*_2);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:737:18: 737:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:738:6: 738:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:741:1: 741:70>::deref(_1: &rwlock::RwLockWriteGuard<'_, T, R>) -> &T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:744:14: 744:19
    let mut _0: &T;                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:744:24: 744:26
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:744:14: 744:19
    scope 1 {
    }

    bb0: {
        _2 = deref_copy ((*_1).2: *mut T); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:746:18: 746:29
        _0 = &(*_2);                     // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:746:18: 746:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:747:6: 747:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:750:1: 750:73>::deref_mut(_1: &mut rwlock::RwLockWriteGuard<'_, T, R>) -> &mut T {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:751:18: 751:27
    let mut _0: &mut T;                  // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:751:32: 751:38
    let mut _2: *mut T;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:751:18: 751:27
    scope 1 {
    }

    bb0: {
        _2 = deref_copy ((*_1).2: *mut T); // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:753:18: 753:33
        _0 = &mut (*_2);                 // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:753:18: 753:33
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:754:6: 754:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:757:1: 757:62>::drop(_1: &mut rwlock::RwLockReadGuard<'_, T>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:758:13: 758:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:758:24: 758:24
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:218:12: 218:42
    let mut _3: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
    let mut _4: bool;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:23: 759:83
    let mut _5: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:23: 759:79
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:23: 759:56
    let mut _7: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:38: 759:55
    let mut _8: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:59: 759:79
    let mut _9: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:60: 759:79
    let mut _10: !;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
    let _11: usize;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:760:9: 760:55
    let mut _12: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:760:37: 760:54
    let mut _13: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:758:13: 758:22
    let mut _14: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:758:13: 758:22

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:218:12: 218:42
        switchInt(move _2) -> [0: bb4, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:218:12: 218:42
    }

    bb1: {
        _13 = deref_copy ((*_1).0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:23: 759:56
        _7 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:38: 759:55
        _6 = AtomicUsize::load(_13, move _7) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:23: 759:56
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:33: 759:37
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = BitOr(const _, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:60: 759:79
        _8 = Not(move _9);               // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:59: 759:79
        _5 = BitAnd(move _6, move _8);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:23: 759:79
        _4 = Gt(move _5, const 0_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:759:23: 759:83
        _3 = Not(move _4);               // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
    }

    bb3: {
        _10 = panic(const "assertion failed: self.lock.load(Ordering::Relaxed) & !(WRITER | UPGRADED) > 0") -> unwind unreachable; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _14 = deref_copy ((*_1).0: &core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:760:9: 760:55
        _12 = Release;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:760:37: 760:54
        _11 = AtomicUsize::fetch_sub(_14, const _, move _12) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:760:9: 760:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:760:19: 760:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_sub}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:761:6: 761:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:764:1: 764:74>::drop(_1: &mut rwlock::RwLockUpgradableGuard<'_, T, R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:765:13: 765:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:765:24: 765:24
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    let mut _3: (&usize, &usize);        // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:767:13: 767:74
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:767:13: 767:52
    let mut _7: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:767:13: 767:52
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:767:34: 767:51
    let mut _9: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:767:55: 767:74
    let _10: &usize;                     // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
    let _11: &usize;                     // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _12: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
    let _19: usize;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:770:9: 770:62
    let mut _20: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:770:9: 770:62
    let mut _21: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:770:45: 770:61
    let mut _22: &usize;                 // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _23: &rwlock::RwLock<T, R>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:765:13: 765:22
    let mut _24: &rwlock::RwLock<T, R>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:765:13: 765:22
    scope 1 {
        debug left_val => _10;           // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _11;          // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        let _16: core::panicking::AssertKind; // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _16;           // in scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
        switchInt(move _2) -> [0: bb4, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    }

    bb1: {
        _23 = deref_copy ((*_1).1: &rwlock::RwLock<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:767:13: 767:52
        _7 = &((*_23).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:767:13: 767:52
        _8 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:767:34: 767:51
        _6 = AtomicUsize::load(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:767:13: 767:52
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:767:29: 767:33
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = BitOr(const _, const _);    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:767:55: 767:74
        _5 = BitAnd(move _6, move _9);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:767:13: 767:74
        _4 = &_5;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const _;                   // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<rwlock::RwLockUpgradableGuard<'rwlock, T, R> as Drop>::drop, [ReErased, T, R], Some(promoted[0])) }
        _3 = (move _4, _22);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_3.0: &usize);            // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_3.1: &usize);            // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = (*_11);                    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb4, otherwise: bb3]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = assert_failed::<usize, usize>(move _16, _10, _11, move _18) -> unwind unreachable; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = deref_copy ((*_1).1: &rwlock::RwLock<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:770:9: 770:62
        _20 = &((*_24).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:770:9: 770:62
        _21 = AcqRel;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:770:45: 770:61
        _19 = AtomicUsize::fetch_sub(move _20, const _, move _21) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:770:9: 770:62
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:770:25: 770:34
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_sub}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:771:6: 771:6
    }
}

promoted[0] in rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:764:1: 764:74>::drop: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:768:13: 768:21

    bb0: {
        _1 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:768:13: 768:21
        _0 = &_1;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:774:1: 774:69>::drop(_1: &mut rwlock::RwLockWriteGuard<'_, T, R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:775:13: 775:22
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:775:24: 775:24
    let mut _2: bool;                    // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    let mut _3: (&usize, &usize);        // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:776:26: 776:74
    let mut _6: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:776:26: 776:65
    let mut _7: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:776:26: 776:65
    let mut _8: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:776:47: 776:64
    let _9: &usize;                      // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
    let _10: &usize;                     // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _11: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: usize;                  // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
    let _18: usize;                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:780:9: 782:64
    let mut _19: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:780:9: 782:64
    let mut _20: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:782:24: 782:44
    let mut _21: usize;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:782:25: 782:44
    let mut _22: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:782:46: 782:63
    let mut _23: &usize;                 // in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _24: &rwlock::RwLock<T, R>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:775:13: 775:22
    let mut _25: &rwlock::RwLock<T, R>;  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:775:13: 775:22
    scope 1 {
        debug left_val => _9;            // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _10;          // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        let _15: core::panicking::AssertKind; // in scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _15;           // in scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _2 = const true;                 // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
        switchInt(move _2) -> [0: bb4, otherwise: bb1]; // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:248:12: 248:42
    }

    bb1: {
        _24 = deref_copy ((*_1).1: &rwlock::RwLock<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:776:26: 776:65
        _7 = &((*_24).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:776:26: 776:65
        _8 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:776:47: 776:64
        _6 = AtomicUsize::load(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:776:26: 776:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:776:42: 776:46
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = BitAnd(move _6, const _);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:776:26: 776:74
        _4 = &_5;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22
        _23 = const _;                   // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<rwlock::RwLockWriteGuard<'rwlock, T, R> as Drop>::drop, [ReErased, T, R], Some(promoted[0])) }
        _3 = (move _4, _23);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_3.0: &usize);             // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_3.1: &usize);            // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = (*_10);                    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb4, otherwise: bb3]; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq; // scope 1 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65
        _17 = Option::<Arguments<'_>>::None; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> unwind unreachable; // scope 2 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _25 = deref_copy ((*_1).1: &rwlock::RwLock<T, R>); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:780:9: 782:64
        _19 = &((*_25).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:780:9: 782:64
        _21 = BitOr(const _, const _);   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:782:25: 782:44
        _20 = Not(move _21);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:782:24: 782:44
        _22 = Release;                   // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:782:46: 782:63
        _18 = AtomicUsize::fetch_and(move _19, move _20, move _22) -> [return: bb5, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:780:9: 782:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:782:14: 782:23
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_and}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:783:6: 783:6
    }
}

promoted[0] in rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:774:1: 774:69>::drop: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:776:76: 776:82

    bb0: {
        _1 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:776:76: 776:82
        _0 = &_1;                        // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /Users/yaw/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn compare_exchange(_1: &AtomicUsize, _2: usize, _3: usize, _4: core::sync::atomic::Ordering, _5: core::sync::atomic::Ordering, _6: bool) -> Result<usize, usize> {
    debug atomic => _1;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:788:5: 788:11
    debug current => _2;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:789:5: 789:12
    debug new => _3;                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:790:5: 790:8
    debug success => _4;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:791:5: 791:12
    debug failure => _5;                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:792:5: 792:12
    debug strong => _6;                  // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:793:5: 793:11
    let mut _0: core::result::Result<usize, usize>; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:794:6: 794:26

    bb0: {
        switchInt(_6) -> [0: bb2, otherwise: bb1]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:795:8: 795:14
    }

    bb1: {
        _0 = AtomicUsize::compare_exchange(_1, _2, _3, _4, _5) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:796:9: 796:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:796:16: 796:32
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, usize, core::sync::atomic::Ordering, core::sync::atomic::Ordering) -> Result<usize, usize> {AtomicUsize::compare_exchange}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = AtomicUsize::compare_exchange_weak(_1, _2, _3, _4, _5) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:798:9: 798:69
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:798:16: 798:37
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, usize, core::sync::atomic::Ordering, core::sync::atomic::Ordering) -> Result<usize, usize> {AtomicUsize::compare_exchange_weak}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:800:2: 800:2
    }
}

const rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:803:1: 803:74>::INIT: rwlock::RwLock<(), R> = {
    let mut _0: rwlock::RwLock<(), R>;   // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:806:17: 806:21
    let mut _1: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:806:34: 806:36

    bb0: {
        StorageLive(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:806:34: 806:36
        _1 = ();                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:806:34: 806:36
        ConstEvalCounter;                // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:806:24: 806:37
        _0 = rwlock::RwLock::<(), R>::new(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:806:24: 806:37
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:806:24: 806:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(()) -> rwlock::RwLock<(), R> {rwlock::RwLock::<(), R>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:806:36: 806:37
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:806:5: 806:38
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:806:5: 806:38
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:803:1: 803:74>::lock_exclusive(_1: &rwlock::RwLock<(), R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:809:23: 809:28
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:809:30: 809:30
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:811:9: 811:40
    let mut _3: rwlock::RwLockWriteGuard<'_, (), R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:811:27: 811:39

    bb0: {
        _3 = rwlock::RwLock::<(), R>::write(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:811:27: 811:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:811:32: 811:37
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<(), R>) -> rwlock::RwLockWriteGuard<'a, (), R> {rwlock::RwLock::<(), R>::write}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = core::mem::forget::<rwlock::RwLockWriteGuard<'_, (), R>>(move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:811:9: 811:40
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:811:9: 811:26
                                         // + literal: Const { ty: fn(rwlock::RwLockWriteGuard<'_, (), R>) {core::mem::forget::<rwlock::RwLockWriteGuard<'_, (), R>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:812:6: 812:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:803:1: 803:74>::try_lock_exclusive(_1: &rwlock::RwLock<(), R>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:815:27: 815:32
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:815:37: 815:41
    let mut _2: &core::option::Option<()>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:9: 817:65
    let _3: core::option::Option<()>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:9: 817:55
    let mut _4: core::option::Option<rwlock::RwLockWriteGuard<'_, (), R>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:9: 817:25

    bb0: {
        _4 = rwlock::RwLock::<(), R>::try_write(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:9: 817:25
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:14: 817:23
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<(), R>) -> Option<rwlock::RwLockWriteGuard<'a, (), R>> {rwlock::RwLock::<(), R>::try_write}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Option::<rwlock::RwLockWriteGuard<'_, (), R>>::map::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:30: 817:33]>(move _4, const ZeroSized: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:30: 817:33]) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:9: 817:55
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:26: 817:29
                                         // + literal: Const { ty: fn(Option<rwlock::RwLockWriteGuard<'_, (), R>>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:30: 817:33]) -> Option<()> {Option::<rwlock::RwLockWriteGuard<'_, (), R>>::map::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:30: 817:33]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:30: 817:33], val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:9: 817:65
        _0 = Option::<()>::is_some(move _2) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:9: 817:65
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:56: 817:63
                                         // + literal: Const { ty: for<'a> fn(&'a Option<()>) -> bool {Option::<()>::is_some}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:818:6: 818:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:803:1: 803:74>::try_lock_exclusive::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:30: 817:33], _2: rwlock::RwLockWriteGuard<'_, (), R>) -> () {
    debug g => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:31: 817:32
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:34: 817:34

    bb0: {
        _0 = core::mem::forget::<rwlock::RwLockWriteGuard<'_, (), R>>(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:34: 817:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:34: 817:51
                                         // + literal: Const { ty: fn(rwlock::RwLockWriteGuard<'_, (), R>) {core::mem::forget::<rwlock::RwLockWriteGuard<'_, (), R>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:817:54: 817:54
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:803:1: 803:74>::unlock_exclusive(_1: &rwlock::RwLock<(), R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:821:32: 821:37
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:821:39: 821:39
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:822:9: 826:11
    let mut _3: rwlock::RwLockWriteGuard<'_, (), R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:822:14: 826:10
    let mut _4: *mut ();                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:824:19: 824:26
    let mut _5: &mut ();                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:824:19: 824:26
    let mut _6: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:824:24: 824:26

    bb0: {
        _5 = &mut _6;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:824:19: 824:26
        _4 = &raw mut (*_5);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:824:19: 824:26
        _3 = rwlock::RwLockWriteGuard::<'_, (), R> { phantom: const ZeroSized: PhantomData<R>, inner: _1, data: move _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:822:14: 826:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<R>, val: Value(<ZST>) }
        _2 = core::mem::drop::<rwlock::RwLockWriteGuard<'_, (), R>>(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:822:9: 826:11
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:822:9: 822:13
                                         // + literal: Const { ty: fn(rwlock::RwLockWriteGuard<'_, (), R>) {core::mem::drop::<rwlock::RwLockWriteGuard<'_, (), R>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:827:6: 827:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:803:1: 803:74>::lock_shared(_1: &rwlock::RwLock<(), R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:830:20: 830:25
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:830:27: 830:27
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:832:9: 832:39
    let mut _3: rwlock::RwLockReadGuard<'_, ()>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:832:27: 832:38

    bb0: {
        _3 = rwlock::RwLock::<(), R>::read(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:832:27: 832:38
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:832:32: 832:36
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<(), R>) -> rwlock::RwLockReadGuard<'a, ()> {rwlock::RwLock::<(), R>::read}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = core::mem::forget::<rwlock::RwLockReadGuard<'_, ()>>(move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:832:9: 832:39
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:832:9: 832:26
                                         // + literal: Const { ty: fn(rwlock::RwLockReadGuard<'_, ()>) {core::mem::forget::<rwlock::RwLockReadGuard<'_, ()>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:833:6: 833:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:803:1: 803:74>::try_lock_shared(_1: &rwlock::RwLock<(), R>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:836:24: 836:29
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:836:34: 836:38
    let mut _2: &core::option::Option<()>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:9: 838:64
    let _3: core::option::Option<()>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:9: 838:54
    let mut _4: core::option::Option<rwlock::RwLockReadGuard<'_, ()>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:9: 838:24

    bb0: {
        _4 = rwlock::RwLock::<(), R>::try_read(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:9: 838:24
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:14: 838:22
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<(), R>) -> Option<rwlock::RwLockReadGuard<'a, ()>> {rwlock::RwLock::<(), R>::try_read}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Option::<rwlock::RwLockReadGuard<'_, ()>>::map::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:29: 838:32]>(move _4, const ZeroSized: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:29: 838:32]) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:9: 838:54
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:25: 838:28
                                         // + literal: Const { ty: fn(Option<rwlock::RwLockReadGuard<'_, ()>>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:29: 838:32]) -> Option<()> {Option::<rwlock::RwLockReadGuard<'_, ()>>::map::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:29: 838:32]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:29: 838:32], val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:9: 838:64
        _0 = Option::<()>::is_some(move _2) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:9: 838:64
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:55: 838:62
                                         // + literal: Const { ty: for<'a> fn(&'a Option<()>) -> bool {Option::<()>::is_some}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:839:6: 839:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:803:1: 803:74>::try_lock_shared::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:29: 838:32], _2: rwlock::RwLockReadGuard<'_, ()>) -> () {
    debug g => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:30: 838:31
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:33: 838:33

    bb0: {
        _0 = core::mem::forget::<rwlock::RwLockReadGuard<'_, ()>>(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:33: 838:53
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:33: 838:50
                                         // + literal: Const { ty: fn(rwlock::RwLockReadGuard<'_, ()>) {core::mem::forget::<rwlock::RwLockReadGuard<'_, ()>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:838:53: 838:53
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:803:1: 803:74>::unlock_shared(_1: &rwlock::RwLock<(), R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:842:29: 842:34
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:842:36: 842:36
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:843:9: 846:11
    let mut _3: rwlock::RwLockReadGuard<'_, ()>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:843:14: 846:10
    let _4: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:844:19: 844:29
    let mut _5: *const ();               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:845:19: 845:22
    let mut _6: &();                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:845:19: 845:22

    bb0: {
        _4 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:844:19: 844:29
        _6 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:845:19: 845:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:845:19: 845:22
                                         // + literal: Const { ty: &(), val: Unevaluated(<rwlock::RwLock<(), R> as RawRwLock>::unlock_shared, [R], Some(promoted[0])) }
        _5 = &raw const (*_6);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:845:19: 845:22
        _3 = rwlock::RwLockReadGuard::<'_, ()> { lock: _4, data: move _5 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:843:14: 846:10
        _2 = core::mem::drop::<rwlock::RwLockReadGuard<'_, ()>>(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:843:9: 846:11
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:843:9: 843:13
                                         // + literal: Const { ty: fn(rwlock::RwLockReadGuard<'_, ()>) {core::mem::drop::<rwlock::RwLockReadGuard<'_, ()>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:847:6: 847:6
    }
}

promoted[0] in rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:803:1: 803:74>::unlock_shared: &() = {
    let mut _0: &();                     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:845:19: 845:22
    let mut _1: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:845:20: 845:22

    bb0: {
        _1 = ();                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:845:20: 845:22
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:845:19: 845:22
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:845:19: 845:22
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:803:1: 803:74>::is_locked(_1: &rwlock::RwLock<(), R>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:850:18: 850:23
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:850:28: 850:32
    let mut _2: usize;                   // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:851:9: 851:42
    let mut _3: &core::sync::atomic::AtomicUsize; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:851:9: 851:42
    let mut _4: core::sync::atomic::Ordering; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:851:24: 851:41

    bb0: {
        _3 = &((*_1).1: core::sync::atomic::AtomicUsize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:851:9: 851:42
        _4 = Relaxed;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:851:24: 851:41
        _2 = AtomicUsize::load(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:851:9: 851:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:851:19: 851:23
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Ne(move _2, const 0_usize); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:851:9: 851:47
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:852:6: 852:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:856:1: 856:81>::lock_upgradable(_1: &rwlock::RwLock<(), R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:858:24: 858:29
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:858:31: 858:31
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:860:9: 860:51
    let mut _3: rwlock::RwLockUpgradableGuard<'_, (), R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:860:27: 860:50

    bb0: {
        _3 = rwlock::RwLock::<(), R>::upgradeable_read(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:860:27: 860:50
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:860:32: 860:48
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<(), R>) -> rwlock::RwLockUpgradableGuard<'a, (), R> {rwlock::RwLock::<(), R>::upgradeable_read}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = core::mem::forget::<rwlock::RwLockUpgradableGuard<'_, (), R>>(move _3) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:860:9: 860:51
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:860:9: 860:26
                                         // + literal: Const { ty: fn(rwlock::RwLockUpgradableGuard<'_, (), R>) {core::mem::forget::<rwlock::RwLockUpgradableGuard<'_, (), R>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:861:6: 861:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:856:1: 856:81>::try_lock_upgradable(_1: &rwlock::RwLock<(), R>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:864:28: 864:33
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:864:38: 864:42
    let mut _2: &core::option::Option<()>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:866:9: 868:23
    let _3: core::option::Option<()>;    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:866:9: 867:43
    let mut _4: core::option::Option<rwlock::RwLockUpgradableGuard<'_, (), R>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:866:9: 866:36

    bb0: {
        _4 = rwlock::RwLock::<(), R>::try_upgradeable_read(_1) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:866:9: 866:36
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:866:14: 866:34
                                         // + literal: Const { ty: for<'a> fn(&'a rwlock::RwLock<(), R>) -> Option<rwlock::RwLockUpgradableGuard<'a, (), R>> {rwlock::RwLock::<(), R>::try_upgradeable_read}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Option::<rwlock::RwLockUpgradableGuard<'_, (), R>>::map::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:867:18: 867:21]>(move _4, const ZeroSized: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:867:18: 867:21]) -> [return: bb2, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:866:9: 867:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:867:14: 867:17
                                         // + literal: Const { ty: fn(Option<rwlock::RwLockUpgradableGuard<'_, (), R>>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:867:18: 867:21]) -> Option<()> {Option::<rwlock::RwLockUpgradableGuard<'_, (), R>>::map::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:867:18: 867:21]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:867:18: 867:21], val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:866:9: 868:23
        _0 = Option::<()>::is_some(move _2) -> [return: bb3, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:866:9: 868:23
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:868:14: 868:21
                                         // + literal: Const { ty: for<'a> fn(&'a Option<()>) -> bool {Option::<()>::is_some}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:869:6: 869:6
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:856:1: 856:81>::try_lock_upgradable::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:867:18: 867:21], _2: rwlock::RwLockUpgradableGuard<'_, (), R>) -> () {
    debug g => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:867:19: 867:20
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:867:22: 867:22

    bb0: {
        _0 = core::mem::forget::<rwlock::RwLockUpgradableGuard<'_, (), R>>(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:867:22: 867:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:867:22: 867:39
                                         // + literal: Const { ty: fn(rwlock::RwLockUpgradableGuard<'_, (), R>) {core::mem::forget::<rwlock::RwLockUpgradableGuard<'_, (), R>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:867:42: 867:42
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:856:1: 856:81>::unlock_upgradable(_1: &rwlock::RwLock<(), R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:872:33: 872:38
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:872:40: 872:40
    let _2: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:873:9: 877:11
    let mut _3: rwlock::RwLockUpgradableGuard<'_, (), R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:873:14: 877:10
    let mut _4: *const ();               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:875:19: 875:22
    let mut _5: &();                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:875:19: 875:22

    bb0: {
        _5 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:875:19: 875:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:875:19: 875:22
                                         // + literal: Const { ty: &(), val: Unevaluated(<rwlock::RwLock<(), R> as RawRwLockUpgrade>::unlock_upgradable, [R], Some(promoted[0])) }
        _4 = &raw const (*_5);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:875:19: 875:22
        _3 = rwlock::RwLockUpgradableGuard::<'_, (), R> { phantom: const ZeroSized: PhantomData<R>, inner: _1, data: move _4 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:873:14: 877:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<R>, val: Value(<ZST>) }
        _2 = core::mem::drop::<rwlock::RwLockUpgradableGuard<'_, (), R>>(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:873:9: 877:11
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:873:9: 873:13
                                         // + literal: Const { ty: fn(rwlock::RwLockUpgradableGuard<'_, (), R>) {core::mem::drop::<rwlock::RwLockUpgradableGuard<'_, (), R>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:878:6: 878:6
    }
}

promoted[0] in rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:856:1: 856:81>::unlock_upgradable: &() = {
    let mut _0: &();                     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:875:19: 875:22
    let mut _1: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:875:20: 875:22

    bb0: {
        _1 = ();                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:875:20: 875:22
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:875:19: 875:22
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:875:19: 875:22
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:856:1: 856:81>::upgrade(_1: &rwlock::RwLock<(), R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:881:23: 881:28
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:881:30: 881:30
    let _2: rwlock::RwLockUpgradableGuard<'_, (), R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:882:13: 882:22
    let mut _3: *const ();               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:884:19: 884:22
    let _4: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:887:9: 887:47
    let mut _5: rwlock::RwLockWriteGuard<'_, (), R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:887:27: 887:46
    let mut _6: &();                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:884:19: 884:22
    scope 1 {
        debug tmp_guard => _2;           // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:882:13: 882:22
    }

    bb0: {
        _6 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:884:19: 884:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:884:19: 884:22
                                         // + literal: Const { ty: &(), val: Unevaluated(<rwlock::RwLock<(), R> as RawRwLockUpgrade>::upgrade, [R], Some(promoted[0])) }
        _3 = &raw const (*_6);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:884:19: 884:22
        _2 = rwlock::RwLockUpgradableGuard::<'_, (), R> { phantom: const ZeroSized: PhantomData<R>, inner: _1, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:882:25: 886:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<R>, val: Value(<ZST>) }
        _5 = rwlock::RwLockUpgradableGuard::<'_, (), R>::upgrade(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:887:27: 887:46
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:887:37: 887:44
                                         // + literal: Const { ty: fn(rwlock::RwLockUpgradableGuard<'_, (), R>) -> rwlock::RwLockWriteGuard<'_, (), R> {rwlock::RwLockUpgradableGuard::<'_, (), R>::upgrade}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = core::mem::forget::<rwlock::RwLockWriteGuard<'_, (), R>>(move _5) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:887:9: 887:47
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:887:9: 887:26
                                         // + literal: Const { ty: fn(rwlock::RwLockWriteGuard<'_, (), R>) {core::mem::forget::<rwlock::RwLockWriteGuard<'_, (), R>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:888:6: 888:6
    }
}

promoted[0] in rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:856:1: 856:81>::upgrade: &() = {
    let mut _0: &();                     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:884:19: 884:22
    let mut _1: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:884:20: 884:22

    bb0: {
        _1 = ();                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:884:20: 884:22
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:884:19: 884:22
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:884:19: 884:22
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:856:1: 856:81>::try_upgrade(_1: &rwlock::RwLock<(), R>) -> bool {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:891:27: 891:32
    let mut _0: bool;                    // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:891:37: 891:41
    let _2: rwlock::RwLockUpgradableGuard<'_, (), R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:892:13: 892:22
    let mut _3: *const ();               // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:894:19: 894:22
    let mut _4: &core::result::Result<(), rwlock::RwLockUpgradableGuard<'_, (), R>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:897:9: 900:21
    let _5: core::result::Result<(), rwlock::RwLockUpgradableGuard<'_, (), R>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:897:9: 899:43
    let mut _6: core::result::Result<rwlock::RwLockWriteGuard<'_, (), R>, rwlock::RwLockUpgradableGuard<'_, (), R>>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:897:9: 898:27
    let mut _7: &();                     // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:894:19: 894:22
    scope 1 {
        debug tmp_guard => _2;           // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:892:13: 892:22
    }

    bb0: {
        _7 = const _;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:894:19: 894:22
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:894:19: 894:22
                                         // + literal: Const { ty: &(), val: Unevaluated(<rwlock::RwLock<(), R> as RawRwLockUpgrade>::try_upgrade, [R], Some(promoted[0])) }
        _3 = &raw const (*_7);           // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:894:19: 894:22
        _2 = rwlock::RwLockUpgradableGuard::<'_, (), R> { phantom: const ZeroSized: PhantomData<R>, inner: _1, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:892:25: 896:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<R>, val: Value(<ZST>) }
        _6 = rwlock::RwLockUpgradableGuard::<'_, (), R>::try_upgrade(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:897:9: 898:27
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:898:14: 898:25
                                         // + literal: Const { ty: fn(rwlock::RwLockUpgradableGuard<'_, (), R>) -> Result<rwlock::RwLockWriteGuard<'_, (), R>, rwlock::RwLockUpgradableGuard<'_, (), R>> {rwlock::RwLockUpgradableGuard::<'_, (), R>::try_upgrade}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Result::<rwlock::RwLockWriteGuard<'_, (), R>, rwlock::RwLockUpgradableGuard<'_, (), R>>::map::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:899:18: 899:21]>(move _6, const ZeroSized: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:899:18: 899:21]) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:897:9: 899:43
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:899:14: 899:17
                                         // + literal: Const { ty: fn(Result<rwlock::RwLockWriteGuard<'_, (), R>, rwlock::RwLockUpgradableGuard<'_, (), R>>, [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:899:18: 899:21]) -> Result<(), rwlock::RwLockUpgradableGuard<'_, (), R>> {Result::<rwlock::RwLockWriteGuard<'_, (), R>, rwlock::RwLockUpgradableGuard<'_, (), R>>::map::<(), [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:899:18: 899:21]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:899:18: 899:21], val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:897:9: 900:21
        _0 = Result::<(), rwlock::RwLockUpgradableGuard<'_, (), R>>::is_ok(move _4) -> [return: bb3, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:897:9: 900:21
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:900:14: 900:19
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), rwlock::RwLockUpgradableGuard<'_, (), R>>) -> bool {Result::<(), rwlock::RwLockUpgradableGuard<'_, (), R>>::is_ok}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:901:5: 901:6
    }

    bb4: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:901:6: 901:6
    }
}

promoted[0] in rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:856:1: 856:81>::try_upgrade: &() = {
    let mut _0: &();                     // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:894:19: 894:22
    let mut _1: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:894:20: 894:22

    bb0: {
        _1 = ();                         // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:894:20: 894:22
        _0 = &_1;                        // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:894:19: 894:22
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:894:19: 894:22
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:856:1: 856:81>::try_upgrade::{closure#0}(_1: [closure@/Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:899:18: 899:21], _2: rwlock::RwLockWriteGuard<'_, (), R>) -> () {
    debug g => _2;                       // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:899:19: 899:20
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:899:22: 899:22

    bb0: {
        _0 = core::mem::forget::<rwlock::RwLockWriteGuard<'_, (), R>>(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:899:22: 899:42
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:899:22: 899:39
                                         // + literal: Const { ty: fn(rwlock::RwLockWriteGuard<'_, (), R>) {core::mem::forget::<rwlock::RwLockWriteGuard<'_, (), R>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:899:42: 899:42
    }
}

fn rwlock::<impl at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:905:1: 905:83>::downgrade(_1: &rwlock::RwLock<(), R>) -> () {
    debug self => _1;                    // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:906:25: 906:30
    let mut _0: ();                      // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:906:32: 906:32
    let _2: rwlock::RwLockWriteGuard<'_, (), R>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:907:13: 907:22
    let mut _3: *mut ();                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:909:19: 909:26
    let mut _4: &mut ();                 // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:909:19: 909:26
    let mut _5: ();                      // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:909:24: 909:26
    let _6: ();                          // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:912:9: 912:49
    let mut _7: rwlock::RwLockReadGuard<'_, ()>; // in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:912:27: 912:48
    scope 1 {
        debug tmp_guard => _2;           // in scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:907:13: 907:22
    }

    bb0: {
        _4 = &mut _5;                    // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:909:19: 909:26
        _3 = &raw mut (*_4);             // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:909:19: 909:26
        _2 = rwlock::RwLockWriteGuard::<'_, (), R> { phantom: const ZeroSized: PhantomData<R>, inner: _1, data: move _3 }; // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:907:25: 911:10
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: PhantomData<R>, val: Value(<ZST>) }
        _7 = rwlock::RwLockWriteGuard::<'_, (), R>::downgrade(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:912:27: 912:48
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:912:37: 912:46
                                         // + literal: Const { ty: fn(rwlock::RwLockWriteGuard<'_, (), R>) -> rwlock::RwLockReadGuard<'_, ()> {rwlock::RwLockWriteGuard::<'_, (), R>::downgrade}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = core::mem::forget::<rwlock::RwLockReadGuard<'_, ()>>(move _7) -> [return: bb2, unwind unreachable]; // scope 1 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:912:9: 912:49
                                         // mir::Constant
                                         // + span: /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:912:9: 912:26
                                         // + literal: Const { ty: fn(rwlock::RwLockReadGuard<'_, ()>) {core::mem::forget::<rwlock::RwLockReadGuard<'_, ()>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/rwlock.rs:913:6: 913:6
    }
}

fn BarrierWaitResult(_1: bool) -> BarrierWaitResult {
    let mut _0: barrier::BarrierWaitResult; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:70:1: 70:29

    bb0: {
        _0 = BarrierWaitResult(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:70:1: 70:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:70:1: 70:29
    }
}

// MIR FOR CTFE
fn BarrierWaitResult(_1: bool) -> BarrierWaitResult {
    let mut _0: barrier::BarrierWaitResult; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:70:1: 70:29

    bb0: {
        _0 = BarrierWaitResult(move _1); // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:70:1: 70:29
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/barrier.rs:70:1: 70:29
    }
}

fn AtomicStatus(_1: core::sync::atomic::AtomicU8) -> AtomicStatus {
    let mut _0: once::status::AtomicStatus; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:63:5: 63:28

    bb0: {
        _0 = AtomicStatus(move _1);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:63:5: 63:28
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:63:5: 63:28
    }
}

// MIR FOR CTFE
fn AtomicStatus(_1: core::sync::atomic::AtomicU8) -> AtomicStatus {
    let mut _0: once::status::AtomicStatus; // return place in scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:63:5: 63:28

    bb0: {
        _0 = AtomicStatus(move _1);      // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:63:5: 63:28
        return;                          // scope 0 at /Users/yaw/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/once.rs:63:5: 63:28
    }
}
