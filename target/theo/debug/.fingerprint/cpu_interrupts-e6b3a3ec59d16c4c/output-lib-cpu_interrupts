{"$message_type":"diagnostic","message":"shared reference of mutable static is discouraged","code":{"code":"static_mut_ref","explanation":null},"level":"warning","spans":[{"file_name":"cpu_interrupts/src/global_descriptor_table.rs","byte_start":980,"byte_end":986,"line_start":31,"line_end":31,"column_start":54,"column_end":60,"is_primary":true,"text":[{"text":"                let stack_start = VirtAddr::from_ptr(&STACK);","highlight_start":54,"highlight_end":60}],"label":"shared reference of mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see issue #114447 <https://github.com/rust-lang/rust/issues/114447>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"reference of mutable static is a hard error from 2024 edition","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"mutable statics can be written to by multiple threads: aliasing violations or data races will cause undefined behavior","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(static_mut_ref)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references are dangerous since if there's any kind of mutation of that static while the reference lives, that's UB; use `addr_of!` instead to create a raw pointer","code":null,"level":"help","spans":[{"file_name":"cpu_interrupts/src/global_descriptor_table.rs","byte_start":980,"byte_end":986,"line_start":31,"line_end":31,"column_start":54,"column_end":60,"is_primary":true,"text":[{"text":"                let stack_start = VirtAddr::from_ptr(&STACK);","highlight_start":54,"highlight_end":60}],"label":null,"suggested_replacement":"addr_of!(STACK)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: shared reference of mutable static is discouraged\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcpu_interrupts/src/global_descriptor_table.rs:31:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let stack_start = VirtAddr::from_ptr(&STACK);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mshared reference of mutable static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #114447 <https://github.com/rust-lang/rust/issues/114447>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: reference of mutable static is a hard error from 2024 edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: mutable statics can be written to by multiple threads: aliasing violations or data races will cause undefined behavior\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(static_mut_ref)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: shared references are dangerous since if there's any kind of mutation of that static while the reference lives, that's UB; use `addr_of!` instead to create a raw pointer\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let stack_start = VirtAddr::from_ptr(\u001b[0m\u001b[0m\u001b[38;5;10maddr_of!(STACK)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"shared reference of mutable static is discouraged","code":{"code":"static_mut_ref","explanation":null},"level":"warning","spans":[{"file_name":"cpu_interrupts/src/global_descriptor_table.rs","byte_start":1240,"byte_end":1259,"line_start":38,"line_end":38,"column_start":94,"column_end":113,"is_primary":true,"text":[{"text":"        let tss_selector = global_descriptor_table.add_entry(Descriptor::tss_segment(unsafe {&TASK_STATE_SEGMENT}));","highlight_start":94,"highlight_end":113}],"label":"shared reference of mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see issue #114447 <https://github.com/rust-lang/rust/issues/114447>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"reference of mutable static is a hard error from 2024 edition","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"mutable statics can be written to by multiple threads: aliasing violations or data races will cause undefined behavior","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references are dangerous since if there's any kind of mutation of that static while the reference lives, that's UB; use `addr_of!` instead to create a raw pointer","code":null,"level":"help","spans":[{"file_name":"cpu_interrupts/src/global_descriptor_table.rs","byte_start":1240,"byte_end":1259,"line_start":38,"line_end":38,"column_start":94,"column_end":113,"is_primary":true,"text":[{"text":"        let tss_selector = global_descriptor_table.add_entry(Descriptor::tss_segment(unsafe {&TASK_STATE_SEGMENT}));","highlight_start":94,"highlight_end":113}],"label":null,"suggested_replacement":"addr_of!(TASK_STATE_SEGMENT)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: shared reference of mutable static is discouraged\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcpu_interrupts/src/global_descriptor_table.rs:38:94\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let tss_selector = global_descriptor_table.add_entry(Descriptor::tss_segment(unsafe {&TASK_STATE_SEGMENT}));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mshared reference of mutable static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #114447 <https://github.com/rust-lang/rust/issues/114447>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: reference of mutable static is a hard error from 2024 edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: mutable statics can be written to by multiple threads: aliasing violations or data races will cause undefined behavior\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: shared references are dangerous since if there's any kind of mutation of that static while the reference lives, that's UB; use `addr_of!` instead to create a raw pointer\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let tss_selector = global_descriptor_table.add_entry(Descriptor::tss_segment(unsafe {\u001b[0m\u001b[0m\u001b[38;5;10maddr_of!(TASK_STATE_SEGMENT)\u001b[0m\u001b[0m}));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}
